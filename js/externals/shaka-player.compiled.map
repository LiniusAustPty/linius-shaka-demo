{
"version":3,
"file":"../dist/shaka-player.compiled.js",
"lineCount":1134,
"mappings":"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",
"sources":[" [synthetic:base] "," [synthetic:util/defines] "," [synthetic:util/defineproperty] "," [synthetic:util/global] "," [synthetic:es6/symbol] "," [synthetic:es6/util/makeiterator] "," [synthetic:util/polyfill] "," [synthetic:es6/promise/promise] "," [synthetic:es6/promise/finally] "," [synthetic:es6/execute_async_generator] "," [synthetic:es6/generator_engine] "," [synthetic:es6/util/arrayfromiterator] "," [synthetic:es6/util/arrayfromiterable] "," [synthetic:es6/util/iteratorfromarray] "," [synthetic:es6/array/keys] "," [synthetic:es6/array/values] "," [synthetic:util/findinternal] "," [synthetic:es6/array/find] ","../third_party/closure/goog/base.js","../lib/debug/asserts.js","../lib/abr/ewma.js","../lib/abr/ewma_bandwidth_estimator.js","../lib/debug/log.js","../third_party/closure/goog/uri/utils.js","../third_party/closure/goog/uri/uri.js","../lib/util/public_promise.js","../lib/net/backoff.js","../lib/util/error.js","../lib/util/abortable_operation.js","../lib/util/array_utils.js","../lib/util/fake_event.js","../lib/util/multi_map.js","../lib/util/fake_event_target.js","../lib/util/i_destroyable.js","../lib/util/object_utils.js","../lib/util/operation_manager.js","../lib/net/networking_engine.js","../lib/util/event_manager.js","../lib/util/functional.js","../lib/util/manifest_parser_utils.js","../lib/util/map_utils.js","../lib/util/mime_utils.js","../lib/util/string_utils.js","../lib/util/timer.js","../lib/util/uint8array_utils.js","../lib/media/drm_engine.js","../lib/media/time_ranges_utils.js","../lib/text/cue.js","../lib/media/transmuxer.js","../lib/text/text_engine.js","../lib/media/media_source_engine.js","../lib/util/language_utils.js","../lib/util/stream_utils.js","../lib/abr/simple_abr_manager.js","../lib/cast/cast_utils.js","../lib/cast/cast_sender.js","../lib/cast/cast_proxy.js","../lib/cast/cast_receiver.js","../lib/util/xml_utils.js","../lib/dash/content_protection.js","../lib/dash/mpd_utils.js","../lib/media/segment_reference.js","../lib/util/data_view_reader.js","../lib/util/mp4_parser.js","../lib/media/mp4_segment_index_parser.js","../lib/media/segment_index.js","../lib/util/ebml_parser.js","../lib/media/webm_segment_index_parser.js","../lib/dash/segment_base.js","../lib/dash/segment_list.js","../lib/dash/segment_template.js","../lib/media/manifest_parser.js","../lib/media/presentation_timeline.js","../lib/dash/dash_parser.js","../lib/hls/hls_classes.js","../lib/hls/hls_utils.js","../lib/util/text_parser.js","../lib/hls/manifest_text_parser.js","../lib/net/data_uri_plugin.js","../lib/hls/hls_parser.js","../lib/media/active_stream_map.js","../lib/media/gap_jumping_controller.js","../lib/media/video_wrapper.js","../lib/media/playhead.js","../lib/util/destroyer.js","../lib/media/playhead_observer.js","../lib/vstub/vstub_segment_list.js","../lib/media/streaming_engine.js","../lib/net/http_plugin_utils.js","../lib/net/http_fetch_plugin.js","../lib/net/http_xhr_plugin.js","../lib/offline/download_manager.js","../lib/offline/indexeddb/db_operation.js","../lib/offline/indexeddb/db_connection.js","../lib/offline/storage_muxer.js","../lib/offline/indexeddb/v1_storage_cell.js","../lib/offline/indexeddb/v2_storage_cell.js","../lib/offline/indexeddb/storage_mechanism.js","../lib/offline/offline_uri.js","../lib/offline/manifest_converter.js","../lib/offline/offline_manifest_parser.js","../lib/offline/offline_scheme.js","../lib/text/simple_text_displayer.js","../lib/util/config_utils.js","../lib/util/player_configuration.js","../lib/player.js","../lib/offline/stored_content_utils.js","../lib/offline/stream_bandwidth_estimator.js","../lib/offline/storage.js","../lib/polyfill/all.js","../lib/polyfill/fullscreen.js","../lib/polyfill/indexed_db.js","../lib/polyfill/input_event.js","../lib/polyfill/mathround.js","../lib/polyfill/mediasource.js","../lib/util/pssh.js","../lib/polyfill/patchedmediakeys_ms.js","../lib/polyfill/patchedmediakeys_nop.js","../lib/polyfill/patchedmediakeys_webkit.js","../lib/polyfill/video_play_promise.js","../lib/polyfill/videoplaybackquality.js","../lib/polyfill/vttcue.js","../lib/text/ttml_text_parser.js","../lib/text/mp4_ttml_parser.js","../lib/text/vtt_text_parser.js","../lib/text/mp4_vtt_parser.js","../lib/vstub/vstub_parser.js"],
"sourcesContent":["/*\n * Copyright 2012 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * @fileoverview The base namespace for code injected by the compiler\n * at compile-time.\n *\n * @author nicksantos@google.com (Nick Santos)\n */\n\n/** @const */\nvar $jscomp = $jscomp || {};\n\n/** @const Locals for goog.scope */\n$jscomp.scope = {};\n","/*\n * Copyright 2017 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require base';\n\n\n/**\n * Whether to assume ES5 is available.  This enables removing several\n * internal polyfills, which must otherwise be detected at runtime.\n * @define {boolean}\n */\n$jscomp.ASSUME_ES5 = false;\n\n/**\n * Whether to skip the conformance check and simply use the polyfill always.\n * @define {boolean}\n */\n$jscomp.ASSUME_NO_NATIVE_MAP = false;\n\n/**\n * Whether to skip the conformance check and simply use the polyfill always.\n * @define {boolean}\n */\n$jscomp.ASSUME_NO_NATIVE_SET = false;\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Provides methods to polyfill native objects.\n * @suppress {reportUnknownTypes}\n */\n'require util/defines';\n\n\n/**\n * Polyfill for Object.defineProperty() method:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\n *\n * Refuses to define properties on Array.prototype and Object.prototype,\n * since we can't make them non-enumerable and this messes up peoples' for\n * loops.  Beyond this, we simply assign values and not worry\n * about enumerability or writeability.\n * @param {?} target\n * @param {string} property\n * @param {?} descriptor\n * @suppress {reportUnknownTypes}\n */\n$jscomp.defineProperty =\n    $jscomp.ASSUME_ES5 || typeof Object.defineProperties == 'function' ?\n    Object.defineProperty :\n    function(target, property, descriptor) {\n      descriptor = /** @type {!ObjectPropertyDescriptor} */ (descriptor);\n      // NOTE: This is currently never called with a descriptor outside\n      // the control of the compiler.  If we ever decide to polyfill either\n      // Object.defineProperty or Reflect.defineProperty for ES3, we should\n      // explicitly check for `get` or `set` on the descriptor and throw a\n      // TypeError, since it's impossible to properly polyfill it.\n      if (target == Array.prototype || target == Object.prototype) return;\n      target[property] = descriptor.value;\n    };\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Runtime code to store the global object.\n */\n'require base';\n'declare global';\n'declare window';\n\n\n/**\n * @param {!Object} maybeGlobal\n * @return {!Object} The global object.\n * @suppress {undefinedVars|reportUnknownTypes}\n */\n$jscomp.getGlobal = function(maybeGlobal) {\n  return (typeof window != 'undefined' && window === maybeGlobal) ?\n      maybeGlobal :\n      (typeof global != 'undefined' && global != null) ? global : maybeGlobal;\n};\n\n\n// TODO(sdh): This should be typed as \"the global object\", but there's not\n// currently any way to do this in the existing type system.\n/**\n * The global object. For browsers we could just use `this` but in Node that\n * doesn't work.\n * @const {?}\n */\n$jscomp.global = $jscomp.getGlobal(this);\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/defineproperty';\n'require util/global';\n\n/** @const {string} */\n$jscomp.SYMBOL_PREFIX = 'jscomp_symbol_';\n\n\n/**\n * Initializes the Symbol function.\n * @suppress {reportUnknownTypes}\n */\n$jscomp.initSymbol = function() {\n  // Only need to do this once. All future calls are no-ops.\n  $jscomp.initSymbol = function() {};\n\n  if (!$jscomp.global['Symbol']) {\n    $jscomp.global['Symbol'] = $jscomp.Symbol;\n  }\n};\n\n\n/**\n * Produces \"symbols\" (actually just unique strings).\n * @param {string=} opt_description\n * @return {symbol}\n */\n$jscomp.Symbol = /** @type {function(): !Function} */ (function() {\n  var counter = 0;\n  /**\n   * @param {string=} opt_description\n   * @return {symbol}\n   * @suppress {reportUnknownTypes}\n   */\n  function Symbol(opt_description) {\n    return /** @type {?} */ (\n        $jscomp.SYMBOL_PREFIX + (opt_description || '') + (counter++));\n  }\n  return Symbol;\n})();\n\n\n/**\n * Initializes Symbol.iterator (if it's not already defined) and adds a\n * Symbol.iterator property to the Array prototype.\n * @suppress {reportUnknownTypes}\n */\n$jscomp.initSymbolIterator = function() {\n  $jscomp.initSymbol();\n  var symbolIterator = $jscomp.global['Symbol'].iterator;\n  if (!symbolIterator) {\n    symbolIterator = $jscomp.global['Symbol'].iterator =\n        $jscomp.global['Symbol']('iterator');\n  }\n\n  if (typeof Array.prototype[symbolIterator] != 'function') {\n    $jscomp.defineProperty(\n        Array.prototype, symbolIterator, {\n          configurable: true,\n          writable: true,\n          /**\n           * @this {Array}\n           * @return {!IteratorIterable}\n           */\n          value: function() {\n            return $jscomp.arrayIterator(this);\n          }\n        });\n  }\n\n  // Only need to do this once. All future calls are no-ops.\n  $jscomp.initSymbolIterator = function() {};\n};\n\n\n/**\n * Returns an iterator from the given array.\n * @param {!Array<T>} array\n * @return {!IteratorIterable<T>}\n * @template T\n */\n$jscomp.arrayIterator = function(array) {\n  var index = 0;\n  return $jscomp.iteratorPrototype(function() {\n    if (index < array.length) {\n      return {\n        done: false,\n        value: array[index++],\n      };\n    } else {\n      return {done: true};\n    }\n  });\n};\n\n\n/**\n * Returns an iterator with the given `next` method.  Passing\n * all iterators through this function allows easily extending\n * the definition of `%IteratorPrototype%` if methods are ever\n * added to it in the future.\n *\n * @param {function(this: Iterator<T>): T} next\n * @return {!IteratorIterable<T>}\n * @template T\n * @suppress {reportUnknownTypes}\n */\n$jscomp.iteratorPrototype = function(next) {\n  $jscomp.initSymbolIterator();\n\n  var iterator = {next: next};\n  /**\n   * @this {IteratorIterable}\n   * @return {!IteratorIterable}\n   */\n  iterator[$jscomp.global['Symbol'].iterator] = function() { return this; };\n  return /** @type {!IteratorIterable} */ (iterator);\n};\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Polyfill for for-of loops.\n */\n'require es6/symbol';\n\n\n/**\n * Creates an iterator for the given iterable.\n *\n * @param {string|!Iterable<T>|!Iterator<T>|!Arguments<T>} iterable\n * @return {!Iterator<T>}\n * @template T\n * @suppress {reportUnknownTypes}\n */\n$jscomp.makeIterator = function(iterable) {\n  $jscomp.initSymbolIterator();\n\n  // NOTE: Disabling typechecking because [] not allowed on @struct.\n  var iteratorFunction = /** @type {?} */ (iterable)[Symbol.iterator];\n  return iteratorFunction ? iteratorFunction.call(iterable) :\n      $jscomp.arrayIterator(/** @type {!Array} */ (iterable));\n};\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Provides methods to polyfill native objects.\n */\n'require util/defineproperty';\n'require util/global';\n\n\n/**\n * @param {string} target Qualified name of the class or method to polyfill,\n *     e.g. 'Array.prototype.includes' or 'Map'.\n * @param {?function(*): *} polyfill A function that takes the current browser\n *     implementation of the target and returns an optional new polyfill\n *     implementation.  If null is returned, then no polyfill will be added.  A\n *     null argument for this parameter indicates that the function will not be\n *     polyfilled, and is only useful for `build_polyfill_table.js` bookkeeping.\n * @param {string} fromLang The language level in which the target is expected\n *     to already be present in the browser.  The compiler requires that\n *     `languageOut < fromLang` before injecting a polyfill (i.e. if the\n *     specified output language already includes the feature then there's no\n *     need to polyfill it).\n * @param {string} toLang The language level required by the polyfill\n *     implementation.  The compiler will issue an error if a polyfill is\n *     required, but `languageOut < toLang`.  Additionally, the\n *     `build_polyfill_table.js` script audits the polyfill dependency tree to\n *     ensure that no polyfill with a lower `toLang` depends on one with a\n *     higher `toLang`.\n * @suppress {reportUnknownTypes}\n * @noinline\n * NOTE: We prevent inlining so RemoveUnusedPolyfills can always recognize this\n * call.\n */\n$jscomp.polyfill = function(target, polyfill, fromLang, toLang) {\n  if (!polyfill) return;\n  var obj = $jscomp.global;\n  var split = target.split('.');\n  for (var i = 0; i < split.length - 1; i++) {\n    var key = split[i];\n    if (!(key in obj)) obj[key] = {};  // Might want to be defineProperty.\n    obj = obj[key];\n  }\n  var property = split[split.length - 1];\n  var orig = obj[property];\n  var impl = polyfill(orig);\n  if (impl == orig || impl == null) return;\n  $jscomp.defineProperty(\n      obj, property, {configurable: true, writable: true, value: impl});\n};\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require base';\n'require es6/util/makeiterator';\n'require util/global';\n'require util/polyfill';\n\n/**\n * Should we unconditionally override a native Promise implementation with our\n * own?\n * @define {boolean}\n */\n$jscomp.FORCE_POLYFILL_PROMISE = false;\n\n\n$jscomp.polyfill('Promise',\n    /**\n     * @param {*} NativePromise\n     * @return {*}\n     * @suppress {reportUnknownTypes}\n     */\n    function(NativePromise) {\n  // TODO(bradfordcsmith): Do we need to add checks for standards conformance?\n  //     e.g. The version of FireFox we currently use for testing has a Promise\n  //     that fails to reject attempts to fulfill it with itself, but that\n  //     isn't reasonably testable here.\n  if (NativePromise && !$jscomp.FORCE_POLYFILL_PROMISE) {\n    return NativePromise;\n  }\n\n  /**\n    * Schedules code to be executed asynchronously.\n    * @constructor\n    * @struct\n    */\n  function AsyncExecutor() {\n    /**\n     * Batch of functions to execute.\n     *\n     * Will be `null` initially and immediately after a batch finishes\n     * executing.\n     * @private {?Array<function()>}\n     */\n    this.batch_ = null;\n  }\n\n  /**\n   * Schedule a function to execute asynchronously.\n   *\n   * -   The function will execute:\n   *     -   After the current call stack has completed executing.\n   *     -   After any functions previously scheduled using this object.\n   * -   The return value will be ignored.\n   * -   An exception thrown by the method will be caught and asynchronously\n   *     rethrown when it cannot interrupt any other code. This class provides\n   *     no way to catch such exceptions.\n   * @param {function():?} f\n   * @return {!AsyncExecutor} this object\n   */\n  AsyncExecutor.prototype.asyncExecute = function(f) {\n    if (this.batch_ == null) {\n      // no batch created yet, or last batch was fully executed\n      this.batch_ = [];\n      this.asyncExecuteBatch_();\n    }\n    this.batch_.push(f);\n    return this;\n  };\n\n  /**\n   * Schedule execution of the jobs in `this.batch_`.\n   * @private\n   */\n  AsyncExecutor.prototype.asyncExecuteBatch_ = function() {\n    var self = this;\n    this.asyncExecuteFunction(function() { self.executeBatch_(); });\n  };\n\n  // NOTE: We want to make sure AsyncExecutor will work as expected even if\n  // testing code should override setTimeout()\n  /** @const {function(!Function, number)} */\n  var nativeSetTimeout = $jscomp.global['setTimeout'];\n\n  /**\n   * Schedule a function to execute asynchronously as soon as possible.\n   *\n   * NOTE: May be overridden for testing.\n   * @package\n   * @param {function()} f\n   */\n  AsyncExecutor.prototype.asyncExecuteFunction = function(f) {\n    nativeSetTimeout(f, 0);\n  };\n\n  /**\n   * Execute scheduled jobs in a batch until all are executed or the batch\n   * execution time limit has been reached.\n   * @private\n   */\n  AsyncExecutor.prototype.executeBatch_ = function() {\n    while (this.batch_ && this.batch_.length) {\n      var /** !Array<?function()> */ executingBatch = this.batch_;\n      // Executions scheduled while executing this batch go into a new one to\n      // avoid the batch array getting too big.\n      this.batch_ = [];\n      for (var i = 0; i < executingBatch.length; ++i) {\n        var f = /** @type {function()} */ (executingBatch[i]);\n        executingBatch[i] = null;  // free memory\n        try {\n          f();\n        } catch (error) {\n          this.asyncThrow_(error);\n        }\n      }\n    }\n    // All jobs finished executing, so force scheduling a new batch next\n    // time asyncExecute() is called.\n    this.batch_ = null;\n  };\n\n  /**\n   * @private\n   * @param {*} exception\n   */\n  AsyncExecutor.prototype.asyncThrow_ = function(exception) {\n    this.asyncExecuteFunction(function() { throw exception; });\n  };\n\n  /**\n   * @enum {number}\n   */\n  var PromiseState = {\n    /** The Promise is waiting for resolution. */\n    PENDING: 0,\n\n    /** The Promise has been resolved with a fulfillment value. */\n    FULFILLED: 1,\n\n    /** The Promise has been resolved with a rejection reason. */\n    REJECTED: 2\n  };\n\n\n  /**\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\n   * @param {function(\n   *             function((TYPE|IThenable<TYPE>|Thenable|null)=),\n   *             function(*=))} executor\n   * @constructor\n   * @extends {Promise<TYPE>}\n   * @template TYPE\n   */\n  var PolyfillPromise = function(executor) {\n    /** @private {PromiseState} */\n    this.state_ = PromiseState.PENDING;\n\n    /**\n     * The settled result of the Promise. Immutable once set with either a\n     * fulfillment value or rejection reason.\n     * @private {*}\n     */\n    this.result_ = undefined;\n\n    /**\n     * These functions must be asynchronously executed when this promise\n     * settles.\n     * @private {?Array<function()>}\n     */\n    this.onSettledCallbacks_ = [];\n\n    var resolveAndReject = this.createResolveAndReject_();\n    try {\n      executor(resolveAndReject.resolve, resolveAndReject.reject);\n    } catch (e) {\n      resolveAndReject.reject(e);\n    }\n  };\n\n\n  /**\n   * Create a pair of functions for resolving or rejecting this Promise.\n   *\n   * <p>After the resolve or reject function has been called once, later calls\n   * do nothing.\n   * @private\n   * @return {{\n   *     resolve: function((TYPE|IThenable<TYPE>|Thenable|null)=),\n   *     reject:  function(*=)\n   * }}\n   */\n  PolyfillPromise.prototype.createResolveAndReject_ = function() {\n    var thisPromise = this;\n    var alreadyCalled = false;\n    /**\n     * @param {function(this:PolyfillPromise<TYPE>, T)} method\n     * @return {function(T)}\n     * @template T\n     */\n    function firstCallWins(method) {\n      return function(x) {\n        if (!alreadyCalled) {\n          alreadyCalled = true;\n          method.call(thisPromise, x);\n        }\n      };\n    }\n    return {\n      resolve: firstCallWins(this.resolveTo_),\n      reject: firstCallWins(this.reject_)\n    };\n  };\n\n\n  /**\n   * @private\n   * @param {*} value\n   */\n  PolyfillPromise.prototype.resolveTo_ = function(value) {\n    if (value === this) {\n      this.reject_(new TypeError('A Promise cannot resolve to itself'));\n    } else if (value instanceof PolyfillPromise) {\n      this.settleSameAsPromise_(/** @type {!PolyfillPromise} */ (value));\n    } else if (isObject(value)) {\n      this.resolveToNonPromiseObj_(/** @type {!Object} */ (value));\n    } else {\n      this.fulfill_(value);\n    }\n  };\n\n\n  /**\n   * @private\n   * @param {!Object} obj\n   * @suppress {strictMissingProperties} obj.then\n   */\n  PolyfillPromise.prototype.resolveToNonPromiseObj_ = function(obj) {\n    var thenMethod = undefined;\n\n    try {\n      thenMethod = obj.then;\n    } catch (error) {\n      this.reject_(error);\n      return;\n    }\n    if (typeof thenMethod == 'function') {\n      this.settleSameAsThenable_(thenMethod, /** @type {!Thenable} */ (obj));\n    } else {\n      this.fulfill_(obj);\n    }\n  };\n\n\n  /**\n   * @param {*} value anything\n   * @return {boolean}\n   */\n  function isObject(value) {\n    switch (typeof value) {\n      case 'object':\n        return value != null;\n      case 'function':\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * Reject this promise for the given reason.\n   * @private\n   * @param {*} reason\n   * @throws {!Error} if this promise is already fulfilled or rejected.\n   */\n  PolyfillPromise.prototype.reject_ = function(reason) {\n    this.settle_(PromiseState.REJECTED, reason);\n  };\n\n  /**\n   * Fulfill this promise with the given value.\n   * @private\n   * @param {!TYPE} value\n   * @throws {!Error} when this promise is already fulfilled or rejected.\n   */\n  PolyfillPromise.prototype.fulfill_ = function(value) {\n    this.settle_(PromiseState.FULFILLED, value);\n  };\n\n  /**\n   * Fulfill or reject this promise with the given value/reason.\n   * @private\n   * @param {!PromiseState} settledState (FULFILLED or REJECTED)\n   * @param {*} valueOrReason\n   * @throws {!Error} when this promise is already fulfilled or rejected.\n   */\n  PolyfillPromise.prototype.settle_ = function(settledState, valueOrReason) {\n    if (this.state_ != PromiseState.PENDING) {\n      throw new Error(\n          'Cannot settle(' + settledState + ', ' + valueOrReason +\n          '): Promise already settled in state' + this.state_);\n    }\n    this.state_ = settledState;\n    this.result_ = valueOrReason;\n    this.executeOnSettledCallbacks_();\n  };\n\n  PolyfillPromise.prototype.executeOnSettledCallbacks_ = function() {\n    if (this.onSettledCallbacks_ != null) {\n      for (var i = 0; i < this.onSettledCallbacks_.length; ++i) {\n        asyncExecutor.asyncExecute(this.onSettledCallbacks_[i]);\n      }\n      this.onSettledCallbacks_ = null;  // free memory\n    }\n  };\n\n  /**\n   * All promise async execution is managed by a single executor for the\n   * sake of efficiency.\n   * @const {!AsyncExecutor}\n   */\n  var asyncExecutor = new AsyncExecutor();\n\n  /**\n   * Arrange to settle this promise in the same way as the given thenable.\n   * @private\n   * @param {!PolyfillPromise} promise\n   */\n  PolyfillPromise.prototype.settleSameAsPromise_ = function(promise) {\n    var methods = this.createResolveAndReject_();\n\n    // Calling then() would create an unnecessary extra promise.\n    promise.callWhenSettled_(methods.resolve, methods.reject);\n  };\n\n  /**\n   * Arrange to settle this promise in the same way as the given thenable.\n   * @private\n   * @param {function(\n   *     function((TYPE|IThenable<TYPE>|Thenable|null)=),\n   *     function(*=))\n   * } thenMethod\n   * @param {!Thenable} thenable\n   */\n  PolyfillPromise.prototype.settleSameAsThenable_ = function(\n      thenMethod, thenable) {\n    var methods = this.createResolveAndReject_();\n\n    // Don't trust an unknown thenable implementation not to throw exceptions.\n    try {\n      thenMethod.call(thenable, methods.resolve, methods.reject);\n    } catch (error) {\n      methods.reject(error);\n    }\n  };\n\n  /** @override */\n  PolyfillPromise.prototype.then = function(onFulfilled, onRejected) {\n    var resolveChild;\n    var rejectChild;\n    var childPromise = new PolyfillPromise(function(resolve, reject) {\n      resolveChild = resolve;\n      rejectChild = reject;\n    });\n    function createCallback(paramF, defaultF) {\n      // The spec says to ignore non-function values for onFulfilled and\n      // onRejected\n      if (typeof paramF == 'function') {\n        return function(x) {\n          try {\n            resolveChild(paramF(x));\n          } catch (error) {\n            rejectChild(error);\n          }\n        };\n      } else {\n        return defaultF;\n      }\n    }\n\n    this.callWhenSettled_(\n        createCallback(onFulfilled, resolveChild),\n        createCallback(onRejected, rejectChild));\n    return childPromise;\n  };\n\n  /** @override */\n  PolyfillPromise.prototype.catch = function(onRejected) {\n    return this.then(undefined, onRejected);\n  };\n\n\n  PolyfillPromise.prototype.callWhenSettled_ = function(\n      onFulfilled, onRejected) {\n    var /** !PolyfillPromise */ thisPromise = this;\n    function callback() {\n      switch (thisPromise.state_) {\n        case PromiseState.FULFILLED:\n          onFulfilled(thisPromise.result_);\n          break;\n        case PromiseState.REJECTED:\n          onRejected(thisPromise.result_);\n          break;\n        default:\n          throw new Error('Unexpected state: ' + thisPromise.state_);\n      }\n    }\n    if (this.onSettledCallbacks_ == null) {\n      // we've already settled\n      asyncExecutor.asyncExecute(callback);\n    } else {\n      this.onSettledCallbacks_.push(callback);\n    }\n  };\n\n  // called locally, so give it a name\n  function resolvingPromise(opt_value) {\n    if (opt_value instanceof PolyfillPromise) {\n      return opt_value;\n    } else {\n      return new PolyfillPromise(function(resolve, reject) {\n        resolve(opt_value);\n      });\n    }\n  }\n  PolyfillPromise['resolve'] = resolvingPromise;\n\n\n  PolyfillPromise['reject'] = function(opt_reason) {\n    return new PolyfillPromise(function(resolve, reject) {\n      reject(opt_reason);\n    });\n  };\n\n\n  PolyfillPromise['race'] = function(thenablesOrValues) {\n    return new PolyfillPromise(function(resolve, reject) {\n      var iterator = $jscomp.makeIterator(thenablesOrValues);\n      for (var /** !IIterableResult<*> */ iterRec = iterator.next();\n           !iterRec.done;\n           iterRec = iterator.next()) {\n        // Using resolvingPromise() allows us to treat all elements the same\n        // way.\n        // NOTE: resolvingPromise(promise) always returns the argument\n        // unchanged.\n        // Using .callWhenSettled_() instead of .then() avoids creating an\n        // unnecessary extra promise.\n        resolvingPromise(iterRec.value).callWhenSettled_(resolve, reject);\n      }\n    });\n  };\n\n\n  PolyfillPromise['all'] = function(thenablesOrValues) {\n    var iterator = $jscomp.makeIterator(thenablesOrValues);\n    var /** !IIterableResult<*> */ iterRec = iterator.next();\n\n    if (iterRec.done) {\n      return resolvingPromise([]);\n    } else {\n      return new PolyfillPromise(function(resolveAll, rejectAll) {\n        var resultsArray = [];\n        var unresolvedCount = 0;\n\n        function onFulfilled(i) {\n          return function(ithResult) {\n            resultsArray[i] = ithResult;\n            unresolvedCount--;\n            if (unresolvedCount == 0) {\n              resolveAll(resultsArray);\n            }\n          };\n        }\n\n        do {\n          resultsArray.push(undefined);\n          unresolvedCount++;\n          // Using resolvingPromise() allows us to treat all elements the same\n          // way.\n          // NOTE: resolvingPromise(promise) always returns the argument\n          // unchanged. Using .callWhenSettled_() instead of .then() avoids\n          // creating an unnecessary extra promise.\n          resolvingPromise(iterRec.value)\n              .callWhenSettled_(\n                  onFulfilled(resultsArray.length - 1), rejectAll);\n          iterRec = iterator.next();\n        } while (!iterRec.done);\n      });\n    }\n  };\n\n  return PolyfillPromise;\n}, 'es6', 'es3');\n","/*\n * Copyright 2018 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/polyfill';\n'require es6/promise/promise';\n\n$jscomp.polyfill('Promise.prototype.finally', function(orig) {\n  if (orig) return orig;\n\n  /**\n   * @this {!Promise<VALUE>}\n   * @param {function():?} onFinally\n   * @return {!Promise<VALUE>}\n   * @template VALUE\n   * @suppress {reportUnknownTypes}\n   */\n  var polyfill = function(onFinally) {\n    return this.then(\n        function(value) {\n          var promise = Promise.resolve(onFinally());\n          return promise.then(function () { return value; });\n        },\n        function(reason) {\n          var promise = Promise.resolve(onFinally());\n          return promise.then(function () { throw reason; });\n        });\n  };\n\n  return polyfill;\n}, 'es8', 'es3');\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require base';\n'require es6/promise';\n\n/**\n * Handles the execution of an async function.\n *\n * An async function, foo(a, b), will be rewritten as:\n *\n * ```\n * function foo(a, b) {\n *   let $jscomp$async$this = this;\n *   let $jscomp$async$arguments = arguments;\n *   let $jscomp$async$super$get$x = () => super.x;\n *   function* $jscomp$async$generator() {\n *     // original body of foo() with:\n *     // - await (x) replaced with yield (x)\n *     // - arguments replaced with $jscomp$async$arguments\n *     // - this replaced with $jscomp$async$this\n *     // - super.x replaced with $jscomp$async$super$get$x()\n *     // - super.x(5) replaced with  $jscomp$async$super$get$x()\n *     //      .call($jscomp$async$this, 5)\n *   }\n *   return $jscomp.executeAsyncGenerator($jscomp$async$generator());\n * }\n * ```\n * @param {!Generator<?>} generator\n * @return {!Promise<?>}\n * @suppress {reportUnknownTypes}\n */\n$jscomp.asyncExecutePromiseGenerator = function(generator) {\n  function passValueToGenerator(value) {\n    return generator.next(value);\n  }\n\n  function passErrorToGenerator(error) {\n    return generator.throw(error);\n  }\n\n  return new Promise(function(resolve, reject) {\n    function handleGeneratorRecord(/** !IIterableResult<*> */ genRec) {\n      if (genRec.done) {\n        resolve(genRec.value);\n      } else {\n        // One can await a non-promise, so genRec.value\n        // might not already be a promise.\n        Promise.resolve(genRec.value)\n            .then(passValueToGenerator, passErrorToGenerator)\n            .then(handleGeneratorRecord, reject);\n      }\n    }\n\n    handleGeneratorRecord(generator.next());\n  });\n};\n\n/**\n * Handles the execution of a generator function returning promises.\n *\n * An async function, foo(a, b), will be rewritten as:\n *\n * ```\n * function foo(a, b) {\n *   let $jscomp$async$this = this;\n *   let $jscomp$async$arguments = arguments;\n *   let $jscomp$async$super$get$x = () => super.x;\n *   return $jscomp.asyncExecutePromiseGeneratorFunction(\n *       function* () {\n *         // original body of foo() with:\n *         // - await (x) replaced with yield (x)\n *         // - arguments replaced with $jscomp$async$arguments\n *         // - this replaced with $jscomp$async$this\n *         // - super.x replaced with $jscomp$async$super$get$x()\n *         // - super.x(5) replaced with  $jscomp$async$super$get$x()\n *         //      .call($jscomp$async$this, 5)\n *       });\n * }\n * ```\n * @param {function(): !Generator<?>} generatorFunction\n * @return {!Promise<?>}\n * @suppress {reportUnknownTypes}\n */\n$jscomp.asyncExecutePromiseGeneratorFunction = function(generatorFunction) {\n  return $jscomp.asyncExecutePromiseGenerator(generatorFunction());\n};\n","/*\n * Copyright 2018 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require base';\n'require es6/symbol';\n'require es6/util/makeiterator';\n\n/**\n * @fileoverview Implementation for $jscomp.generator\n *\n * This closure-compiler internal JavaScript library provides an ES3-compatible\n * API for writing generator functions using a minimum of boilerplate.\n *\n * Example:\n * ```javascript\n * // yields numbers starting with the given value, then incrementing by the\n * // value supplied to the next() method until the computed value is <= min or\n * // >= max. Then it returns the total number of times it yielded.\n * // If the client code calls throw(), the error will be logged and then\n * // yielded, but the generator won't terminate.\n * function *es6Definition(start, min, max) {\n *   let currentValue = start;\n *   let yieldCount = 0;\n *   while (currentValue > min && currentValue < max) {\n *     try {\n *       currentValue += yield(currentValue);\n *     } catch (e) {\n *       yield(e);\n *       console.log('client threw error', e);\n *     } finally {\n *       yieldCount++;\n *     }\n *   }\n *   return [yieldCount, currentValue];\n * }\n *\n * function es3Definition(start, min, max) {\n *   var currentValue;\n *   var yieldCount;\n *   var e;\n *\n *   return $jscomp.generator.createGenerator(\n *       es3Definition,\n *       function (context$) {\n *         switch (context$.nextAddress) {\n *           case 1: // execution always starts with 1\n *             currentValue = start;\n *             yieldCount = 0;\n *             // fall-through\n *\n *           case 2:\n *             if (!(currentValue > min && currentValue < max)) {\n *               // exit while loop:\n *               return context$.jumpTo(3);\n *             }\n *             // try {\n *             JSCompiler_temp_const$jscomp$1 = currentValue;\n *             context$.setCatchFinallyBlocks(4, 5);\n *             return context$.yield(currentValue, 7);\n *\n *           case 7:\n *             currentValue =\n *                 JSCompiler_temp_const$jscomp$1 + context$.yieldResult;\n *             // fall-through: execute finally block\n *\n *           case 5: // finally block start\n *             context$.enterFinallyBlock();\n *             yieldCount++;\n *             return context$.leaveFinallyBlock(6);\n *\n *           case 4: // catch block start\n *             e = context$.enterCatchBlock();\n *             return context$.yield(e, 8);\n *\n *           case 8: // finish catch block\n *             console.log('client threw error', e);\n *             return context$.jumpTo(5);\n *\n *           case 6:\n *             context$.jumpTo(2);\n *             break;\n *\n *           case 3:\n *             // come back here when while loop block exits\n *             return context$.return([yieldCount, currentValue]);\n *         }\n *       }\n *   });\n * };\n * ```\n */\n\n/** @const */\n$jscomp.generator = {};\n\n/**\n * Ensures that the iterator result is actually an object.\n *\n * @private\n * @final\n * @param {*} result\n * @return {void}\n * @throws {TypeError} if the result is not an instenace of Object.\n */\n$jscomp.generator.ensureIteratorResultIsObject_ = function(result) {\n  if (result instanceof Object) {\n    return;\n  }\n  throw new TypeError('Iterator result ' + result + ' is not an object');\n};\n\n\n/**\n * Tracks state machine state used by generator.Engine.\n *\n * @template VALUE\n * @constructor\n * @final\n * @struct\n */\n$jscomp.generator.Context = function() {\n  /**\n   * Whether the generator program is being executed at the moment in the\n   * current context. Is used to prevent reentrancy.\n   *\n   * @private\n   * @type {boolean}\n   */\n  this.isRunning_ = false;\n\n  /**\n   * An iterator that should yield all its values before the main program can\n   * continue.\n   *\n   * @private\n   * @type {?Iterator<VALUE>}\n   */\n  this.yieldAllIterator_ = null;\n\n  /**\n   * The value that will be sent to the program as the result of suspended\n   * yield expression.\n   *\n   * @type {?}\n   */\n  this.yieldResult = undefined;\n\n  /**\n   * The next address where the state machine execution should be resumed.\n   *\n   * <p>Program execution starts at 1 and ends at 0.\n   *\n   * @type {number}\n   */\n  this.nextAddress = 1;\n\n  /**\n   * The address that should be executed once an exception is thrown.\n   *\n   * <p>Value of 0 means no catch block exist that would handles an exception.\n   *\n   * @private\n   * @type {number}\n   */\n  this.catchAddress_ = 0;\n\n  /**\n   * The address that should be executed once the result is being returned\n   * or if the exception is thrown and there is no catchAddress specified.\n   *\n   * <p>Value of 0 means no finally block is set.\n   *\n   * @private\n   * @type {number}\n   */\n  this.finallyAddress_ = 0;\n\n  /**\n   * Stores information for the runtime propagation of values and control\n   * flow such as the behaviour of statements (break, continue, return and\n   * throw) that perform nonlocal transfers of control.\n   *\n   * @private\n   * @type {null|{return: VALUE}|{exception, isException: boolean}|{jumpTo: number}}.\n   */\n  this.abruptCompletion_ = null;\n\n  /**\n   * The preserved abruptCompletion_ when entering a `finally` block. If\n   * the `finally` block completes normally the preserved abruptCompletion_ is\n   * restored:\n   * <pre>\n   * try {\n   * } finally {  // nesting level 0\n   *   // abruptCompletion_ is saved in finallyContexts_[0]\n   *   try {\n   *   } finally {  // nesting level 1\n   *     // abruptCompletion_ is saved in finallyContexts_[1]\n   *     ...\n   *     // abruptCompletion_ is restored from finallyContexts_[1]\n   *   }\n   *   // abruptCompletion_ is restored from finallyContexts_[0]\n   * }\n   * <pre>\n   *\n   * @private\n   * @type {?Array<null|{return: VALUE}|{exception, isException: boolean}|{jumpTo: number}>}.\n   */\n  this.finallyContexts_ = null;\n};\n\n/**\n * Marks generator program as being run.\n *\n * @private\n * @final\n * @return {void}\n * @throws {TypeError} if generator is already running.\n */\n$jscomp.generator.Context.prototype.start_ = function() {\n  if (this.isRunning_) {\n    throw new TypeError('Generator is already running');\n  }\n  this.isRunning_ = true;\n};\n\n/**\n *\n *\n * @private\n * @final\n * @return {void}\n */\n$jscomp.generator.Context.prototype.stop_ = function() {\n  this.isRunning_ = false;\n};\n\n/**\n * Transfers program execution to an appropriate catch/finally block that\n * should be executed if exception occurs.\n *\n * @private\n * @final\n * @return {void}\n */\n$jscomp.generator.Context.prototype.jumpToErrorHandler_ = function() {\n  this.nextAddress = this.catchAddress_ || this.finallyAddress_;\n};\n\n/**\n * Sets the result of suspended yield expression.\n *\n * @private\n * @final\n * @param {?=} value The value to send to the generator.\n * @return {void}\n * @suppress {reportUnknownTypes}\n */\n$jscomp.generator.Context.prototype.next_ = function(value) {\n  this.yieldResult = value;\n};\n\n/**\n * Throws exception as the result of suspended yield.\n *\n * @private\n * @final\n * @param {?} e\n * @return {void}\n * @suppress {reportUnknownTypes}\n */\n$jscomp.generator.Context.prototype.throw_ = function(e) {\n  this.abruptCompletion_ = {exception: e, isException: true};\n  this.jumpToErrorHandler_();\n};\n\n/**\n * Returns a value as the result of generator function.\n *\n * @final\n * @param {VALUE=} value\n * @return {void}\n * @suppress {reportUnknownTypes}\n */\n$jscomp.generator.Context.prototype.return = function(value) {\n  this.abruptCompletion_ = {return: /** @type {VALUE} */ (value)};\n  this.nextAddress = this.finallyAddress_;\n};\n\n/**\n * Changes the context so the program execution will continue from the given\n * state after executing nessesary pending finally blocks first.\n *\n * @final\n * @param {number} nextAddress The state that should be run.\n * @return {void}\n */\n$jscomp.generator.Context.prototype.jumpThroughFinallyBlocks = function(\n    nextAddress) {\n  this.abruptCompletion_ = {jumpTo: nextAddress};\n  this.nextAddress = this.finallyAddress_;\n};\n\n/**\n * Pauses the state machine program assosiated with generator function to yield\n * a value.\n *\n * @final\n * @param {VALUE} value The value to return from the generator function via\n *     the iterator protocol.\n * @param {number} resumeAddress The address where the program should resume.\n * @return {{value: VALUE}}\n * @suppress {reportUnknownTypes}\n */\n$jscomp.generator.Context.prototype.yield = function(value, resumeAddress) {\n  this.nextAddress = resumeAddress;\n  return {value: value};\n};\n\n/**\n * Causes the state machine program to yield all values from an iterator.\n *\n * @final\n * @param {string|!Iterator<VALUE>|!Iterable<VALUE>|!Arguments<VALUE>} iterable\n *     Iterator to yeild all values from.\n * @param {number} resumeAddress The address where the program should resume.\n * @return {void | {value: VALUE}}\n * @suppress {reportUnknownTypes}\n */\n$jscomp.generator.Context.prototype.yieldAll = function(\n    iterable, resumeAddress) {\n  /** @const @type {!Iterator<VALUE>} */ var iterator =\n      $jscomp.makeIterator(iterable);\n  /** @const */ var result = iterator.next();\n  $jscomp.generator.ensureIteratorResultIsObject_(result);\n  if (result.done) {\n    // If `someGenerator` in `x = yield *someGenerator` completes immediately,\n    // x is the return value of that generator.\n    this.yieldResult = result.value;\n    this.nextAddress = resumeAddress;\n    return;\n  }\n  this.yieldAllIterator_ = iterator;\n  return this.yield(result.value, resumeAddress);\n};\n\n/**\n * Changes the context so the program execution will continue from the given\n * state.\n *\n * @final\n * @param {number} nextAddress The state the program should continue\n * @return {void}\n */\n$jscomp.generator.Context.prototype.jumpTo = function(nextAddress) {\n  this.nextAddress = nextAddress;\n};\n\n/**\n * Changes the context so the program execution ends.\n *\n * @final\n * @return {void}\n */\n$jscomp.generator.Context.prototype.jumpToEnd = function() {\n  this.nextAddress = 0;\n};\n\n/**\n * Sets catch / finally handlers.\n * Used for try statements with catch blocks.\n *\n * @final\n * @param {number} catchAddress The address of the catch block.\n * @param {number=} finallyAddress The address of the finally block.\n * @return {void}\n */\n$jscomp.generator.Context.prototype.setCatchFinallyBlocks = function(\n    catchAddress, finallyAddress) {\n  this.catchAddress_ = catchAddress;\n  if (finallyAddress != undefined) {\n    this.finallyAddress_ = finallyAddress;\n  }\n};\n\n/**\n * Sets finally handler.\n * Used for try statements without catch blocks.\n *\n * @const\n * @param {number=} finallyAddress The address of the finally block or 0.\n * @return {void}\n */\n$jscomp.generator.Context.prototype.setFinallyBlock = function(finallyAddress) {\n  this.catchAddress_ = 0;\n  this.finallyAddress_ = finallyAddress || 0;\n};\n\n/**\n * Sets a catch handler and jumps to the next address.\n * Used for try statements without finally blocks.\n *\n * @final\n * @param {number} nextAddress The state that should be run next.\n * @param {number=} catchAddress The address of the catch block or 0.\n * @return {void}\n */\n$jscomp.generator.Context.prototype.leaveTryBlock = function(\n    nextAddress, catchAddress) {\n  this.nextAddress = nextAddress;\n  this.catchAddress_ = catchAddress || 0;\n};\n\n/**\n * Initializes exception variable in the beginning of catch block.\n *\n * @final\n * @param {number=} nextCatchBlockAddress The address of the next catch block\n *     that is preceded by no finally blocks.\n * @return {?} Returns an exception that was thrown from \"try\" block.\n * @suppress {reportUnknownTypes}\n */\n$jscomp.generator.Context.prototype.enterCatchBlock = function(\n    nextCatchBlockAddress) {\n  this.catchAddress_ = nextCatchBlockAddress || 0;\n  /** @const */ var exception =\n      /** @type {{exception, isException: boolean}} */ (this.abruptCompletion_)\n          .exception;\n  this.abruptCompletion_ = null;\n  return exception;\n};\n\n/**\n * Saves the current throw context which will be restored at the end of finally\n * block.\n *\n * @final\n * @param {number=} nextCatchAddress\n * @param {number=} nextFinallyAddress\n * @param {number=} finallyDepth The nesting level of current \"finally\" block.\n * @return {void}\n */\n$jscomp.generator.Context.prototype.enterFinallyBlock = function(\n    nextCatchAddress, nextFinallyAddress, finallyDepth) {\n  if (!finallyDepth) {\n    this.finallyContexts_ = [this.abruptCompletion_];\n  } else {\n    /**\n     * @type {!Array<null|{return: VALUE}|{exception, isException: boolean}|{jumpTo: number}>}\n     */\n    (this.finallyContexts_)[finallyDepth] = this.abruptCompletion_;\n  }\n  this.catchAddress_ = nextCatchAddress || 0;\n  this.finallyAddress_ = nextFinallyAddress || 0;\n};\n\n/**\n * Figures out whether the program execution should continue normally, or jump\n * to the closest catch/finally block.\n *\n * @final\n * @param {number} nextAddress The state that should be run next.\n * @param {number=} finallyDepth The nesting level of current \"finally\" block.\n * @return {void}\n * @suppress {strictMissingProperties}\n */\n$jscomp.generator.Context.prototype.leaveFinallyBlock = function(\n    nextAddress, finallyDepth) {\n  // There could be trailing finally contexts if a nested finally throws an\n  // exception or return.\n  // e.g.\n  // try {\n  //   ...\n  //   return 1;\n  // } finally {\n  //   // finallyDepth == 0\n  //   // finallyContext == [{return: 1}]\n  //   try {\n  //     ...\n  //     try {\n  //       throw new Error(2);\n  //     } finally {\n  //       // finallyDepth == 1\n  //       // finallyContext == [{return: 1}, {exception: Error(2)}]\n  //       try {\n  //         throw new Error(3);\n  //       } finally {\n  //         // finallyDepth == 2\n  //         // finallyContext == [\n  //         //     {return: 1},\n  //         //     {exception: Error(2)},\n  //         //     {exception: Error(3)}\n  //         // ]\n  //         throw new Error(4); // gets written in abruptCompletion_\n  //         // leaveFinallyBlock() never gets called here\n  //       }\n  //       // leaveFinallyBlock() never gets called here\n  //     }\n  //   } catch (e) {\n  //      // swallow error\n  //      // abruptCompletion becomes null\n  //   } finally {\n  //     // finallyDepth == 1\n  //     // finallyContext == [\n  //     //     {return: 1},\n  //     //     null, // overwritten, because catch swallowed the error\n  //     //     {exception: Error(3)}  // left over\n  //     // ]\n  //     // leaveFinallyBlock() called here\n  //     // finallyContext == [{return: 1}]\n  //     // abruptCompletion == null\n  //   }\n  //   // leaveFinallyBlock() called here\n  //   // finallyContext = []\n  //   // abruptCompletion == {return: 1};\n  // }\n  /** @const */ var preservedContext =\n      /**\n       * @type {!Array<null|{return: VALUE}|{exception, isException: boolean}|{jumpTo: number}>}\n       */\n      (this.finallyContexts_).splice(finallyDepth || 0)[0];\n  /** @const */ var abruptCompletion = this.abruptCompletion_ =\n      this.abruptCompletion_ || preservedContext;\n  if (abruptCompletion) {\n    if (abruptCompletion.isException) {\n      return this.jumpToErrorHandler_();\n    }\n    // Check if there is a pending break/continue jump that is not preceded by\n    // finally blocks that should be executed before.\n    // We always generate case numbers for the start and end of loops before\n    // numbers for anything they contain, so any finally blocks within will be\n    // guaranteed to have higher addresses than the loop break and continue\n    // positions.\n    // e.g.\n    // l1: while (...) {            // generated addresses: 100: break l1;\n    //       try {                  // generated addresses: 101: finally,\n    //         try {                // generated addresses: 102: finally,\n    //           l2: while (...) {  // generated addresses: 103: break l2;\n    //\n    //                 if (...) {\n    //                   break l1;  // becomes\n    //                              // $context.jumpThroughFinallyBlocks(101),\n    //                              // since 2 finally blocks must be crossed\n    //                 }\n    //                 break l2;    // becomes $context.jumpTo(103)\n    //               }\n    //         } finally {\n    //           // When leaving this finally block:\n    //           // 1. We keep the abrupt completion indicating 'break l1'\n    //           // 2. We jump to the enclosing finally block.\n    //         }\n    //       } finally {\n    //         // When leaving this finally block:\n    //         // 1. We complete the abruptCompletion indicating 'break l1' by\n    //         //   jumping to the loop start address.\n    //         // 2. Abrupt completion is now null, so normal execution\n    //         //   continues from there.\n    //       }\n    //     }\n    if (abruptCompletion.jumpTo != undefined &&\n        this.finallyAddress_ < abruptCompletion.jumpTo) {\n      this.nextAddress = abruptCompletion.jumpTo;\n      this.abruptCompletion_ = null;\n    } else {\n      this.nextAddress = this.finallyAddress_;\n    }\n  } else {\n    this.nextAddress = nextAddress;\n  }\n};\n\n/**\n * Is used in transpilation of `for in` statements.\n *\n * <p><code>for (var i in obj) {...}</code> becomes:\n * <pre>\n * for (var i, $for$in = context$.forIn(obj);\n *      (i = $for$in.getNext()) != null;\n *      ) {\n *   ...\n * }\n * </pre>\n *\n * @final\n * @param {?} object\n * @return {!$jscomp.generator.Context.PropertyIterator}\n * @suppress {reportUnknownTypes}\n */\n$jscomp.generator.Context.prototype.forIn = function(object) {\n  return new $jscomp.generator.Context.PropertyIterator(object);\n};\n\n/**\n * @constructor\n * @final\n * @struct\n * @param {?} object\n * @suppress {reportUnknownTypes}\n */\n$jscomp.generator.Context.PropertyIterator = function(object) {\n  /**\n   * @private\n   * @const\n   * @type {?}\n   */\n  this.object_ = object;\n\n  /**\n   * @private\n   * @const\n   * @type {!Array<string>}\n   */\n  this.properties_ = [];\n\n  for (var property in /** @type {!Object} */ (object)) {\n    this.properties_.push(property);\n  }\n  this.properties_.reverse();\n};\n\n/**\n * Returns the next object's property that is still valid.\n *\n * @final\n * @return {?string}\n * @suppress {reportUnknownTypes}\n */\n$jscomp.generator.Context.PropertyIterator.prototype.getNext = function() {\n  // The JS spec does not require that properties added after the loop begins\n  // be included in the loop, but it does require that the current property\n  // must still exist on the object when the loop iteration starts.\n  while (this.properties_.length > 0) {\n    /** @const */ var property = this.properties_.pop();\n    if (property in /** @type {!Object} */ (this.object_)) {\n      return property;\n    }\n  }\n  return null;\n};\n\n/**\n * Engine handling execution of a state machine associated with the generator\n * program and its context.\n *\n * @private\n * @template VALUE\n * @constructor\n * @final\n * @struct\n * @param {function(!$jscomp.generator.Context<VALUE>): (void|{value: VALUE})} program\n */\n$jscomp.generator.Engine_ = function(program) {\n  /**\n   * @private\n   * @const\n   * @type {!$jscomp.generator.Context<VALUE>}\n   */\n  this.context_ = new $jscomp.generator.Context();\n\n  /**\n   * @private\n   * @const\n   * @type {function(!$jscomp.generator.Context<VALUE>): (void|{value: VALUE})}\n   */\n  this.program_ = program;\n};\n\n/**\n * Returns an object with two properties done and value.\n * You can also provide a parameter to the next method to send a value to the\n * generator.\n *\n * @private\n * @final\n * @param {?=} value The value to send to the generator.\n * @return {!IIterableResult<VALUE>}\n * @suppress {reportUnknownTypes}\n */\n$jscomp.generator.Engine_.prototype.next_ = function(value) {\n  this.context_.start_();\n  if (this.context_.yieldAllIterator_) {\n    return this.yieldAllStep_(\n        this.context_.yieldAllIterator_.next, value, this.context_.next_);\n  }\n  this.context_.next_(value);\n  return this.nextStep_();\n};\n\n/**\n * Attempts to finish the generator with a given value.\n *\n * @private\n * @final\n * @param {VALUE} value The value to return.\n * @return {!IIterableResult<VALUE>}\n * @suppress {reportUnknownTypes}\n */\n$jscomp.generator.Engine_.prototype.return_ = function(value) {\n  this.context_.start_();\n  /** @const */ var yieldAllIterator = this.context_.yieldAllIterator_;\n  if (yieldAllIterator) {\n    /** @const @type {function(VALUE): !IIterableResult<VALUE>} */ var\n        returnFunction =\n            'return' in yieldAllIterator ? yieldAllIterator['return'] :\n                                           function(v) {\n                                             return {value: v, done: true};\n                                           };\n    return this.yieldAllStep_(returnFunction, value, this.context_.return);\n  }\n  this.context_.return(value);\n  return this.nextStep_();\n};\n\n/**\n * Resumes the execution of a generator by throwing an error into it and\n * returns an object with two properties done and value.\n *\n * @private\n * @final\n * @param {?} exception The exception to throw.\n * @return {!IIterableResult<VALUE>}\n * @suppress {reportUnknownTypes}\n */\n$jscomp.generator.Engine_.prototype.throw_ = function(exception) {\n  this.context_.start_();\n  if (this.context_.yieldAllIterator_) {\n    return this.yieldAllStep_(\n        this.context_.yieldAllIterator_['throw'], exception,\n        this.context_.next_);\n  }\n  this.context_.throw_(exception);\n  return this.nextStep_();\n};\n\n/**\n * Redirects next/throw/return method calls to an iterator passed to \"yield *\".\n *\n * @private\n * @final\n * @template T\n * @param {function(this:Iterator<VALUE>, T): !IIterableResult<VALUE>} action\n * @param {T} value\n * @param {function(this:$jscomp.generator.Context, VALUE): void} nextAction\n * @return {!IIterableResult<VALUE>}\n * @suppress {reportUnknownTypes}\n */\n$jscomp.generator.Engine_.prototype.yieldAllStep_ = function(\n    action, value, nextAction) {\n  try {\n    /** @const */ var result = action.call(\n        /** @type {!Iterator<VALUE>} */ (this.context_.yieldAllIterator_),\n        value);\n    $jscomp.generator.ensureIteratorResultIsObject_(result);\n    if (!result.done) {\n      this.context_.stop_();\n      return result;\n    }\n    // After `x = yield *someGenerator()` x is the return value of the\n    // generator, not a value passed to this generator by the next() method.\n    /** @const */ var resultValue = result.value;\n  } catch (e) {\n    this.context_.yieldAllIterator_ = null;\n    this.context_.throw_(e);\n    return this.nextStep_();\n  }\n  this.context_.yieldAllIterator_ = null;\n  nextAction.call(this.context_, resultValue);\n  return this.nextStep_();\n};\n\n/**\n * Continues/resumes program execution until the next suspension point (yield).\n *\n * @private\n * @final\n * @return {!IIterableResult<VALUE>}\n * @suppress {reportUnknownTypes, strictMissingProperties}\n */\n$jscomp.generator.Engine_.prototype.nextStep_ = function() {\n  while (this.context_.nextAddress) {\n    try {\n      /** @const */ var yieldValue = this.program_(this.context_);\n      if (yieldValue) {\n        this.context_.stop_();\n        return {value: yieldValue.value, done: false};\n      }\n    } catch (e) {\n      this.context_.yieldResult = undefined;\n      this.context_.throw_(e);\n    }\n  }\n\n  this.context_.stop_();\n  if (this.context_.abruptCompletion_) {\n    /** @const */ var abruptCompletion = this.context_.abruptCompletion_;\n    this.context_.abruptCompletion_ = null;\n    if (abruptCompletion.isException) {\n      throw abruptCompletion.exception;\n    }\n    return {value: abruptCompletion.return, done: true};\n  }\n  return {value: /** @type {?} */ (undefined), done: true};\n};\n\n/**\n * The Generator object that is returned by a generator function and it\n * conforms to both the iterable protocol and the iterator protocol.\n *\n * @private\n * @template VALUE\n * @constructor\n * @final\n * @implements {Generator<VALUE>}\n * @param {!$jscomp.generator.Engine_<VALUE>} engine\n * @suppress {reportUnknownTypes}\n */\n$jscomp.generator.Generator_ = function(engine) {\n  /** @const @override */\n  this.next = function(opt_value) {\n    return engine.next_(opt_value);\n  };\n\n  /** @const @override */\n  this.throw = function(exception) {\n    return engine.throw_(exception);\n  };\n\n  /** @const @override */\n  this.return = function(value) {\n    return engine.return_(value);\n  };\n\n  $jscomp.initSymbolIterator();\n\n  /** @this {$jscomp.generator.Generator_<VALUE>} */\n  this[Symbol.iterator] = function() {\n    return this;\n  };\n\n  // TODO(skill): uncomment once Symbol.toStringTag is polyfilled:\n  // this[Symbol.toStringTag] = 'Generator';\n};\n\n/**\n * Creates a generator backed up by Engine running a given program.\n *\n * @final\n * @template VALUE\n * @param {function(this:?, ...): (!Iterator<VALUE>|!Iterable<VALUE>)} generator\n * @param {function(!$jscomp.generator.Context<VALUE>): (void|{value: VALUE})} program\n * @return {!Generator<VALUE>}\n * @suppress {reportUnknownTypes}\n */\n$jscomp.generator.createGenerator = function(generator, program) {\n  // The spec says that `myGenFunc() instanceof myGenFunc` must be true.\n  // We'll make this work by setting the prototype before calling the\n  // constructor every time. All of the methods of the object are defined on the\n  // instance by the constructor, so this does no harm.\n  // We also cast Generator_ to Object to hide dynamic inheritance from\n  // jscompiler, it makes ConformanceRules$BanUnknownThis happy.\n  /** @type {!Function} */ ($jscomp.generator.Generator_).prototype =\n      generator.prototype;\n  return new $jscomp.generator.Generator_(\n      new $jscomp.generator.Engine_(program));\n};\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Polyfill for array destructuring.\n */\n'require base';\n\n\n/**\n * Copies the values from an Iterator into an Array. The important difference\n * between this and $jscomp.arrayFromIterable is that if the iterator's\n * next() method has already been called one or more times, this method returns\n * only the values that haven't been yielded yet.\n * @param {!Iterator<T>} iterator\n * @return {!Array<T>}\n * @template T\n * @suppress {reportUnknownTypes}\n */\n$jscomp.arrayFromIterator = function(iterator) {\n  var i;\n  var arr = [];\n  while (!(i = iterator.next()).done) {\n    arr.push(i.value);\n  }\n  return arr;\n};\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Polyfill for array destructuring.\n */\n'require es6/util/makeiterator';\n'require es6/util/arrayfromiterator';\n\n\n/**\n * Copies the values from an Iterable into an Array.\n * @param {string|!Array<T>|!Iterable<T>|!Arguments<T>} iterable\n * @return {!Array<T>}\n * @template T\n */\n$jscomp.arrayFromIterable = function(iterable) {\n  if (iterable instanceof Array) {\n    return iterable;\n  } else {\n    return $jscomp.arrayFromIterator($jscomp.makeIterator(iterable));\n  }\n};\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Utilities for iterator-returning methods.\n */\n'require es6/symbol';\n\n\n/**\n * Creates an iterator from an array-like, with a transformation function.\n * @param {!IArrayLike<INPUT>} array\n * @param {function(number, INPUT): OUTPUT} transform\n * @return {!IteratorIterable<OUTPUT>}\n * @template INPUT, OUTPUT\n * @suppress {checkTypes|reportUnknownTypes}\n */\n$jscomp.iteratorFromArray = function(array, transform) {\n  $jscomp.initSymbolIterator();\n  // NOTE: IE8 doesn't support indexing from boxed Strings.\n  if (array instanceof String) array = array + '';\n  var i = 0;\n  var iter = {\n    next: function() {\n      if (i < array.length) {\n        var index = i++;\n        return {value: transform(index, array[index]), done: false};\n      }\n      iter.next = function() { return {done: true, value: void 0}; };\n      return iter.next();\n    }\n  };\n  iter[Symbol.iterator] = function() { return iter; };\n  return iter;\n};\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require es6/util/iteratorfromarray';\n'require util/polyfill';\n\n$jscomp.polyfill('Array.prototype.keys', function(orig) {\n  if (orig) return orig;\n\n  /**\n   * Returns an iterator of keys of the given array.\n   *\n   * @this {!IArrayLike}\n   * @return {!IteratorIterable<number>}\n   */\n  var polyfill = function() {\n    return $jscomp.iteratorFromArray(this, function(i) { return i; });\n  };\n\n  return polyfill;\n}, 'es6', 'es3');\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require es6/util/iteratorfromarray';\n'require util/polyfill';\n\n// NOTE: Although Array.prototype.values was added to the 2015 edition of the\n// spec, we consider it an \"ES8\" feature because many browsers which are\n// otherwise ES6-compatible, have not implemented it due to web compatibility\n// issues. See https://bugs.chromium.org/p/chromium/issues/detail?id=615873\n$jscomp.polyfill('Array.prototype.values', function(orig) {\n  if (orig) return orig;\n\n  /**\n   * Returns an iterator of values of the given array.\n   *\n   * @this {!IArrayLike<VALUE>}\n   * @return {!IteratorIterable<VALUE>}\n   * @template VALUE\n   * @suppress {reportUnknownTypes}\n   */\n  var polyfill = function() {\n    return $jscomp.iteratorFromArray(this, function(k, v) { return v; });\n  };\n\n  return polyfill;\n}, 'es8', 'es3');\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Utility for Array methods that find elements.\n */\n'require base';\n\n// TODO(sdh): would be nice to template on the ARRAY type as well,\n// so that the third arg type of callback can be refined to be\n// exactly the same as the array type, but then there's no way to\n// enforce that it must, in fact, be an array.\n/**\n * Internal implementation of find.\n * @param {!IArrayLike<VALUE>} array\n * @param {function(this: THIS, VALUE, number, !IArrayLike<VALUE>): *} callback\n * @param {THIS} thisArg\n * @return {{i: number, v: (VALUE|undefined)}}\n * @template THIS, VALUE\n * @suppress {reportUnknownTypes}\n */\n$jscomp.findInternal = function(array, callback, thisArg) {\n  if (array instanceof String) {\n    array = /** @type {!IArrayLike} */ (String(array));\n  }\n  var len = array.length;\n  for (var i = 0; i < len; i++) {\n    var value = array[i];\n    if (callback.call(thisArg, value, i, array)) return {i: i, v: value};\n  }\n  return {i: -1, v: void 0};\n};\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/findinternal';\n'require util/polyfill';\n\n$jscomp.polyfill('Array.prototype.find', function(orig) {\n  if (orig) return orig;\n\n  /**\n   * Finds and returns an element that satisfies the given predicate.\n   *\n   * @this {!IArrayLike<VALUE>}\n   * @param {function(this: THIS, VALUE, number, !IArrayLike<VALUE>): *}\n   *     callback\n   * @param {THIS=} opt_thisArg\n   * @return {VALUE|undefined} The found value, or undefined.\n   * @template VALUE, THIS\n   * @suppress {reportUnknownTypes}\n   */\n  var polyfill = function(callback, opt_thisArg) {\n    return $jscomp.findInternal(this, callback, opt_thisArg).v;\n  };\n\n  return polyfill;\n}, 'es6', 'es3');\n","// Copyright 2006 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Bootstrap for the Google JS Library (Closure).\n *\n * In uncompiled mode base.js will write out Closure's deps file, unless the\n * global <code>CLOSURE_NO_DEPS</code> is set to true.  This allows projects to\n * include their own deps file(s) from different locations.\n *\n *\n * @provideGoog\n */\n\n\n/**\n * @define {boolean} Overridden to true by the compiler when --closure_pass\n *     or --mark_as_compiled is specified.\n */\nvar COMPILED = false;\n\n\n/**\n * Base namespace for the Closure library.  Checks to see goog is already\n * defined in the current scope before assigning to prevent clobbering if\n * base.js is loaded more than once.\n *\n * @const\n */\nvar goog = goog || {};\n\n\n/**\n * Reference to the global context.  In most cases this will be 'window'.\n */\ngoog.global = this;\n\n\n/**\n * A hook for overriding the define values in uncompiled mode.\n *\n * In uncompiled mode, {@code CLOSURE_UNCOMPILED_DEFINES} may be defined before\n * loading base.js.  If a key is defined in {@code CLOSURE_UNCOMPILED_DEFINES},\n * {@code goog.define} will use the value instead of the default value.  This\n * allows flags to be overwritten without compilation (this is normally\n * accomplished with the compiler's \"define\" flag).\n *\n * Example:\n * <pre>\n *   var CLOSURE_UNCOMPILED_DEFINES = {'goog.DEBUG': false};\n * </pre>\n *\n * @type {Object.<string, (string|number|boolean)>|undefined}\n */\ngoog.global.CLOSURE_UNCOMPILED_DEFINES;\n\n\n/**\n * A hook for overriding the define values in uncompiled or compiled mode,\n * like CLOSURE_UNCOMPILED_DEFINES but effective in compiled code.  In\n * uncompiled code CLOSURE_UNCOMPILED_DEFINES takes precedence.\n *\n * Also unlike CLOSURE_UNCOMPILED_DEFINES the values must be number, boolean or\n * string literals or the compiler will emit an error.\n *\n * While any @define value may be set, only those set with goog.define will be\n * effective for uncompiled code.\n *\n * Example:\n * <pre>\n *   var CLOSURE_DEFINES = {'goog.DEBUG': false};\n * </pre>\n *\n * @type {Object.<string, (string|number|boolean)>|undefined}\n */\ngoog.global.CLOSURE_DEFINES;\n\n\n/**\n * Returns true if the specified value is not undefined.\n * WARNING: Do not use this to test if an object has a property. Use the in\n * operator instead.\n *\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is defined.\n */\ngoog.isDef = function(val) {\n  // void 0 always evaluates to undefined and hence we do not need to depend on\n  // the definition of the global variable named 'undefined'.\n  return val !== void 0;\n};\n\n\n/**\n * Builds an object structure for the provided namespace path, ensuring that\n * names that already exist are not overwritten. For example:\n * \"a.b.c\" -> a = {};a.b={};a.b.c={};\n * Used by goog.provide and goog.exportSymbol.\n * @param {string} name name of the object that this file defines.\n * @param {*=} object the object to expose at the end of the path.\n * @param {Object=} objectToExportTo The object to add the path to; default\n *     is |goog.global|.\n * @private\n */\ngoog.exportPath_ = function(name, object, objectToExportTo) {\n  var parts = name.split('.');\n  var cur = objectToExportTo || goog.global;\n\n  // Internet Explorer exhibits strange behavior when throwing errors from\n  // methods externed in this manner.  See the testExportSymbolExceptions in\n  // base_test.html for an example.\n  if (!(parts[0] in cur) && cur.execScript) {\n    cur.execScript('var ' + parts[0]);\n  }\n\n  // Certain browsers cannot parse code in the form for((a in b); c;);\n  // This pattern is produced by the JSCompiler when it collapses the\n  // statement above into the conditional loop below. To prevent this from\n  // happening, use a for-loop and reserve the init logic as below.\n\n  // Parentheses added to eliminate strict JS warning in Firefox.\n  for (var part; parts.length && (part = parts.shift());) {\n    if (!parts.length && goog.isDef(object)) {\n      // last part and we have an object; use it\n      cur[part] = object;\n    } else if (cur[part]) {\n      cur = cur[part];\n    } else {\n      cur = cur[part] = {};\n    }\n  }\n};\n\n\n/**\n * Defines a named value. In uncompiled mode, the value is retreived from\n * CLOSURE_DEFINES or CLOSURE_UNCOMPILED_DEFINES if the object is defined and\n * has the property specified, and otherwise used the defined defaultValue.\n * When compiled, the default can be overridden using compiler command-line\n * options.\n *\n * @param {string} name The distinguished name to provide.\n * @param {string|number|boolean} defaultValue\n */\ngoog.define = function(name, defaultValue) {\n  var value = defaultValue;\n  if (!COMPILED) {\n    if (goog.global.CLOSURE_UNCOMPILED_DEFINES &&\n        Object.prototype.hasOwnProperty.call(\n            goog.global.CLOSURE_UNCOMPILED_DEFINES, name)) {\n      value = goog.global.CLOSURE_UNCOMPILED_DEFINES[name];\n    } else if (goog.global.CLOSURE_DEFINES &&\n        Object.prototype.hasOwnProperty.call(\n            goog.global.CLOSURE_DEFINES, name)) {\n      value = goog.global.CLOSURE_DEFINES[name];\n    }\n  }\n  goog.exportPath_(name, value);\n};\n\n\n/**\n * @define {boolean} DEBUG is provided as a convenience so that debugging code\n * that should not be included in a production js_binary can be easily stripped\n * by specifying --define goog.DEBUG=false to the JSCompiler. For example, most\n * toString() methods should be declared inside an \"if (goog.DEBUG)\" conditional\n * because they are generally used for debugging purposes and it is difficult\n * for the JSCompiler to statically determine whether they are used.\n */\ngoog.DEBUG = true;\n\n\n/**\n * @define {string} LOCALE defines the locale being used for compilation. It is\n * used to select locale specific data to be compiled in js binary. BUILD rule\n * can specify this value by \"--define goog.LOCALE=<locale_name>\" as JSCompiler\n * option.\n *\n * Take into account that the locale code format is important. You should use\n * the canonical Unicode format with hyphen as a delimiter. Language must be\n * lowercase, Language Script - Capitalized, Region - UPPERCASE.\n * There are few examples: pt-BR, en, en-US, sr-Latin-BO, zh-Hans-CN.\n *\n * See more info about locale codes here:\n * http://www.unicode.org/reports/tr35/#Unicode_Language_and_Locale_Identifiers\n *\n * For language codes you should use values defined by ISO 693-1. See it here\n * http://www.w3.org/WAI/ER/IG/ert/iso639.htm. There is only one exception from\n * this rule: the Hebrew language. For legacy reasons the old code (iw) should\n * be used instead of the new code (he), see http://wiki/Main/IIISynonyms.\n */\ngoog.define('goog.LOCALE', 'en');  // default to en\n\n\n/**\n * @define {boolean} Whether this code is running on trusted sites.\n *\n * On untrusted sites, several native functions can be defined or overridden by\n * external libraries like Prototype, Datejs, and JQuery and setting this flag\n * to false forces closure to use its own implementations when possible.\n *\n * If your JavaScript can be loaded by a third party site and you are wary about\n * relying on non-standard implementations, specify\n * \"--define goog.TRUSTED_SITE=false\" to the JSCompiler.\n */\ngoog.define('goog.TRUSTED_SITE', true);\n\n\n/**\n * @define {boolean} Whether a project is expected to be running in strict mode.\n *\n * This define can be used to trigger alternate implementations compatible with\n * running in EcmaScript Strict mode or warn about unavailable functionality.\n * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/Strict_mode\n */\ngoog.define('goog.STRICT_MODE_COMPATIBLE', false);\n\n\n/**\n * Creates object stubs for a namespace.  The presence of one or more\n * goog.provide() calls indicate that the file defines the given\n * objects/namespaces.  Provided objects must not be null or undefined.\n * Build tools also scan for provide/require statements\n * to discern dependencies, build dependency files (see deps.js), etc.\n * @see goog.require\n * @param {string} name Namespace provided by this file in the form\n *     \"goog.package.part\".\n */\ngoog.provide = function(name) {\n  if (!COMPILED) {\n    // Ensure that the same namespace isn't provided twice.\n    // A goog.module/goog.provide maps a goog.require to a specific file\n    if (goog.isProvided_(name)) {\n      throw Error('Namespace \"' + name + '\" already declared.');\n    }\n    delete goog.implicitNamespaces_[name];\n\n    var namespace = name;\n    while ((namespace = namespace.substring(0, namespace.lastIndexOf('.')))) {\n      if (goog.getObjectByName(namespace)) {\n        break;\n      }\n      goog.implicitNamespaces_[namespace] = true;\n    }\n  }\n\n  goog.exportPath_(name);\n};\n\n\n/**\n * Forward declares a symbol. This is an indication to the compiler that the\n * symbol may be used in the source yet is not required and may not be provided\n * in compilation.\n *\n * The most common usage of forward declaration is code that takes a type as a\n * function parameter but does not need to require it. By forward declaring\n * instead of requiring, no hard dependency is made, and (if not required\n * elsewhere) the namespace may never be required and thus, not be pulled\n * into the JavaScript binary. If it is required elsewhere, it will be type\n * checked as normal.\n *\n *\n * @param {string} name The namespace to forward declare in the form of\n *     \"goog.package.part\".\n */\ngoog.forwardDeclare = function(name) {};\n\n\nif (!COMPILED) {\n\n  /**\n   * Check if the given name has been goog.provided. This will return false for\n   * names that are available only as implicit namespaces.\n   * @param {string} name name of the object to look for.\n   * @return {boolean} Whether the name has been provided.\n   * @private\n   */\n  goog.isProvided_ = function(name) {\n    return (!goog.implicitNamespaces_[name] &&\n        goog.isDefAndNotNull(goog.getObjectByName(name)));\n  };\n\n  /**\n   * Namespaces implicitly defined by goog.provide. For example,\n   * goog.provide('goog.events.Event') implicitly declares that 'goog' and\n   * 'goog.events' must be namespaces.\n   *\n   * @type {Object.<string, (boolean|undefined)>}\n   * @private\n   */\n  goog.implicitNamespaces_ = {};\n}\n\n\n/**\n * Returns an object based on its fully qualified external name.  The object\n * is not found if null or undefined.  If you are using a compilation pass that\n * renames property names beware that using this function will not find renamed\n * properties.\n *\n * @param {string} name The fully qualified name.\n * @param {Object=} obj The object within which to look; default is\n *     |goog.global|.\n * @return {?} The value (object or primitive) or, if not found, null.\n */\ngoog.getObjectByName = function(name, obj) {\n  var parts = name.split('.');\n  var cur = obj || goog.global;\n  for (var part; part = parts.shift(); ) {\n    if (goog.isDefAndNotNull(cur[part])) {\n      cur = cur[part];\n    } else {\n      return null;\n    }\n  }\n  return cur;\n};\n\n\n/**\n * Globalizes a whole namespace, such as goog or goog.lang.\n *\n * @param {Object} obj The namespace to globalize.\n * @param {Object=} global The object to add the properties to.\n * @deprecated Properties may be explicitly exported to the global scope, but\n *     this should no longer be done in bulk.\n */\ngoog.globalize = function(obj, global) {\n  global = global || goog.global;\n  for (var x in obj) {\n    global[x] = obj[x];\n  }\n};\n\n\n/**\n * Adds a dependency from a file to the files it requires.\n * @param {string} relPath The path to the js file.\n * @param {Array} provides An array of strings with the names of the objects\n *                         this file provides.\n * @param {Array} requires An array of strings with the names of the objects\n *                         this file requires.\n */\ngoog.addDependency = function(relPath, provides, requires) {\n  if (goog.DEPENDENCIES_ENABLED) {\n    var provide, require;\n    var path = relPath.replace(/\\\\/g, '/');\n    var deps = goog.dependencies_;\n    for (var i = 0; provide = provides[i]; i++) {\n      deps.nameToPath[provide] = path;\n    }\n    for (var j = 0; require = requires[j]; j++) {\n      if (!(path in deps.requires)) {\n        deps.requires[path] = {};\n      }\n      deps.requires[path][require] = true;\n    }\n  }\n};\n\n\n\n\n// NOTE(nnaze): The debug DOM loader was included in base.js as an original way\n// to do \"debug-mode\" development.  The dependency system can sometimes be\n// confusing, as can the debug DOM loader's asynchronous nature.\n//\n// With the DOM loader, a call to goog.require() is not blocking -- the script\n// will not load until some point after the current script.  If a namespace is\n// needed at runtime, it needs to be defined in a previous script, or loaded via\n// require() with its registered dependencies.\n// User-defined namespaces may need their own deps file.  See http://go/js_deps,\n// http://go/genjsdeps, or, externally, DepsWriter.\n// https://developers.google.com/closure/library/docs/depswriter\n//\n// Because of legacy clients, the DOM loader can't be easily removed from\n// base.js.  Work is being done to make it disableable or replaceable for\n// different environments (DOM-less JavaScript interpreters like Rhino or V8,\n// for example). See bootstrap/ for more information.\n\n\n/**\n * @define {boolean} Whether to enable the debug loader.\n *\n * If enabled, a call to goog.require() will attempt to load the namespace by\n * appending a script tag to the DOM (if the namespace has been registered).\n *\n * If disabled, goog.require() will simply assert that the namespace has been\n * provided (and depend on the fact that some outside tool correctly ordered\n * the script).\n */\ngoog.define('goog.ENABLE_DEBUG_LOADER', true);\n\n\n/**\n * @param {string} msg\n * @private\n */\ngoog.logToConsole_ = function(msg) {\n  if (goog.global.console) {\n    goog.global.console['error'](msg);\n  }\n};\n\n\n/**\n * Implements a system for the dynamic resolution of dependencies that works in\n * parallel with the BUILD system. Note that all calls to goog.require will be\n * stripped by the JSCompiler when the --closure_pass option is used.\n * @see goog.provide\n * @param {string} name Namespace to include (as was given in goog.provide()) in\n *     the form \"goog.package.part\".\n * @return {?} If called within a goog.module file, the associated namespace or\n *     module otherwise null.\n */\ngoog.require = function(name) {\n\n  // If the object already exists we do not need do do anything.\n  if (!COMPILED) {\n    if (goog.isProvided_(name)) {\n      return null;\n    }\n\n    if (goog.ENABLE_DEBUG_LOADER) {\n      var path = goog.getPathFromDeps_(name);\n      if (path) {\n        goog.included_[path] = true;\n        goog.writeScripts_();\n        return null;\n      }\n    }\n\n    var errorMessage = 'goog.require could not find: ' + name;\n    goog.logToConsole_(errorMessage);\n\n    throw Error(errorMessage);\n  }\n};\n\n\n/**\n * Path for included scripts.\n * @type {string}\n */\ngoog.basePath = '';\n\n\n/**\n * A hook for overriding the base path.\n * @type {string|undefined}\n */\ngoog.global.CLOSURE_BASE_PATH;\n\n\n/**\n * Whether to load Closure's deps file automatically.\n * Shaka sets this to true since we are placing deps.js in a non-standard\n * location.  Running Shaka in uncompiled mode will require loading deps.js\n * explicitly.\n * @type {boolean|undefined}\n */\ngoog.global.CLOSURE_NO_DEPS = true;\n\n\n/**\n * A function to import a single script. This is meant to be overridden when\n * Closure is being run in non-HTML contexts, such as web workers. It's defined\n * in the global scope so that it can be set before base.js is loaded, which\n * allows deps.js to be imported properly.\n *\n * The function is passed the script source, which is a relative URI. It should\n * return true if the script was imported, false otherwise.\n * @type {(function(string): boolean)|undefined}\n */\ngoog.global.CLOSURE_IMPORT_SCRIPT;\n\n\n/**\n * True if goog.dependencies_ is available.\n * @const {boolean}\n */\ngoog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;\n\n\nif (goog.DEPENDENCIES_ENABLED) {\n  /**\n   * Object used to keep track of urls that have already been added. This record\n   * allows the prevention of circular dependencies.\n   * @type {Object}\n   * @private\n   */\n  goog.included_ = {};\n\n\n  /**\n   * This object is used to keep track of dependencies and other data that is\n   * used for loading scripts.\n   * @private\n   * @type {Object}\n   */\n  goog.dependencies_ = {\n    nameToPath: {}, // many to 1\n    requires: {}, // 1 to many\n    // Used when resolving dependencies to prevent us from visiting file twice.\n    visited: {},\n    written: {} // Used to keep track of script files we have written.\n  };\n\n\n  /**\n   * Tries to detect whether is in the context of an HTML document.\n   * @return {boolean} True if it looks like HTML document.\n   * @private\n   */\n  goog.inHtmlDocument_ = function() {\n    var doc = goog.global.document;\n    return typeof doc != 'undefined' &&\n           'write' in doc;  // XULDocument misses write.\n  };\n\n\n  /**\n   * Tries to detect the base path of base.js script that bootstraps Closure.\n   * @private\n   */\n  goog.findBasePath_ = function() {\n    if (goog.global.CLOSURE_BASE_PATH) {\n      goog.basePath = goog.global.CLOSURE_BASE_PATH;\n      return;\n    } else if (!goog.inHtmlDocument_()) {\n      return;\n    }\n    var doc = goog.global.document;\n    var scripts = doc.getElementsByTagName('script');\n    // Search backwards since the current script is in almost all cases the one\n    // that has base.js.\n    for (var i = scripts.length - 1; i >= 0; --i) {\n      var src = (/** @type {!HTMLScriptElement} */ (scripts[i])).src;\n      var qmark = src.lastIndexOf('?');\n      var l = qmark == -1 ? src.length : qmark;\n      if (src.substr(l - 7, 7) == 'base.js') {\n        goog.basePath = src.substr(0, l - 7);\n        return;\n      }\n    }\n  };\n\n\n  /**\n   * Imports a script if, and only if, that script hasn't already been imported.\n   * (Must be called at execution time)\n   * @param {string} src Script source.\n   * @param {string=} sourceText The optionally source text to evaluate\n   * @private\n   */\n  goog.importScript_ = function(src, sourceText) {\n    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT ||\n        goog.writeScriptTag_;\n    if (importScript(src, sourceText)) {\n      goog.dependencies_.written[src] = true;\n    }\n  };\n\n\n  /**\n   * The default implementation of the import function. Writes a script tag to\n   * import the script.\n   *\n   * @param {string} src The script url.\n   * @param {string=} sourceText The optionally source text to evaluate\n   * @return {boolean} True if the script was imported, false otherwise.\n   * @private\n   */\n  goog.writeScriptTag_ = function(src, sourceText) {\n    if (goog.inHtmlDocument_()) {\n      var doc = goog.global.document;\n\n      // If the user tries to require a new symbol after document load,\n      // something has gone terribly wrong. Doing a document.write would\n      // wipe out the page.\n      if (doc.readyState == 'complete') {\n        // Certain test frameworks load base.js multiple times, which tries\n        // to write deps.js each time. If that happens, just fail silently.\n        // These frameworks wipe the page between each load of base.js, so this\n        // is OK.\n        var isDeps = /\\bdeps.js$/.test(src);\n        if (isDeps) {\n          return false;\n        } else {\n          throw Error('Cannot write \"' + src + '\" after document load');\n        }\n      }\n\n      if (sourceText === undefined) {\n        doc.write(\n            '<script type=\"text/javascript\" src=\"' +\n                src + '\"></' + 'script>');\n      } else {\n        doc.write(\n            '<script type=\"text/javascript\">' +\n              sourceText + '</' + 'script>');\n      }\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n\n  /**\n   * Resolves dependencies based on the dependencies added using addDependency\n   * and calls importScript_ in the correct order.\n   * @private\n   */\n  goog.writeScripts_ = function() {\n    // The scripts we need to write this time.\n    var scripts = [];\n    var seenScript = {};\n    var deps = goog.dependencies_;\n\n    function visitNode(path) {\n      if (path in deps.written) {\n        return;\n      }\n\n      // We have already visited this one. We can get here if we have cyclic\n      // dependencies.\n      if (path in deps.visited) {\n        if (!(path in seenScript)) {\n          seenScript[path] = true;\n          scripts.push(path);\n        }\n        return;\n      }\n\n      deps.visited[path] = true;\n\n      if (path in deps.requires) {\n        for (var requireName in deps.requires[path]) {\n          // If the required name is defined, we assume that it was already\n          // bootstrapped by other means.\n          if (!goog.isProvided_(requireName)) {\n            if (requireName in deps.nameToPath) {\n              visitNode(deps.nameToPath[requireName]);\n            } else {\n              throw Error('Undefined nameToPath for ' + requireName);\n            }\n          }\n        }\n      }\n\n      if (!(path in seenScript)) {\n        seenScript[path] = true;\n        scripts.push(path);\n      }\n    }\n\n    for (var path in goog.included_) {\n      if (!deps.written[path]) {\n        visitNode(path);\n      }\n    }\n\n    // record that we are going to load all these scripts.\n    for (var i = 0; i < scripts.length; i++) {\n      var path = scripts[i];\n      goog.dependencies_.written[path] = true;\n    }\n\n    for (var i = 0; i < scripts.length; i++) {\n      var path = scripts[i];\n      if (path) {\n        goog.importScript_(goog.basePath + path);\n      }\n    }\n  };\n\n\n  /**\n   * Looks at the dependency rules and tries to determine the script file that\n   * fulfills a particular rule.\n   * @param {string} rule In the form goog.namespace.Class or project.script.\n   * @return {?string} Url corresponding to the rule, or null.\n   * @private\n   */\n  goog.getPathFromDeps_ = function(rule) {\n    if (rule in goog.dependencies_.nameToPath) {\n      return goog.dependencies_.nameToPath[rule];\n    } else {\n      return null;\n    }\n  };\n\n  goog.findBasePath_();\n\n  // Allow projects to manage the deps files themselves.\n  if (!goog.global.CLOSURE_NO_DEPS) {\n    goog.importScript_(goog.basePath + 'deps.js');\n  }\n}\n\n\n\n//==============================================================================\n// Language Enhancements\n//==============================================================================\n\n\n/**\n * Returns true if the specified value is defined and not null.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is defined and not null.\n */\ngoog.isDefAndNotNull = function(val) {\n  // Note that undefined == null.\n  return val != null;\n};\n\n\n/**\n * Returns true if the specified value is a string.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is a string.\n */\ngoog.isString = function(val) {\n  return typeof val == 'string';\n};\n\n\n/**\n * Exposes an unobfuscated global namespace path for the given object.\n * Note that fields of the exported object *will* be obfuscated, unless they are\n * exported in turn via this function or goog.exportProperty.\n *\n * Also handy for making public items that are defined in anonymous closures.\n *\n * ex. goog.exportSymbol('public.path.Foo', Foo);\n *\n * ex. goog.exportSymbol('public.path.Foo.staticFunction', Foo.staticFunction);\n *     public.path.Foo.staticFunction();\n *\n * ex. goog.exportSymbol('public.path.Foo.prototype.myMethod',\n *                       Foo.prototype.myMethod);\n *     new public.path.Foo().myMethod();\n *\n * @param {string} publicPath Unobfuscated name to export.\n * @param {*} object Object the name should point to.\n * @param {Object=} objectToExportTo The object to add the path to; default\n *     is goog.global.\n */\ngoog.exportSymbol = function(publicPath, object, objectToExportTo) {\n  goog.exportPath_(publicPath, object, objectToExportTo);\n};\n\n\n/**\n * Exports a property unobfuscated into the object's namespace.\n * ex. goog.exportProperty(Foo, 'staticFunction', Foo.staticFunction);\n * ex. goog.exportProperty(Foo.prototype, 'myMethod', Foo.prototype.myMethod);\n * @param {Object} object Object whose static property is being exported.\n * @param {string} publicName Unobfuscated name to export.\n * @param {*} symbol Object the name should point to.\n */\ngoog.exportProperty = function(object, publicName, symbol) {\n  object[publicName] = symbol;\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * Usage:\n * <pre>\n * function ParentClass(a, b) { }\n * ParentClass.prototype.foo = function(a) { };\n *\n * function ChildClass(a, b, c) {\n *   ChildClass.base(this, 'constructor', a, b);\n * }\n * goog.inherits(ChildClass, ParentClass);\n *\n * var child = new ChildClass('a', 'b', 'see');\n * child.foo(); // This works.\n * </pre>\n *\n * @param {Function} childCtor Child class.\n * @param {Function} parentCtor Parent class.\n */\ngoog.inherits = function(childCtor, parentCtor) {\n  /** @constructor */\n  function tempCtor() {}\n  tempCtor.prototype = parentCtor.prototype;\n  childCtor.superClass_ = parentCtor.prototype;\n  childCtor.prototype = new tempCtor();\n  /** @override */\n  childCtor.prototype.constructor = childCtor;\n\n  /**\n   * Calls superclass constructor/method.\n   *\n   * This function is only available if you use goog.inherits to\n   * express inheritance relationships between classes.\n   *\n   * NOTE: This is a replacement for goog.base and for superClass_\n   * property defined in childCtor.\n   *\n   * @param {!Object} me Should always be \"this\".\n   * @param {string} methodName The method name to call. Calling\n   *     superclass constructor can be done with the special string\n   *     'constructor'.\n   * @param {...*} var_args The arguments to pass to superclass\n   *     method/constructor.\n   * @return {*} The return value of the superclass method/constructor.\n   */\n  childCtor.base = function(me, methodName, var_args) {\n    var args = Array.prototype.slice.call(arguments, 2);\n    return parentCtor.prototype[methodName].apply(me, args);\n  };\n};\n\n\n/*\n * To support uncompiled, strict mode bundles that use eval to divide source\n * like so:\n *    eval('someSource;//# sourceUrl sourcefile.js');\n * We need to export the globally defined symbols \"goog\" and \"COMPILED\".\n * Exporting \"goog\" breaks the compiler optimizations, so we required that\n * be defined externally.\n * NOTE: We don't use goog.exportSymbol here because we don't want to trigger\n * extern generation when that compiler option is enabled.\n */\nif (!COMPILED) {\n  goog.global['COMPILED'] = COMPILED;\n}\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('goog.asserts');\n\n\n/**\n * @namespace goog.asserts\n * @summary An assertion framework which is compiled out for deployment.\n *   NOTE: this is not the closure library version.  This uses the same name so\n *   the closure compiler will be able to use the conditions to assist type\n *   checking.\n */\n\n\n/**\n * @define {boolean} true to enable asserts, false otherwise.\n */\ngoog.define('goog.asserts.ENABLE_ASSERTS', goog.DEBUG);\n\n\n/** @type {function(*, string)} */\ngoog.asserts.assert = function() {};\n\n\n/** @private */\ngoog.asserts.patchAssert_ = function() {\n  let assert = console.assert;\n\n  if (!assert) {\n    console.assert = function() {};\n  } else if (!assert.bind) {\n    // IE 9 does not provide a .bind for the built-in console functions.\n    console.assert = function() {\n      assert.apply(console, arguments);\n    };\n  }\n};\n\n\n// Install assert functions.\nif (goog.asserts.ENABLE_ASSERTS) {\n  goog.asserts.patchAssert_();\n\n  goog.asserts.assert = console.assert.bind(console);\n}\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.abr.Ewma');\n\ngoog.require('goog.asserts');\n\n\n/**\n * Computes an exponentionally-weighted moving average.\n *\n * @param {number} halfLife The quantity of prior samples (by weight) used\n *   when creating a new estimate.  Those prior samples make up half of the new\n *   estimate.\n * @struct\n * @constructor\n */\nshaka.abr.Ewma = function(halfLife) {\n  goog.asserts.assert(halfLife > 0, 'expected halfLife to be positive');\n\n  /**\n   * Larger values of alpha expire historical data more slowly.\n   * @private {number}\n   */\n  this.alpha_ = Math.exp(Math.log(0.5) / halfLife);\n\n  /** @private {number} */\n  this.estimate_ = 0;\n\n  /** @private {number} */\n  this.totalWeight_ = 0;\n};\n\n\n/**\n * Takes a sample.\n *\n * @param {number} weight\n * @param {number} value\n */\nshaka.abr.Ewma.prototype.sample = function(weight, value) {\n  let adjAlpha = Math.pow(this.alpha_, weight);\n  let newEstimate = value * (1 - adjAlpha) + adjAlpha * this.estimate_;\n\n  if (!isNaN(newEstimate)) {\n    this.estimate_ = newEstimate;\n    this.totalWeight_ += weight;\n  }\n};\n\n\n/**\n * @return {number}\n */\nshaka.abr.Ewma.prototype.getEstimate = function() {\n  let zeroFactor = 1 - Math.pow(this.alpha_, this.totalWeight_);\n  return this.estimate_ / zeroFactor;\n};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.abr.EwmaBandwidthEstimator');\n\ngoog.require('shaka.abr.Ewma');\n\n\n/**\n * Tracks bandwidth samples and estimates available bandwidth.\n * Based on the minimum of two exponentially-weighted moving averages with\n * different half-lives.\n *\n * @constructor\n * @struct\n */\nshaka.abr.EwmaBandwidthEstimator = function() {\n  /**\n   * A fast-moving average.\n   * Half of the estimate is based on the last 2 seconds of sample history.\n   * @private {!shaka.abr.Ewma}\n   */\n  this.fast_ = new shaka.abr.Ewma(2);\n\n  /**\n   * A slow-moving average.\n   * Half of the estimate is based on the last 5 seconds of sample history.\n   * @private {!shaka.abr.Ewma}\n   */\n  this.slow_ = new shaka.abr.Ewma(5);\n\n  /**\n   * Number of bytes sampled.\n   * @private {number}\n   */\n  this.bytesSampled_ = 0;\n\n\n  /**\n   * Minimum number of bytes sampled before we trust the estimate.  If we have\n   * not sampled much data, our estimate may not be accurate enough to trust.\n   * If bytesSampled_ is less than minTotalBytes_, we use defaultEstimate_.\n   * This specific value is based on experimentation.\n   *\n   * @private {number}\n   * @const\n   */\n  this.minTotalBytes_ = 128e3;  // 128kB\n\n  /**\n   * Minimum number of bytes, under which samples are discarded.  Our models do\n   * not include latency information, so connection startup time (time to first\n   * byte) is considered part of the download time.  Because of this, we should\n   * ignore very small downloads which would cause our estimate to be too low.\n   * This specific value is based on experimentation.\n   *\n   * @private {number}\n   * @const\n   */\n  this.minBytes_ = 16e3;  // 16kB\n};\n\n\n/**\n * Takes a bandwidth sample.\n *\n * @param {number} durationMs The amount of time, in milliseconds, for a\n *   particular request.\n * @param {number} numBytes The total number of bytes transferred in that\n *   request.\n */\nshaka.abr.EwmaBandwidthEstimator.prototype.sample = function(\n    durationMs, numBytes) {\n  if (numBytes < this.minBytes_) {\n    return;\n  }\n\n  let bandwidth = 8000 * numBytes / durationMs;\n  let weight = durationMs / 1000;\n\n  this.bytesSampled_ += numBytes;\n  this.fast_.sample(weight, bandwidth);\n  this.slow_.sample(weight, bandwidth);\n};\n\n\n/**\n * Gets the current bandwidth estimate.\n *\n * @param {number} defaultEstimate\n * @return {number} The bandwidth estimate in bits per second.\n */\nshaka.abr.EwmaBandwidthEstimator.prototype.getBandwidthEstimate =\n    function(defaultEstimate) {\n  if (this.bytesSampled_ < this.minTotalBytes_) {\n    return defaultEstimate;\n  }\n\n  // Take the minimum of these two estimates.  This should have the effect of\n  // adapting down quickly, but up more slowly.\n  return Math.min(this.fast_.getEstimate(), this.slow_.getEstimate());\n};\n\n\n/**\n * @return {boolean} True if there is enough data to produce a meaningful\n *   estimate.\n */\nshaka.abr.EwmaBandwidthEstimator.prototype.hasGoodEstimate = function() {\n  return this.bytesSampled_ >= this.minTotalBytes_;\n};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.log');\n\n\n/**\n * @namespace shaka.log\n * @summary\n * A console logging framework which is compiled out for deployment.  This is\n * only available when using the uncompiled version.\n * @exportDoc\n */\n\n\n/**\n * Log levels.\n * @enum {number}\n * @exportDoc\n */\nshaka.log.Level = {\n  NONE: 0,\n  ERROR: 1,\n  WARNING: 2,\n  INFO: 3,\n  DEBUG: 4,\n  V1: 5,\n  V2: 6,\n};\n\n\n/**\n * @define {number} the maximum log level.\n */\ngoog.define('shaka.log.MAX_LOG_LEVEL', 3);\n\n\n/** @type {function(*, ...*)} */\nshaka.log.alwaysWarn = function() {};\n\n\n/** @type {function(*, ...*)} */\nshaka.log.error = function() {};\n\n\n/** @type {function(*, ...*)} */\nshaka.log.warning = function() {};\n\n\n/** @type {function(*, ...*)} */\nshaka.log.info = function() {};\n\n\n/** @type {function(*, ...*)} */\nshaka.log.debug = function() {};\n\n\n/** @type {function(*, ...*)} */\nshaka.log.v1 = function() {};\n\n\n/** @type {function(*, ...*)} */\nshaka.log.v2 = function() {};\n\n\n// IE8 has no console unless it is opened in advance.\n// IE9 console methods are not Functions and have no bind.\nif (window.console && window.console.log.bind) {\n  shaka.log.alwaysWarn = console.warn.bind(console);\n\n  if (goog.DEBUG) {\n    /** @type {number} */\n    shaka.log.currentLevel;\n\n    /**\n     * Change the log level.  Useful for debugging in uncompiled mode.\n     *\n     * @param {number} level\n     * @exportDoc\n     */\n    shaka.log.setLevel = function(level) {\n      let nop = function() {};\n      let log = shaka.log;\n      const Level = shaka.log.Level;\n\n      shaka.log.currentLevel = level;\n\n      log.error = (level >= Level.ERROR) ? console.error.bind(console) : nop;\n      log.warning = (level >= Level.WARNING) ? console.warn.bind(console) : nop;\n      log.info = (level >= Level.INFO) ? console.info.bind(console) : nop;\n      log.debug = (level >= Level.DEBUG) ? console.log.bind(console) : nop;\n      log.v1 = (level >= Level.V1) ? console.debug.bind(console) : nop;\n      log.v2 = (level >= Level.V2) ? console.debug.bind(console) : nop;\n    };\n\n    shaka.log.setLevel(shaka.log.MAX_LOG_LEVEL);\n  } else {\n    if (shaka.log.MAX_LOG_LEVEL >= shaka.log.Level.ERROR) {\n      shaka.log.error = console.error.bind(console);\n    }\n    if (shaka.log.MAX_LOG_LEVEL >= shaka.log.Level.WARNING) {\n      shaka.log.warning = console.warn.bind(console);\n    }\n    if (shaka.log.MAX_LOG_LEVEL >= shaka.log.Level.INFO) {\n      shaka.log.info = console.info.bind(console);\n    }\n    if (shaka.log.MAX_LOG_LEVEL >= shaka.log.Level.DEBUG) {\n      shaka.log.debug = console.log.bind(console);\n    }\n    if (shaka.log.MAX_LOG_LEVEL >= shaka.log.Level.V1) {\n      shaka.log.v1 = console.debug.bind(console);\n    }\n    if (shaka.log.MAX_LOG_LEVEL >= shaka.log.Level.V2) {\n      shaka.log.v2 = console.debug.bind(console);\n    }\n  }\n}\n","// Copyright 2008 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Simple utilities for splitting URI strings.\n *\n * Uses features of RFC 3986 for parsing/formatting URIs:\n *   http://www.ietf.org/rfc/rfc3986.txt\n *\n * @author gboyer@google.com (Garrett Boyer) - The \"lightened\" design.\n * @author msamuel@google.com (Mike Samuel) - Domain knowledge and regexes.\n */\n\ngoog.provide('goog.uri.utils');\ngoog.provide('goog.uri.utils.ComponentIndex');\n\n\n/**\n * A regular expression for breaking a URI into its component parts.\n *\n * {@link http://www.ietf.org/rfc/rfc3986.txt} says in Appendix B\n * As the \"first-match-wins\" algorithm is identical to the \"greedy\"\n * disambiguation method used by POSIX regular expressions, it is natural and\n * commonplace to use a regular expression for parsing the potential five\n * components of a URI reference.\n *\n * The following line is the regular expression for breaking-down a\n * well-formed URI reference into its components.\n *\n * <pre>\n * ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?\n *  12            3  4          5       6  7        8 9\n * </pre>\n *\n * The numbers in the second line above are only to assist readability; they\n * indicate the reference points for each subexpression (i.e., each paired\n * parenthesis). We refer to the value matched for subexpression <n> as $<n>.\n * For example, matching the above expression to\n * <pre>\n *     http://www.ics.uci.edu/pub/ietf/uri/#Related\n * </pre>\n * results in the following subexpression matches:\n * <pre>\n *    $1 = http:\n *    $2 = http\n *    $3 = //www.ics.uci.edu\n *    $4 = www.ics.uci.edu\n *    $5 = /pub/ietf/uri/\n *    $6 = <undefined>\n *    $7 = <undefined>\n *    $8 = #Related\n *    $9 = Related\n * </pre>\n * where <undefined> indicates that the component is not present, as is the\n * case for the query component in the above example. Therefore, we can\n * determine the value of the five components as\n * <pre>\n *    scheme    = $2\n *    authority = $4\n *    path      = $5\n *    query     = $7\n *    fragment  = $9\n * </pre>\n *\n * The regular expression has been modified slightly to expose the\n * userInfo, domain, and port separately from the authority.\n * The modified version yields\n * <pre>\n *    $1 = http              scheme\n *    $2 = <undefined>       userInfo -\\\n *    $3 = www.ics.uci.edu   domain     | authority\n *    $4 = <undefined>       port     -/\n *    $5 = /pub/ietf/uri/    path\n *    $6 = <undefined>       query without ?\n *    $7 = Related           fragment without #\n * </pre>\n * @type {!RegExp}\n * @private\n */\ngoog.uri.utils.splitRe_ = new RegExp(\n    '^' +\n    '(?:' +\n        '([^:/?#.]+)' +                  // scheme - ignore special characters\n                                         // used by other URL parts such as :,\n                                         // ?, /, #, and .\n    ':)?' +\n    '(?://' +\n        '(?:([^/?#]*)@)?' +              // userInfo\n        '([^/#?]*?)' +                   // domain\n        '(?::([0-9]+))?' +               // port\n        '(?=[/#?]|$)' +                  // authority-terminating character\n    ')?' +\n    '([^?#]+)?' +                        // path\n    '(?:\\\\?([^#]*))?' +                  // query\n    '(?:#(.*))?' +                       // fragment\n    '$');\n\n\n/**\n * The index of each URI component in the return value of goog.uri.utils.split.\n * @enum {number}\n */\ngoog.uri.utils.ComponentIndex = {\n  SCHEME: 1,\n  USER_INFO: 2,\n  DOMAIN: 3,\n  PORT: 4,\n  PATH: 5,\n  QUERY_DATA: 6,\n  FRAGMENT: 7\n};\n\n\n/**\n * Splits a URI into its component parts.\n *\n * Each component can be accessed via the component indices; for example:\n * <pre>\n * goog.uri.utils.split(someStr)[goog.uri.utils.CompontentIndex.QUERY_DATA];\n * </pre>\n *\n * @param {string} uri The URI string to examine.\n * @return {!Array.<string|undefined>} Each component still URI-encoded.\n *     Each component that is present will contain the encoded value, whereas\n *     components that are not present will be undefined or empty, depending\n *     on the browser's regular expression implementation.  Never null, since\n *     arbitrary strings may still look like path names.\n */\ngoog.uri.utils.split = function(uri) {\n  // See @return comment -- never null.\n  return /** @type {!Array.<string|undefined>} */ (\n      uri.match(goog.uri.utils.splitRe_));\n};\n","// Copyright 2006 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Class for parsing and formatting URIs.\n *\n * Use new goog.Uri(string) to parse a URI string.\n *\n * e.g: <code>var myUri = new goog.Uri(window.location);</code>\n *\n * Implements RFC 3986 for parsing/formatting URIs.\n * http://www.ietf.org/rfc/rfc3986.txt\n *\n * Some changes have been made to the interface (more like .NETs), though the\n * internal representation is now of un-encoded parts, this will change the\n * behavior slightly.\n *\n */\n\ngoog.provide('goog.Uri');\ngoog.provide('goog.Uri.QueryData');\n\ngoog.require('goog.uri.utils');\ngoog.require('goog.uri.utils.ComponentIndex');\n\n\n\n/**\n * This class contains setters and getters for the parts of the URI.\n * The <code>getXyz</code>/<code>setXyz</code> methods return the decoded part\n * -- so<code>new goog.Uri('/foo%20bar').getPath()</code> will return the\n * decoded path, <code>/foo bar</code>.\n *\n * Reserved characters (see RFC 3986 section 2.2) can be present in\n * their percent-encoded form in scheme, domain, and path URI components and\n * will not be auto-decoded. For example:\n * <code>new goog.Uri('rel%61tive/path%2fto/resource').getPath()</code> will\n * return <code>relative/path%2fto/resource</code>.\n *\n * The constructor accepts an optional unparsed, raw URI string.  The parser\n * is relaxed, so special characters that aren't escaped but don't cause\n * ambiguities will not cause parse failures.\n *\n * All setters return <code>this</code> and so may be chained, a la\n * <code>new goog.Uri('/foo').setFragment('part').toString()</code>.\n *\n * @param {*=} uri Optional string URI to parse, or if a goog.Uri is\n *        passed, a clone is created.\n *\n * @constructor\n */\ngoog.Uri = function(uri) {\n  // Parse in the uri string\n  var m;\n  if (uri instanceof goog.Uri) {\n    this.setScheme(uri.getScheme());\n    this.setUserInfo(uri.getUserInfo());\n    this.setDomain(uri.getDomain());\n    this.setPort(uri.getPort());\n    this.setPath(uri.getPath());\n    this.setQueryData(uri.getQueryData().clone());\n    this.setFragment(uri.getFragment());\n  } else if (uri && (m = goog.uri.utils.split(String(uri)))) {\n    // Set the parts -- decoding as we do so.\n    // COMPATABILITY NOTE - In IE, unmatched fields may be empty strings,\n    // whereas in other browsers they will be undefined.\n    this.setScheme(m[goog.uri.utils.ComponentIndex.SCHEME] || '', true);\n    this.setUserInfo(m[goog.uri.utils.ComponentIndex.USER_INFO] || '', true);\n    this.setDomain(m[goog.uri.utils.ComponentIndex.DOMAIN] || '', true);\n    this.setPort(m[goog.uri.utils.ComponentIndex.PORT]);\n    this.setPath(m[goog.uri.utils.ComponentIndex.PATH] || '', true);\n    this.setQueryData(m[goog.uri.utils.ComponentIndex.QUERY_DATA] || '', true);\n    this.setFragment(m[goog.uri.utils.ComponentIndex.FRAGMENT] || '', true);\n  } else {\n    this.queryData_ = new goog.Uri.QueryData(null, null);\n  }\n};\n\n\n/**\n * Scheme such as \"http\".\n * @type {string}\n * @private\n */\ngoog.Uri.prototype.scheme_ = '';\n\n\n/**\n * User credentials in the form \"username:password\".\n * @type {string}\n * @private\n */\ngoog.Uri.prototype.userInfo_ = '';\n\n\n/**\n * Domain part, e.g. \"www.google.com\".\n * @type {string}\n * @private\n */\ngoog.Uri.prototype.domain_ = '';\n\n\n/**\n * Port, e.g. 8080.\n * @type {?number}\n * @private\n */\ngoog.Uri.prototype.port_ = null;\n\n\n/**\n * Path, e.g. \"/tests/img.png\".\n * @type {string}\n * @private\n */\ngoog.Uri.prototype.path_ = '';\n\n\n/**\n * Object representing query data.\n * @type {!goog.Uri.QueryData}\n * @private\n */\ngoog.Uri.prototype.queryData_;\n\n\n/**\n * The fragment without the #.\n * @type {string}\n * @private\n */\ngoog.Uri.prototype.fragment_ = '';\n\n\n/**\n * @return {string} The string form of the url.\n * @override\n */\ngoog.Uri.prototype.toString = function() {\n  var out = [];\n\n  var scheme = this.getScheme();\n  if (scheme) {\n    out.push(goog.Uri.encodeSpecialChars_(\n        scheme, goog.Uri.reDisallowedInSchemeOrUserInfo_, true), ':');\n  }\n\n  var domain = this.getDomain();\n  if (domain) {\n    out.push('//');\n\n    var userInfo = this.getUserInfo();\n    if (userInfo) {\n      out.push(goog.Uri.encodeSpecialChars_(\n          userInfo, goog.Uri.reDisallowedInSchemeOrUserInfo_, true), '@');\n    }\n\n    out.push(goog.Uri.removeDoubleEncoding_(encodeURIComponent(domain)));\n\n    var port = this.getPort();\n    if (port != null) {\n      out.push(':', String(port));\n    }\n  }\n\n  var path = this.getPath();\n  if (path) {\n    if (this.hasDomain() && path.charAt(0) != '/') {\n      out.push('/');\n    }\n    out.push(goog.Uri.encodeSpecialChars_(\n        path,\n        path.charAt(0) == '/' ?\n            goog.Uri.reDisallowedInAbsolutePath_ :\n            goog.Uri.reDisallowedInRelativePath_,\n        true));\n  }\n\n  var query = this.getEncodedQuery();\n  if (query) {\n    out.push('?', query);\n  }\n\n  var fragment = this.getFragment();\n  if (fragment) {\n    out.push('#', goog.Uri.encodeSpecialChars_(\n        fragment, goog.Uri.reDisallowedInFragment_));\n  }\n  return out.join('');\n};\n\n\n/**\n * Resolves the given relative URI (a goog.Uri object), using the URI\n * represented by this instance as the base URI.\n *\n * There are several kinds of relative URIs:<br>\n * 1. foo - replaces the last part of the path, the whole query and fragment<br>\n * 2. /foo - replaces the the path, the query and fragment<br>\n * 3. //foo - replaces everything from the domain on.  foo is a domain name<br>\n * 4. ?foo - replace the query and fragment<br>\n * 5. #foo - replace the fragment only\n *\n * Additionally, if relative URI has a non-empty path, all \"..\" and \".\"\n * segments will be resolved, as described in RFC 3986.\n *\n * @param {goog.Uri} relativeUri The relative URI to resolve.\n * @return {!goog.Uri} The resolved URI.\n */\ngoog.Uri.prototype.resolve = function(relativeUri) {\n\n  var absoluteUri = this.clone();\n  if (absoluteUri.scheme_ === 'data') {\n    // Cannot have a relative URI to a data URI.\n    absoluteUri = new goog.Uri();\n  }\n\n  // we satisfy these conditions by looking for the first part of relativeUri\n  // that is not blank and applying defaults to the rest\n\n  var overridden = relativeUri.hasScheme();\n\n  if (overridden) {\n    absoluteUri.setScheme(relativeUri.getScheme());\n  } else {\n    overridden = relativeUri.hasUserInfo();\n  }\n\n  if (overridden) {\n    absoluteUri.setUserInfo(relativeUri.getUserInfo());\n  } else {\n    overridden = relativeUri.hasDomain();\n  }\n\n  if (overridden) {\n    absoluteUri.setDomain(relativeUri.getDomain());\n  } else {\n    overridden = relativeUri.hasPort();\n  }\n\n  var path = relativeUri.getPath();\n  if (overridden) {\n    absoluteUri.setPort(relativeUri.getPort());\n  } else {\n    overridden = relativeUri.hasPath();\n    if (overridden) {\n      // resolve path properly\n      if (path.charAt(0) != '/') {\n        // path is relative\n        if (this.hasDomain() && !this.hasPath()) {\n          // RFC 3986, section 5.2.3, case 1\n          path = '/' + path;\n        } else {\n          // RFC 3986, section 5.2.3, case 2\n          var lastSlashIndex = absoluteUri.getPath().lastIndexOf('/');\n          if (lastSlashIndex != -1) {\n            path = absoluteUri.getPath().substr(0, lastSlashIndex + 1) + path;\n          }\n        }\n      }\n      path = goog.Uri.removeDotSegments(path);\n    }\n  }\n\n  if (overridden) {\n    absoluteUri.setPath(path);\n  } else {\n    overridden = relativeUri.hasQuery();\n  }\n\n  if (overridden) {\n    absoluteUri.setQueryData(relativeUri.getQueryData().clone());\n  } else {\n    overridden = relativeUri.hasFragment();\n  }\n\n  if (overridden) {\n    absoluteUri.setFragment(relativeUri.getFragment());\n  }\n\n  return absoluteUri;\n};\n\n\n/**\n * Clones the URI instance.\n * @return {!goog.Uri} New instance of the URI object.\n */\ngoog.Uri.prototype.clone = function() {\n  return new goog.Uri(this);\n};\n\n\n/**\n * @return {string} The encoded scheme/protocol for the URI.\n */\ngoog.Uri.prototype.getScheme = function() {\n  return this.scheme_;\n};\n\n\n/**\n * Sets the scheme/protocol.\n * @param {string} newScheme New scheme value.\n * @param {boolean=} decode Optional param for whether to decode new value.\n * @return {!goog.Uri} Reference to this URI object.\n */\ngoog.Uri.prototype.setScheme = function(newScheme, decode) {\n  this.scheme_ = decode ? goog.Uri.decodeOrEmpty_(newScheme, true) :\n      newScheme;\n\n  // remove an : at the end of the scheme so somebody can pass in\n  // window.location.protocol\n  if (this.scheme_) {\n    this.scheme_ = this.scheme_.replace(/:$/, '');\n  }\n  return this;\n};\n\n\n/**\n * @return {boolean} Whether the scheme has been set.\n */\ngoog.Uri.prototype.hasScheme = function() {\n  return !!this.scheme_;\n};\n\n\n/**\n * @return {string} The decoded user info.\n */\ngoog.Uri.prototype.getUserInfo = function() {\n  return this.userInfo_;\n};\n\n\n/**\n * Sets the userInfo.\n * @param {string} newUserInfo New userInfo value.\n * @param {boolean=} decode Optional param for whether to decode new value.\n * @return {!goog.Uri} Reference to this URI object.\n */\ngoog.Uri.prototype.setUserInfo = function(newUserInfo, decode) {\n  this.userInfo_ = decode ? goog.Uri.decodeOrEmpty_(newUserInfo) :\n                   newUserInfo;\n  return this;\n};\n\n\n/**\n * @return {boolean} Whether the user info has been set.\n */\ngoog.Uri.prototype.hasUserInfo = function() {\n  return !!this.userInfo_;\n};\n\n\n/**\n * @return {string} The decoded domain.\n */\ngoog.Uri.prototype.getDomain = function() {\n  return this.domain_;\n};\n\n\n/**\n * Sets the domain.\n * @param {string} newDomain New domain value.\n * @param {boolean=} decode Optional param for whether to decode new value.\n * @return {!goog.Uri} Reference to this URI object.\n */\ngoog.Uri.prototype.setDomain = function(newDomain, decode) {\n  this.domain_ = decode ? goog.Uri.decodeOrEmpty_(newDomain, true) :\n      newDomain;\n  return this;\n};\n\n\n/**\n * @return {boolean} Whether the domain has been set.\n */\ngoog.Uri.prototype.hasDomain = function() {\n  return !!this.domain_;\n};\n\n\n/**\n * @return {?number} The port number.\n */\ngoog.Uri.prototype.getPort = function() {\n  return this.port_;\n};\n\n\n/**\n * Sets the port number.\n * @param {*} newPort Port number. Will be explicitly casted to a number.\n * @return {!goog.Uri} Reference to this URI object.\n */\ngoog.Uri.prototype.setPort = function(newPort) {\n  if (newPort) {\n    newPort = Number(newPort);\n    if (isNaN(newPort) || newPort < 0) {\n      throw Error('Bad port number ' + newPort);\n    }\n    this.port_ = newPort;\n  } else {\n    this.port_ = null;\n  }\n\n  return this;\n};\n\n\n/**\n * @return {boolean} Whether the port has been set.\n */\ngoog.Uri.prototype.hasPort = function() {\n  return this.port_ != null;\n};\n\n\n/**\n  * @return {string} The decoded path.\n */\ngoog.Uri.prototype.getPath = function() {\n  return this.path_;\n};\n\n\n/**\n * Sets the path.\n * @param {string} newPath New path value.\n * @param {boolean=} decode Optional param for whether to decode new value.\n * @return {!goog.Uri} Reference to this URI object.\n */\ngoog.Uri.prototype.setPath = function(newPath, decode) {\n  this.path_ = decode ? goog.Uri.decodeOrEmpty_(newPath, true) : newPath;\n  return this;\n};\n\n\n/**\n * @return {boolean} Whether the path has been set.\n */\ngoog.Uri.prototype.hasPath = function() {\n  return !!this.path_;\n};\n\n\n/**\n * @return {boolean} Whether the query string has been set.\n */\ngoog.Uri.prototype.hasQuery = function() {\n  return this.queryData_.toString() !== '';\n};\n\n\n/**\n * Sets the query data.\n * @param {goog.Uri.QueryData|string|undefined} queryData QueryData object.\n * @param {boolean=} decode Optional param for whether to decode new value.\n *     Applies only if queryData is a string.\n * @return {!goog.Uri} Reference to this URI object.\n */\ngoog.Uri.prototype.setQueryData = function(queryData, decode) {\n  if (queryData instanceof goog.Uri.QueryData) {\n    this.queryData_ = queryData;\n  } else {\n    if (!decode) {\n      // QueryData accepts encoded query string, so encode it if\n      // decode flag is not true.\n      queryData = goog.Uri.encodeSpecialChars_(queryData,\n                                               goog.Uri.reDisallowedInQuery_);\n    }\n    this.queryData_ = new goog.Uri.QueryData(queryData, null);\n  }\n\n  return this;\n};\n\n\n/**\n * @return {string} The encoded URI query, not including the ?.\n */\ngoog.Uri.prototype.getEncodedQuery = function() {\n  return this.queryData_.toString();\n};\n\n\n/**\n * @return {string} The decoded URI query, not including the ?.\n */\ngoog.Uri.prototype.getDecodedQuery = function() {\n  return this.queryData_.toDecodedString();\n};\n\n\n/**\n * Returns the query data.\n * @return {!goog.Uri.QueryData} QueryData object.\n */\ngoog.Uri.prototype.getQueryData = function() {\n  return this.queryData_;\n};\n\n\n/**\n * @return {string} The URI fragment, not including the #.\n */\ngoog.Uri.prototype.getFragment = function() {\n  return this.fragment_;\n};\n\n\n/**\n * Sets the URI fragment.\n * @param {string} newFragment New fragment value.\n * @param {boolean=} decode Optional param for whether to decode new value.\n * @return {!goog.Uri} Reference to this URI object.\n */\ngoog.Uri.prototype.setFragment = function(newFragment, decode) {\n  this.fragment_ = decode ? goog.Uri.decodeOrEmpty_(newFragment) :\n                   newFragment;\n  return this;\n};\n\n\n/**\n * @return {boolean} Whether the URI has a fragment set.\n */\ngoog.Uri.prototype.hasFragment = function() {\n  return !!this.fragment_;\n};\n\n\n//==============================================================================\n// Static members\n//==============================================================================\n\n\n/**\n * Removes dot segments in given path component, as described in\n * RFC 3986, section 5.2.4.\n *\n * @param {string} path A non-empty path component.\n * @return {string} Path component with removed dot segments.\n */\ngoog.Uri.removeDotSegments = function(path) {\n  if (path == '..' || path == '.') {\n    return '';\n\n  } else if (path.indexOf('./') == -1 &&\n             path.indexOf('/.') == -1) {\n    // This optimization detects uris which do not contain dot-segments,\n    // and as a consequence do not require any processing.\n    return path;\n\n  } else {\n    var leadingSlash = (path.lastIndexOf('/', 0) == 0);\n    var segments = path.split('/');\n    var out = [];\n\n    for (var pos = 0; pos < segments.length; ) {\n      var segment = segments[pos++];\n\n      if (segment == '.') {\n        if (leadingSlash && pos == segments.length) {\n          out.push('');\n        }\n      } else if (segment == '..') {\n        if (out.length > 1 || out.length == 1 && out[0] != '') {\n          out.pop();\n        }\n        if (leadingSlash && pos == segments.length) {\n          out.push('');\n        }\n      } else {\n        out.push(segment);\n        leadingSlash = true;\n      }\n    }\n\n    return out.join('/');\n  }\n};\n\n\n/**\n * Decodes a value or returns the empty string if it isn't defined or empty.\n * @param {string|undefined} val Value to decode.\n * @param {boolean=} preserveReserved If true, restricted characters will\n *     not be decoded.\n * @return {string} Decoded value.\n * @private\n */\ngoog.Uri.decodeOrEmpty_ = function(val, preserveReserved) {\n  // Don't use UrlDecode() here because val is not a query parameter.\n  if (!val) {\n    return '';\n  }\n\n  return preserveReserved ? decodeURI(val) : decodeURIComponent(val);\n};\n\n\n/**\n * If unescapedPart is non null, then escapes any characters in it that aren't\n * valid characters in a url and also escapes any special characters that\n * appear in extra.\n *\n * @param {*} unescapedPart The string to encode.\n * @param {RegExp} extra A character set of characters in [\\01-\\177].\n * @param {boolean=} removeDoubleEncoding If true, remove double percent\n *     encoding.\n * @return {?string} null iff unescapedPart == null.\n * @private\n */\ngoog.Uri.encodeSpecialChars_ = function(unescapedPart, extra,\n    removeDoubleEncoding) {\n  if (goog.isString(unescapedPart)) {\n    var encoded = encodeURI(unescapedPart).\n        replace(extra, goog.Uri.encodeChar_);\n    if (removeDoubleEncoding) {\n      // encodeURI double-escapes %XX sequences used to represent restricted\n      // characters in some URI components, remove the double escaping here.\n      encoded = goog.Uri.removeDoubleEncoding_(encoded);\n    }\n    return encoded;\n  }\n  return null;\n};\n\n\n/**\n * Converts a character in [\\01-\\177] to its unicode character equivalent.\n * @param {string} ch One character string.\n * @return {string} Encoded string.\n * @private\n */\ngoog.Uri.encodeChar_ = function(ch) {\n  var n = ch.charCodeAt(0);\n  return '%' + ((n >> 4) & 0xf).toString(16) + (n & 0xf).toString(16);\n};\n\n\n/**\n * Removes double percent-encoding from a string.\n * @param  {string} doubleEncodedString String\n * @return {string} String with double encoding removed.\n * @private\n */\ngoog.Uri.removeDoubleEncoding_ = function(doubleEncodedString) {\n  return doubleEncodedString.replace(/%25([0-9a-fA-F]{2})/g, '%$1');\n};\n\n\n/**\n * Regular expression for characters that are disallowed in the scheme or\n * userInfo part of the URI.\n * @type {RegExp}\n * @private\n */\ngoog.Uri.reDisallowedInSchemeOrUserInfo_ = /[#\\/\\?@]/g;\n\n\n/**\n * Regular expression for characters that are disallowed in a relative path.\n * Colon is included due to RFC 3986 3.3.\n * @type {RegExp}\n * @private\n */\ngoog.Uri.reDisallowedInRelativePath_ = /[\\#\\?:]/g;\n\n\n/**\n * Regular expression for characters that are disallowed in an absolute path.\n * @type {RegExp}\n * @private\n */\ngoog.Uri.reDisallowedInAbsolutePath_ = /[\\#\\?]/g;\n\n\n/**\n * Regular expression for characters that are disallowed in the query.\n * @type {RegExp}\n * @private\n */\ngoog.Uri.reDisallowedInQuery_ = /[\\#\\?@]/g;\n\n\n/**\n * Regular expression for characters that are disallowed in the fragment.\n * @type {RegExp}\n * @private\n */\ngoog.Uri.reDisallowedInFragment_ = /#/g;\n\n\n\n/**\n * Class used to represent URI query parameters.  It is essentially a hash of\n * name-value pairs, though a name can be present more than once.\n *\n * Has the same interface as the collections in goog.structs.\n *\n * @param {?string=} query Optional encoded query string to parse into\n *     the object.\n * @param {goog.Uri=} uri Optional uri object that should have its\n *     cache invalidated when this object updates. Deprecated -- this\n *     is no longer required.\n * @constructor\n * @final\n */\ngoog.Uri.QueryData = function(query, uri) {\n  /**\n   * Encoded query string, or null if it requires computing from the key map.\n   * @type {?string}\n   * @private\n   */\n  this.encodedQuery_ = query || null;\n};\n\n\n/**\n * If the underlying key map is not yet initialized, it parses the\n * query string and fills the map with parsed data.\n * @private\n */\ngoog.Uri.QueryData.prototype.ensureKeyMapInitialized_ = function() {\n  if (!this.keyMap_) {\n    this.keyMap_ = {};\n    this.count_ = 0;\n\n    if (this.encodedQuery_) {\n      var pairs = this.encodedQuery_.split('&');\n      for (var i = 0; i < pairs.length; i++) {\n        var indexOfEquals = pairs[i].indexOf('=');\n        var name = null;\n        var value = null;\n        if (indexOfEquals >= 0) {\n          name = pairs[i].substring(0, indexOfEquals);\n          value = pairs[i].substring(indexOfEquals + 1);\n        } else {\n          name = pairs[i];\n        }\n        name = decodeURIComponent(name.replace(/\\+/g, ' '));\n        value = value || '';\n        this.add(name, decodeURIComponent(value.replace(/\\+/g, ' ')));\n      }\n    }\n  }\n};\n\n\n/**\n * The map containing name/value or name/array-of-values pairs.\n * May be null if it requires parsing from the query string.\n *\n * We need to use a Map because we cannot guarantee that the key names will\n * not be problematic for IE.\n *\n * @type {Object.<string, !Array.<string>>}\n * @private\n */\ngoog.Uri.QueryData.prototype.keyMap_ = null;\n\n\n/**\n * The number of params, or null if it requires computing.\n * @type {?number}\n * @private\n */\ngoog.Uri.QueryData.prototype.count_ = null;\n\n\n/**\n * @return {?number} The number of parameters.\n */\ngoog.Uri.QueryData.prototype.getCount = function() {\n  this.ensureKeyMapInitialized_();\n  return this.count_;\n};\n\n\n/**\n * Adds a key value pair.\n * @param {string} key Name.\n * @param {*} value Value.\n * @return {!goog.Uri.QueryData} Instance of this object.\n */\ngoog.Uri.QueryData.prototype.add = function(key, value) {\n  this.ensureKeyMapInitialized_();\n  // Invalidate the cache.\n  this.encodedQuery_ = null;\n\n  var values = this.keyMap_.hasOwnProperty(key) && this.keyMap_[key];\n  if (!values) {\n    this.keyMap_[key] = (values = []);\n  }\n  values.push(value);\n  this.count_++;\n  return this;\n};\n\n\n/**\n * @return {string} Encoded query string.\n * @override\n */\ngoog.Uri.QueryData.prototype.toString = function() {\n  if (this.encodedQuery_) {\n    return this.encodedQuery_;\n  }\n\n  if (!this.keyMap_) {\n    return '';\n  }\n\n  var sb = [];\n\n  for (var key in this.keyMap_) {\n    var encodedKey = encodeURIComponent(key);\n    var val = this.keyMap_[key];\n    for (var j = 0; j < val.length; j++) {\n      var param = encodedKey;\n      // Ensure that null and undefined are encoded into the url as\n      // literal strings.\n      if (val[j] !== '') {\n        param += '=' + encodeURIComponent(val[j]);\n      }\n      sb.push(param);\n    }\n  }\n\n  return this.encodedQuery_ = sb.join('&');\n};\n\n\n/**\n * @return {string} Decoded query string.\n */\ngoog.Uri.QueryData.prototype.toDecodedString = function() {\n  return goog.Uri.decodeOrEmpty_(this.toString());\n};\n\n\n/**\n * Clone the query data instance.\n * @return {!goog.Uri.QueryData} New instance of the QueryData object.\n */\ngoog.Uri.QueryData.prototype.clone = function() {\n  var rv = new goog.Uri.QueryData();\n  rv.encodedQuery_ = this.encodedQuery_;\n  if (this.keyMap_) {\n    var cloneMap = {};\n    for (var key in this.keyMap_) {\n      cloneMap[key] = this.keyMap_[key].concat();\n    }\n    rv.keyMap_ = cloneMap;\n    rv.count_ = this.count_;\n  }\n  return rv;\n};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.util.PublicPromise');\n\n\n/**\n * A utility to create Promises with convenient public resolve and reject\n * methods.\n *\n * @constructor\n * @struct\n * @extends {Promise.<T>}\n * @return {Promise.<T>}\n * @template T\n */\nshaka.util.PublicPromise = function() {\n  let resolvePromise;\n  let rejectPromise;\n\n  // Promise.call causes an error.  It seems that inheriting from a native\n  // Promise is not permitted by JavaScript interpreters.\n\n  // The work-around is to construct a Promise object, modify it to look like\n  // the compiler's picture of PublicPromise, then return it.  The caller of\n  // new PublicPromise will receive |promise| instead of |this|, and the\n  // compiler will be aware of the additional properties |resolve| and\n  // |reject|.\n\n  let promise = new Promise(function(resolve, reject) {\n    resolvePromise = resolve;\n    rejectPromise = reject;\n  });\n\n  promise.resolve = resolvePromise;\n  promise.reject = rejectPromise;\n\n  return promise;\n};\n\n\n/** @param {T=} value */\nshaka.util.PublicPromise.prototype.resolve = function(value) {};\n\n\n/** @param {*=} reason */\nshaka.util.PublicPromise.prototype.reject = function(reason) {};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.net.Backoff');\n\ngoog.require('goog.asserts');\ngoog.require('shaka.util.PublicPromise');\n\n\n/**\n * Backoff represents delay and backoff state.  This is used by NetworkingEngine\n * for individual requests and by StreamingEngine to retry streaming failures.\n *\n * @param {shaka.extern.RetryParameters} parameters\n * @param {boolean=} autoReset  If true, start at a \"first retry\" state and\n *   and auto-reset that state when we reach maxAttempts.\n *   Default set to false.\n * @param {?function()=} isCanceled  If provided, the backoff will end the\n *   current attempt early when this callback returns true. Default set to null.\n *\n * @struct\n * @constructor\n */\nshaka.net.Backoff = function(parameters, autoReset = false, isCanceled = null) {\n  // Set defaults as we unpack these, so that individual app-level requests in\n  // NetworkingEngine can be missing parameters.\n\n  let defaults = shaka.net.Backoff.defaultRetryParameters();\n\n  /**\n   * @const\n   * @private {number}\n   */\n  this.maxAttempts_ = (parameters.maxAttempts == null) ?\n      defaults.maxAttempts : parameters.maxAttempts;\n\n  goog.asserts.assert(this.maxAttempts_ >= 1, 'maxAttempts should be >= 1');\n\n  /**\n   * @const\n   * @private {number}\n   */\n  this.baseDelay_ = (parameters.baseDelay == null) ?\n      defaults.baseDelay : parameters.baseDelay;\n\n  goog.asserts.assert(this.baseDelay_ >= 0, 'baseDelay should be >= 0');\n\n  /**\n   * @const\n   * @private {number}\n   */\n  this.fuzzFactor_ = (parameters.fuzzFactor == null) ?\n      defaults.fuzzFactor : parameters.fuzzFactor;\n\n  goog.asserts.assert(this.fuzzFactor_ >= 0, 'fuzzFactor should be >= 0');\n\n  /**\n   * @const\n   * @private {number}\n   */\n  this.backoffFactor_ = (parameters.backoffFactor == null) ?\n      defaults.backoffFactor : parameters.backoffFactor;\n\n  goog.asserts.assert(this.backoffFactor_ >= 0, 'backoffFactor should be >= 0');\n\n  /** @private {number} */\n  this.numAttempts_ = 0;\n\n  /** @private {number} */\n  this.nextUnfuzzedDelay_ = this.baseDelay_;\n\n  /** @private {boolean} */\n  this.autoReset_ = autoReset;\n\n  /** @private {?function()} */\n  this.isCanceled_ = isCanceled;\n\n  if (this.autoReset_) {\n    // There is no delay before the first attempt.  In StreamingEngine (the\n    // intended user of auto-reset mode), the first attempt was implied, so we\n    // reset numAttempts to 1.  Therefore maxAttempts (which includes the first\n    // attempt) must be at least 2 for us to see a delay.\n    goog.asserts.assert(this.maxAttempts_ >= 2,\n        'maxAttempts must be >= 2 for autoReset == true');\n    this.numAttempts_ = 1;\n  }\n};\n\n\n/**\n * @return {!Promise} Resolves when the caller may make an attempt, possibly\n *   after a delay.  Rejects if no more attempts are allowed.\n */\nshaka.net.Backoff.prototype.attempt = function() {\n  if (this.numAttempts_ >= this.maxAttempts_) {\n    if (this.autoReset_) {\n      this.reset_();\n    } else {\n      return Promise.reject();\n    }\n  }\n\n  let p = new shaka.util.PublicPromise();\n  if (this.numAttempts_) {\n    // We've already tried before, so delay the Promise.\n\n    // Fuzz the delay to avoid tons of clients hitting the server at once\n    // after it recovers from whatever is causing it to fail.\n    let fuzzedDelay =\n        shaka.net.Backoff.fuzz_(this.nextUnfuzzedDelay_, this.fuzzFactor_);\n    this.cancelableTimeout_(p.resolve, fuzzedDelay);\n\n    // Update delay_ for next time.\n    this.nextUnfuzzedDelay_ *= this.backoffFactor_;\n  } else {\n    goog.asserts.assert(!this.autoReset_, 'Failed to delay with auto-reset!');\n    p.resolve();\n  }\n\n  this.numAttempts_++;\n  return p;\n};\n\n\n/**\n * Gets a copy of the default retry parameters.\n *\n * @return {shaka.extern.RetryParameters}\n */\nshaka.net.Backoff.defaultRetryParameters = function() {\n  // Use a function rather than a constant member so the calling code can\n  // modify the values without affecting other call results.\n  return {\n    maxAttempts: 2,\n    baseDelay: 1000,\n    backoffFactor: 2,\n    fuzzFactor: 0.5,\n    timeout: 0,\n  };\n};\n\n\n/**\n * Fuzz the input value by +/- fuzzFactor.  For example, a fuzzFactor of 0.5\n * will create a random value that is between 50% and 150% of the input value.\n *\n * @param {number} value\n * @param {number} fuzzFactor\n * @return {number} The fuzzed value\n * @private\n */\nshaka.net.Backoff.fuzz_ = function(value, fuzzFactor) {\n  // A random number between -1 and +1.\n  let negToPosOne = (Math.random() * 2.0) - 1.0;\n\n  // A random number between -fuzzFactor and +fuzzFactor.\n  let negToPosFuzzFactor = negToPosOne * fuzzFactor;\n\n  // The original value, fuzzed by +/- fuzzFactor.\n  return value * (1.0 + negToPosFuzzFactor);\n};\n\n\n/**\n * Reset state in autoReset mode.\n * @private\n */\nshaka.net.Backoff.prototype.reset_ = function() {\n  goog.asserts.assert(this.autoReset_, 'Should only be used for auto-reset!');\n  this.numAttempts_ = 1;\n  this.nextUnfuzzedDelay_ = this.baseDelay_;\n};\n\n\n/**\n * Makes a timeout that cancels with isCanceled_ if this has an isCanceled_.\n *\n * @param {Function} fn The callback to invoke when the timeout expires.\n * @param {number} timeoutMs The timeout in milliseconds.\n * @private\n */\nshaka.net.Backoff.prototype.cancelableTimeout_ = function(fn, timeoutMs) {\n  if (this.isCanceled_) {\n    if (this.isCanceled_() || timeoutMs == 0) {\n      fn();\n    } else {\n      // This will break the timeout into 200 ms intervals, so that isCanceled_\n      // will be checked periodically.\n      let timeToUse = Math.min(200, timeoutMs);\n      shaka.net.Backoff.setTimeout_(function() {\n        this.cancelableTimeout_(fn, timeoutMs - timeToUse);\n      }.bind(this), timeToUse);\n    }\n  } else {\n    shaka.net.Backoff.setTimeout_(fn, timeoutMs);\n  }\n};\n\n\n/**\n * This is here only for testability.  Mocking global setTimeout can lead to\n * unintended interactions with other tests.  So instead, we mock this.\n *\n * @param {Function} fn The callback to invoke when the timeout expires.\n * @param {number} timeoutMs The timeout in milliseconds.\n * @return {number} The timeout ID.\n * @private\n */\nshaka.net.Backoff.setTimeout_ = function(fn, timeoutMs) {\n  return window.setTimeout(fn, timeoutMs);\n};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.util.Error');\n\n\n/**\n * Creates a new Error.\n *\n * @param {shaka.util.Error.Severity} severity\n * @param {shaka.util.Error.Category} category\n * @param {shaka.util.Error.Code} code\n * @param {...*} varArgs\n *\n * @constructor\n * @struct\n * @export\n * @extends {Error}\n * @implements {shaka.extern.Error}\n */\nshaka.util.Error = function(severity, category, code, ...varArgs) {\n  /**\n   * @override\n   * @exportInterface\n   */\n  this.severity = severity;\n  /**\n   * @override\n   * @exportInterface\n   */\n  this.category = category;\n  /**\n   * @override\n   * @exportInterface\n   */\n  this.code = code;\n  /**\n   * @override\n   * @exportInterface\n   */\n  this.data = varArgs;\n  /**\n   * @override\n   * @exportInterface\n   */\n  this.handled = false;\n\n  // This improves the formatting of Errors in failure messages in the tests.\n  if (goog.DEBUG) {\n    let categoryName = 'UNKNOWN';\n    let codeName = 'UNKNOWN';\n\n    for (let k in shaka.util.Error.Category) {\n      if (shaka.util.Error.Category[k] == this.category) {\n        categoryName = k;\n      }\n    }\n    for (let k in shaka.util.Error.Code) {\n      if (shaka.util.Error.Code[k] == this.code) {\n        codeName = k;\n      }\n    }\n\n    /**\n     * A human-readable version of the category and code.\n     * <i>(Only available in uncompiled mode.)</i>\n     *\n     * @const {string}\n     * @exportDoc\n     */\n    this.message = 'Shaka Error ' + categoryName + '.' + codeName +\n                   ' (' + this.data.toString() + ')';\n    try {\n      throw new Error(this.message);\n    } catch (e) {\n      /**\n       * A stack-trace showing where the error occurred.\n       * <i>(Only available in uncompiled mode.)</i>\n       *\n       * @const {string}\n       * @exportDoc\n       */\n      this.stack = e.stack;\n    }\n  }\n};\n\n\n/**\n * @return {string}\n * @override\n */\nshaka.util.Error.prototype.toString = function() {\n  return 'shaka.util.Error ' + JSON.stringify(this, null, '  ');\n};\n\n\n/**\n * @enum {number}\n * @export\n */\nshaka.util.Error.Severity = {\n  /**\n   * An error occurred, but the Player is attempting to recover from the error.\n   *\n   * If the Player cannot ultimately recover, it still may not throw a CRITICAL\n   * error.  For example, retrying for a media segment will never result in\n   * a CRITICAL error (the Player will just retry forever).\n   */\n  'RECOVERABLE': 1,\n\n  /**\n   * A critical error that the library cannot recover from.  These usually cause\n   * the Player to stop loading or updating.  A new manifest must be loaded\n   * to reset the library.\n   */\n  'CRITICAL': 2,\n};\n\n\n/**\n * @enum {number}\n * @export\n */\nshaka.util.Error.Category = {\n  /** Errors from the network stack. */\n  'NETWORK': 1,\n\n  /** Errors parsing text streams. */\n  'TEXT': 2,\n\n  /** Errors parsing or processing audio or video streams. */\n  'MEDIA': 3,\n\n  /** Errors parsing the Manifest. */\n  'MANIFEST': 4,\n\n  /** Errors related to streaming. */\n  'STREAMING': 5,\n\n  /** Errors related to DRM. */\n  'DRM': 6,\n\n  /** Miscellaneous errors from the player. */\n  'PLAYER': 7,\n\n  /** Errors related to cast. */\n  'CAST': 8,\n\n  /** Errors in the database storage (offline). */\n  'STORAGE': 9,\n};\n\n\n/**\n * @enum {number}\n * @export\n */\nshaka.util.Error.Code = {\n  /**\n   * A network request was made using an unsupported URI scheme.\n   * <br> error.data[0] is the URI.\n   */\n  'UNSUPPORTED_SCHEME': 1000,\n\n  /**\n   * An HTTP network request returned an HTTP status that indicated a failure.\n   * <br> error.data[0] is the URI.\n   * <br> error.data[1] is the status code.\n   * <br> error.data[2] is the response text, or null if the response could not\n   *   be interpretted as text.\n   * <br> error.data[3] is the map of response headers.\n   * <br> error.data[4] is the NetworkingEngine.RequestType of the request,\n   *   if one was provided.\n   */\n  'BAD_HTTP_STATUS': 1001,\n\n  /**\n   * An HTTP network request failed with an error, but not from the server.\n   * <br> error.data[0] is the URI.\n   * <br> error.data[1] is the original error.\n   * <br> error.data[2] is the NetworkingEngine.RequestType of the request.\n   */\n  'HTTP_ERROR': 1002,\n\n  /**\n   * A network request timed out.\n   * <br> error.data[0] is the URI.\n   * <br> error.data[1] is the NetworkingEngine.RequestType of the request,\n   *   if one was provided.\n   */\n  'TIMEOUT': 1003,\n\n  /**\n   * A network request was made with a malformed data URI.\n   * <br> error.data[0] is the URI.\n   */\n  'MALFORMED_DATA_URI': 1004,\n\n  /**\n   * A network request was made with a data URI using an unknown encoding.\n   * <br> error.data[0] is the URI.\n   */\n  'UNKNOWN_DATA_URI_ENCODING': 1005,\n\n  /**\n   * A request filter threw an error.\n   * <br> error.data[0] is the original error.\n   */\n  'REQUEST_FILTER_ERROR': 1006,\n\n  /**\n   * A response filter threw an error.\n   * <br> error.data[0] is the original error.\n   */\n  'RESPONSE_FILTER_ERROR': 1007,\n\n  /**\n   * A testing network request was made with a malformed URI.\n   * This error is only used by unit and integration tests.\n   */\n  'MALFORMED_TEST_URI': 1008,\n\n  /**\n   * An unexpected network request was made to the FakeNetworkingEngine.\n   * This error is only used by unit and integration tests.\n   */\n  'UNEXPECTED_TEST_REQUEST': 1009,\n\n\n  /** The text parser failed to parse a text stream due to an invalid header. */\n  'INVALID_TEXT_HEADER': 2000,\n\n  /** The text parser failed to parse a text stream due to an invalid cue. */\n  'INVALID_TEXT_CUE': 2001,\n\n  // RETIRED: 'INVALID_TEXT_SETTINGS': 2002,\n\n  /**\n   * Was unable to detect the encoding of the response text.  Suggest adding\n   * byte-order-markings to the response data.\n   */\n  'UNABLE_TO_DETECT_ENCODING': 2003,\n\n  /** The response data contains invalid Unicode character encoding. */\n  'BAD_ENCODING': 2004,\n\n  /**\n   * The XML parser failed to parse an xml stream, or the XML lacks mandatory\n   * elements for TTML.\n   * <br> error.data[0] is the URI associated with the XML.\n   */\n  'INVALID_XML': 2005,\n\n  // RETIRED: 'INVALID_TTML': 2006,\n\n  /**\n   * MP4 segment does not contain TTML.\n   */\n  'INVALID_MP4_TTML': 2007,\n\n  /**\n   * MP4 segment does not contain VTT.\n   */\n  'INVALID_MP4_VTT': 2008,\n\n  /**\n   * When examining media in advance, we were unable to extract the cue time.\n   * This should only be possible with HLS, where we do not have explicit\n   * segment start times.\n   * <br> error.data[0] is the underlying exception or Error object.\n   */\n  'UNABLE_TO_EXTRACT_CUE_START_TIME': 2009,\n\n\n  /**\n   * Some component tried to read past the end of a buffer.  The segment index,\n   * init segment, or PSSH may be malformed.\n   */\n  'BUFFER_READ_OUT_OF_BOUNDS': 3000,\n\n  /**\n   * Some component tried to parse an integer that was too large to fit in a\n   * JavaScript number without rounding error.  JavaScript can only natively\n   * represent integers up to 53 bits.\n   */\n  'JS_INTEGER_OVERFLOW': 3001,\n\n  /**\n   * The EBML parser used to parse the WebM container encountered an integer,\n   * ID, or other field larger than the maximum supported by the parser.\n   */\n  'EBML_OVERFLOW': 3002,\n\n  /**\n   * The EBML parser used to parse the WebM container encountered a floating-\n   * point field of a size not supported by the parser.\n   */\n  'EBML_BAD_FLOATING_POINT_SIZE': 3003,\n\n  /**\n   * The MP4 SIDX parser found the wrong box type.\n   * Either the segment index range is incorrect or the data is corrupt.\n   */\n  'MP4_SIDX_WRONG_BOX_TYPE': 3004,\n\n  /**\n   * The MP4 SIDX parser encountered an invalid timescale.\n   * The segment index data may be corrupt.\n   */\n  'MP4_SIDX_INVALID_TIMESCALE': 3005,\n\n  /** The MP4 SIDX parser encountered a type of SIDX that is not supported. */\n  'MP4_SIDX_TYPE_NOT_SUPPORTED': 3006,\n\n  /**\n   * The WebM Cues parser was unable to locate the Cues element.\n   * The segment index data may be corrupt.\n   */\n  'WEBM_CUES_ELEMENT_MISSING': 3007,\n\n  /**\n   * The WebM header parser was unable to locate the Ebml element.\n   * The init segment data may be corrupt.\n   */\n  'WEBM_EBML_HEADER_ELEMENT_MISSING': 3008,\n\n  /**\n   * The WebM header parser was unable to locate the Segment element.\n   * The init segment data may be corrupt.\n   */\n  'WEBM_SEGMENT_ELEMENT_MISSING': 3009,\n\n  /**\n   * The WebM header parser was unable to locate the Info element.\n   * The init segment data may be corrupt.\n   */\n  'WEBM_INFO_ELEMENT_MISSING': 3010,\n\n  /**\n   * The WebM header parser was unable to locate the Duration element.\n   * The init segment data may be corrupt or may have been incorrectly encoded.\n   * Shaka requires a duration in WebM DASH content.\n   */\n  'WEBM_DURATION_ELEMENT_MISSING': 3011,\n\n  /**\n   * The WebM Cues parser was unable to locate the Cue Track Positions element.\n   * The segment index data may be corrupt.\n   */\n  'WEBM_CUE_TRACK_POSITIONS_ELEMENT_MISSING': 3012,\n\n  /**\n   * The WebM Cues parser was unable to locate the Cue Time element.\n   * The segment index data may be corrupt.\n   */\n  'WEBM_CUE_TIME_ELEMENT_MISSING': 3013,\n\n  /**\n   * A MediaSource operation failed.\n   * <br> error.data[0] is a MediaError code from the video element.\n   */\n  'MEDIA_SOURCE_OPERATION_FAILED': 3014,\n\n  /**\n   * A MediaSource operation threw an exception.\n   * <br> error.data[0] is the exception that was thrown.\n   */\n  'MEDIA_SOURCE_OPERATION_THREW': 3015,\n\n  /**\n   * The video element reported an error.\n   * <br> error.data[0] is a MediaError code from the video element.\n   * <br> On Edge & IE, error.data[1] is a Microsoft extended error code in hex.\n   * <br> On Chrome, error.data[2] is a string with details on the error.\n   */\n  'VIDEO_ERROR': 3016,\n\n  /**\n   * A MediaSource operation threw QuotaExceededError and recovery failed. The\n   * content cannot be played correctly because the segments are too large for\n   * the browser/platform. This may occur when attempting to play very high\n   * quality, very high bitrate content on low-end devices.\n   * <br> error.data[0] is the type of content which caused the error.\n   */\n  'QUOTA_EXCEEDED_ERROR': 3017,\n\n  /**\n   * Mux.js did not invoke the callback signifying successful transmuxing.\n   */\n  'TRANSMUXING_FAILED': 3018,\n\n\n  /**\n   * The Player was unable to guess the manifest type based on file extension\n   * or MIME type.  To fix, try one of the following:\n   * <br><ul>\n   *   <li>Rename the manifest so that the URI ends in a well-known extension.\n   *   <li>Configure the server to send a recognizable Content-Type header.\n   *   <li>Configure the server to accept a HEAD request for the manifest.\n   * </ul>\n   * <br> error.data[0] is the manifest URI.\n   */\n  'UNABLE_TO_GUESS_MANIFEST_TYPE': 4000,\n\n  /** The DASH Manifest contained invalid XML markup. */\n  'DASH_INVALID_XML': 4001,\n\n  /**\n   * The DASH Manifest contained a Representation with insufficient segment\n   * information.\n   */\n  'DASH_NO_SEGMENT_INFO': 4002,\n\n  /** The DASH Manifest contained an AdaptationSet with no Representations. */\n  'DASH_EMPTY_ADAPTATION_SET': 4003,\n\n  /** The DASH Manifest contained an Period with no AdaptationSets. */\n  'DASH_EMPTY_PERIOD': 4004,\n\n  /**\n   * The DASH Manifest does not specify an init segment with a WebM container.\n   */\n  'DASH_WEBM_MISSING_INIT': 4005,\n\n  /** The DASH Manifest contained an unsupported container format. */\n  'DASH_UNSUPPORTED_CONTAINER': 4006,\n\n  /** The embedded PSSH data has invalid encoding. */\n  'DASH_PSSH_BAD_ENCODING': 4007,\n\n  /**\n   * There is an AdaptationSet whose Representations do not have any common\n   * key-systems.\n   */\n  'DASH_NO_COMMON_KEY_SYSTEM': 4008,\n\n  /** Having multiple key IDs per Representation is not supported. */\n  'DASH_MULTIPLE_KEY_IDS_NOT_SUPPORTED': 4009,\n\n  /** The DASH Manifest specifies conflicting key IDs. */\n  'DASH_CONFLICTING_KEY_IDS': 4010,\n\n  /**\n   * The manifest contains a period with no playable streams.\n   * Either the period was originally empty, or the streams within cannot be\n   * played on this browser or platform.\n   */\n  'UNPLAYABLE_PERIOD': 4011,\n\n  /**\n   * There exist some streams that could be decoded, but restrictions imposed\n   * by the application or the key system prevent us from playing.  This may\n   * happen under the following conditions:\n   * <ul>\n   *   <li>The application has given restrictions to the Player that restrict\n   *       at least one content type completely (e.g. no playable audio).\n   *   <li>The manifest specifies different keys than were given to us from the\n   *       license server.\n   *   <li>The key system has imposed output restrictions that cannot be met\n   *       (such as HDCP) and there are no unrestricted alternatives.\n   * </ul>\n   * <br> error.data[0] is a {@link shaka.extern.RestrictionInfo} object\n   * describing the kinds of restrictions that caused this error.\n   */\n  'RESTRICTIONS_CANNOT_BE_MET': 4012,\n\n  // RETIRED: 'INTERNAL_ERROR_KEY_STATUS': 4013,\n\n  /**\n   * No valid periods were found in the manifest.  Please check that your\n   * manifest is correct and free of typos.\n   */\n  'NO_PERIODS': 4014,\n\n  /**\n   * HLS playlist doesn't start with a mandory #EXTM3U tag.\n   */\n  'HLS_PLAYLIST_HEADER_MISSING': 4015,\n\n  /**\n   * HLS tag has an invalid name that doesn't start with '#EXT'\n   * <br> error.data[0] is the invalid tag.\n   */\n  'INVALID_HLS_TAG': 4016,\n\n  /**\n   * HLS playlist has both Master and Media/Segment tags.\n   */\n  'HLS_INVALID_PLAYLIST_HIERARCHY': 4017,\n\n  /**\n   * A Representation has an id that is the same as another Representation in\n   * the same Period.  This makes manifest updates impossible since we cannot\n   * map the updated Representation to the old one.\n   */\n  'DASH_DUPLICATE_REPRESENTATION_ID': 4018,\n\n  // RETIRED: 'HLS_MEDIA_INIT_SECTION_INFO_MISSING': 4019,\n\n  /**\n   * HLS manifest has several #EXT-X-MAP tags. We can only\n   * support one at the moment.\n   */\n  'HLS_MULTIPLE_MEDIA_INIT_SECTIONS_FOUND': 4020,\n\n  /**\n   * HLS parser was unable to guess mime type of a stream.\n   * <br> error.data[0] is the stream file's extension.\n   */\n  'HLS_COULD_NOT_GUESS_MIME_TYPE': 4021,\n\n  /**\n   * No Master Playlist has been provided. Master playlist provides\n   * vital information about the streams (like codecs) that is\n   * required for MediaSource. We don't support directly providing\n   * a Media Playlist.\n   */\n  'HLS_MASTER_PLAYLIST_NOT_PROVIDED': 4022,\n\n  /**\n   * One of the required attributes was not provided, so the\n   * HLS manifest is invalid.\n   * <br> error.data[0] is the missing attribute's name.\n   */\n  'HLS_REQUIRED_ATTRIBUTE_MISSING': 4023,\n\n  /**\n   * One of the required tags was not provided, so the\n   * HLS manifest is invalid.\n   * <br> error.data[0] is the missing tag's name.\n   */\n  'HLS_REQUIRED_TAG_MISSING': 4024,\n\n  /**\n   * The HLS parser was unable to guess codecs of a stream.\n   * <br> error.data[0] is the list of all codecs for the variant.\n   */\n  'HLS_COULD_NOT_GUESS_CODECS': 4025,\n\n  /**\n   * The HLS parser has encountered encrypted content with unsupported\n   * KEYFORMAT attributes.\n   */\n  'HLS_KEYFORMATS_NOT_SUPPORTED': 4026,\n\n  /**\n   * The manifest parser only supports xlink links with xlink:actuate=\"onLoad\".\n   */\n  'DASH_UNSUPPORTED_XLINK_ACTUATE': 4027,\n\n  /**\n   * The manifest parser has hit its depth limit on xlink link chains.\n   */\n  'DASH_XLINK_DEPTH_LIMIT': 4028,\n\n  // RETIRED: 'HLS_LIVE_CONTENT_NOT_SUPPORTED': 4029,\n\n  /**\n   * The HLS parser was unable to parse segment start time from the media.\n   */\n  'HLS_COULD_NOT_PARSE_SEGMENT_START_TIME': 4030,\n\n  // RETIRED: 'HLS_MEDIA_SEQUENCE_REQUIRED_IN_LIVE_STREAMS': 4031,\n\n  /**\n   * The content container or codecs are not supported by this browser. For\n   * example, this could happen if the content is WebM, but your browser does\n   * not support the WebM container, or if the content uses HEVC, but your\n   * browser does not support the HEVC codec.  This can also occur for\n   * multicodec or multicontainer manifests if none of the codecs or containers\n   * are supported by the browser.\n   *\n   * To see what your browser supports, you can check the JSON data dumped by\n   * http://support.shaka-player-demo.appspot.com/\n   */\n  'CONTENT_UNSUPPORTED_BY_BROWSER': 4032,\n\n  /**\n   * External text tracks cannot be added to live streams.\n   */\n  'CANNOT_ADD_EXTERNAL_TEXT_TO_LIVE_STREAM': 4033,\n\n  // RETIRED: 'INCONSISTENT_BUFFER_STATE': 5000,\n  // RETIRED: 'INVALID_SEGMENT_INDEX': 5001,\n  // RETIRED: 'SEGMENT_DOES_NOT_EXIST': 5002,\n  // RETIRED: 'CANNOT_SATISFY_BYTE_LIMIT': 5003,\n  // RETIRED: 'BAD_SEGMENT': 5004,\n\n  /**\n   * The StreamingEngine called onChooseStreams() but the callback receiver\n   * did not return the correct number or type of Streams.\n   *\n   * This can happen when there is multi-Period content where one Period is\n   * video+audio and another is video-only or audio-only.  We don't support this\n   * case because it is incompatible with MSE.  When the browser reaches the\n   * transition, it will pause, waiting for the audio stream.\n   */\n  'INVALID_STREAMS_CHOSEN': 5005,\n\n\n  /**\n   * The manifest indicated protected content, but the manifest parser was\n   * unable to determine what key systems should be used.\n   */\n  'NO_RECOGNIZED_KEY_SYSTEMS': 6000,\n\n  /**\n   * None of the requested key system configurations are available.  This may\n   * happen under the following conditions:\n   * <ul>\n   *   <li> The key system is not supported.\n   *   <li> The key system does not support the features requested (e.g.\n   *        persistent state).\n   *   <li> A user prompt was shown and the user denied access.\n   *   <li> The key system is not available from unsecure contexts. (i.e.\n            requires HTTPS) See https://bit.ly/2K9X1nY\n   * </ul>\n   */\n  'REQUESTED_KEY_SYSTEM_CONFIG_UNAVAILABLE': 6001,\n\n  /**\n   * The browser found one of the requested key systems, but it failed to\n   * create an instance of the CDM for some unknown reason.\n   * <br> error.data[0] is an error message string from the browser.\n   */\n  'FAILED_TO_CREATE_CDM': 6002,\n\n  /**\n   * The browser found one of the requested key systems and created an instance\n   * of the CDM, but it failed to attach the CDM to the video for some unknown\n   * reason.\n   * <br> error.data[0] is an error message string from the browser.\n   */\n  'FAILED_TO_ATTACH_TO_VIDEO': 6003,\n\n  /**\n   * The CDM rejected the server certificate supplied by the application.\n   * The certificate may be malformed or in an unsupported format.\n   * <br> error.data[0] is an error message string from the browser.\n   */\n  'INVALID_SERVER_CERTIFICATE': 6004,\n\n  /**\n   * The CDM refused to create a session for some unknown reason.\n   * <br> error.data[0] is an error message string from the browser.\n   */\n  'FAILED_TO_CREATE_SESSION': 6005,\n\n  /**\n   * The CDM was unable to generate a license request for the init data it was\n   * given.  The init data may be malformed or in an unsupported format.\n   * <br> error.data[0] is an error message string from the browser.\n   */\n  'FAILED_TO_GENERATE_LICENSE_REQUEST': 6006,\n\n  /**\n   * The license request failed.  This could be a timeout, a network failure, or\n   * a rejection by the server.\n   * <br> error.data[0] is a shaka.util.Error from the networking engine.\n   */\n  'LICENSE_REQUEST_FAILED': 6007,\n\n  /**\n   * The license response was rejected by the CDM.  The server's response may be\n   * invalid or malformed for this CDM.\n   * <br> error.data[0] is an error message string from the browser.\n   */\n  'LICENSE_RESPONSE_REJECTED': 6008,\n\n  // RETIRED: 'NO_LICENSE_SERVER_SPECIFIED': 6009,\n\n  /**\n   * The manifest does not specify any DRM info, but the content is encrypted.\n   * Either the manifest or the manifest parser are broken.\n   */\n  'ENCRYPTED_CONTENT_WITHOUT_DRM_INFO': 6010,\n\n  // RETIRED: 'WRONG_KEYS': 6011,\n\n  /**\n   * No license server was given for the key system signaled by the manifest.\n   * A license server URI is required for every key system.\n   */\n  'NO_LICENSE_SERVER_GIVEN': 6012,\n\n  /**\n   * A required offline session was removed.  The content is not playable.\n   */\n  'OFFLINE_SESSION_REMOVED': 6013,\n\n  /**\n   * The license has expired.  This is triggered when all keys in the key\n   * status map have a status of 'expired'.\n   */\n  'EXPIRED': 6014,\n\n\n  /**\n   * The call to Player.load() was interrupted by a call to Player.unload()\n   * or another call to Player.load().\n   */\n  'LOAD_INTERRUPTED': 7000,\n\n  /**\n   * An internal error which indicates that an operation was aborted.  This\n   * should not be seen by applications.\n   */\n  'OPERATION_ABORTED': 7001,\n\n  /**\n   * The call to Player.load() failed because the Player does not have a video\n   * element.  The video element must either be provided to the constructor or\n   * to Player.attach() before Player.load() is called.\n   */\n  'NO_VIDEO_ELEMENT': 7002,\n\n\n  /**\n   * The Cast API is unavailable.  This may be because of one of the following:\n   *  1. The browser may not have Cast support\n   *  2. The browser may be missing a necessary Cast extension\n   *  3. The Cast sender library may not be loaded in your app\n   */\n  'CAST_API_UNAVAILABLE': 8000,\n\n  /**\n   * No cast receivers are available at this time.\n   */\n  'NO_CAST_RECEIVERS': 8001,\n\n  /**\n   * The library is already casting.\n   */\n  'ALREADY_CASTING': 8002,\n\n  /**\n   * A Cast SDK error that we did not explicitly plan for has occurred.\n   * Check data[0] and refer to the Cast SDK documentation for details.\n   * <br> error.data[0] is an error object from the Cast SDK.\n   */\n  'UNEXPECTED_CAST_ERROR': 8003,\n\n  /**\n   * The cast operation was canceled by the user.\n   * <br> error.data[0] is an error object from the Cast SDK.\n   */\n  'CAST_CANCELED_BY_USER': 8004,\n\n  /**\n   * The cast connection timed out.\n   * <br> error.data[0] is an error object from the Cast SDK.\n   */\n  'CAST_CONNECTION_TIMED_OUT': 8005,\n\n  /**\n   * The requested receiver app ID does not exist or is unavailable.\n   * Check the requested app ID for typos.\n   * <br> error.data[0] is an error object from the Cast SDK.\n   */\n  'CAST_RECEIVER_APP_UNAVAILABLE': 8006,\n\n\n  /**\n   * Offline storage is not supported on this browser; it is required for\n   * offline support.\n   */\n  'STORAGE_NOT_SUPPORTED': 9000,\n\n  /**\n   * An unknown error occurred in the IndexedDB.\n   * <br> On Firefox, one common source for UnknownError calls is reverting\n   * Firefox to an old version. This makes the IndexedDB storage inaccessible\n   * for older versions. The only way to fix this is to delete the storage\n   * data in your profile. See https://mzl.la/2yCGWCm\n   * <br> error.data[0] is the error object.\n   */\n  'INDEXED_DB_ERROR': 9001,\n\n  /**\n   * The storage operation was aborted.  Deprecated in favor of more general\n   * OPERATION_ABORTED.\n   */\n  'DEPRECATED_OPERATION_ABORTED': 9002,\n\n  /**\n   * The specified item was not found in the IndexedDB.\n   * <br> error.data[0] is the offline URI.\n   */\n  'REQUESTED_ITEM_NOT_FOUND': 9003,\n\n  /**\n   * A network request was made with a malformed offline URI.\n   * <br> error.data[0] is the URI.\n   */\n  'MALFORMED_OFFLINE_URI': 9004,\n\n  /**\n   * The specified content is live or in-progress.\n   * Live and in-progress streams cannot be stored offline.\n   * <br> error.data[0] is the URI.\n   */\n  'CANNOT_STORE_LIVE_OFFLINE': 9005,\n\n  /**\n   * There is already a store operation in-progress. Wait until it completes\n   * before starting another.\n   */\n  'STORE_ALREADY_IN_PROGRESS': 9006,\n\n  /**\n   * The specified manifest is encrypted but does not specify any init data.\n   * Without init data specified in the manifest, the content will not be\n   * playable offline.\n   * <br> error.data[0] is the URI.\n   */\n  'NO_INIT_DATA_FOR_OFFLINE': 9007,\n\n  /**\n   * shaka.offline.Storage was constructed with a Player proxy instead of a\n   * local player instance.  To fix this, use Player directly with Storage\n   * instead of the results of CastProxy.prototype.getPlayer().\n   */\n  'LOCAL_PLAYER_INSTANCE_REQUIRED': 9008,\n\n  // RETIRED/MOVED TO 4000's: 'CONTENT_UNSUPPORTED_BY_BROWSER': 9009,\n\n  // RETIRED: 'UNSUPPORTED_UPGRADE_REQUEST': 9010,\n\n  /**\n   * The storage cell does not allow new operations that require new keys.\n   */\n  'NEW_KEY_OPERATION_NOT_SUPPORTED': 9011,\n\n  /**\n   * A key was not found in a storage cell.\n   */\n  'KEY_NOT_FOUND': 9012,\n\n  /**\n   * A storage cell was not found.\n   */\n  'MISSING_STORAGE_CELL': 9013,\n};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.util.AbortableOperation');\n\ngoog.require('shaka.util.Error');\ngoog.require('shaka.util.PublicPromise');\n\n/**\n * A utility to wrap abortable operations.  Note that these are not cancelable.\n * Cancelation implies undoing what has been done so far, whereas aborting only\n * means that futher work is stopped.\n *\n * @implements {shaka.extern.IAbortableOperation.<T>}\n * @template T\n * @export\n */\nshaka.util.AbortableOperation = class {\n  /**\n   * @param {!Promise.<T>} promise\n   *   A Promise which represents the underlying operation.  It is resolved when\n   *   the operation is complete, and rejected if the operation fails or is\n   *   aborted.  Aborted operations should be rejected with a shaka.util.Error\n   *   object using the error code OPERATION_ABORTED.\n   * @param {function():!Promise} onAbort\n   *   Will be called by this object to abort the underlying operation.\n   *   This is not cancelation, and will not necessarily result in any work\n   *   being undone.  abort() should return a Promise which is resolved when the\n   *   underlying operation has been aborted.  The returned Promise should never\n   *   be rejected.\n   */\n  constructor(promise, onAbort) {\n    /** @const {!Promise.<T>} */\n    this.promise = promise;\n\n    /** @private {function():!Promise} */\n    this.onAbort_ = onAbort;\n\n    /** @private {boolean} */\n    this.aborted_ = false;\n  }\n\n  /**\n   * @param {!shaka.util.Error} error\n   * @return {!shaka.util.AbortableOperation} An operation which has already\n   *   failed with the error given by the caller.\n   * @export\n   */\n  static failed(error) {\n    return new shaka.util.AbortableOperation(\n        Promise.reject(error),\n        () => Promise.resolve());\n  }\n\n  /**\n   * @return {!shaka.util.AbortableOperation} An operation which has already\n   *   failed with the error OPERATION_ABORTED.\n   * @export\n   */\n  static aborted() {\n    const p = Promise.reject(new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.PLAYER,\n        shaka.util.Error.Code.OPERATION_ABORTED));\n    // Silence uncaught rejection errors, which may otherwise occur any place\n    // we don't explicitly handle aborted operations.\n    p.catch(() => {});\n    return new shaka.util.AbortableOperation(p, () => Promise.resolve());\n  }\n\n  /**\n   * @param {U} value\n   * @return {!shaka.util.AbortableOperation.<U>} An operation which has already\n   *   completed with the given value.\n   * @template U\n   * @export\n   */\n  static completed(value) {\n    return new shaka.util.AbortableOperation(\n        Promise.resolve(value),\n        () => Promise.resolve());\n  }\n\n  /**\n   * @param {!Promise.<U>} promise\n   * @return {!shaka.util.AbortableOperation.<U>} An operation which cannot be\n   *   aborted.  It will be completed when the given Promise is resolved, or\n   *   will be failed when the given Promise is rejected.\n   * @template U\n   * @export\n   */\n  static notAbortable(promise) {\n    return new shaka.util.AbortableOperation(\n        promise,\n        // abort() here will return a Promise which is resolved when the input\n        // promise either resolves or fails.\n        () => promise.catch(() => {}));\n  }\n\n  /**\n   * @override\n   * @export\n   */\n  abort() {\n    this.aborted_ = true;\n    return this.onAbort_();\n  }\n\n  /**\n   * @param {!Array.<!shaka.util.AbortableOperation>} operations\n   * @return {!shaka.util.AbortableOperation} An operation which is resolved\n   *   when all operations are successful and fails when any operation fails.\n   *   For this operation, abort() aborts all given operations.\n   * @export\n   */\n  static all(operations) {\n    return new shaka.util.AbortableOperation(\n        Promise.all(operations.map((op) => op.promise)),\n        () => Promise.all(operations.map((op) => op.abort())));\n  }\n\n  /**\n   * @override\n   * @export\n   */\n  finally(onFinal) {\n    this.promise.then((value) => onFinal(true), (e) => onFinal(false));\n    return this;\n  }\n\n  /**\n   * @param {(undefined|\n   *          function(T):U|\n   *          function(T):!Promise.<U>|\n   *          function(T):!shaka.util.AbortableOperation.<U>)} onSuccess\n   *   A callback to be invoked after this operation is complete, to chain to\n   *   another operation.  The callback can return a plain value, a Promise to\n   *   an asynchronous value, or another AbortableOperation.\n   * @param {function(*)=} onError\n   *   An optional callback to be invoked if this operation fails, to perform\n   *   some cleanup or error handling.  Analogous to the second parameter of\n   *   Promise.prototype.then.\n   * @return {!shaka.util.AbortableOperation.<U>} An operation which is resolved\n   *   when this operation and the operation started by the callback are both\n   *   complete.\n   * @template U\n   * @export\n   */\n  chain(onSuccess, onError) {\n    let newPromise = new shaka.util.PublicPromise();\n\n    // If called before \"this\" completes, just abort \"this\".\n    let abort = () => {\n      newPromise.reject(new shaka.util.Error(\n          shaka.util.Error.Severity.CRITICAL,\n          shaka.util.Error.Category.PLAYER,\n          shaka.util.Error.Code.OPERATION_ABORTED));\n      return this.abort();\n    };\n\n    this.promise.then((value) => {\n      if (this.aborted_) {\n        // If \"this\" is not abortable(), or if abort() is called after \"this\"\n        // is complete but before the next stage in the chain begins, we should\n        // stop right away.\n        newPromise.reject(new shaka.util.Error(\n            shaka.util.Error.Severity.CRITICAL,\n            shaka.util.Error.Category.PLAYER,\n            shaka.util.Error.Code.OPERATION_ABORTED));\n        return;\n      }\n\n      if (!onSuccess) {\n        // No callback?  Pass the success along.\n        newPromise.resolve(value);\n        return;\n      }\n\n      // Call the success callback, interpret the return value,\n      // set the Promise state, and get the next abort function.\n      abort = shaka.util.AbortableOperation.wrapChainCallback_(\n          onSuccess, value, newPromise);\n    }, (e) => {\n      // \"This\" failed or was aborted.\n\n      if (!onError) {\n        // No callback?  Pass the failure along.\n        newPromise.reject(e);\n        return;\n      }\n\n      // Call the error callback, interpret the return value,\n      // set the Promise state, and get the next abort function.\n      abort = shaka.util.AbortableOperation.wrapChainCallback_(\n          onError, e, newPromise);\n    });\n\n    return new shaka.util.AbortableOperation(\n        newPromise,\n        // By creating a closure around abort(), we can update the value of\n        // abort() at various stages.\n        () => abort());\n  }\n\n  /**\n   * @param {(function(T):U|\n   *          function(T):!Promise.<U>|\n   *          function(T):!shaka.util.AbortableOperation.<U>|\n   *          function(*))} callback\n   *   A callback to be invoked with the given value.\n   * @param {T} value\n   * @param {!shaka.util.PublicPromise} newPromise The promise for the next\n   *   stage in the chain.\n   * @return {function():!Promise} The next abort() function for the chain.\n   * @private\n   * @template T, U\n   */\n  static wrapChainCallback_(callback, value, newPromise) {\n    try {\n      let ret = callback(value);\n\n      if (ret && ret.promise && ret.abort) {\n        // This is an abortable operation, with its own abort() method.\n        // After this point, abort() should abort the operation from the\n        // callback, and the new promise should be tied to the promise\n        // from the callback's operation.\n        newPromise.resolve(ret.promise);\n        // This used to say \"return ret.abort;\", but it caused subtle issues by\n        // unbinding part of the abort chain.  There is now a test to ensure\n        // that we don't call abort with the wrong \"this\".\n        return () => ret.abort();\n      } else {\n        // This is a Promise or a plain value, and this step cannot be aborted.\n        newPromise.resolve(ret);\n        // Abort is complete when the returned value/Promise is resolved or\n        // fails, but never fails itself nor returns a value.\n        return () => Promise.resolve(ret).then(() => {}).catch(() => {});\n      }\n    } catch (exception) {\n      // The callback threw an exception or error.  Reject the new Promise and\n      // resolve any future abort call right away.\n      newPromise.reject(exception);\n      return () => Promise.resolve();\n    }\n  }\n};\n\n/**\n * @const {!Promise.<T>}\n * @exportInterface\n */\nshaka.util.AbortableOperation.prototype.promise;\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.util.ArrayUtils');\n\n\n/**\n * @namespace shaka.util.ArrayUtils\n * @summary Array utility functions.\n */\n\n\n/**\n * Remove duplicate entries from an array.  Order N^2, so use with caution.\n * @param {!Array.<T>} array\n * @param {function(T, T): boolean=} compareFn An optional function which\n *   will be used to compare items in the array.\n * @return {!Array.<T>}\n * @template T\n */\nshaka.util.ArrayUtils.removeDuplicates = function(array, compareFn) {\n  let result = [];\n  for (let i = 0; i < array.length; ++i) {\n    let matchFound = false;\n    for (let j = 0; j < result.length; ++j) {\n      matchFound = compareFn ? compareFn(array[i], result[j]) :\n                               array[i] === result[j];\n      if (matchFound) break;\n    }\n    if (!matchFound) {\n      result.push(array[i]);\n    }\n  }\n  return result;\n};\n\n\n/**\n * Find an item in an array.  For use when comparison of entries via == will\n * not suffice.\n * @param {!Array.<T>} array\n * @param {T} value\n * @param {function(T, T): boolean} compareFn A function which will be used to\n *   compare items in the array.\n * @return {number} The index, or -1 if not found.\n * @template T\n */\nshaka.util.ArrayUtils.indexOf = function(array, value, compareFn) {\n  for (let i = 0; i < array.length; ++i) {\n    if (compareFn(array[i], value)) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n\n/**\n * Remove given element from array (assumes no duplicates).\n * @param {!Array.<T>} array\n * @param {T} element\n * @template T\n */\nshaka.util.ArrayUtils.remove = function(array, element) {\n  let index = array.indexOf(element);\n  if (index > -1) {\n    array.splice(index, 1);\n  }\n};\n\n\n/**\n * Count the number of items in the list that pass the check function.\n * @param {!Array.<T>} array\n * @param {function(T):boolean} check\n * @return {number}\n * @template T\n */\nshaka.util.ArrayUtils.count = function(array, check) {\n  let count = 0;\n\n  array.forEach(function(element) {\n    count += check(element) ? 1 : 0;\n  });\n\n  return count;\n};\n\n\n/**\n * Create a copy of another array.\n *\n * @param {!Array.<T>} array\n * @return {!Array.<T>}\n * @template T\n */\nshaka.util.ArrayUtils.copy = function(array) {\n  return array.map((x) => x);\n};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.util.FakeEvent');\n\n\n/**\n * Create an Event work-alike object based on the provided dictionary.\n * The event should contain all of the same properties from the dict.\n *\n * @param {string} type\n * @param {Object=} dict\n * @constructor\n * @extends {Event}\n */\nshaka.util.FakeEvent = function(type, dict = {}) {\n  // Take properties from dict if present.\n  for (let key in dict) {\n    this[key] = dict[key];\n  }\n\n\n  // The properties below cannot be set by the dict.  They are all provided for\n  // compatibility with native events.\n\n  /** @const {boolean} */\n  this.bubbles = false;\n\n  /** @type {boolean} */\n  this.cancelable = false;\n\n  /** @type {boolean} */\n  this.defaultPrevented = false;\n\n  /**\n   * According to MDN, Chrome uses high-res timers instead of epoch time.\n   * Follow suit so that timeStamps on FakeEvents use the same base as\n   * on native Events.\n   * @const {number}\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/Event/timeStamp\n   */\n  this.timeStamp = window.performance && window.performance.now ?\n      window.performance.now() : Date.now();\n\n  /** @const {string} */\n  this.type = type;\n\n  /** @const {boolean} */\n  this.isTrusted = false;\n\n  /** @type {EventTarget} */\n  this.currentTarget = null;\n\n  /** @type {EventTarget} */\n  this.target = null;\n\n\n  /**\n   * Non-standard property read by FakeEventTarget to stop processing listeners.\n   * @type {boolean}\n   */\n  this.stopped = false;\n};\n\n\n/**\n * Prevents the default action of the event.  Has no effect if the event isn't\n * cancellable.\n * @override\n */\nshaka.util.FakeEvent.prototype.preventDefault = function() {\n  if (this.cancelable) {\n    this.defaultPrevented = true;\n  }\n};\n\n\n/**\n * Stops processing event listeners for this event.  Provided for compatibility\n * with native Events.\n * @override\n */\nshaka.util.FakeEvent.prototype.stopImmediatePropagation = function() {\n  this.stopped = true;\n};\n\n\n/**\n * Does nothing, since FakeEvents do not bubble.  Provided for compatibility\n * with native Events.\n * @override\n */\nshaka.util.FakeEvent.prototype.stopPropagation = function() {};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.util.MultiMap');\n\n\n/**\n * A simple multimap template.\n * @constructor\n * @struct\n * @template T\n */\nshaka.util.MultiMap = function() {\n  /** @private {!Object.<string, !Array.<T>>} */\n  this.map_ = {};\n};\n\n\n/**\n * Add a key, value pair to the map.\n * @param {string} key\n * @param {T} value\n */\nshaka.util.MultiMap.prototype.push = function(key, value) {\n  if (this.map_.hasOwnProperty(key)) {\n    this.map_[key].push(value);\n  } else {\n    this.map_[key] = [value];\n  }\n};\n\n\n/**\n * Get a list of values by key.\n * @param {string} key\n * @return {Array.<T>} or null if no such key exists.\n */\nshaka.util.MultiMap.prototype.get = function(key) {\n  let list = this.map_[key];\n  // slice() clones the list so that it and the map can each be modified\n  // without affecting the other.\n  return list ? list.slice() : null;\n};\n\n\n/**\n * Get a list of all values.\n * @return {!Array.<T>}\n */\nshaka.util.MultiMap.prototype.getAll = function() {\n  let list = [];\n  for (let key in this.map_) {\n    list.push.apply(list, this.map_[key]);\n  }\n  return list;\n};\n\n\n/**\n * Remove a specific value, if it exists.\n * @param {string} key\n * @param {T} value\n */\nshaka.util.MultiMap.prototype.remove = function(key, value) {\n  let list = this.map_[key];\n  if (!list) return;\n  for (let i = 0; i < list.length; ++i) {\n    if (list[i] == value) {\n      list.splice(i, 1);\n      --i;\n    }\n  }\n};\n\n\n/**\n * Clear all keys and values from the multimap.\n */\nshaka.util.MultiMap.prototype.clear = function() {\n  this.map_ = {};\n};\n\n\n/**\n * @param {function(string, !Array.<T>)} callback\n */\nshaka.util.MultiMap.prototype.forEach = function(callback) {\n  for (let key in this.map_) {\n    callback(key, this.map_[key]);\n  }\n};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.util.FakeEventTarget');\n\ngoog.require('goog.asserts');\ngoog.require('shaka.log');\ngoog.require('shaka.util.FakeEvent');\ngoog.require('shaka.util.MultiMap');\n\n\n/**\n * A work-alike for EventTarget.  Only DOM elements may be true EventTargets,\n * but this can be used as a base class to provide event dispatch to non-DOM\n * classes.  Only FakeEvents should be dispatched.\n *\n * @struct\n * @constructor\n * @implements {EventTarget}\n * @exportInterface\n */\nshaka.util.FakeEventTarget = function() {\n  /**\n   * @private {!shaka.util.MultiMap.<shaka.util.FakeEventTarget.ListenerType>}\n   */\n  this.listeners_ = new shaka.util.MultiMap();\n\n  /**\n   * The target of all dispatched events.  Defaults to |this|.\n   * @type {EventTarget}\n   */\n  this.dispatchTarget = this;\n};\n\n\n/**\n * These are the listener types defined in the closure extern for EventTarget.\n * @typedef {EventListener|function(!Event):(boolean|undefined)}\n * @exportInterface\n */\nshaka.util.FakeEventTarget.ListenerType;\n\n\n/**\n * Add an event listener to this object.\n *\n * @param {string} type The event type to listen for.\n * @param {shaka.util.FakeEventTarget.ListenerType} listener The callback or\n *   listener object to invoke.\n * @param {(!AddEventListenerOptions|boolean)=} options Ignored.\n * @override\n * @exportInterface\n */\nshaka.util.FakeEventTarget.prototype.addEventListener =\n    function(type, listener, options) {\n  this.listeners_.push(type, listener);\n};\n\n\n/**\n * Remove an event listener from this object.\n *\n * @param {string} type The event type for which you wish to remove a listener.\n * @param {shaka.util.FakeEventTarget.ListenerType} listener The callback or\n *   listener object to remove.\n * @param {(EventListenerOptions|boolean)=} options Ignored.\n * @override\n * @exportInterface\n */\nshaka.util.FakeEventTarget.prototype.removeEventListener =\n    function(type, listener, options) {\n  this.listeners_.remove(type, listener);\n};\n\n\n/**\n * Dispatch an event from this object.\n *\n * @param {!Event} event The event to be dispatched from this object.\n * @return {boolean} True if the default action was prevented.\n * @override\n * @exportInterface\n */\nshaka.util.FakeEventTarget.prototype.dispatchEvent = function(event) {\n  // In many browsers, it is complex to overwrite properties of actual Events.\n  // Here we expect only to dispatch FakeEvents, which are simpler.\n  goog.asserts.assert(event instanceof shaka.util.FakeEvent,\n                      'FakeEventTarget can only dispatch FakeEvents!');\n\n  const listeners = this.listeners_.get(event.type) || [];\n\n  // Execute this event on listeners until the event has been stopped or we\n  // run out of listeners.\n  for (let i = 0; i < listeners.length; ++i) {\n    // Do this every time, since events can be re-dispatched from handlers.\n    event.target = this.dispatchTarget;\n    event.currentTarget = this.dispatchTarget;\n\n    let listener = listeners[i];\n    try {\n      // Check for the |handleEvent| member to test if this is a\n      // |EventListener| instance or a basic function.\n      if (listener.handleEvent) {\n        listener.handleEvent(event);\n      } else {\n        listener.call(this, event);\n      }\n    } catch (exception) {\n      // Exceptions during event handlers should not affect the caller,\n      // but should appear on the console as uncaught, according to MDN:\n      // https://mzl.la/2JXgwRo\n      shaka.log.error('Uncaught exception in event handler', exception,\n          exception ? exception.message : null,\n          exception ? exception.stack : null);\n    }\n\n    if (event.stopped) {\n      break;\n    }\n  }\n\n  return event.defaultPrevented;\n};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.util.IDestroyable');\n\n\n/**\n * An interface to standardize how objects are destroyed.\n *\n * @interface\n * @exportInterface\n */\nshaka.util.IDestroyable = class {\n  /**\n   * Request that this object be destroyed, releasing all resources and shutting\n   * down all operations. Returns a Promise which is resolved when destruction\n   * is complete. This Promise should never be rejected.\n   *\n   * @return {!Promise}\n   * @exportInterface\n   */\n  destroy() {}\n};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.util.ObjectUtils');\n\n\nshaka.util.ObjectUtils = class {\n /**\n  * Performs a deep clone of the given simple object.  This does not copy\n  * prototypes, custom properties (e.g. read-only), or multiple references to\n  * the same object.  If the caller needs these fields, it will need to set them\n  * after this returns.\n  *\n  * @template T\n  * @param {T} arg\n  * @return {T}\n  */\n  static cloneObject(arg) {\n    let seenObjects = [];\n    // This recursively clones the value |val|, using the captured variable\n    // |seenObjects| to track the objects we have already cloned.\n    let clone = function(val) {\n      switch (typeof val) {\n        case 'undefined':\n        case 'boolean':\n        case 'number':\n        case 'string':\n        case 'symbol':\n        case 'function':\n          return val;\n        case 'object':\n        default: {\n          // typeof null === 'object'\n          if (!val) return val;\n\n          if (seenObjects.indexOf(val) >= 0) {\n            return null;\n          }\n          let isArray = val.constructor == Array;\n          if (val.constructor != Object && !isArray) {\n            return null;\n          }\n\n          seenObjects.push(val);\n          let ret = isArray ? [] : {};\n          // Note |name| will equal a number for arrays.\n          for (let name in val) {\n            ret[name] = clone(val[name]);\n          }\n\n          // Length is a non-enumerable property, but we should copy it over in\n          // case it is not the default.\n          if (isArray) {\n            ret.length = val.length;\n          }\n          return ret;\n        }\n      }\n    };\n    return clone(arg);\n  }\n};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.util.OperationManager');\n\ngoog.require('shaka.util.ArrayUtils');\ngoog.require('shaka.util.IDestroyable');\n\n/**\n * A utility for cleaning up AbortableOperations, to help simplify common\n * patterns and reduce code duplication.\n *\n * @implements {shaka.util.IDestroyable}\n */\nshaka.util.OperationManager = class {\n  constructor() {\n    /** @private {!Array.<!shaka.extern.IAbortableOperation>} */\n    this.operations_ = [];\n  }\n\n  /**\n   * Manage an operation.  This means aborting it on destroy() and removing it\n   * from the management set when it complete.\n   *\n   * @param {!shaka.extern.IAbortableOperation} operation\n   */\n  manage(operation) {\n    this.operations_.push(operation.finally(() => {\n      shaka.util.ArrayUtils.remove(this.operations_, operation);\n    }));\n  }\n\n  /** @override */\n  destroy() {\n    let cleanup = [];\n    this.operations_.forEach((op) => {\n      // Catch and ignore any failures.  This silences error logs in the\n      // JavaScript console about uncaught Promise failures.\n      op.promise.catch(() => {});\n\n      // Now abort the operation.\n      cleanup.push(op.abort());\n    });\n\n    this.operations_ = [];\n    return Promise.all(cleanup);\n  }\n};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.net.NetworkingEngine');\n\ngoog.require('goog.Uri');\ngoog.require('goog.asserts');\ngoog.require('shaka.log');\ngoog.require('shaka.net.Backoff');\ngoog.require('shaka.util.AbortableOperation');\ngoog.require('shaka.util.ArrayUtils');\ngoog.require('shaka.util.Error');\ngoog.require('shaka.util.FakeEvent');\ngoog.require('shaka.util.FakeEventTarget');\ngoog.require('shaka.util.IDestroyable');\ngoog.require('shaka.util.ObjectUtils');\ngoog.require('shaka.util.OperationManager');\n\n\n/**\n * @event shaka.net.NetworkingEngine.RetryEvent\n * @description Fired when the networking engine receives a recoverable error\n *   and retries.\n * @property {string} type\n *   'retry'\n * @property {?shaka.util.Error} error\n *   The error that caused the retry. If it was a non-Shaka error, this is set\n *   to null.\n * @exportDoc\n */\n\n\n/**\n * NetworkingEngine wraps all networking operations.  This accepts plugins that\n * handle the actual request.  A plugin is registered using registerScheme.\n * Each scheme has at most one plugin to handle the request.\n *\n * @param {function(number, number)=} onSegmentDownloaded Called\n *   when a segment is downloaded. Passed the duration, in milliseconds, that\n *   the request took, and the total number of bytes transferred.\n *\n * @struct\n * @constructor\n * @implements {shaka.util.IDestroyable}\n * @extends {shaka.util.FakeEventTarget}\n * @export\n */\nshaka.net.NetworkingEngine = function(onSegmentDownloaded) {\n  shaka.util.FakeEventTarget.call(this);\n\n  /** @private {boolean} */\n  this.destroyed_ = false;\n\n  /** @private {!shaka.util.OperationManager} */\n  this.operationManager_ = new shaka.util.OperationManager();\n\n  /** @private {!Array.<shaka.extern.RequestFilter>} */\n  this.requestFilters_ = [];\n\n  /** @private {!Array.<shaka.extern.ResponseFilter>} */\n  this.responseFilters_ = [];\n\n  /** @private {?function(number, number)} */\n  this.onSegmentDownloaded_ = onSegmentDownloaded || null;\n};\n\ngoog.inherits(shaka.net.NetworkingEngine, shaka.util.FakeEventTarget);\n\n\n/**\n * Request types.  Allows a filter to decide which requests to read/alter.\n *\n * @enum {number}\n * @export\n */\nshaka.net.NetworkingEngine.RequestType = {\n  'MANIFEST': 0,\n  'SEGMENT': 1,\n  'LICENSE': 2,\n  'APP': 3,\n  'TIMING': 4,\n};\n\n\n/**\n * Priority level for network scheme plugins.\n * If multiple plugins are provided for the same scheme, only the\n * highest-priority one is used.\n *\n * @enum {number}\n * @export\n */\nshaka.net.NetworkingEngine.PluginPriority = {\n  'FALLBACK': 1,\n  'PREFERRED': 2,\n  'APPLICATION': 3,\n};\n\n\n/**\n * @typedef {{\n *   plugin: shaka.extern.SchemePlugin,\n *   priority: number\n * }}\n * @property {shaka.extern.SchemePlugin} plugin\n *   The associated plugin.\n * @property {number} priority\n *   The plugin's priority.\n */\nshaka.net.NetworkingEngine.SchemeObject;\n\n\n/**\n * Contains the scheme plugins.\n *\n * @private {!Object.<string, shaka.net.NetworkingEngine.SchemeObject>}\n */\nshaka.net.NetworkingEngine.schemes_ = {};\n\n\n/**\n * Registers a scheme plugin.  This plugin will handle all requests with the\n * given scheme.  If a plugin with the same scheme already exists, it is\n * replaced, unless the existing plugin is of higher priority.\n * If no priority is provided, this defaults to the highest priority of\n * APPLICATION.\n *\n * @param {string} scheme\n * @param {shaka.extern.SchemePlugin} plugin\n * @param {number=} priority\n * @export\n */\nshaka.net.NetworkingEngine.registerScheme =\n    function(scheme, plugin, priority) {\n  goog.asserts.assert(priority == undefined || priority > 0,\n      'explicit priority must be > 0');\n  priority =\n      priority || shaka.net.NetworkingEngine.PluginPriority.APPLICATION;\n  let existing = shaka.net.NetworkingEngine.schemes_[scheme];\n  if (!existing || priority >= existing.priority) {\n    shaka.net.NetworkingEngine.schemes_[scheme] = {\n      priority: priority,\n      plugin: plugin,\n    };\n  }\n};\n\n\n/**\n * Removes a scheme plugin.\n *\n * @param {string} scheme\n * @export\n */\nshaka.net.NetworkingEngine.unregisterScheme = function(scheme) {\n  delete shaka.net.NetworkingEngine.schemes_[scheme];\n};\n\n\n/**\n * Registers a new request filter.  All filters are applied in the order they\n * are registered.\n *\n * @param {shaka.extern.RequestFilter} filter\n * @export\n */\nshaka.net.NetworkingEngine.prototype.registerRequestFilter = function(filter) {\n  this.requestFilters_.push(filter);\n};\n\n\n/**\n * Removes a request filter.\n *\n * @param {shaka.extern.RequestFilter} filter\n * @export\n */\nshaka.net.NetworkingEngine.prototype.unregisterRequestFilter =\n  function(filter) {\n    shaka.util.ArrayUtils.remove(this.requestFilters_, filter);\n  };\n\n\n/**\n * Clears all request filters.\n *\n * @export\n */\nshaka.net.NetworkingEngine.prototype.clearAllRequestFilters = function() {\n  this.requestFilters_ = [];\n};\n\n\n/**\n * Registers a new response filter.  All filters are applied in the order they\n * are registered.\n *\n * @param {shaka.extern.ResponseFilter} filter\n * @export\n */\nshaka.net.NetworkingEngine.prototype.registerResponseFilter = function(filter) {\n  this.responseFilters_.push(filter);\n};\n\n\n/**\n * Removes a response filter.\n *\n * @param {shaka.extern.ResponseFilter} filter\n * @export\n */\nshaka.net.NetworkingEngine.prototype.unregisterResponseFilter =\n  function(filter) {\n    shaka.util.ArrayUtils.remove(this.responseFilters_, filter);\n  };\n\n\n/**\n * Clears all response filters.\n *\n * @export\n */\nshaka.net.NetworkingEngine.prototype.clearAllResponseFilters = function() {\n  this.responseFilters_ = [];\n};\n\n\n/**\n * Gets a copy of the default retry parameters.\n *\n * @return {shaka.extern.RetryParameters}\n *\n * NOTE: The implementation moved to shaka.net.Backoff to avoid a circular\n * dependency between the two classes.\n */\nshaka.net.NetworkingEngine.defaultRetryParameters =\n  shaka.net.Backoff.defaultRetryParameters;\n\n\n/**\n * Makes a simple network request for the given URIs.\n *\n * @param {!Array.<string>} uris\n * @param {shaka.extern.RetryParameters} retryParams\n * @return {shaka.extern.Request}\n */\nshaka.net.NetworkingEngine.makeRequest = function(\n  uris, retryParams) {\n  return {\n    uris: uris,\n    method: 'GET',\n    body: null,\n    headers: {},\n    allowCrossSiteCredentials: false,\n    retryParameters: retryParams,\n  };\n};\n\n\n/**\n * @override\n * @export\n */\nshaka.net.NetworkingEngine.prototype.destroy = function() {\n  this.destroyed_ = true;\n  this.requestFilters_ = [];\n  this.responseFilters_ = [];\n  return this.operationManager_.destroy();\n};\n\n\n/**\n * Shims return values from requests to look like Promises, so that callers have\n * time to update to the new operation-based API.\n *\n * @param {!shaka.extern.IAbortableOperation.<shaka.extern.Response>} operation\n * @return {!shaka.extern.IAbortableOperation.<shaka.extern.Response>}\n * @private\n */\nshaka.net.NetworkingEngine.shimRequests_ = function(operation) {\n  // TODO: remove in v2.5\n  operation.then = (onSuccess, onError) =>\n    operation.promise.then(onSuccess, onError);\n  operation.catch = (onError) => operation.promise.catch(onError);\n  return operation;\n};\n\n\n/**\n * Makes a network request and returns the resulting data.\n *\n * @param {shaka.net.NetworkingEngine.RequestType} type\n * @param {shaka.extern.Request} request\n * @return {!shaka.extern.IAbortableOperation.<shaka.extern.Response>}\n * @export\n */\nshaka.net.NetworkingEngine.prototype.request = function(type, request) {\n  let cloneObject = shaka.util.ObjectUtils.cloneObject;\n\n  // Reject all requests made after destroy is called.\n  if (this.destroyed_) {\n    return shaka.net.NetworkingEngine.shimRequests_(\n      shaka.util.AbortableOperation.aborted());\n  }\n\n  goog.asserts.assert(request.uris && request.uris.length,\n    'Request without URIs!');\n\n  // If a request comes from outside the library, some parameters may be left\n  // undefined.  To make it easier for application developers, we will fill them\n  // in with defaults if necessary.\n  //\n  // We clone retryParameters and uris so that if a filter modifies the request,\n  // it doesn't contaminate future requests.\n  request.method = request.method || 'GET';\n  request.headers = request.headers || {};\n  request.retryParameters = request.retryParameters ?\n    cloneObject(request.retryParameters) :\n    shaka.net.NetworkingEngine.defaultRetryParameters();\n  request.uris = cloneObject(request.uris);\n\n  let requestFilterOperation = this.filterRequest_(type, request);\n  let requestOperation = requestFilterOperation.chain(\n    () => this.makeRequestWithRetry_(type, request));\n  let responseFilterOperation = requestOperation.chain(\n    (response) => this.filterResponse_(type, response));\n\n  // Keep track of time spent in filters.\n  let requestFilterStartTime = Date.now();\n  let requestFilterMs = 0;\n  requestFilterOperation.promise.then(() => {\n    requestFilterMs = Date.now() - requestFilterStartTime;\n  }, () => { });  // Silence errors in this fork of the Promise chain.\n\n  let responseFilterStartTime = 0;\n  requestOperation.promise.then(() => {\n    responseFilterStartTime = Date.now();\n  }, () => { });  // Silence errors in this fork of the Promise chain.\n\n  let operation = responseFilterOperation.chain((response) => {\n    let responseFilterMs = Date.now() - responseFilterStartTime;\n\n    response.timeMs += requestFilterMs;\n    response.timeMs += responseFilterMs;\n\n    if (this.onSegmentDownloaded_ && !response.fromCache &&\n      type == shaka.net.NetworkingEngine.RequestType.SEGMENT) {\n      this.onSegmentDownloaded_(response.timeMs, response.data.byteLength);\n    }\n\n    return response;\n  }, (e) => {\n    // Any error thrown from elsewhere should be recategorized as CRITICAL here.\n    // This is because by the time it gets here, we've exhausted retries.\n    if (e) {\n      goog.asserts.assert(e instanceof shaka.util.Error, 'Wrong error type');\n      e.severity = shaka.util.Error.Severity.CRITICAL;\n    }\n\n    throw e;\n  });\n\n  // Add the operation to the manager for later cleanup.\n  this.operationManager_.manage(operation);\n  return shaka.net.NetworkingEngine.shimRequests_(operation);\n};\n\n\n/**\n * @param {shaka.net.NetworkingEngine.RequestType} type\n * @param {shaka.extern.Request} request\n * @return {!shaka.extern.IAbortableOperation.<undefined>}\n * @private\n */\nshaka.net.NetworkingEngine.prototype.filterRequest_ = function(type, request) {\n  let filterOperation = shaka.util.AbortableOperation.completed(undefined);\n\n  this.requestFilters_.forEach((requestFilter) => {\n    // Request filters are run sequentially.\n    filterOperation =\n      filterOperation.chain(() => requestFilter(type, request));\n  });\n\n  // Catch any errors thrown by request filters, and substitute\n  // them with a Shaka-native error.\n  return filterOperation.chain(undefined, (e) => {\n    if (e && e.code == shaka.util.Error.Code.OPERATION_ABORTED) {\n      // Don't change anything if the operation was aborted.\n      throw e;\n    }\n\n    throw new shaka.util.Error(\n      shaka.util.Error.Severity.CRITICAL,\n      shaka.util.Error.Category.NETWORK,\n      shaka.util.Error.Code.REQUEST_FILTER_ERROR, e);\n  });\n};\n\n\n/**\n * @param {shaka.net.NetworkingEngine.RequestType} type\n * @param {shaka.extern.Request} request\n * @return {!shaka.extern.IAbortableOperation.<shaka.extern.Response>}\n * @private\n */\nshaka.net.NetworkingEngine.prototype.makeRequestWithRetry_ =\n  function(type, request) {\n    let backoff = new shaka.net.Backoff(\n      request.retryParameters, /* autoReset */ false);\n    let index = 0;\n    return this.send_(type, request, backoff, index, /* lastError */ null);\n  };\n\n\n/**\n * Sends the given request to the correct plugin and retry using Backoff.\n *\n * @param {shaka.net.NetworkingEngine.RequestType} type\n * @param {shaka.extern.Request} request\n * @param {!shaka.net.Backoff} backoff\n * @param {number} index\n * @param {?shaka.util.Error} lastError\n * @return {!shaka.extern.IAbortableOperation.<shaka.extern.Response>}\n * @private\n */\nshaka.net.NetworkingEngine.prototype.send_ = function(\n  type, request, backoff, index, lastError) {\n  let uri = new goog.Uri(request.uris[index]);\n  let scheme = uri.getScheme();\n\n  if (!scheme) {\n    // If there is no scheme, infer one from the location.\n    scheme = shaka.net.NetworkingEngine.getLocationProtocol_();\n    goog.asserts.assert(scheme[scheme.length - 1] == ':',\n      'location.protocol expected to end with a colon!');\n    // Drop the colon.\n    scheme = scheme.slice(0, -1);\n\n    // Override the original URI to make the scheme explicit.\n    uri.setScheme(scheme);\n    request.uris[index] = uri.toString();\n  }\n\n  let object = shaka.net.NetworkingEngine.schemes_[scheme];\n  let plugin = object ? object.plugin : null;\n  if (!plugin) {\n    return shaka.util.AbortableOperation.failed(\n      new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.NETWORK,\n        shaka.util.Error.Code.UNSUPPORTED_SCHEME,\n        uri));\n  }\n\n\n  // Every attempt must have an associated backoff.attempt() call so that the\n  // accounting is correct.\n  let backoffOperation =\n    shaka.util.AbortableOperation.notAbortable(backoff.attempt());\n\n  let startTimeMs;\n  let sendOperation = backoffOperation.chain(() => {\n    if (this.destroyed_) {\n      return shaka.util.AbortableOperation.aborted();\n    }\n\n    startTimeMs = Date.now();\n    let operation = plugin(request.uris[index], request, type);\n\n    // Backward compatibility with older scheme plugins.\n    // TODO: remove in v2.5\n    if (operation.promise == undefined) {\n      shaka.log.alwaysWarn('The scheme plugin interface has changed!  Please ' +\n        'update your scheme plugins to the new interface ' +\n        'to add support for abort().  Support for the old ' +\n        'plugin interface will be removed in v2.5.');\n\n      // The return was just a promise, so wrap it into an operation.\n      let schemePromise = /** @type {!Promise} */(operation);\n      operation = shaka.util.AbortableOperation.notAbortable(schemePromise);\n    }\n    return operation;\n  }).chain((response) => {\n    if (response.timeMs == undefined) {\n      response.timeMs = Date.now() - startTimeMs;\n    }\n    return response;\n  }, (error) => {\n    if (error && error.code == shaka.util.Error.Code.OPERATION_ABORTED) {\n      // Don't change anything if the operation was aborted.\n      throw error;\n    }\n\n    if (this.destroyed_) {\n      return shaka.util.AbortableOperation.aborted();\n    }\n\n    if (error && error.severity == shaka.util.Error.Severity.RECOVERABLE) {\n      // Don't pass in a non-shaka error, even if one is somehow thrown;\n      // instead, call the listener with a null error.\n      const errorOrNull = error instanceof shaka.util.Error ? error : null;\n      let event = new shaka.util.FakeEvent('retry', {'error': errorOrNull});\n      this.dispatchEvent(event);\n\n      // Move to the next URI.\n      index = (index + 1) % request.uris.length;\n      let shakaError = /** @type {shaka.util.Error} */(error);\n      return this.send_(type, request, backoff, index, shakaError);\n    }\n\n    // The error was not recoverable, so do not try again.\n    // Rethrow the error so the Promise chain stays rejected.\n    throw error || lastError;\n  });\n\n  return sendOperation;\n};\n\n\n/**\n * @param {shaka.net.NetworkingEngine.RequestType} type\n * @param {shaka.extern.Response} response\n * @return {!shaka.extern.IAbortableOperation.<shaka.extern.Response>}\n * @private\n */\nshaka.net.NetworkingEngine.prototype.filterResponse_ =\n  function(type, response) {\n    let filterOperation = shaka.util.AbortableOperation.completed(undefined);\n\n    this.responseFilters_.forEach((responseFilter) => {\n      // Response filters are run sequentially.\n      filterOperation =\n        filterOperation.chain(() => responseFilter(type, response));\n    });\n\n    return filterOperation.chain(() => {\n      // If successful, return the filtered response.\n      return response;\n    }, (e) => {\n      // Catch any errors thrown by request filters, and substitute\n      // them with a Shaka-native error.\n\n      if (e && e.code == shaka.util.Error.Code.OPERATION_ABORTED) {\n        // Don't change anything if the operation was aborted.\n        throw e;\n      }\n\n      // The error is assumed to be critical if the original wasn't a Shaka error.\n      let severity = shaka.util.Error.Severity.CRITICAL;\n      if (e instanceof shaka.util.Error) {\n        severity = e.severity;\n      }\n\n      throw new shaka.util.Error(\n        severity,\n        shaka.util.Error.Category.NETWORK,\n        shaka.util.Error.Code.RESPONSE_FILTER_ERROR, e);\n    });\n  };\n\n\n/**\n * This is here only for testability.  We can't mock location in our tests on\n * all browsers, so instead we mock this.\n *\n * @return {string} The value of location.protocol.\n * @private\n */\nshaka.net.NetworkingEngine.getLocationProtocol_ = function() {\n  return location.protocol;\n};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.util.EventManager');\n\ngoog.require('goog.asserts');\ngoog.require('shaka.util.IDestroyable');\ngoog.require('shaka.util.MultiMap');\n\n\n/**\n * Creates a new EventManager. An EventManager maintains a collection of \"event\n * bindings\" between event targets and event listeners.\n *\n * @struct\n * @constructor\n * @implements {shaka.util.IDestroyable}\n */\nshaka.util.EventManager = function() {\n  /**\n   * Maps an event type to an array of event bindings.\n   * @private {shaka.util.MultiMap.<!shaka.util.EventManager.Binding_>}\n   */\n  this.bindingMap_ = new shaka.util.MultiMap();\n};\n\n\n/**\n * @typedef {function(!Event)}\n */\nshaka.util.EventManager.ListenerType;\n\n\n/**\n * Detaches all event listeners.\n * @override\n */\nshaka.util.EventManager.prototype.destroy = function() {\n  this.removeAll();\n  this.bindingMap_ = null;\n  return Promise.resolve();\n};\n\n\n/**\n * Attaches an event listener to an event target.\n * @param {EventTarget} target The event target.\n * @param {string} type The event type.\n * @param {shaka.util.EventManager.ListenerType} listener The event listener.\n */\nshaka.util.EventManager.prototype.listen = function(target, type, listener) {\n  if (!this.bindingMap_) return;\n\n  let binding = new shaka.util.EventManager.Binding_(target, type, listener);\n  this.bindingMap_.push(type, binding);\n};\n\n\n/**\n * Attaches an event listener to an event target.  The listener will be removed\n * when the first instance of the event is fired.\n * @param {EventTarget} target The event target.\n * @param {string} type The event type.\n * @param {shaka.util.EventManager.ListenerType} listener The event listener.\n */\nshaka.util.EventManager.prototype.listenOnce =\n    function(target, type, listener) {\n  // Install a shim listener that will stop listening after the first event.\n  this.listen(target, type, function(event) {\n    // Stop listening to this event.\n    this.unlisten(target, type);\n    // Call the original listener.\n    listener(event);\n  }.bind(this));\n};\n\n\n/**\n * Detaches an event listener from an event target.\n * @param {EventTarget} target The event target.\n * @param {string} type The event type.\n */\nshaka.util.EventManager.prototype.unlisten = function(target, type) {\n  if (!this.bindingMap_) return;\n\n  let list = this.bindingMap_.get(type) || [];\n\n  for (let i = 0; i < list.length; ++i) {\n    let binding = list[i];\n\n    if (binding.target == target) {\n      binding.unlisten();\n      this.bindingMap_.remove(type, binding);\n    }\n  }\n};\n\n\n/**\n * Detaches all event listeners from all targets.\n */\nshaka.util.EventManager.prototype.removeAll = function() {\n  if (!this.bindingMap_) return;\n\n  let list = this.bindingMap_.getAll();\n\n  for (let i = 0; i < list.length; ++i) {\n    list[i].unlisten();\n  }\n\n  this.bindingMap_.clear();\n};\n\n\n/**\n * Creates a new Binding_ and attaches the event listener to the event target.\n * @param {EventTarget} target The event target.\n * @param {string} type The event type.\n * @param {shaka.util.EventManager.ListenerType} listener The event listener.\n * @constructor\n * @private\n */\nshaka.util.EventManager.Binding_ = function(target, type, listener) {\n  /** @type {EventTarget} */\n  this.target = target;\n\n  /** @type {string} */\n  this.type = type;\n\n  /** @type {?shaka.util.EventManager.ListenerType} */\n  this.listener = listener;\n\n  this.target.addEventListener(type, listener, false);\n};\n\n\n/**\n * Detaches the event listener from the event target. This does nothing if the\n * event listener is already detached.\n */\nshaka.util.EventManager.Binding_.prototype.unlisten = function() {\n  goog.asserts.assert(this.target, 'Missing target');\n  this.target.removeEventListener(this.type, this.listener, false);\n\n  this.target = null;\n  this.listener = null;\n};\n\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.util.Functional');\n\n\n/**\n * @namespace shaka.util.Functional\n * @summary A set of functional utility functions.\n */\n\n\n/**\n * Creates a promise chain that calls the given callback for each element in\n * the array in a catch of a promise.\n *\n * e.g.:\n * Promise.reject().catch(callback(array[0])).catch(callback(array[1]));\n *\n * @param {!Array.<ELEM>} array\n * @param {function(ELEM):!Promise.<RESULT>} callback\n * @return {!Promise.<RESULT>}\n * @template ELEM,RESULT\n */\nshaka.util.Functional.createFallbackPromiseChain = function(array, callback) {\n  return array.reduce(function(callback, promise, elem) {\n    return promise.catch(callback.bind(null, elem));\n  }.bind(null, callback), Promise.reject());\n};\n\n\n/**\n * Returns the first array concatenated to the second; used to collapse an\n * array of arrays into a single array.\n *\n * @param {!Array.<T>} all\n * @param {!Array.<T>} part\n * @return {!Array.<T>}\n * @template T\n */\nshaka.util.Functional.collapseArrays = function(all, part) {\n  return all.concat(part);\n};\n\n\n/**\n * A no-op function.  Useful in promise chains.\n */\nshaka.util.Functional.noop = function() {};\n\n\n/**\n * Returns if the given value is not null; useful for filtering out null values.\n *\n * @param {T} value\n * @return {boolean}\n * @template T\n */\nshaka.util.Functional.isNotNull = function(value) {\n  return value != null;\n};\n\n\n/**\n * Used to filter out duplicates in an array.\n * Returns true the first time the element is encountered. Returns false\n * for all the subsequent encounters.\n *\n * @param {T} item\n * @param {number} position\n * @param {!Array.<T>} self\n * @return {boolean}\n * @template T\n * @example [1, 1, 2].filter(shaka.util.Functional.isNotDuplicate) -> [1, 2]\n */\nshaka.util.Functional.isNotDuplicate = function(item, position, self) {\n  return self.indexOf(item) == position;\n};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.util.ManifestParserUtils');\n\ngoog.require('goog.Uri');\ngoog.require('shaka.util.Functional');\n\n\n/**\n * @namespace shaka.util.ManifestParserUtils\n * @summary Utility functions for manifest parsing.\n */\n\n\n/**\n * Resolves an array of relative URIs to the given base URIs. This will result\n * in M*N number of URIs.\n *\n * @param {!Array.<string>} baseUris\n * @param {!Array.<string>} relativeUris\n * @return {!Array.<string>}\n */\nshaka.util.ManifestParserUtils.resolveUris = function(baseUris, relativeUris) {\n  const Functional = shaka.util.Functional;\n  if (relativeUris.length == 0) {\n    return baseUris;\n  }\n\n  let relativeAsGoog =\n      relativeUris.map(function(uri) { return new goog.Uri(uri); });\n  // Resolve each URI relative to each base URI, creating an Array of Arrays.\n  // Then flatten the Arrays into a single Array.\n  return baseUris.map(function(uri) { return new goog.Uri(uri); })\n    .map(function(base) { return relativeAsGoog.map(base.resolve.bind(base)); })\n    .reduce(Functional.collapseArrays, [])\n    .map(function(uri) { return uri.toString(); });\n};\n\n\n/**\n * Creates a DrmInfo object from the given info.\n *\n * @param {string} keySystem\n * @param {Array.<shaka.extern.InitDataOverride>} initData\n * @return {shaka.extern.DrmInfo}\n */\nshaka.util.ManifestParserUtils.createDrmInfo = function(keySystem, initData) {\n  return {\n    keySystem: keySystem,\n    licenseServerUri: '',\n    distinctiveIdentifierRequired: false,\n    persistentStateRequired: false,\n    audioRobustness: '',\n    videoRobustness: '',\n    serverCertificate: null,\n    initData: initData || [],\n    keyIds: [],\n  };\n};\n\n\n/**\n * @enum {string}\n */\nshaka.util.ManifestParserUtils.ContentType = {\n  VIDEO: 'video',\n  AUDIO: 'audio',\n  TEXT: 'text',\n  APPLICATION: 'application',\n};\n\n\n/**\n * @enum {string}\n */\nshaka.util.ManifestParserUtils.TextStreamKind = {\n  SUBTITLE: 'subtitle',\n  CLOSED_CAPTION: 'caption',\n};\n\n\n/**\n * Specifies how tolerant the player is of inaccurate segment start times and\n * end times within a manifest. For example, gaps or overlaps between segments\n * in a SegmentTimeline which are greater than or equal to this value will\n * result in a warning message.\n *\n * @const {number}\n */\nshaka.util.ManifestParserUtils.GAP_OVERLAP_TOLERANCE_SECONDS = 1 / 15;\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.util.MapUtils');\n\n\n/**\n * @namespace shaka.util.MapUtils\n * @summary A set of map/object utility functions.\n */\n\n\n/**\n * Returns true if the map is empty; otherwise, returns false.\n *\n * @param {Object.<KEY, VALUE>} object\n * @return {boolean}\n * @template KEY,VALUE\n */\nshaka.util.MapUtils.empty = function(object) {\n  return !object || Object.keys(object).length == 0;\n};\n\n\n/**\n * Gets the map's values.\n *\n * @param {!Object.<KEY, VALUE>} object\n * @return {!Array.<VALUE>}\n * @template KEY,VALUE\n */\nshaka.util.MapUtils.values = function(object) {\n  return Object.keys(object).map(function(key) { return object[key]; });\n};\n\n\n/**\n * Converts the values in the given Map to a different value.\n *\n * @param {!Object.<KEY, VALUE>} object\n * @param {function(VALUE, KEY=):OUTPUT} callback\n * @return {!Object.<KEY, OUTPUT>}\n * @template KEY,VALUE,OUTPUT\n */\nshaka.util.MapUtils.map = function(object, callback) {\n  return Object.keys(object).reduce(function(ret, key) {\n    let value = object[key];\n    ret[key] = callback(value, key);\n    return ret;\n  }, {});\n};\n\n\n/**\n * Returns true if every entry matches the predicate.\n *\n * @param {!Object.<KEY, VALUE>} object\n * @param {function(KEY, VALUE):boolean} callback\n * @return {boolean}\n * @template KEY,VALUE\n */\nshaka.util.MapUtils.every = function(object, callback) {\n  return Object.keys(object).every(function(key) {\n    return callback(key, object[key]);\n  });\n};\n\n\n/**\n * Invokes the callback for each entry in the map.\n *\n * @param {!Object.<KEY, VALUE>} object\n * @param {function(KEY, VALUE)} callback\n * @template KEY,VALUE\n */\nshaka.util.MapUtils.forEach = function(object, callback) {\n  Object.keys(object).forEach(function(key) {\n    callback(key, object[key]);\n  });\n};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.util.MimeUtils');\n\n\n/**\n * @namespace shaka.util.MimeUtils\n * @summary A set of utility functions for dealing with MIME types.\n */\n\n\n/**\n * Takes a MIME type and optional codecs string and produces the full MIME type.\n *\n * @param {string} mimeType\n * @param {string=} codecs\n * @return {string}\n */\nshaka.util.MimeUtils.getFullType = function(mimeType, codecs) {\n  let fullMimeType = mimeType;\n  if (codecs) {\n    fullMimeType += '; codecs=\"' + codecs + '\"';\n  }\n  return fullMimeType;\n};\n\n\n/**\n * Takes a Stream object and produces an extended MIME type with information\n * beyond the container and codec type, when available.\n *\n * @param {shaka.extern.Stream} stream\n * @return {string}\n */\nshaka.util.MimeUtils.getExtendedType = function(stream) {\n  let mimeType = stream.mimeType;\n\n  for (let streamKey in shaka.util.MimeUtils.EXTENDED_MIME_PARAMETERS_) {\n    let value = stream[streamKey];\n    let mimeKey = shaka.util.MimeUtils.EXTENDED_MIME_PARAMETERS_[streamKey];\n    if (value) {\n      mimeType += '; ' + mimeKey + '=\"' + value + '\"';\n    }\n  }\n\n  return mimeType;\n};\n\n\n/**\n * A map from Stream object keys to MIME type parameters.  These should be\n * ignored by platforms that do not recognize them.\n *\n * This initial set of parameters are all recognized by Chromecast.\n *\n * @const {!Object.<string, string>}\n * @private\n */\nshaka.util.MimeUtils.EXTENDED_MIME_PARAMETERS_ = {\n  'codecs': 'codecs',\n  'frameRate': 'framerate',  // Ours is camelCase, theirs is lowercase.\n  'bandwidth': 'bitrate',  // Thankfully these are in the same unit, bits/sec.\n  'width': 'width',\n  'height': 'height',\n  'channelsCount': 'channels',\n};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.util.StringUtils');\n\ngoog.require('shaka.log');\ngoog.require('shaka.util.Error');\n\n\n/**\n * @namespace shaka.util.StringUtils\n * @summary A set of string utility functions.\n * @exportDoc\n */\n\n\n/**\n * Creates a string from the given buffer as UTF-8 encoding.\n *\n * @param {?BufferSource} data\n * @return {string}\n * @throws {shaka.util.Error}\n * @export\n */\nshaka.util.StringUtils.fromUTF8 = function(data) {\n  if (!data) return '';\n\n  let uint8 = new Uint8Array(data);\n  // If present, strip off the UTF-8 BOM.\n  if (uint8[0] == 0xef && uint8[1] == 0xbb && uint8[2] == 0xbf) {\n    uint8 = uint8.subarray(3);\n  }\n\n  // http://stackoverflow.com/a/13691499\n  let utf8 = shaka.util.StringUtils.fromCharCode(uint8);\n  // This converts each character in the string to an escape sequence.  If the\n  // character is in the ASCII range, it is not converted; otherwise it is\n  // converted to a URI escape sequence.\n  // Example: '\\x67\\x35\\xe3\\x82\\xac' -> 'g#%E3%82%AC'\n  let escaped = escape(utf8);\n  // Decode the escaped sequence.  This will interpret UTF-8 sequences into the\n  // correct character.\n  // Example: 'g#%E3%82%AC' -> 'g#\u20ac'\n  try {\n    return decodeURIComponent(escaped);\n  } catch (e) {\n    throw new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.TEXT,\n        shaka.util.Error.Code.BAD_ENCODING);\n  }\n};\n\n\n/**\n * Creates a string from the given buffer as UTF-16 encoding.\n *\n * @param {?BufferSource} data\n * @param {boolean} littleEndian true to read little endian, false to read big.\n * @param {boolean=} noThrow true to avoid throwing in cases where we may\n *     expect invalid input.  If noThrow is true and the data has an odd length,\n *     it will be truncated.\n * @return {string}\n * @throws {shaka.util.Error}\n * @export\n */\nshaka.util.StringUtils.fromUTF16 = function(data, littleEndian, noThrow) {\n  if (!data) return '';\n\n  if (!noThrow && data.byteLength % 2 != 0) {\n    shaka.log.error('Data has an incorrect length, must be even.');\n    throw new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.TEXT,\n        shaka.util.Error.Code.BAD_ENCODING);\n  }\n\n  /** @type {ArrayBuffer} */\n  let buffer;\n  if (data instanceof ArrayBuffer) {\n    buffer = data;\n  } else {\n    // Have to create a new buffer because the argument may be a smaller\n    // view on a larger ArrayBuffer.  We cannot use an ArrayBufferView in\n    // a DataView.\n    let temp = new Uint8Array(data.byteLength);\n    temp.set(new Uint8Array(data));\n    buffer = temp.buffer;\n  }\n\n  // Use a DataView to ensure correct endianness.\n  let length = Math.floor(data.byteLength / 2);\n  let arr = new Uint16Array(length);\n  let dataView = new DataView(buffer);\n  for (let i = 0; i < length; i++) {\n    arr[i] = dataView.getUint16(i * 2, littleEndian);\n  }\n  return shaka.util.StringUtils.fromCharCode(arr);\n};\n\n\n/**\n * Creates a string from the given buffer, auto-detecting the encoding that is\n * being used.  If it cannot detect the encoding, it will throw an exception.\n *\n * @param {?BufferSource} data\n * @return {string}\n * @throws {shaka.util.Error}\n * @export\n */\nshaka.util.StringUtils.fromBytesAutoDetect = function(data) {\n  const StringUtils = shaka.util.StringUtils;\n\n  let uint8 = new Uint8Array(data);\n  if (uint8[0] == 0xef && uint8[1] == 0xbb && uint8[2] == 0xbf) {\n    return StringUtils.fromUTF8(uint8);\n  } else if (uint8[0] == 0xfe && uint8[1] == 0xff) {\n    return StringUtils.fromUTF16(uint8.subarray(2), false /* littleEndian */);\n  } else if (uint8[0] == 0xff && uint8[1] == 0xfe) {\n    return StringUtils.fromUTF16(uint8.subarray(2), true /* littleEndian */);\n  }\n\n  let isAscii = (function(arr, i) {\n    // arr[i] >= ' ' && arr[i] <= '~';\n    return arr.byteLength <= i || (arr[i] >= 0x20 && arr[i] <= 0x7e);\n  }.bind(null, uint8));\n\n  shaka.log.debug('Unable to find byte-order-mark, making an educated guess.');\n  if (uint8[0] == 0 && uint8[2] == 0) {\n    return StringUtils.fromUTF16(data, false /* littleEndian */);\n  } else if (uint8[1] == 0 && uint8[3] == 0) {\n    return StringUtils.fromUTF16(data, true /* littleEndian */);\n  } else if (isAscii(0) && isAscii(1) && isAscii(2) && isAscii(3)) {\n    return StringUtils.fromUTF8(data);\n  }\n\n  throw new shaka.util.Error(\n      shaka.util.Error.Severity.CRITICAL,\n      shaka.util.Error.Category.TEXT,\n      shaka.util.Error.Code.UNABLE_TO_DETECT_ENCODING);\n};\n\n\n/**\n * Creates a ArrayBuffer from the given string, converting to UTF-8 encoding.\n *\n * @param {string} str\n * @return {!ArrayBuffer}\n * @export\n */\nshaka.util.StringUtils.toUTF8 = function(str) {\n  // http://stackoverflow.com/a/13691499\n  // Converts the given string to a URI encoded string.  If a character falls\n  // in the ASCII range, it is not converted; otherwise it will be converted to\n  // a series of URI escape sequences according to UTF-8.\n  // Example: 'g#\u20ac' -> 'g#%E3%82%AC'\n  let encoded = encodeURIComponent(str);\n  // Convert each escape sequence individually into a character.  Each escape\n  // sequence is interpreted as a code-point, so if an escape sequence happens\n  // to be part of a multi-byte sequence, each byte will be converted to a\n  // single character.\n  // Example: 'g#%E3%82%AC' -> '\\x67\\x35\\xe3\\x82\\xac'\n  let utf8 = unescape(encoded);\n\n  let result = new Uint8Array(utf8.length);\n  for (let i = 0; i < utf8.length; ++i) {\n    result[i] = utf8.charCodeAt(i);\n  }\n  return result.buffer;\n};\n\n\n/**\n * Creates a new string from the given array of char codes.\n *\n * Using String.fromCharCode.apply is risky because you can trigger stack errors\n * on very large arrays.  This breaks up the array into several pieces to avoid\n * this.\n *\n * @param {!TypedArray} array\n * @return {string}\n */\nshaka.util.StringUtils.fromCharCode = function(array) {\n  let max = 16000;\n  let ret = '';\n  for (let i = 0; i < array.length; i += max) {\n    let subArray = array.subarray(i, i + max);\n    ret += String.fromCharCode.apply(null, subArray);\n  }\n\n  return ret;\n};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.util.Timer');\n\n\n/**\n * A simple cancelable timer.\n * @param {Function} callback\n * @constructor\n * @struct\n */\nshaka.util.Timer = function(callback) {\n  /** @private {?number} */\n  this.id_ = null;\n\n  /** @private {Function} */\n  this.callback_ = (function() {\n    this.id_ = null;\n    callback();\n  }.bind(this));\n};\n\n\n/**\n * Cancel the timer, if it's running.\n */\nshaka.util.Timer.prototype.cancel = function() {\n  if (this.id_ != null) {\n    clearTimeout(this.id_);\n    this.id_ = null;\n  }\n};\n\n\n/**\n * Schedule the timer, canceling any previous scheduling.\n * @param {number} seconds\n */\nshaka.util.Timer.prototype.schedule = function(seconds) {\n  this.cancel();\n  this.id_ = setTimeout(this.callback_, seconds * 1000);\n};\n\n\n/**\n * Schedule the timer, canceling any previous scheduling. The timer will\n * automatically reschedule after the callback fires.\n * @param {number} seconds\n */\nshaka.util.Timer.prototype.scheduleRepeated = function(seconds) {\n  this.cancel();\n  let repeat = (function() {\n    this.callback_();\n    this.id_ = setTimeout(repeat, seconds * 1000);\n  }.bind(this));\n  this.id_ = setTimeout(repeat, seconds * 1000);\n};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.util.Uint8ArrayUtils');\n\ngoog.require('shaka.util.StringUtils');\n\n\n/**\n * @namespace shaka.util.Uint8ArrayUtils\n * @summary A set of Uint8Array utility functions.\n * @exportDoc\n */\n\n\n/**\n * Convert a Uint8Array to a base64 string.  The output will always use the\n * alternate encoding/alphabet also known as \"base64url\".\n * @param {!Uint8Array} arr\n * @param {boolean=} padding If true, pad the output with equals signs.\n *   Defaults to true.\n * @return {string}\n * @export\n */\nshaka.util.Uint8ArrayUtils.toBase64 = function(arr, padding) {\n  // btoa expects a \"raw string\" where each character is interpreted as a byte.\n  let bytes = shaka.util.StringUtils.fromCharCode(arr);\n  padding = (padding == undefined) ? true : padding;\n  let base64 = window.btoa(bytes).replace(/\\+/g, '-').replace(/\\//g, '_');\n  return padding ? base64 : base64.replace(/=*$/, '');\n};\n\n\n/**\n * Convert a base64 string to a Uint8Array.  Accepts either the standard\n * alphabet or the alternate \"base64url\" alphabet.\n * @param {string} str\n * @return {!Uint8Array}\n * @export\n */\nshaka.util.Uint8ArrayUtils.fromBase64 = function(str) {\n  // atob creates a \"raw string\" where each character is interpreted as a byte.\n  let bytes = window.atob(str.replace(/-/g, '+').replace(/_/g, '/'));\n  let result = new Uint8Array(bytes.length);\n  for (let i = 0; i < bytes.length; ++i) {\n    result[i] = bytes.charCodeAt(i);\n  }\n  return result;\n};\n\n\n/**\n * Convert a hex string to a Uint8Array.\n * @param {string} str\n * @return {!Uint8Array}\n * @export\n */\nshaka.util.Uint8ArrayUtils.fromHex = function(str) {\n  let arr = new Uint8Array(str.length / 2);\n  for (let i = 0; i < str.length; i += 2) {\n    arr[i / 2] = window.parseInt(str.substr(i, 2), 16);\n  }\n  return arr;\n};\n\n\n/**\n * Convert a Uint8Array to a hex string.\n * @param {!Uint8Array} arr\n * @return {string}\n * @export\n */\nshaka.util.Uint8ArrayUtils.toHex = function(arr) {\n  let hex = '';\n  for (let i = 0; i < arr.length; ++i) {\n    let value = arr[i].toString(16);\n    if (value.length == 1) value = '0' + value;\n    hex += value;\n  }\n  return hex;\n};\n\n\n/**\n * Compare two Uint8Arrays for equality.\n * @param {Uint8Array} arr1\n * @param {Uint8Array} arr2\n * @return {boolean}\n * @export\n */\nshaka.util.Uint8ArrayUtils.equal = function(arr1, arr2) {\n  if (!arr1 && !arr2) return true;\n  if (!arr1 || !arr2) return false;\n  if (arr1.length != arr2.length) return false;\n  for (let i = 0; i < arr1.length; ++i) {\n    if (arr1[i] != arr2[i]) return false;\n  }\n  return true;\n};\n\n\n/**\n * Concatenate Uint8Arrays.\n * @param {...!Uint8Array} varArgs\n * @return {!Uint8Array}\n * @export\n */\nshaka.util.Uint8ArrayUtils.concat = function(...varArgs) {\n  let totalLength = 0;\n  for (let i = 0; i < varArgs.length; ++i) {\n    totalLength += varArgs[i].length;\n  }\n\n  let result = new Uint8Array(totalLength);\n  let offset = 0;\n  for (let i = 0; i < varArgs.length; ++i) {\n    result.set(varArgs[i], offset);\n    offset += varArgs[i].length;\n  }\n  return result;\n};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.media.DrmEngine');\n\ngoog.require('goog.asserts');\ngoog.require('shaka.log');\ngoog.require('shaka.net.NetworkingEngine');\ngoog.require('shaka.util.ArrayUtils');\ngoog.require('shaka.util.Error');\ngoog.require('shaka.util.EventManager');\ngoog.require('shaka.util.FakeEvent');\ngoog.require('shaka.util.Functional');\ngoog.require('shaka.util.IDestroyable');\ngoog.require('shaka.util.ManifestParserUtils');\ngoog.require('shaka.util.MapUtils');\ngoog.require('shaka.util.MimeUtils');\ngoog.require('shaka.util.PublicPromise');\ngoog.require('shaka.util.StringUtils');\ngoog.require('shaka.util.Timer');\ngoog.require('shaka.util.Uint8ArrayUtils');\n\n\n/**\n * @param {shaka.media.DrmEngine.PlayerInterface} playerInterface\n *\n * @constructor\n * @struct\n * @implements {shaka.util.IDestroyable}\n */\nshaka.media.DrmEngine = function(playerInterface) {\n  /** @private {?shaka.media.DrmEngine.PlayerInterface} */\n  this.playerInterface_ = playerInterface;\n\n  /** @private {Array.<string>} */\n  this.supportedTypes_ = null;\n\n  /** @private {MediaKeys} */\n  this.mediaKeys_ = null;\n\n  /** @private {HTMLMediaElement} */\n  this.video_ = null;\n\n  /** @private {boolean} */\n  this.initialized_ = false;\n\n  /** @private {?shaka.extern.DrmInfo} */\n  this.currentDrmInfo_ = null;\n\n  /** @private {shaka.util.EventManager} */\n  this.eventManager_ = new shaka.util.EventManager();\n\n  /** @private {!Array.<shaka.media.DrmEngine.ActiveSession>} */\n  this.activeSessions_ = [];\n\n  /** @private {!Array.<string>} */\n  this.offlineSessionIds_ = [];\n\n  /** @private {!shaka.util.PublicPromise} */\n  this.allSessionsLoaded_ = new shaka.util.PublicPromise();\n\n  /** @private {?shaka.extern.DrmConfiguration} */\n  this.config_ = null;\n\n  /** @private {?function(!shaka.util.Error)} */\n  this.onError_ = (err) => {\n    this.allSessionsLoaded_.reject(err);\n    playerInterface.onError(err);\n  };\n\n  /**\n   * The most recent key status information we have.\n   * We may not have announced this information to the outside world yet,\n   * which we delay to batch up changes and avoid spurious \"missing key\" errors.\n   * @private {!Object.<string, string>}\n   */\n  this.keyStatusByKeyId_ = {};\n\n  /**\n   * The key statuses most recently announced to other classes.\n   * We may have more up-to-date information being collected in\n   * this.keyStatusByKeyId_, which has not been batched up and released yet.\n   * @private {!Object.<string, string>}\n   */\n  this.announcedKeyStatusByKeyId_ = {};\n\n  /** @private {shaka.util.Timer} */\n  this.keyStatusTimer_ =\n      new shaka.util.Timer(() => this.processKeyStatusChanges_());\n\n  /** @private {boolean} */\n  this.destroyed_ = false;\n\n  /** @private {boolean} */\n  this.usePersistentLicenses_ = false;\n\n  /** @private {!Array.<!MediaKeyMessageEvent>} */\n  this.mediaKeyMessageEvents_ = [];\n\n  /** @private {boolean} */\n  this.initialRequestsSent_ = false;\n\n  /** @private {?shaka.util.Timer} */\n  this.expirationTimer_\n      = new shaka.util.Timer(() => this.pollExpiration_());\n  this.expirationTimer_.scheduleRepeated(1);\n\n  // Add a catch to the Promise to avoid console logs about uncaught errors.\n  const noop = () => {};\n  this.allSessionsLoaded_.catch(noop);\n};\n\n\n/**\n * @typedef {{\n *   loaded: boolean,\n *   initData: Uint8Array,\n *   session: !MediaKeySession,\n *   oldExpiration: number,\n *   updatePromise: shaka.util.PublicPromise\n * }}\n *\n * @description A record to track sessions and suppress duplicate init data.\n * @property {boolean} loaded\n *   True once the key status has been updated (to a non-pending state).  This\n *   does not mean the session is 'usable'.\n * @property {Uint8Array} initData\n *   The init data used to create the session.\n * @property {!MediaKeySession} session\n *   The session object.\n * @property {number} oldExpiration\n *   The expiration of the session on the last check.  This is used to fire\n *   an event when it changes.\n * @property {shaka.util.PublicPromise} updatePromise\n *   An optional Promise that will be resolved/rejected on the next update()\n *   call.  This is used to track the 'license-release' message when calling\n *   remove().\n */\nshaka.media.DrmEngine.ActiveSession;\n\n\n/**\n * @typedef {{\n *   netEngine: !shaka.net.NetworkingEngine,\n *   onError: function(!shaka.util.Error),\n *   onKeyStatus: function(!Object.<string,string>),\n *   onExpirationUpdated: function(string,number),\n *   onEvent: function(!Event)\n * }}\n *\n * @property {shaka.net.NetworkingEngine} netEngine\n *   The NetworkingEngine instance to use.  The caller retains ownership.\n * @property {function(!shaka.util.Error)} onError\n *   Called when an error occurs.  If the error is recoverable (see\n *   {@link shaka.util.Error}) then the caller may invoke either\n *   StreamingEngine.switch*() or StreamingEngine.seeked() to attempt recovery.\n * @property {function(!Object.<string,string>)} onKeyStatus\n *   Called when key status changes.  The argument is a map of hex key IDs to\n *   statuses.\n * @property {function(string,number)} onExpirationUpdated\n *   Called when the session expiration value changes.\n * @property {function(!Event)} onEvent\n *   Called when an event occurs that should be sent to the app.\n */\nshaka.media.DrmEngine.PlayerInterface;\n\n\n/** @override */\nshaka.media.DrmEngine.prototype.destroy = function() {\n  const Functional = shaka.util.Functional;\n  this.destroyed_ = true;\n\n  let async = [];\n\n  // Wait for sessions to close when destroying.\n  this.activeSessions_.forEach(function(activeSession) {\n    // Ignore any errors when closing the sessions.  One such error would be\n    // an invalid state error triggered by closing a session which has not\n    // generated any key requests.\n    let close = activeSession.session.close().catch(Functional.noop);\n    // Due to a bug in Chrome, sometimes the Promise returned by close()\n    // never resolves.  See issue #1093 and https://crbug.com/690583.\n    let closeTimeout = shaka.media.DrmEngine.timeout_(\n        shaka.media.DrmEngine.CLOSE_TIMEOUT_);\n    async.push(Promise.race([close, closeTimeout]));\n  });\n  this.allSessionsLoaded_.reject();\n\n  if (this.eventManager_) {\n    async.push(this.eventManager_.destroy());\n  }\n\n  if (this.video_) {\n    goog.asserts.assert(!this.video_.src, 'video src must be removed first!');\n    async.push(this.video_.setMediaKeys(null).catch(Functional.noop));\n  }\n\n  if (this.expirationTimer_) {\n    this.expirationTimer_.cancel();\n    this.expirationTimer_ = null;\n  }\n\n  if (this.keyStatusTimer_) {\n    this.keyStatusTimer_.cancel();\n    this.keyStatusTimer_ = null;\n  }\n\n  this.currentDrmInfo_ = null;\n  this.supportedTypes_ = null;\n  this.mediaKeys_ = null;\n  this.video_ = null;\n  this.eventManager_ = null;\n  this.activeSessions_ = [];\n  this.offlineSessionIds_ = [];\n  this.config_ = null;\n  this.onError_ = null;\n  this.playerInterface_ = null;\n\n  return Promise.all(async);\n};\n\n\n/**\n * Called by the Player to provide an updated configuration any time it changes.\n * Must be called at least once before init().\n *\n * @param {shaka.extern.DrmConfiguration} config\n */\nshaka.media.DrmEngine.prototype.configure = function(config) {\n  this.config_ = config;\n};\n\n\n/**\n * Initialize the drm engine for storing and deleting stored content.\n *\n * @param {shaka.extern.Manifest} manifest\n *    The manifest that is going to be stored.\n * @param {boolean} usePersistentLicenses\n *    Whether or not persistent licenses should be requested and stored for\n *    |manifest|.\n * @return {!Promise}\n */\nshaka.media.DrmEngine.prototype.initForStorage = function(\n    manifest, usePersistentLicenses) {\n  // There are two cases for this call:\n  //  1. We are about to store a manifest - in that case, there are no offline\n  //     sessions and therefore no offline session ids.\n  //  2. We are about to remove the offline sessions for this manifest - in\n  //     that case, we don't need to know about them right now either as\n  //     we will be told which ones to remove later.\n  this.offlineSessionIds_ = [];\n\n  // What we really need to know is whether or not they are expecting to use\n  // persistent licenses.\n  this.usePersistentLicenses_ = usePersistentLicenses;\n\n  return this.init_(manifest);\n};\n\n\n/**\n * Initialize the drm engine for playback operations.\n *\n * @param {shaka.extern.Manifest} manifest\n *    The manifest that will be played.\n * @return {!Promise}\n */\nshaka.media.DrmEngine.prototype.initForPlayback = function(manifest) {\n  this.offlineSessionIds_ = manifest.offlineSessionIds;\n  this.usePersistentLicenses_ = manifest.offlineSessionIds.length > 0;\n\n  return this.init_(manifest);\n};\n\n\n/**\n * Negotiate for a key system and set up MediaKeys.\n * @param {!shaka.extern.Manifest} manifest The manifest is read for MIME type\n *   and DRM information to query EME.  If the 'clearKeys' configuration is\n *   used, the manifest will be modified to force the use of Clear Key.\n * @return {!Promise} Resolved if/when a key system has been chosen.\n * @private\n */\nshaka.media.DrmEngine.prototype.init_ = function(manifest) {\n  goog.asserts.assert(this.config_,\n      'DrmEngine configure() must be called before init()!');\n\n  /** @type {!Object.<string, MediaKeySystemConfiguration>} */\n  let configsByKeySystem = {};\n\n  /** @type {!Array.<string>} */\n  let keySystemsInOrder = [];\n\n  // If initial manifest contains unencrypted content, drm configuration\n  // overrides DrmInfo so drmEngine can be activated. Thus, the player can play\n  // encrypted content if live stream switches from unencrypted content to\n  // encrypted content during live streams.\n  let isEncryptedContent = manifest.periods.some((period) => {\n    return period.variants.some((variant) => variant.drmInfos.length);\n  });\n\n  this.prepareMediaKeyConfigs_(\n      manifest, configsByKeySystem, keySystemsInOrder, isEncryptedContent);\n\n  if (!keySystemsInOrder.length) {\n    // Unencrypted.\n    this.initialized_ = true;\n    return Promise.resolve();\n  }\n\n  return this.queryMediaKeys_(\n      configsByKeySystem, keySystemsInOrder, isEncryptedContent);\n};\n\n\n/**\n * Attach MediaKeys to the video element and start processing events.\n * @param {HTMLMediaElement} video\n * @return {!Promise}\n */\nshaka.media.DrmEngine.prototype.attach = function(video) {\n  if (!this.mediaKeys_) {\n    // Unencrypted, or so we think.  We listen for encrypted events in order to\n    // warn when the stream is encrypted, even though the manifest does not know\n    // it.\n    // Don't complain about this twice, so just listenOnce().\n    this.eventManager_.listenOnce(video, 'encrypted', (event) => {\n      this.onError_(new shaka.util.Error(\n          shaka.util.Error.Severity.CRITICAL,\n          shaka.util.Error.Category.DRM,\n          shaka.util.Error.Code.ENCRYPTED_CONTENT_WITHOUT_DRM_INFO));\n    });\n    return Promise.resolve();\n  }\n\n  this.video_ = video;\n\n  this.eventManager_.listenOnce(this.video_, 'play', () => this.onPlay_());\n\n  let setMediaKeys = this.video_.setMediaKeys(this.mediaKeys_);\n  setMediaKeys = setMediaKeys.catch(function(exception) {\n    return Promise.reject(new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.DRM,\n        shaka.util.Error.Code.FAILED_TO_ATTACH_TO_VIDEO,\n        exception.message));\n  });\n\n  let setServerCertificate = null;\n  if (this.currentDrmInfo_.serverCertificate &&\n      this.currentDrmInfo_.serverCertificate.length) {\n    setServerCertificate = this.mediaKeys_.setServerCertificate(\n        this.currentDrmInfo_.serverCertificate).then(function(supported) {\n      if (!supported) {\n        shaka.log.warning('Server certificates are not supported by the key' +\n                          ' system.  The server certificate has been ignored.');\n      }\n    }).catch(function(exception) {\n      return Promise.reject(new shaka.util.Error(\n          shaka.util.Error.Severity.CRITICAL,\n          shaka.util.Error.Category.DRM,\n          shaka.util.Error.Code.INVALID_SERVER_CERTIFICATE,\n          exception.message));\n    });\n  }\n\n  return Promise.all([setMediaKeys, setServerCertificate]).then(() => {\n    if (this.destroyed_) return Promise.reject();\n\n    this.createOrLoad();\n    if (!this.currentDrmInfo_.initData.length &&\n        !this.offlineSessionIds_.length) {\n      // Explicit init data for any one stream or an offline session is\n      // sufficient to suppress 'encrypted' events for all streams.\n      this.eventManager_.listen(\n          this.video_,\n          'encrypted',\n          (e) => this.onEncrypted_(/** @type {!MediaEncryptedEvent} */ (e)));\n    }\n  }).catch((error) => {\n    if (this.destroyed_) return Promise.resolve();  // Ignore destruction errors\n    return Promise.reject(error);\n  });\n};\n\n\n/**\n * Remove all given offline sessions and delete their data. This can only be\n * called after a successful call to |init|. This will wait until the\n * 'license-release' message is handled for each license. The returned Promise\n * will be rejected if there is an error releasing any of the licenses.\n *\n * @param {!Array.<string>} sessions\n * @return {!Promise}\n */\nshaka.media.DrmEngine.prototype.removeSessions = function(sessions) {\n  return Promise.all(sessions.map((id) => this.removeSession(id)));\n};\n\n\n/**\n * Remove an offline session and delete it's data. This can only be called\n * after a successful call to |init|. This will wait until the 'license-release'\n * message is handled. The returned Promise will be rejected if there is an\n * error releasing the license.\n *\n * @param {string} sessionId\n * @return {!Promise}\n */\nshaka.media.DrmEngine.prototype.removeSession = async function(sessionId) {\n  goog.asserts.assert(this.mediaKeys_, 'Must call init() before removeSession');\n\n  let session = await this.loadOfflineSession_(sessionId);\n\n  // This will be null on error, such as session not found.\n  if (!session) {\n    return;\n  }\n\n  /** @type {!Array.<!Promise>} */\n  let tasks = [];\n\n  // TODO: Consider adding a timeout to get the 'message' event.\n  // Note that the 'message' event will get raised after the remove()\n  // promise resolves.\n\n  let active = this.activeSessions_.filter((s) => s.session == session);\n  goog.asserts.assert(\n      active.length <= 1,\n      'There should be no more than one active session matching ' + sessionId);\n\n  active.forEach((activeSession) => {\n    let update = new shaka.util.PublicPromise();\n    tasks.push(update);\n    activeSession.updatePromise = update;\n  });\n\n  tasks.push(session.remove());\n\n  return Promise.all(tasks);\n};\n\n/**\n * Creates the sessions for the init data and waits for them to become ready.\n *\n * @return {!Promise}\n */\nshaka.media.DrmEngine.prototype.createOrLoad = function() {\n  // Create temp sessions.\n  let initDatas = this.currentDrmInfo_ ? this.currentDrmInfo_.initData : [];\n  initDatas.forEach((initDataOverride) => {\n    return this.createTemporarySession_(initDataOverride.initDataType,\n                                        initDataOverride.initData);\n  });\n\n  // Load each session.\n  this.offlineSessionIds_.forEach((sessionId) => {\n    return this.loadOfflineSession_(sessionId);\n  });\n\n  // If we have no sessions, we need to resolve the promise right now or else\n  // it will never get resolved.\n  if (!initDatas.length && !this.offlineSessionIds_.length) {\n    this.allSessionsLoaded_.resolve();\n  }\n\n  return this.allSessionsLoaded_;\n};\n\n\n/** @return {boolean} */\nshaka.media.DrmEngine.prototype.initialized = function() {\n  return this.initialized_;\n};\n\n\n/** @return {string} */\nshaka.media.DrmEngine.prototype.keySystem = function() {\n  return this.currentDrmInfo_ ? this.currentDrmInfo_.keySystem : '';\n};\n\n\n/**\n * Returns an array of the media types supported by the current key system.\n * These will be full mime types (e.g. 'video/webm; codecs=\"vp8\"').\n *\n * @return {Array.<string>}\n */\nshaka.media.DrmEngine.prototype.getSupportedTypes = function() {\n  return this.supportedTypes_;\n};\n\n\n/**\n * Returns the ID of the sessions currently active.\n *\n * @return {!Array.<string>}\n */\nshaka.media.DrmEngine.prototype.getSessionIds = function() {\n  return this.activeSessions_.map(function(session) {\n    return session.session.sessionId;\n  });\n};\n\n\n/**\n * Returns the next expiration time, or Infinity.\n * @return {number}\n */\nshaka.media.DrmEngine.prototype.getExpiration = function() {\n  let expirations = this.activeSessions_.map(function(session) {\n    let expiration = session.session.expiration;\n    return isNaN(expiration) ? Infinity : expiration;\n  });\n  // This will equal Infinity if there are no entries.\n  return Math.min.apply(Math, expirations);\n};\n\n\n/**\n * Returns the DrmInfo that was used to initialize the current key system.\n *\n * @return {?shaka.extern.DrmInfo}\n */\nshaka.media.DrmEngine.prototype.getDrmInfo = function() {\n  return this.currentDrmInfo_;\n};\n\n\n/**\n * Returns the current key statuses.\n *\n * @return {!Object.<string, string>}\n */\nshaka.media.DrmEngine.prototype.getKeyStatuses = function() {\n  return this.announcedKeyStatusByKeyId_;\n};\n\n\n/**\n * @param {!shaka.extern.Manifest} manifest\n * @param {!Object.<string, MediaKeySystemConfiguration>} configsByKeySystem\n *   (Output parameter.)  A dictionary of configs, indexed by key system.\n * @param {!Array.<string>} keySystemsInOrder\n *   (Output parameter.)  A list of key systems in the order in which we\n *   encounter them.\n * @param {boolean} isEncryptedContent\n *   True if the content is encrypted, false otherwise.\n * @see https://bit.ly/EmeConfig for MediaKeySystemConfiguration spec\n * @private\n */\nshaka.media.DrmEngine.prototype.prepareMediaKeyConfigs_ = function(\n    manifest, configsByKeySystem, keySystemsInOrder, isEncryptedContent) {\n  const variants = shaka.util.StreamUtils.getAllVariants(manifest);\n\n  /**\n   * Clear Key config overrides the manifest DrmInfo if present. The manifest\n   * is modified so that filtering in Player still works.\n   *\n   * @type {?shaka.extern.DrmInfo}\n   */\n  let clearKeyDrmInfo = this.configureClearKey_();\n  if (clearKeyDrmInfo) {\n    variants.forEach((variant) => {\n        variant.drmInfos = [clearKeyDrmInfo];\n    });\n  }\n\n  if (!isEncryptedContent) {\n    let config = this.config_;\n    let serverKeys = Object.keys(config.servers);\n    let overrideDrmInfos = serverKeys.map((keySystem) => {\n      return {\n        keySystem: keySystem,\n        licenseServerUri: config.servers[keySystem],\n        distinctiveIdentifierRequired: false,\n        persistentStateRequired: false,\n        audioRobustness: '',\n        videoRobustness: '',\n        serverCertificate: null,\n        initData: [],\n        keyIds: [],\n      };\n    });\n\n    if (overrideDrmInfos.length) {\n      variants.forEach((variant) => {\n          variant.drmInfos = overrideDrmInfos;\n      });\n    }\n  }\n\n  variants.forEach((variant) => {\n    this.prepareMediaKeyConfigsForVariant_(\n        variant, configsByKeySystem, keySystemsInOrder);\n  });\n};\n\n\n/**\n * @param {!shaka.extern.Variant} variant\n * @param {!Object.<string, MediaKeySystemConfiguration>} configsByKeySystem\n *   (Output parameter.)  A dictionary of configs, indexed by key system.\n * @param {!Array.<string>} keySystemsInOrder\n *   (Output parameter.)  A list of key systems in the order in which we\n *   encounter them.\n * @see https://bit.ly/EmeConfig for MediaKeySystemConfiguration spec\n * @private\n */\nshaka.media.DrmEngine.prototype.prepareMediaKeyConfigsForVariant_ =\n    function(variant, configsByKeySystem, keySystemsInOrder) {\n  // Get all the streams in the variant.\n  const streams = shaka.util.StreamUtils.getVariantStreams(variant);\n\n  // Make sure all the drm infos are valid and filled in correctly.\n  variant.drmInfos.forEach((info) => {\n    this.fillInDrmInfoDefaults_(info);\n\n    // Chromecast has a variant of PlayReady that uses a different key\n    // system ID.  Since manifest parsers convert the standard PlayReady\n    // UUID to the standard PlayReady key system ID, here we will switch\n    // to the Chromecast version if we are running on that platform.\n    // Note that this must come after fillInDrmInfoDefaults_, since the\n    // player config uses the standard PlayReady ID for license server\n    // configuration.\n    if (window.cast && window.cast.__platform__) {\n      if (info.keySystem == 'com.microsoft.playready') {\n        info.keySystem = 'com.chromecast.playready';\n      }\n    }\n  });\n\n  // Fill in any missing config entries.\n  variant.drmInfos.forEach((info) => {\n    if (configsByKeySystem[info.keySystem]) {\n      return;\n    }\n\n    const persistentState =\n        this.usePersistentLicenses_ ? 'required' : 'optional';\n    const sessionTypes =\n        this.usePersistentLicenses_ ? ['persistent-license'] : ['temporary'];\n\n    const config = {\n      // Ignore initDataTypes.\n      audioCapabilities: [],\n      videoCapabilities: [],\n      distinctiveIdentifier: 'optional',\n      persistentState: persistentState,\n      sessionTypes: sessionTypes,\n      label: info.keySystem,\n      drmInfos: [],  // Tracked by us, ignored by EME.\n    };\n\n    configsByKeySystem[info.keySystem] = config;\n    keySystemsInOrder.push(info.keySystem);\n  });\n\n  // Add the last bit of information to each config;\n  variant.drmInfos.forEach((info) => {\n    let config = configsByKeySystem[info.keySystem];\n    goog.asserts.assert(\n        config,\n        'Any missing configs should have be filled in before.');\n\n    config.drmInfos.push(info);\n\n    if (info.distinctiveIdentifierRequired) {\n      config.distinctiveIdentifier = 'required';\n    }\n\n    if (info.persistentStateRequired) {\n      config.persistentState = 'required';\n    }\n\n    streams.forEach((stream) => {\n      const ContentType = shaka.util.ManifestParserUtils.ContentType;\n      let isVideo = stream.type == ContentType.VIDEO;\n\n      /** @type {?string} */\n      let robustness = isVideo ?\n                       info.videoRobustness :\n                       info.audioRobustness;\n\n      /** @type {string} */\n      let fullMimeType = shaka.util.MimeUtils.getFullType(\n          stream.mimeType, stream.codecs);\n\n      /** @type {MediaKeySystemMediaCapability} */\n      let capability = {\n        robustness: robustness || '',\n        contentType: fullMimeType,\n      };\n\n      if (isVideo) {\n        config.videoCapabilities.push(capability);\n      } else {\n        config.audioCapabilities.push(capability);\n      }\n    });\n  });\n};\n\n\n/**\n * @param {!Object.<string, MediaKeySystemConfiguration>} configsByKeySystem\n *   A dictionary of configs, indexed by key system.\n * @param {!Array.<string>} keySystemsInOrder\n *   A list of key systems in the order in which we should query them.\n *   On a browser which supports multiple key systems, the order may indicate\n *   a real preference for the application.\n * @param {boolean} isEncryptedContent\n *   True if the content is encrypted, false otherwise.\n * @return {!Promise} Resolved if/when a key system has been chosen.\n * @private\n */\nshaka.media.DrmEngine.prototype.queryMediaKeys_ =\n    function(configsByKeySystem, keySystemsInOrder, isEncryptedContent) {\n  if (keySystemsInOrder.length == 1 && keySystemsInOrder[0] == '') {\n    return Promise.reject(new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.DRM,\n        shaka.util.Error.Code.NO_RECOGNIZED_KEY_SYSTEMS));\n  }\n\n  // Wait to reject this initial Promise until we have built the entire chain.\n  let instigator = new shaka.util.PublicPromise();\n  let p = instigator;\n\n  // Try key systems with configured license servers first.  We only have to try\n  // key systems without configured license servers for diagnostic reasons, so\n  // that we can differentiate between \"none of these key systems are available\"\n  // and \"some are available, but you did not configure them properly.\"  The\n  // former takes precedence.\n  [true, false].forEach(function(shouldHaveLicenseServer) {\n    keySystemsInOrder.forEach(function(keySystem) {\n      let config = configsByKeySystem[keySystem];\n\n      let hasLicenseServer = config.drmInfos.some(function(info) {\n        return !!info.licenseServerUri;\n      });\n      if (hasLicenseServer != shouldHaveLicenseServer) return;\n\n      // If there are no tracks of a type, these should be not present.\n      // Otherwise the query will fail.\n      if (config.audioCapabilities.length == 0) {\n        delete config.audioCapabilities;\n      }\n      if (config.videoCapabilities.length == 0) {\n        delete config.videoCapabilities;\n      }\n\n      p = p.catch(function() {\n        if (this.destroyed_) return Promise.reject();\n        return navigator.requestMediaKeySystemAccess(keySystem, [config]);\n      }.bind(this));\n    }.bind(this));\n  }.bind(this));\n\n  p = p.catch(() => {\n    return Promise.reject(new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.DRM,\n        shaka.util.Error.Code.REQUESTED_KEY_SYSTEM_CONFIG_UNAVAILABLE));\n  });\n\n  p = p.then(function(mediaKeySystemAccess) {\n    if (this.destroyed_) return Promise.reject();\n\n    // TODO: Remove once Edge has released a fix for https://bit.ly/2IcEgv0\n    let isEdge = navigator.userAgent.indexOf('Edge/') >= 0;\n\n    // Store the capabilities of the key system.\n    let realConfig = mediaKeySystemAccess.getConfiguration();\n    let audioCaps = realConfig.audioCapabilities || [];\n    let videoCaps = realConfig.videoCapabilities || [];\n    let caps = audioCaps.concat(videoCaps);\n    this.supportedTypes_ = caps.map(function(c) { return c.contentType; });\n    if (isEdge) {\n      // Edge 14 does not report correct capabilities.  It will only report the\n      // first MIME type even if the others are supported.  To work around this,\n      // set the supported types to null, which Player will use as a signal that\n      // the information is not available.\n      // See: https://bit.ly/2IcEgv0\n      this.supportedTypes_ = null;\n    }\n    goog.asserts.assert(!this.supportedTypes_ || this.supportedTypes_.length,\n                        'We should get at least one supported MIME type');\n\n    let originalConfig = configsByKeySystem[mediaKeySystemAccess.keySystem];\n    this.createCurrentDrmInfo_(\n        mediaKeySystemAccess.keySystem, originalConfig,\n        originalConfig.drmInfos);\n\n    if (!this.currentDrmInfo_.licenseServerUri) {\n      return Promise.reject(new shaka.util.Error(\n          shaka.util.Error.Severity.CRITICAL,\n          shaka.util.Error.Category.DRM,\n          shaka.util.Error.Code.NO_LICENSE_SERVER_GIVEN));\n    }\n\n    return mediaKeySystemAccess.createMediaKeys();\n  }.bind(this)).then(function(mediaKeys) {\n    if (this.destroyed_) return Promise.reject();\n\n    this.mediaKeys_ = mediaKeys;\n    this.initialized_ = true;\n  }.bind(this)).catch(function(exception) {\n    if (this.destroyed_) return Promise.resolve();  // Ignore destruction errors\n\n    // Don't rewrap a shaka.util.Error from earlier in the chain:\n    this.currentDrmInfo_ = null;\n    this.supportedTypes_ = null;\n    if (exception instanceof shaka.util.Error) {\n      return Promise.reject(exception);\n    }\n\n    // We failed to create MediaKeys.  This generally shouldn't happen.\n    return Promise.reject(new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.DRM,\n        shaka.util.Error.Code.FAILED_TO_CREATE_CDM,\n        exception.message));\n  }.bind(this));\n\n  if (!isEncryptedContent) {\n    // It doesn't matter if we fail to initialize the drm engine, if we won't\n    // actually need it anyway.\n    p = p.catch(() => {});\n  }\n\n  instigator.reject();\n  return p;\n};\n\n\n/**\n * Use this.config_ to fill in missing values in drmInfo.\n * @param {shaka.extern.DrmInfo} drmInfo\n * @private\n */\nshaka.media.DrmEngine.prototype.fillInDrmInfoDefaults_ = function(drmInfo) {\n  let keySystem = drmInfo.keySystem;\n\n  if (!keySystem) {\n    // This is a placeholder from the manifest parser for an unrecognized key\n    // system.  Skip this entry, to avoid logging nonsensical errors.\n    return;\n  }\n\n  if (!drmInfo.licenseServerUri) {\n    let server = this.config_.servers[keySystem];\n    if (server) {\n      drmInfo.licenseServerUri = server;\n    }\n  }\n\n  if (!drmInfo.keyIds) {\n    drmInfo.keyIds = [];\n  }\n\n  let advanced = this.config_.advanced[keySystem];\n  if (advanced) {\n    if (!drmInfo.distinctiveIdentifierRequired) {\n      drmInfo.distinctiveIdentifierRequired =\n          advanced.distinctiveIdentifierRequired;\n    }\n\n    if (!drmInfo.persistentStateRequired) {\n      drmInfo.persistentStateRequired = advanced.persistentStateRequired;\n    }\n\n    if (!drmInfo.videoRobustness) {\n      drmInfo.videoRobustness = advanced.videoRobustness;\n    }\n\n    if (!drmInfo.audioRobustness) {\n      drmInfo.audioRobustness = advanced.audioRobustness;\n    }\n\n    if (!drmInfo.serverCertificate) {\n      drmInfo.serverCertificate = advanced.serverCertificate;\n    }\n  }\n};\n\n\n/**\n * Create a DrmInfo using configured clear keys.\n * The server URI will be a data URI which decodes to a clearkey license.\n * @return {?shaka.extern.DrmInfo} or null if clear keys are not configured.\n * @private\n * @see https://bit.ly/2K8gOnv for the spec on the clearkey license format.\n */\nshaka.media.DrmEngine.prototype.configureClearKey_ = function() {\n  let hasClearKeys = !shaka.util.MapUtils.empty(this.config_.clearKeys);\n  if (!hasClearKeys) return null;\n\n  const StringUtils = shaka.util.StringUtils;\n  const Uint8ArrayUtils = shaka.util.Uint8ArrayUtils;\n  let keys = [];\n  let keyIds = [];\n\n  for (let keyIdHex in this.config_.clearKeys) {\n    let keyHex = this.config_.clearKeys[keyIdHex];\n\n    let keyId = Uint8ArrayUtils.fromHex(keyIdHex);\n    let key = Uint8ArrayUtils.fromHex(keyHex);\n    let keyObj = {\n      kty: 'oct',\n      kid: Uint8ArrayUtils.toBase64(keyId, false),\n      k: Uint8ArrayUtils.toBase64(key, false),\n    };\n\n    keys.push(keyObj);\n    keyIds.push(keyObj.kid);\n  }\n\n  let jwkSet = {keys: keys};\n  let license = JSON.stringify(jwkSet);\n\n  // Use the keyids init data since is suggested by EME.\n  // Suggestion: https://bit.ly/2JYcNTu\n  // Format: https://www.w3.org/TR/eme-initdata-keyids/\n  let initDataStr = JSON.stringify({'kids': keyIds});\n  let initData = new Uint8Array(StringUtils.toUTF8(initDataStr));\n  let initDatas = [{initData: initData, initDataType: 'keyids'}];\n\n  return {\n    keySystem: 'org.w3.clearkey',\n    licenseServerUri: 'data:application/json;base64,' + window.btoa(license),\n    distinctiveIdentifierRequired: false,\n    persistentStateRequired: false,\n    audioRobustness: '',\n    videoRobustness: '',\n    serverCertificate: null,\n    initData: initDatas,\n    keyIds: [],\n  };\n};\n\n\n/**\n * Creates a DrmInfo object describing the settings used to initialize the\n * engine.\n *\n * @param {string} keySystem\n * @param {MediaKeySystemConfiguration} config\n * @param {!Array.<shaka.extern.DrmInfo>} drmInfos\n * @private\n */\nshaka.media.DrmEngine.prototype.createCurrentDrmInfo_ = function(\n    keySystem, config, drmInfos) {\n  /** @type {!Array.<string>} */\n  let licenseServers = [];\n\n  /** @type {!Array.<!Uint8Array>} */\n  let serverCerts = [];\n\n  /** @type {!Array.<!shaka.extern.InitDataOverride>} */\n  let initDatas = [];\n\n  /** @type {!Array.<string>} */\n  let keyIds = [];\n\n  this.processDrmInfos_(drmInfos, licenseServers, serverCerts, initDatas,\n      keyIds);\n\n  if (serverCerts.length > 1) {\n    shaka.log.warning('Multiple unique server certificates found! ' +\n                      'Only the first will be used.');\n  }\n\n  if (licenseServers.length > 1) {\n    shaka.log.warning('Multiple unique license server URIs found! ' +\n                      'Only the first will be used.');\n  }\n\n  // TODO: This only works when all DrmInfo have the same robustness.\n  let audioRobustness =\n      config.audioCapabilities ? config.audioCapabilities[0].robustness : '';\n  let videoRobustness =\n      config.videoCapabilities ? config.videoCapabilities[0].robustness : '';\n  this.currentDrmInfo_ = {\n    keySystem: keySystem,\n    licenseServerUri: licenseServers[0],\n    distinctiveIdentifierRequired: (config.distinctiveIdentifier == 'required'),\n    persistentStateRequired: (config.persistentState == 'required'),\n    audioRobustness: audioRobustness,\n    videoRobustness: videoRobustness,\n    serverCertificate: serverCerts[0],\n    initData: initDatas,\n    keyIds: keyIds,\n  };\n};\n\n\n/**\n * Extract license server, server cert, and init data from DrmInfos, taking\n * care to eliminate duplicates.\n *\n * @param {!Array.<shaka.extern.DrmInfo>} drmInfos\n * @param {!Array.<string>} licenseServers\n * @param {!Array.<!Uint8Array>} serverCerts\n * @param {!Array.<!shaka.extern.InitDataOverride>} initDatas\n * @param {!Array.<string>} keyIds\n * @private\n */\nshaka.media.DrmEngine.prototype.processDrmInfos_ =\n    function(drmInfos, licenseServers, serverCerts, initDatas, keyIds) {\n  /** @type {function(shaka.extern.InitDataOverride,\n   *                  shaka.extern.InitDataOverride):boolean} */\n  let initDataOverrideEqual = (a, b) => {\n    if (a.keyId && a.keyId == b.keyId) {\n      // Two initDatas with the same keyId are considered to be the same,\n      // unless that \"same keyId\" is null.\n      return true;\n    }\n    return a.initDataType == b.initDataType &&\n           shaka.util.Uint8ArrayUtils.equal(a.initData, b.initData);\n  };\n\n  drmInfos.forEach((drmInfo) => {\n    // Aliases:\n    const ArrayUtils = shaka.util.ArrayUtils;\n    const Uint8ArrayUtils = shaka.util.Uint8ArrayUtils;\n\n    // Build an array of unique license servers.\n    if (licenseServers.indexOf(drmInfo.licenseServerUri) == -1) {\n      licenseServers.push(drmInfo.licenseServerUri);\n    }\n\n    // Build an array of unique server certs.\n    if (drmInfo.serverCertificate) {\n      if (ArrayUtils.indexOf(serverCerts, drmInfo.serverCertificate,\n                             Uint8ArrayUtils.equal) == -1) {\n        serverCerts.push(drmInfo.serverCertificate);\n      }\n    }\n\n    // Build an array of unique init datas.\n    if (drmInfo.initData) {\n      drmInfo.initData.forEach((initDataOverride) => {\n        if (ArrayUtils.indexOf(initDatas, initDataOverride,\n                               initDataOverrideEqual) == -1) {\n          initDatas.push(initDataOverride);\n        }\n      });\n    }\n\n    if (drmInfo.keyIds) {\n      for (let i = 0; i < drmInfo.keyIds.length; ++i) {\n        if (keyIds.indexOf(drmInfo.keyIds[i]) == -1) {\n          keyIds.push(drmInfo.keyIds[i]);\n        }\n      }\n    }\n  });\n};\n\n\n/**\n * @param {!MediaEncryptedEvent} event\n * @private\n */\nshaka.media.DrmEngine.prototype.onEncrypted_ = function(event) {\n  // Aliases:\n  const Uint8ArrayUtils = shaka.util.Uint8ArrayUtils;\n\n  let initData = new Uint8Array(event.initData);\n\n  // Suppress duplicate init data.\n  // Note that some init data are extremely large and can't portably be used as\n  // keys in a dictionary.\n  for (let i = 0; i < this.activeSessions_.length; ++i) {\n    if (Uint8ArrayUtils.equal(initData, this.activeSessions_[i].initData)) {\n      shaka.log.debug('Ignoring duplicate init data.');\n      return;\n    }\n  }\n\n  this.createTemporarySession_(event.initDataType, initData);\n};\n\n\n/**\n * @param {string} sessionId\n * @return {!Promise.<MediaKeySession>}\n * @private\n */\nshaka.media.DrmEngine.prototype.loadOfflineSession_ = function(sessionId) {\n  let session;\n  try {\n    session = this.mediaKeys_.createSession('persistent-license');\n  } catch (exception) {\n    let error = new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.DRM,\n        shaka.util.Error.Code.FAILED_TO_CREATE_SESSION,\n        exception.message);\n    this.onError_(error);\n    return Promise.reject(error);\n  }\n\n  this.eventManager_.listen(session, 'message',\n      /** @type {shaka.util.EventManager.ListenerType} */(\n          this.onSessionMessage_.bind(this)));\n  this.eventManager_.listen(session, 'keystatuseschange',\n      this.onKeyStatusesChange_.bind(this));\n\n  let activeSession = {\n    initData: null,\n    session: session,\n    loaded: false,\n    oldExpiration: Infinity,\n    updatePromise: null,\n  };\n  this.activeSessions_.push(activeSession);\n\n  return session.load(sessionId).then(function(present) {\n    if (this.destroyed_) return;\n\n    if (!present) {\n      let i = this.activeSessions_.indexOf(activeSession);\n      goog.asserts.assert(i >= 0, 'Session must be in the array');\n      this.activeSessions_.splice(i, 1);\n\n      this.onError_(new shaka.util.Error(\n          shaka.util.Error.Severity.CRITICAL,\n          shaka.util.Error.Category.DRM,\n          shaka.util.Error.Code.OFFLINE_SESSION_REMOVED));\n      return;\n    }\n\n    // TODO: We should get a key status change event.  Remove once Chrome CDM\n    // is fixed.\n    activeSession.loaded = true;\n    if (this.activeSessions_.every((s) => s.loaded)) {\n      this.allSessionsLoaded_.resolve();\n    }\n\n    return session;\n  }.bind(this), function(error) {\n    if (this.destroyed_) return;\n\n    let i = this.activeSessions_.indexOf(activeSession);\n    goog.asserts.assert(i >= 0, 'Session must be in the array');\n    this.activeSessions_.splice(i, 1);\n\n    this.onError_(new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.DRM,\n        shaka.util.Error.Code.FAILED_TO_CREATE_SESSION,\n        error.message));\n  }.bind(this));\n};\n\n\n/**\n * @param {string} initDataType\n * @param {!Uint8Array} initData\n * @private\n */\nshaka.media.DrmEngine.prototype.createTemporarySession_ =\n    function(initDataType, initData) {\n  let session;\n  try {\n    if (this.usePersistentLicenses_) {\n      session = this.mediaKeys_.createSession('persistent-license');\n    } else {\n      session = this.mediaKeys_.createSession();\n    }\n  } catch (exception) {\n    this.onError_(new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.DRM,\n        shaka.util.Error.Code.FAILED_TO_CREATE_SESSION,\n        exception.message));\n    return;\n  }\n\n  this.eventManager_.listen(session, 'message',\n      /** @type {shaka.util.EventManager.ListenerType} */(\n          this.onSessionMessage_.bind(this)));\n  this.eventManager_.listen(session, 'keystatuseschange',\n      this.onKeyStatusesChange_.bind(this));\n  this.activeSessions_.push({\n    initData: initData,\n    session: session,\n    loaded: false,\n    oldExpiration: Infinity,\n    updatePromise: null,\n  });\n\n  session.generateRequest(initDataType, initData.buffer).catch(function(error) {\n    if (this.destroyed_) return;\n\n    for (let i = 0; i < this.activeSessions_.length; ++i) {\n      if (this.activeSessions_[i].session == session) {\n        this.activeSessions_.splice(i, 1);\n        break;\n      }\n    }\n    this.onError_(new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.DRM,\n        shaka.util.Error.Code.FAILED_TO_GENERATE_LICENSE_REQUEST,\n        error.message));\n  }.bind(this));\n};\n\n\n/**\n * @param {!MediaKeyMessageEvent} event\n * @private\n */\nshaka.media.DrmEngine.prototype.onSessionMessage_ = function(event) {\n  if (this.delayLicenseRequest_()) {\n    this.mediaKeyMessageEvents_.push(event);\n  } else {\n    this.sendLicenseRequest_(event);\n  }\n};\n\n\n/**\n * @return {boolean}\n * @private\n */\nshaka.media.DrmEngine.prototype.delayLicenseRequest_ = function() {\n  return (this.config_.delayLicenseRequestUntilPlayed &&\n          this.video_.paused && !this.initialRequestsSent_);\n};\n\n\n/**\n * Sends a license request.\n * @param {!MediaKeyMessageEvent} event\n * @private\n */\nshaka.media.DrmEngine.prototype.sendLicenseRequest_ = function(event) {\n  /** @type {!MediaKeySession} */\n  let session = event.target;\n\n  let activeSession;\n  for (let i = 0; i < this.activeSessions_.length; i++) {\n    if (this.activeSessions_[i].session == session) {\n      activeSession = this.activeSessions_[i];\n      break;\n    }\n  }\n\n  const requestType = shaka.net.NetworkingEngine.RequestType.LICENSE;\n  let request = shaka.net.NetworkingEngine.makeRequest(\n      [this.currentDrmInfo_.licenseServerUri], this.config_.retryParameters);\n  request.body = event.message;\n  request.method = 'POST';\n  // NOTE: allowCrossSiteCredentials can be set in a request filter.\n\n  if (this.currentDrmInfo_.keySystem == 'com.microsoft.playready' ||\n      this.currentDrmInfo_.keySystem == 'com.chromecast.playready') {\n    this.unpackPlayReadyRequest_(request);\n  }\n\n  this.playerInterface_.netEngine.request(requestType, request).promise\n      .then(function(response) {\n        if (this.destroyed_) return Promise.reject();\n\n        // Request succeeded, now pass the response to the CDM.\n        return session.update(response.data).then(function() {\n          let event = new shaka.util.FakeEvent('drmsessionupdate');\n          this.playerInterface_.onEvent(event);\n\n          if (activeSession) {\n            if (activeSession.updatePromise) {\n              activeSession.updatePromise.resolve();\n            }\n            // In case there are no key statuses, consider this session loaded\n            // after a reasonable timeout.  It should definitely not take 5\n            // seconds to process a license.\n            const loadTimeout = shaka.media.DrmEngine.timeout_(\n                shaka.media.DrmEngine.SESSION_LOAD_TIMEOUT_);\n            loadTimeout.then(() => {\n              activeSession.loaded = true;\n              if (this.activeSessions_.every((s) => s.loaded)) {\n                this.allSessionsLoaded_.resolve();\n              }\n            });\n          }\n        }.bind(this));\n      }.bind(this), function(error) {\n        // Ignore destruction errors\n        if (this.destroyed_) return Promise.resolve();\n\n        // Request failed!\n        goog.asserts.assert(error instanceof shaka.util.Error,\n                            'Wrong NetworkingEngine error type!');\n        let shakaErr = new shaka.util.Error(\n            shaka.util.Error.Severity.CRITICAL,\n            shaka.util.Error.Category.DRM,\n            shaka.util.Error.Code.LICENSE_REQUEST_FAILED,\n            error);\n        this.onError_(shakaErr);\n        if (activeSession && activeSession.updatePromise) {\n          activeSession.updatePromise.reject(shakaErr);\n        }\n      }.bind(this)).catch(function(error) {\n        // Ignore destruction errors\n        if (this.destroyed_) return Promise.resolve();\n\n        // Session update failed!\n        let shakaErr = new shaka.util.Error(\n            shaka.util.Error.Severity.CRITICAL,\n            shaka.util.Error.Category.DRM,\n            shaka.util.Error.Code.LICENSE_RESPONSE_REJECTED,\n            error.message);\n        this.onError_(shakaErr);\n        if (activeSession && activeSession.updatePromise) {\n          activeSession.updatePromise.reject(shakaErr);\n        }\n      }.bind(this));\n};\n\n\n/**\n * Unpacks PlayReady license requests.  Modifies the request object.\n * @param {shaka.extern.Request} request\n * @private\n */\nshaka.media.DrmEngine.prototype.unpackPlayReadyRequest_ = function(request) {\n  // On IE and Edge, the raw license message is UTF-16-encoded XML.  We need to\n  // unpack the Challenge element (base64-encoded string containing the actual\n  // license request) and any HttpHeader elements (sent as request headers).\n\n  // Example XML:\n\n  // <PlayReadyKeyMessage type=\"LicenseAcquisition\">\n  //   <LicenseAcquisition Version=\"1\">\n  //     <Challenge encoding=\"base64encoded\">{Base64Data}</Challenge>\n  //     <HttpHeaders>\n  //       <HttpHeader>\n  //         <name>Content-Type</name>\n  //         <value>text/xml; charset=utf-8</value>\n  //       </HttpHeader>\n  //       <HttpHeader>\n  //         <name>SOAPAction</name>\n  //         <value>http://schemas.microsoft.com/DRM/etc/etc</value>\n  //       </HttpHeader>\n  //     </HttpHeaders>\n  //   </LicenseAcquisition>\n  // </PlayReadyKeyMessage>\n\n  let xml = shaka.util.StringUtils.fromUTF16(\n      request.body, true /* littleEndian */, true /* noThrow */);\n  if (xml.indexOf('PlayReadyKeyMessage') == -1) {\n    // This does not appear to be a wrapped message as on IE and Edge.  Some\n    // clients do not need this unwrapping, so we will assume this is one of\n    // them.  Note that \"xml\" at this point probably looks like random garbage,\n    // since we interpreted UTF-8 as UTF-16.\n    shaka.log.debug('PlayReady request is already unwrapped.');\n    request.headers['Content-Type'] = 'text/xml; charset=utf-8';\n    return;\n  }\n  shaka.log.debug('Unwrapping PlayReady request.');\n  let dom = new DOMParser().parseFromString(xml, 'application/xml');\n\n  // Set request headers.\n  let headers = dom.getElementsByTagName('HttpHeader');\n  for (let i = 0; i < headers.length; ++i) {\n    let name = headers[i].querySelector('name');\n    let value = headers[i].querySelector('value');\n    goog.asserts.assert(name && value, 'Malformed PlayReady headers!');\n    request.headers[name.textContent] = value.textContent;\n  }\n\n  // Unpack the base64-encoded challenge.\n  let challenge = dom.querySelector('Challenge');\n  goog.asserts.assert(challenge, 'Malformed PlayReady challenge!');\n  goog.asserts.assert(challenge.getAttribute('encoding') == 'base64encoded',\n                      'Unexpected PlayReady challenge encoding!');\n  request.body =\n      shaka.util.Uint8ArrayUtils.fromBase64(challenge.textContent).buffer;\n};\n\n\n/**\n * @param {!Event} event\n * @private\n * @suppress {invalidCasts} to swap keyId and status\n */\nshaka.media.DrmEngine.prototype.onKeyStatusesChange_ = function(event) {\n  let session = /** @type {!MediaKeySession} */(event.target);\n\n  // Locate the session in the active sessions list.\n  let i;\n  for (i = 0; i < this.activeSessions_.length; ++i) {\n    if (this.activeSessions_[i].session == session) {\n      break;\n    }\n  }\n  goog.asserts.assert(i < this.activeSessions_.length,\n                      'Key status change for inactive session!');\n  if (i == this.activeSessions_.length) return;\n\n  let keyStatusMap = session.keyStatuses;\n  let hasExpiredKeys = false;\n\n  keyStatusMap.forEach(function(status, keyId) {\n    // The spec has changed a few times on the exact order of arguments here.\n    // As of 2016-06-30, Edge has the order reversed compared to the current\n    // EME spec.  Given the back and forth in the spec, it may not be the only\n    // one.  Try to detect this and compensate:\n    if (typeof keyId == 'string') {\n      let tmp = keyId;\n      keyId = /** @type {ArrayBuffer} */(status);\n      status = /** @type {string} */(tmp);\n    }\n\n    // Microsoft's implementation in Edge seems to present key IDs as\n    // little-endian UUIDs, rather than big-endian or just plain array of bytes.\n    // standard: 6e 5a 1d 26 - 27 57 - 47 d7 - 80 46 ea a5 d1 d3 4b 5a\n    // on Edge:  26 1d 5a 6e - 57 27 - d7 47 - 80 46 ea a5 d1 d3 4b 5a\n    // Bug filed: https://bit.ly/2thuzXu\n\n    // NOTE that we skip this if byteLength != 16.  This is used for the IE11\n    // and Edge 12 EME polyfill, which uses single-byte dummy key IDs.\n    if (this.currentDrmInfo_.keySystem == 'com.microsoft.playready' &&\n        keyId.byteLength == 16) {\n      // Read out some fields in little-endian:\n      let dataView = new DataView(keyId);\n      let part0 = dataView.getUint32(0, true /* LE */);\n      let part1 = dataView.getUint16(4, true /* LE */);\n      let part2 = dataView.getUint16(6, true /* LE */);\n      // Write it back in big-endian:\n      dataView.setUint32(0, part0, false /* BE */);\n      dataView.setUint16(4, part1, false /* BE */);\n      dataView.setUint16(6, part2, false /* BE */);\n    }\n\n    // Microsoft's implementation in IE11 seems to never set key status to\n    // 'usable'.  It is stuck forever at 'status-pending'.  In spite of this,\n    // the keys do seem to be usable and content plays correctly.\n    // Bug filed: https://bit.ly/2tpIU3n\n    // Microsoft has fixed the issue on Edge, but it remains in IE.\n    if (this.currentDrmInfo_.keySystem == 'com.microsoft.playready' &&\n        status == 'status-pending') {\n      status = 'usable';\n    }\n\n    if (status != 'status-pending') {\n      this.activeSessions_[i].loaded = true;\n    }\n\n    if (status == 'expired') {\n      hasExpiredKeys = true;\n    }\n\n    let keyIdHex = shaka.util.Uint8ArrayUtils.toHex(new Uint8Array(keyId));\n\n    this.keyStatusByKeyId_[keyIdHex] = status;\n  }.bind(this));\n\n  // If the session has expired, close it.\n  // Some CDMs do not have sub-second time resolution, so the key status may\n  // fire with hundreds of milliseconds left until the stated expiration time.\n  let msUntilExpiration = session.expiration - Date.now();\n  if (msUntilExpiration < 0 || (hasExpiredKeys && msUntilExpiration < 1000)) {\n    // If this is part of a remove(), we don't want to close the session until\n    // the update is complete.  Otherwise, we will orphan the session.\n    if (!this.activeSessions_[i].updatePromise) {\n      shaka.log.debug('Session has expired', session);\n      this.activeSessions_.splice(i, 1);\n      session.close().catch(() => {});  // Silence uncaught rejection errors\n    }\n  }\n\n  const allSessionsLoaded = this.activeSessions_.every((s) => s.loaded);\n  if (!allSessionsLoaded) {\n    // Don't announce key statuses or resolve the \"all loaded\" promise until\n    // everything is loaded.\n    return;\n  }\n\n  this.allSessionsLoaded_.resolve();\n\n  // Batch up key status changes before checking them or notifying Player.\n  // This handles cases where the statuses of multiple sessions are set\n  // simultaneously by the browser before dispatching key status changes for\n  // each of them.  By batching these up, we only send one status change event\n  // and at most one EXPIRED error on expiration.\n  this.keyStatusTimer_.schedule(shaka.media.DrmEngine.KEY_STATUS_BATCH_TIME_);\n};\n\n\n/**\n * @private\n */\nshaka.media.DrmEngine.prototype.processKeyStatusChanges_ = function() {\n  // Copy the latest key statuses into the publicly-accessible map.\n  this.announcedKeyStatusByKeyId_ = {};\n  for (let keyId in this.keyStatusByKeyId_) {\n    this.announcedKeyStatusByKeyId_[keyId] = this.keyStatusByKeyId_[keyId];\n  }\n\n  // If all keys are expired, fire an error.\n  let isExpired = (keyId, status) => status == 'expired';\n\n  const MapUtils = shaka.util.MapUtils;\n  // Note that every() is always true for an empty map,\n  // but we shouldn't fire an error for a lack of key status info.\n  let allExpired = !MapUtils.empty(this.announcedKeyStatusByKeyId_) &&\n                   MapUtils.every(this.announcedKeyStatusByKeyId_, isExpired);\n\n  if (allExpired) {\n    this.onError_(new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.DRM,\n        shaka.util.Error.Code.EXPIRED));\n  }\n\n  this.playerInterface_.onKeyStatus(this.announcedKeyStatusByKeyId_);\n};\n\n\n/**\n * Returns true if the browser has recent EME APIs.\n *\n * @return {boolean}\n */\nshaka.media.DrmEngine.isBrowserSupported = function() {\n  let basic =\n      !!window.MediaKeys &&\n      !!window.navigator &&\n      !!window.navigator.requestMediaKeySystemAccess &&\n      !!window.MediaKeySystemAccess &&\n      !!window.MediaKeySystemAccess.prototype.getConfiguration;\n\n  return basic;\n};\n\n\n/**\n * Returns a Promise to a map of EME support for well-known key systems.\n *\n * @return {!Promise.<!Object.<string, ?shaka.extern.DrmSupportType>>}\n */\nshaka.media.DrmEngine.probeSupport = function() {\n  goog.asserts.assert(shaka.media.DrmEngine.isBrowserSupported(),\n                      'Must have basic EME support');\n\n  let tests = [];\n  let testKeySystems = [\n    'org.w3.clearkey',\n    'com.widevine.alpha',\n    'com.microsoft.playready',\n    'com.apple.fps.2_0',\n    'com.apple.fps.1_0',\n    'com.apple.fps',\n    'com.adobe.primetime',\n  ];\n\n  let basicVideoCapabilities = [\n    {contentType: 'video/mp4; codecs=\"avc1.42E01E\"'},\n    {contentType: 'video/webm; codecs=\"vp8\"'},\n  ];\n\n  let basicConfig = {\n    videoCapabilities: basicVideoCapabilities,\n  };\n  let offlineConfig = {\n    videoCapabilities: basicVideoCapabilities,\n    persistentState: 'required',\n    sessionTypes: ['persistent-license'],\n  };\n\n  // Try the offline config first, then fall back to the basic config.\n  let configs = [offlineConfig, basicConfig];\n\n  let support = {};\n  testKeySystems.forEach((keySystem) => {\n    let p = navigator.requestMediaKeySystemAccess(keySystem, configs)\n        .then((access) => {\n          // Edge doesn't return supported session types, but current versions\n          // do not support persistent-license.  If sessionTypes is missing,\n          // assume no support for persistent-license.\n          // TODO: Polyfill Edge to return known supported session types.\n          // Edge bug: https://bit.ly/2IeKzho\n          let sessionTypes = access.getConfiguration().sessionTypes;\n          let persistentState = sessionTypes ?\n              sessionTypes.indexOf('persistent-license') >= 0 : false;\n\n          // Tizen 3.0 doesn't support persistent licenses, but reports that it\n          // does.  It doesn't fail until you call update() with a license\n          // response, which is way too late.\n          // This is a work-around for #894.\n          if (navigator.userAgent.indexOf('Tizen 3') >= 0) {\n            persistentState = false;\n          }\n\n          support[keySystem] = {persistentState: persistentState};\n          return access.createMediaKeys();\n        }).catch(() => {\n          // Either the request failed or createMediaKeys failed.\n          // Either way, write null to the support object.\n          support[keySystem] = null;\n        });\n    tests.push(p);\n  });\n\n  return Promise.all(tests).then(() => support);\n};\n\n\n/**\n * @private\n */\nshaka.media.DrmEngine.prototype.onPlay_ = function() {\n  for (let i = 0; i < this.mediaKeyMessageEvents_.length; i++) {\n    this.sendLicenseRequest_(this.mediaKeyMessageEvents_[i]);\n  }\n\n  this.initialRequestsSent_ = true;\n  this.mediaKeyMessageEvents_ = [];\n};\n\n\n/**\n * Checks if a variant is compatible with the key system.\n * @param {!shaka.extern.Variant} variant\n * @return {boolean}\n**/\nshaka.media.DrmEngine.prototype.supportsVariant = function(variant) {\n  /** @type {function (shaka.extern.Stream):boolean} */\n  const supportsStream = (stream) => {\n    // When null it means it supports everything - because we don't actually\n    // know what is supported.\n    if (this.supportedTypes_ == null) {\n      return true;\n    }\n\n    const streamType = shaka.util.MimeUtils.getFullType(\n        stream.mimeType, stream.codecs);\n\n    return this.supportedTypes_.some((type) => type == streamType);\n  };\n\n  if (variant.audio && !supportsStream(variant.audio)) {\n    return false;\n  }\n\n  if (variant.video && !supportsStream(variant.video)) {\n    return false;\n  }\n\n  const keySystem = this.keySystem();\n  return variant.drmInfos.length == 0 ||\n      variant.drmInfos.some((drmInfo) => drmInfo.keySystem == keySystem);\n};\n\n\n/**\n * Checks if two DrmInfos can be decrypted using the same key system.\n * Clear content is considered compatible with every key system.\n *\n * @param {!Array.<!shaka.extern.DrmInfo>} drms1\n * @param {!Array.<!shaka.extern.DrmInfo>} drms2\n * @return {boolean}\n */\nshaka.media.DrmEngine.areDrmCompatible = function(drms1, drms2) {\n  if (!drms1.length || !drms2.length) return true;\n\n  return shaka.media.DrmEngine.getCommonDrmInfos(\n      drms1, drms2).length > 0;\n};\n\n\n/**\n * Returns an array of drm infos that are present in both input arrays.\n * If one of the arrays is empty, returns the other one since clear\n * content is considered compatible with every drm info.\n *\n * @param {!Array.<!shaka.extern.DrmInfo>} drms1\n * @param {!Array.<!shaka.extern.DrmInfo>} drms2\n * @return {!Array.<!shaka.extern.DrmInfo>}\n */\nshaka.media.DrmEngine.getCommonDrmInfos = function(drms1, drms2) {\n  if (!drms1.length) return drms2;\n  if (!drms2.length) return drms1;\n\n  let commonDrms = [];\n\n  for (let i = 0; i < drms1.length; i++) {\n    for (let j = 0; j < drms2.length; j++) {\n      // This method is only called to compare drmInfos of a video and an audio\n      // adaptations, so we shouldn't have to worry about checking robustness.\n      if (drms1[i].keySystem == drms2[j].keySystem) {\n        let drm1 = drms1[i];\n        let drm2 = drms2[j];\n        let initData = [];\n        initData = initData.concat(drm1.initData || []);\n        initData = initData.concat(drm2.initData || []);\n        let keyIds = [];\n        keyIds = keyIds.concat(drm1.keyIds);\n        keyIds = keyIds.concat(drm2.keyIds);\n        let mergedDrm = {\n          keySystem: drm1.keySystem,\n          licenseServerUri: drm1.licenseServerUri || drm2.licenseServerUri,\n          distinctiveIdentifierRequired: drm1.distinctiveIdentifierRequired ||\n              drm2.distinctiveIdentifierRequired,\n          persistentStateRequired: drm1.persistentStateRequired ||\n              drm2.persistentStateRequired,\n          videoRobustness: drm1.videoRobustness || drm2.videoRobustness,\n          audioRobustness: drm1.audioRobustness || drm2.audioRobustness,\n          serverCertificate: drm1.serverCertificate || drm2.serverCertificate,\n          initData: initData,\n          keyIds: keyIds,\n        };\n        commonDrms.push(mergedDrm);\n        break;\n      }\n    }\n  }\n\n  return commonDrms;\n};\n\n\n/**\n * Called in an interval timer to poll the expiration times of the sessions.  We\n * don't get an event from EME when the expiration updates, so we poll it so we\n * can fire an event when it happens.\n * @private\n */\nshaka.media.DrmEngine.prototype.pollExpiration_ = function() {\n  this.activeSessions_.forEach(function(session) {\n    let old = session.oldExpiration;\n    let new_ = session.session.expiration;\n    if (isNaN(new_)) {\n      new_ = Infinity;\n    }\n\n    if (new_ != old) {\n      this.playerInterface_.onExpirationUpdated(\n          session.session.sessionId, new_);\n      session.oldExpiration = new_;\n    }\n  }.bind(this));\n};\n\n\n/**\n * Create a promise that will be resolved after the given amount of time as\n * elapsed.\n *\n * @param {number} seconds\n * @return {!Promise}\n * @private\n */\nshaka.media.DrmEngine.timeout_ = function(seconds) {\n  return new Promise((resolve) => setTimeout(resolve, seconds * 1000));\n};\n\n\n/**\n * The amount of time, in seconds, we wait to consider a session closed.\n * This allows us to work around Chrome bug https://crbug.com/690583.\n * @private {number}\n */\nshaka.media.DrmEngine.CLOSE_TIMEOUT_ = 1;\n\n/**\n * The amount of time, in seconds, we wait to consider session loaded even if no\n * key status information is available.  This allows us to support browsers/CDMs\n * without key statuses.\n * @private {number}\n */\nshaka.media.DrmEngine.SESSION_LOAD_TIMEOUT_ = 5;\n\n/**\n * The amount of time, in seconds, we wait to batch up rapid key status changes.\n * This allows us to avoid multiple expiration events in most cases.\n * @private {number}\n */\nshaka.media.DrmEngine.KEY_STATUS_BATCH_TIME_ = 0.5;\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.media.TimeRangesUtils');\n\n\n/**\n * @namespace shaka.media.TimeRangesUtils\n * @summary A set of utility functions for dealing with TimeRanges objects.\n */\n\n\n/**\n * Gets the first timestamp in the buffer.\n *\n * @param {TimeRanges} b\n * @return {?number} The first buffered timestamp, in seconds, if |buffered|\n *   is non-empty; otherwise, return null.\n */\nshaka.media.TimeRangesUtils.bufferStart = function(b) {\n  if (!b) return null;\n  // Workaround Safari bug: https://bit.ly/2trx6O8\n  if (b.length == 1 && b.end(0) - b.start(0) < 1e-6) return null;\n  // Workaround Edge bug: https://bit.ly/2JYLPeB\n  if (b.length == 1 && b.start(0) < 0) return 0;\n  return b.length ? b.start(0) : null;\n};\n\n\n/**\n * Gets the last timestamp in the buffer.\n *\n * @param {TimeRanges} b\n * @return {?number} The last buffered timestamp, in seconds, if |buffered|\n *   is non-empty; otherwise, return null.\n */\nshaka.media.TimeRangesUtils.bufferEnd = function(b) {\n  if (!b) return null;\n  // Workaround Safari bug: https://bit.ly/2trx6O8\n  if (b.length == 1 && b.end(0) - b.start(0) < 1e-6) return null;\n  return b.length ? b.end(b.length - 1) : null;\n};\n\n\n/**\n * Determines if the given time is inside a buffered range.  This includes gaps,\n * meaning that if the playhead is in a gap, it is considered buffered. If there\n * is a small gap between the playhead and buffer start, consider it as\n * buffered.\n *\n * @param {TimeRanges} b\n * @param {number} time Playhead time\n * @param {number=} smallGapLimit Set in configuration\n * @return {boolean}\n */\nshaka.media.TimeRangesUtils.isBuffered = function(b, time, smallGapLimit = 0) {\n  if (!b || !b.length) return false;\n  // Workaround Safari bug: https://bit.ly/2trx6O8\n  if (b.length == 1 && b.end(0) - b.start(0) < 1e-6) return false;\n\n  if (time > b.end(b.length - 1)) {\n    return false;\n  }\n  // Push the time forward by the gap limit so that it is more likely to be in\n  // the range.\n  return (time + smallGapLimit >= b.start(0));\n};\n\n\n/**\n * Computes how far ahead of the given timestamp is buffered.  To provide smooth\n * playback while jumping gaps, we don't include the gaps when calculating this.\n * This only includes the amount of content that is buffered.\n *\n * @param {TimeRanges} b\n * @param {number} time\n * @return {number} The number of seconds buffered, in seconds, ahead of the\n *   given time.\n */\nshaka.media.TimeRangesUtils.bufferedAheadOf = function(b, time) {\n  if (!b || !b.length) return 0;\n  // Workaround Safari bug: https://bit.ly/2trx6O8\n  if (b.length == 1 && b.end(0) - b.start(0) < 1e-6) return 0;\n\n  // NOTE: On IE11, buffered ranges may show appended data before the associated\n  // append operation is complete.\n\n  // We calculate the buffered amount by ONLY accounting for the content\n  // buffered (i.e. we ignore the times of the gaps).  We also buffer through\n  // all gaps.\n  // Therefore, we start at the end and add up all buffers until |time|.\n  let result = 0;\n  for (let i = b.length - 1; i >= 0 && b.end(i) > time; --i) {\n    result += b.end(i) - Math.max(b.start(i), time);\n  }\n\n  return result;\n};\n\n\n/**\n * Determines if the given time is inside a gap between buffered ranges.  If it\n * is, this returns the index of the buffer that is *ahead* of the gap.\n *\n * @param {TimeRanges} b\n * @param {number} time\n * @return {?number} The index of the buffer after the gap, or null if not in a\n *   gap.\n */\nshaka.media.TimeRangesUtils.getGapIndex = function(b, time) {\n  if (!b || !b.length) return null;\n  // Workaround Safari bug: https://bit.ly/2trx6O8\n  if (b.length == 1 && b.end(0) - b.start(0) < 1e-6) return null;\n\n  // IE/Edge stops 0.5 seconds before a gap, so it needs a much larger\n  // threshold, but we don't want to punish other browsers that stop closer.\n  // See: https://bit.ly/2K5xmJO\n  let threshold = 0.1;\n  if (/(Edge\\/|Trident\\/|Tizen)/.test(navigator.userAgent)) {\n    threshold = 0.5;\n  }\n\n  for (let i = 0; i < b.length; i++) {\n    if (b.start(i) > time && (i == 0 || b.end(i - 1) - time <= threshold)) {\n      return i;\n    }\n  }\n\n  return null;\n};\n\n\n/**\n * @param {TimeRanges} b\n * @return {!Array.<shaka.extern.BufferedRange>}\n */\nshaka.media.TimeRangesUtils.getBufferedInfo = function(b) {\n  if (!b) return [];\n  let ret = [];\n  for (let i = 0; i < b.length; i++) {\n    ret.push({start: b.start(i), end: b.end(i)});\n  }\n  return ret;\n};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.text.Cue');\ngoog.provide('shaka.text.CueRegion');\n\n/**\n * Creates a Cue object.\n *\n * @param {number} startTime\n * @param {number} endTime\n * @param {string} payload\n *\n * @implements {shaka.extern.Cue}\n * @constructor\n * @struct\n * @export\n */\nshaka.text.Cue = function(startTime, endTime, payload) {\n  const Cue = shaka.text.Cue;\n\n  /**\n   * @override\n   * @exportInterface\n   */\n  this.startTime = startTime;\n\n  /**\n   * @override\n   * @exportInterface\n   */\n  this.endTime = endTime;\n\n  /**\n   * @override\n   * @exportInterface\n   */\n  this.payload = payload;\n\n  /**\n   * @override\n   * @exportInterface\n   */\n  this.region = new shaka.text.CueRegion();\n\n  /**\n   * @override\n   * @exportInterface\n   */\n  this.position = null;\n\n  /**\n   * @override\n   * @exportInterface\n   */\n  this.positionAlign = Cue.positionAlign.AUTO;\n\n  /**\n   * @override\n   * @exportInterface\n   */\n  this.size = 100;\n\n  /**\n   * @override\n   * @exportInterface\n   */\n  this.textAlign = Cue.textAlign.CENTER;\n\n  /**\n   * @override\n   * @exportInterface\n   */\n  this.writingDirection = Cue.writingDirection.HORIZONTAL_LEFT_TO_RIGHT;\n\n  /**\n   * @override\n   * @exportInterface\n   */\n  this.lineInterpretation = Cue.lineInterpretation.LINE_NUMBER;\n\n  /**\n   * @override\n   * @exportInterface\n   */\n  this.line = null;\n\n  /**\n   * @override\n   * @exportInterface\n   */\n  this.lineHeight = '';\n\n  /**\n   * @override\n   * @exportInterface\n   */\n  this.lineAlign = Cue.lineAlign.CENTER;\n\n  /**\n   * @override\n   * @exportInterface\n   */\n  this.displayAlign = Cue.displayAlign.BEFORE;\n\n  /**\n   * @override\n   * @exportInterface\n   */\n  this.color = '';\n\n  /**\n   * @override\n   * @exportInterface\n   */\n  this.backgroundColor = '';\n\n  /**\n   * @override\n   * @exportInterface\n   */\n  this.fontSize = '';\n\n  /**\n   * @override\n   * @exportInterface\n   */\n  this.fontWeight = Cue.fontWeight.NORMAL;\n\n  /**\n   * @override\n   * @exportInterface\n   */\n  this.fontStyle = Cue.fontStyle.NORMAL;\n\n  /**\n   * @override\n   * @exportInterface\n   */\n  this.fontFamily = '';\n\n  /**\n   * @override\n   * @exportInterface\n   */\n  this.textDecoration = [];\n\n  /**\n   * @override\n   * @exportInterface\n   */\n  this.wrapLine = true;\n\n  /**\n   * @override\n   * @exportInterface\n   */\n  this.id = '';\n};\n\n\n/**\n * @enum {string}\n * @export\n */\nshaka.text.Cue.positionAlign = {\n  'LEFT': 'line-left',\n  'RIGHT': 'line-right',\n  'CENTER': 'center',\n  'AUTO': 'auto',\n};\n\n\n/**\n * @enum {string}\n * @export\n */\nshaka.text.Cue.textAlign = {\n  'LEFT': 'left',\n  'RIGHT': 'right',\n  'CENTER': 'center',\n  'START': 'start',\n  'END': 'end',\n};\n\n\n/**\n * @enum {string}\n * @export\n */\nshaka.text.Cue.displayAlign = {\n  'BEFORE': 'before',\n  'CENTER': 'center',\n  'AFTER': 'after',\n};\n\n\n/**\n * @enum {number}\n * @export\n */\nshaka.text.Cue.writingDirection = {\n  'HORIZONTAL_LEFT_TO_RIGHT': 0,\n  'HORIZONTAL_RIGHT_TO_LEFT': 1,\n  'VERTICAL_LEFT_TO_RIGHT': 2,\n  'VERTICAL_RIGHT_TO_LEFT': 3,\n};\n\n\n/**\n * @enum {number}\n * @export\n */\nshaka.text.Cue.lineInterpretation = {\n  'LINE_NUMBER': 0,\n  'PERCENTAGE': 1,\n};\n\n\n/**\n * @enum {string}\n * @export\n */\nshaka.text.Cue.lineAlign = {\n  'CENTER': 'center',\n  'START': 'start',\n  'END': 'end',\n};\n\n\n/**\n * In CSS font weight can be a number, where 400 is normal and 700 is bold.\n * Use these values for the enum for consistency.\n * @enum {number}\n * @export\n */\nshaka.text.Cue.fontWeight = {\n  'NORMAL': 400,\n  'BOLD': 700,\n};\n\n\n/**\n * @enum {string}\n * @export\n */\nshaka.text.Cue.fontStyle = {\n  'NORMAL': 'normal',\n  'ITALIC': 'italic',\n  'OBLIQUE': 'oblique',\n};\n\n\n/**\n * @enum {string}\n * @export\n */\nshaka.text.Cue.textDecoration = {\n  'UNDERLINE': 'underline',\n  'LINE_THROUGH': 'lineThrough',\n  'OVERLINE': 'overline',\n};\n\n\n/**\n * Creates a CueRegion object.\n *\n * @implements {shaka.extern.CueRegion}\n * @constructor\n * @struct\n * @export\n */\nshaka.text.CueRegion = function() {\n  const CueRegion = shaka.text.CueRegion;\n\n  /**\n   * @override\n   * @exportInterface\n   */\n  this.id = '';\n\n  /**\n   * @override\n   * @exportInterface\n   */\n  this.viewportAnchorX = 0;\n\n  /**\n   * @override\n   * @exportInterface\n   */\n  this.viewportAnchorY = 0;\n\n  /**\n   * @override\n   * @exportInterface\n   */\n  this.regionAnchorX = 0;\n\n  /**\n   * @override\n   * @exportInterface\n   */\n  this.regionAnchorY = 0;\n\n  /**\n   * @override\n   * @exportInterface\n   */\n  this.width = 100;\n\n  /**\n   * @override\n   * @exportInterface\n   */\n  this.height = 100;\n\n  /**\n   * @override\n   * @exportInterface\n   */\n  this.heightUnits = CueRegion.units.PERCENTAGE;\n\n  /**\n   * @override\n   * @exportInterface\n   */\n  this.widthUnits = CueRegion.units.PERCENTAGE;\n\n  /**\n   * @override\n   * @exportInterface\n   */\n  this.viewportAnchorUnits = CueRegion.units.PERCENTAGE;\n\n  /**\n   * @override\n   * @exportInterface\n   */\n  this.scroll = CueRegion.scrollMode.NONE;\n};\n\n\n/**\n * @enum {number}\n * @export\n */\nshaka.text.CueRegion.units = {\n  'PX': 0,\n  'PERCENTAGE': 1,\n  'LINES': 2,\n};\n\n\n/**\n * @enum {string}\n * @export\n */\nshaka.text.CueRegion.scrollMode = {\n  'NONE': '',\n  'UP': 'up',\n};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.media.Transmuxer');\n\ngoog.require('goog.asserts');\ngoog.require('shaka.text.Cue');\ngoog.require('shaka.util.Error');\ngoog.require('shaka.util.IDestroyable');\ngoog.require('shaka.util.ManifestParserUtils');\ngoog.require('shaka.util.PublicPromise');\ngoog.require('shaka.util.Uint8ArrayUtils');\n\n\n/**\n * Transmuxer provides all operations for transmuxing from Transport\n * Stream to MP4.\n *\n * @struct\n * @constructor\n * @implements {shaka.util.IDestroyable}\n */\nshaka.media.Transmuxer = function() {\n  /** @private {muxjs.mp4.Transmuxer} */\n  this.muxTransmuxer_ = new muxjs.mp4.Transmuxer({\n    'keepOriginalTimestamps': true,\n  });\n\n  /** @private {shaka.util.PublicPromise} */\n  this.transmuxPromise_ = null;\n\n  /** @private {!Array.<!Uint8Array>} */\n  this.transmuxedData_ = [];\n\n  /** @private {!Array.<shaka.text.Cue>} */\n  this.cues_ = [];\n\n  /** @private {boolean} */\n  this.isTransmuxing_ = false;\n\n  this.muxTransmuxer_.on('data', this.onTransmuxed_.bind(this));\n\n  this.muxTransmuxer_.on('done', this.onTransmuxDone_.bind(this));\n};\n\n\n/**\n * @override\n */\nshaka.media.Transmuxer.prototype.destroy = function() {\n  this.muxTransmuxer_.dispose();\n  this.muxTransmuxer_ = null;\n  return Promise.resolve();\n};\n\n\n/**\n * Check if the content type is Transport Stream, and if muxjs is loaded.\n * @param {string} mimeType\n * @param {string=} contentType\n * @return {boolean}\n */\nshaka.media.Transmuxer.isSupported = function(mimeType, contentType) {\n  if (!window.muxjs || !shaka.media.Transmuxer.isTsContainer(mimeType)) {\n    return false;\n  }\n  let convertTsCodecs = shaka.media.Transmuxer.convertTsCodecs;\n  if (contentType) {\n    return MediaSource.isTypeSupported(convertTsCodecs(contentType, mimeType));\n  }\n  const ContentType = shaka.util.ManifestParserUtils.ContentType;\n  return MediaSource.isTypeSupported(\n             convertTsCodecs(ContentType.AUDIO, mimeType)) ||\n      MediaSource.isTypeSupported(convertTsCodecs(ContentType.VIDEO, mimeType));\n};\n\n\n/**\n * Check if the mimetype contains 'mp2t'.\n * @param {string} mimeType\n * @return {boolean}\n */\nshaka.media.Transmuxer.isTsContainer = function(mimeType) {\n  return mimeType.split(';')[0].split('/')[1] == 'mp2t';\n};\n\n\n/**\n * For transport stream, convert its codecs to MP4 codecs.\n * @param {string} contentType\n * @param {string} tsMimeType\n * @return {string}\n */\nshaka.media.Transmuxer.convertTsCodecs = function(contentType, tsMimeType) {\n  const ContentType = shaka.util.ManifestParserUtils.ContentType;\n  let mp4MimeType = tsMimeType.replace('mp2t', 'mp4');\n  if (contentType == ContentType.AUDIO) {\n    mp4MimeType = mp4MimeType.replace('video', 'audio');\n  }\n\n  // Handle legacy AVC1 codec strings (pre-RFC 6381).\n  // Look for \"avc1.<profile>.<level>\", where profile is:\n  //   66 (baseline => 0x42)\n  //   77 (main => 0x4d)\n  //   100 (high => 0x64)\n  // Reference: https://bit.ly/2K9JI3x\n  let match = /avc1\\.(66|77|100)\\.(\\d+)/.exec(mp4MimeType);\n  if (match) {\n    let newCodecString = 'avc1.';\n\n    let profile = match[1];\n    if (profile == '66') {\n      newCodecString += '4200';\n    } else if (profile == '77') {\n      newCodecString += '4d00';\n    } else {\n      goog.asserts.assert(profile == '100',\n                          'Legacy avc1 parsing code out of sync with regex!');\n      newCodecString += '6400';\n    }\n\n    // Convert the level to hex and append to the codec string.\n    let level = Number(match[2]);\n    goog.asserts.assert(level < 256,\n                        'Invalid legacy avc1 level number!');\n    newCodecString += (level >> 4).toString(16);\n    newCodecString += (level & 0xf).toString(16);\n\n    mp4MimeType = mp4MimeType.replace(match[0], newCodecString);\n  }\n\n  return mp4MimeType;\n};\n\n\n/**\n * Transmux from Transport stream to MP4, using the mux.js library.\n * @param {!ArrayBuffer} data\n * @return {!Promise.<{data: !Uint8Array, cues: !Array.<!shaka.text.Cue>}>}\n */\nshaka.media.Transmuxer.prototype.transmux = function(data) {\n  goog.asserts.assert(!this.isTransmuxing_,\n      'No transmuxing should be in progress.');\n  this.isTransmuxing_ = true;\n  this.transmuxPromise_ = new shaka.util.PublicPromise();\n  this.transmuxedData_ = [];\n  this.cues_ = [];\n\n  let dataArray = new Uint8Array(data);\n  this.muxTransmuxer_.push(dataArray);\n  this.muxTransmuxer_.flush();\n\n  // Workaround for https://bit.ly/Shaka1449 mux.js not\n  // emitting 'data' and 'done' events.\n  // mux.js code is synchronous, so if onTransmuxDone_ has\n  // not been called by now, it's not going to be.\n  // Treat it as a transmuxing failure and reject the promise.\n  if (this.isTransmuxing_) {\n    this.transmuxPromise_.reject(new shaka.util.Error(\n            shaka.util.Error.Severity.CRITICAL,\n            shaka.util.Error.Category.MEDIA,\n            shaka.util.Error.Code.TRANSMUXING_FAILED));\n  }\n  return this.transmuxPromise_;\n};\n\n\n/**\n * Handles the 'data' event of the transmuxer.\n * Extracts the cues from the transmuxed segment, and adds them to an array.\n * Stores the transmuxed data in another array, to pass it back to\n * MediaSourceEngine, and append to the source buffer.\n *\n * @param {muxjs.mp4.Transmuxer.Segment} segment\n * @private\n */\nshaka.media.Transmuxer.prototype.onTransmuxed_ = function(segment) {\n  for (let i = 0; i < segment.captions.length; i++) {\n    let cue = segment.captions[i];\n    this.cues_.push(\n        new shaka.text.Cue(cue.startTime, cue.endTime, cue.text));\n  }\n\n  let segmentWithInit = new Uint8Array(segment.data.byteLength +\n      segment.initSegment.byteLength);\n  segmentWithInit.set(segment.initSegment, 0);\n  segmentWithInit.set(segment.data, segment.initSegment.byteLength);\n  this.transmuxedData_.push(segmentWithInit);\n};\n\n\n/**\n * Handles the 'done' event of the transmuxer.\n * Resolves the transmux Promise, and returns the transmuxed data.\n * @private\n */\nshaka.media.Transmuxer.prototype.onTransmuxDone_ = function() {\n  let output = {\n    data: shaka.util.Uint8ArrayUtils.concat.apply(null, this.transmuxedData_),\n    cues: this.cues_,\n  };\n\n  this.transmuxPromise_.resolve(output);\n  this.isTransmuxing_ = false;\n};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.text.TextEngine');\n\ngoog.require('goog.asserts');\ngoog.require('shaka.util.Error');\ngoog.require('shaka.util.IDestroyable');\n\n\n/**\n * Manages text parsers and cues.\n *\n * @param {shaka.extern.TextDisplayer} displayer\n * @struct\n * @constructor\n * @implements {shaka.util.IDestroyable}\n */\nshaka.text.TextEngine = function(displayer) {\n  /** @private {shaka.extern.TextParser} */\n  this.parser_ = null;\n\n  /** @private {shaka.extern.TextDisplayer} */\n  this.displayer_ = displayer;\n\n  /** @private {number} */\n  this.timestampOffset_ = 0;\n\n  /** @private {number} */\n  this.appendWindowStart_ = 0;\n\n  /** @private {number} */\n  this.appendWindowEnd_ = Infinity;\n\n  /** @private {?number} */\n  this.bufferStart_ = null;\n\n  /** @private {?number} */\n  this.bufferEnd_ = null;\n};\n\n\n/** @private {!Object.<string, !shaka.extern.TextParserPlugin>} */\nshaka.text.TextEngine.parserMap_ = {};\n\n\n/**\n * @param {string} mimeType\n * @param {!shaka.extern.TextParserPlugin} plugin\n * @export\n */\nshaka.text.TextEngine.registerParser = function(mimeType, plugin) {\n  shaka.text.TextEngine.parserMap_[mimeType] = plugin;\n};\n\n\n/**\n * @param {string} mimeType\n * @export\n */\nshaka.text.TextEngine.unregisterParser = function(mimeType) {\n  delete shaka.text.TextEngine.parserMap_[mimeType];\n};\n\n\n/**\n * @param {string} mimeType\n * @return {boolean}\n */\nshaka.text.TextEngine.isTypeSupported = function(mimeType) {\n  return !!shaka.text.TextEngine.parserMap_[mimeType];\n};\n\n\n/** @override */\nshaka.text.TextEngine.prototype.destroy = function() {\n  this.parser_ = null;\n  this.displayer_ = null;\n\n  return Promise.resolve();\n};\n\n\n/**\n * @param {shaka.extern.TextDisplayer} displayer\n * @export\n */\nshaka.text.TextEngine.prototype.setDisplayer = function(displayer) {\n  this.displayer_ = displayer;\n};\n\n\n/**\n * Initialize the parser.  This can be called multiple times, but must be called\n * at least once before appendBuffer.\n *\n * @param {string} mimeType\n */\nshaka.text.TextEngine.prototype.initParser = function(mimeType) {\n  let Factory = shaka.text.TextEngine.parserMap_[mimeType];\n  goog.asserts.assert(\n      Factory,\n      'Text type negotiation should have happened already');\n  this.parser_ = new Factory();\n};\n\n\n/**\n * Parse the start time from the text media segment, if possible.\n *\n * @param {!ArrayBuffer} buffer\n * @return {number}\n * @throws {shaka.util.Error} on failure\n */\nshaka.text.TextEngine.prototype.getStartTime = function(buffer) {\n  goog.asserts.assert(this.parser_, 'The parser should already be initialized');\n\n  /** @type {shaka.extern.TextParser.TimeContext} **/\n  let time = {\n    periodStart: 0,\n    segmentStart: null,\n    segmentEnd: 0,\n  };\n\n  // Parse the buffer and extract the first cue start time.\n  try {\n    let allCues = this.parser_.parseMedia(new Uint8Array(buffer), time);\n    return allCues[0].startTime;\n  } catch (exception) {\n    // This could be a failure from the parser itself (init segment required)\n    // or an exception from allCues.length being zero.\n    throw new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.TEXT,\n        shaka.util.Error.Code.UNABLE_TO_EXTRACT_CUE_START_TIME,\n        exception);\n  }\n};\n\n\n/**\n * @param {!ArrayBuffer} buffer\n * @param {?number} startTime\n * @param {?number} endTime\n * @return {!Promise}\n */\nshaka.text.TextEngine.prototype.appendBuffer =\n    function(buffer, startTime, endTime) {\n  goog.asserts.assert(this.parser_, 'The parser should already be initialized');\n\n  // Start the operation asynchronously to avoid blocking the caller.\n  return Promise.resolve().then(function() {\n    // Check that TextEngine hasn't been destroyed.\n    if (!this.parser_ || !this.displayer_) return;\n\n    if (startTime == null || endTime == null) {\n      this.parser_.parseInit(new Uint8Array(buffer));\n      return;\n    }\n\n    /** @type {shaka.extern.TextParser.TimeContext} **/\n    let time = {\n      periodStart: this.timestampOffset_,\n      segmentStart: this.timestampOffset_ + startTime,\n      segmentEnd: this.timestampOffset_ + endTime,\n    };\n\n    // Parse the buffer and add the new cues.\n    let allCues = this.parser_.parseMedia(new Uint8Array(buffer), time);\n    let cuesToAppend = allCues.filter(function(cue) {\n      return cue.startTime >= this.appendWindowStart_ &&\n             cue.startTime < this.appendWindowEnd_;\n    }.bind(this));\n\n    this.displayer_.append(cuesToAppend);\n\n    // NOTE: We update the buffered range from the start and end times passed\n    // down from the segment reference, not with the start and end times of the\n    // parsed cues.  This is important because some segments may contain no\n    // cues, but we must still consider those ranges buffered.\n    if (this.bufferStart_ == null) {\n      this.bufferStart_ =\n          Math.max(startTime + this.timestampOffset_, this.appendWindowStart_);\n    } else {\n      // We already had something in buffer, and we assume we are extending the\n      // range from the end.\n      goog.asserts.assert((startTime - this.bufferEnd_) <= 1,\n                          'There should not be a gap in text references >1s');\n    }\n    this.bufferEnd_ =\n        Math.min(endTime + this.timestampOffset_, this.appendWindowEnd_);\n  }.bind(this));\n};\n\n\n/**\n * @param {number} start\n * @param {number} end\n * @return {!Promise}\n */\nshaka.text.TextEngine.prototype.remove = function(start, end) {\n  // Start the operation asynchronously to avoid blocking the caller.\n  return Promise.resolve().then(function() {\n    if (this.displayer_ && this.displayer_.remove(start, end)) {\n      if (this.bufferStart_ == null) {\n        goog.asserts.assert(this.bufferEnd_ == null,\n                            'end must be null if start is null');\n      } else {\n        goog.asserts.assert(this.bufferEnd_ != null,\n                            'end must be non-null if start is non-null');\n\n        // Update buffered range.\n        if (end <= this.bufferStart_ || start >= this.bufferEnd_) {\n          // No intersection.  Nothing was removed.\n        } else if (start <= this.bufferStart_ && end >= this.bufferEnd_) {\n          // We wiped out everything.\n          this.bufferStart_ = this.bufferEnd_ = null;\n        } else if (start <= this.bufferStart_ && end < this.bufferEnd_) {\n          // We removed from the beginning of the range.\n          this.bufferStart_ = end;\n        } else if (start > this.bufferStart_ && end >= this.bufferEnd_) {\n          // We removed from the end of the range.\n          this.bufferEnd_ = start;\n        } else {\n          // We removed from the middle?  StreamingEngine isn't supposed to.\n          goog.asserts.assert(\n              false, 'removal from the middle is not supported by TextEngine');\n        }\n      }\n    }\n  }.bind(this));\n};\n\n\n/** @param {number} timestampOffset */\nshaka.text.TextEngine.prototype.setTimestampOffset =\n    function(timestampOffset) {\n  this.timestampOffset_ = timestampOffset;\n};\n\n\n/**\n * @param {number} appendWindowStart\n * @param {number} appendWindowEnd\n */\nshaka.text.TextEngine.prototype.setAppendWindow =\n    function(appendWindowStart, appendWindowEnd) {\n  this.appendWindowStart_ = appendWindowStart;\n  this.appendWindowEnd_ = appendWindowEnd;\n};\n\n\n/**\n * @return {?number} Time in seconds of the beginning of the buffered range,\n *   or null if nothing is buffered.\n */\nshaka.text.TextEngine.prototype.bufferStart = function() {\n  return this.bufferStart_;\n};\n\n\n/**\n * @return {?number} Time in seconds of the end of the buffered range,\n *   or null if nothing is buffered.\n */\nshaka.text.TextEngine.prototype.bufferEnd = function() {\n  return this.bufferEnd_;\n};\n\n\n/**\n * @param {number} t A timestamp\n * @return {boolean}\n */\nshaka.text.TextEngine.prototype.isBuffered = function(t) {\n  return t >= this.bufferStart_ && t < this.bufferEnd_;\n};\n\n\n/**\n * @param {number} t A timestamp\n * @return {number} Number of seconds ahead of 't' we have buffered\n */\nshaka.text.TextEngine.prototype.bufferedAheadOf = function(t) {\n  if (this.bufferEnd_ == null || this.bufferEnd_ < t) return 0;\n\n  goog.asserts.assert(\n      this.bufferStart_ != null, 'start should not be null if end is not null');\n\n  return this.bufferEnd_ - Math.max(t, this.bufferStart_);\n};\n\n\n/**\n * Append cues to text displayer.\n *\n * @param {!Array.<!shaka.text.Cue>} cues\n * @export\n */\nshaka.text.TextEngine.prototype.appendCues = function(cues) {\n  this.displayer_.append(cues);\n};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.media.MediaSourceEngine');\n\ngoog.require('goog.asserts');\ngoog.require('shaka.log');\ngoog.require('shaka.media.TimeRangesUtils');\ngoog.require('shaka.media.Transmuxer');\ngoog.require('shaka.text.TextEngine');\ngoog.require('shaka.util.Error');\ngoog.require('shaka.util.EventManager');\ngoog.require('shaka.util.Functional');\ngoog.require('shaka.util.IDestroyable');\ngoog.require('shaka.util.ManifestParserUtils');\ngoog.require('shaka.util.MimeUtils');\ngoog.require('shaka.util.PublicPromise');\n\n\n/**\n * MediaSourceEngine wraps all operations on MediaSource and SourceBuffers.\n * All asynchronous operations return a Promise, and all operations are\n * internally synchronized and serialized as needed.  Operations that can\n * be done in parallel will be done in parallel.\n *\n * @param {HTMLMediaElement} video The video element, whose source is tied to\n *   MediaSource during the lifetime of the MediaSourceEngine.\n *\n * @struct\n * @constructor\n * @implements {shaka.util.IDestroyable}\n */\nshaka.media.MediaSourceEngine = function(video) {\n  /** @private {HTMLMediaElement} */\n  this.video_ = video;\n\n  /** @private {shaka.extern.TextDisplayer} */\n  this.textDisplayer_ = null;\n\n  /** @private {!Object.<shaka.util.ManifestParserUtils.ContentType,\n                         SourceBuffer>} */\n  this.sourceBuffers_ = {};\n\n  /** @private {shaka.text.TextEngine} */\n  this.textEngine_ = null;\n\n  /**\n   * @private {!Object.<string,\n   *                    !Array.<shaka.media.MediaSourceEngine.Operation>>}\n   */\n  this.queues_ = {};\n\n  /** @private {shaka.util.EventManager} */\n  this.eventManager_ = new shaka.util.EventManager();\n\n  /** @private {boolean} */\n  this.destroyed_ = false;\n\n  /** @private {!Object.<string, !shaka.media.Transmuxer>} */\n  this.transmuxers_ = {};\n\n  /** @private {boolean} */\n  this.useEmbeddedText_ = false;\n\n  /** @private {!shaka.util.PublicPromise} */\n  this.mediaSourceOpen_ = new shaka.util.PublicPromise();\n\n  /** @private {MediaSource} */\n  this.mediaSource_ = this.createMediaSource(this.mediaSourceOpen_);\n};\n\n\n/**\n * Create a MediaSource object, attach it to the video element, and return it.\n * Resolves the given promise when the MediaSource is ready.\n *\n * Replaced by unit tests.\n *\n * @param {!shaka.util.PublicPromise} p\n * @return {!MediaSource}\n */\nshaka.media.MediaSourceEngine.prototype.createMediaSource = function(p) {\n  let mediaSource = new MediaSource();\n\n  // Set up MediaSource on the video element.\n  this.eventManager_.listenOnce(mediaSource, 'sourceopen', p.resolve);\n  this.video_.src = window.URL.createObjectURL(mediaSource);\n\n  return mediaSource;\n};\n\n\n/**\n * @typedef {{\n *   start: function(),\n *   p: !shaka.util.PublicPromise\n * }}\n *\n * @summary An operation in queue.\n * @property {function()} start\n *   The function which starts the operation.\n * @property {!shaka.util.PublicPromise} p\n *   The PublicPromise which is associated with this operation.\n */\nshaka.media.MediaSourceEngine.Operation;\n\n\n/**\n * Checks if a certain type is supported.\n *\n * @param {shaka.extern.Stream} stream\n * @return {boolean}\n */\nshaka.media.MediaSourceEngine.isStreamSupported = function(stream) {\n  let fullMimeType = shaka.util.MimeUtils.getFullType(\n      stream.mimeType, stream.codecs);\n  let extendedMimeType = shaka.util.MimeUtils.getExtendedType(stream);\n  return shaka.text.TextEngine.isTypeSupported(fullMimeType) ||\n      MediaSource.isTypeSupported(extendedMimeType) ||\n      shaka.media.Transmuxer.isSupported(fullMimeType, stream.type);\n};\n\n\n/**\n * Returns true if the browser has the basic APIs we need.\n *\n * @return {boolean}\n */\nshaka.media.MediaSourceEngine.isBrowserSupported = function() {\n  return !!window.MediaSource && !!MediaSource.isTypeSupported;\n};\n\n\n/**\n * Returns a map of MediaSource support for well-known types.\n *\n * @return {!Object.<string, boolean>}\n */\nshaka.media.MediaSourceEngine.probeSupport = function() {\n  goog.asserts.assert(shaka.media.MediaSourceEngine.isBrowserSupported(),\n                      'Requires basic support');\n  let support = {};\n  let testMimeTypes = [\n    // MP4 types\n    'video/mp4; codecs=\"avc1.42E01E\"',\n    'video/mp4; codecs=\"avc3.42E01E\"',\n    'video/mp4; codecs=\"hev1.1.6.L93.90\"',\n    'video/mp4; codecs=\"hvc1.1.6.L93.90\"',\n    'video/mp4; codecs=\"hev1.2.4.L153.B0\"; eotf=\"smpte2084\"',  // HDR HEVC\n    'video/mp4; codecs=\"hvc1.2.4.L153.B0\"; eotf=\"smpte2084\"',  // HDR HEVC\n    'video/mp4; codecs=\"vp9\"',\n    'video/mp4; codecs=\"vp09.00.10.08\"',\n    'audio/mp4; codecs=\"mp4a.40.2\"',\n    'audio/mp4; codecs=\"ac-3\"',\n    'audio/mp4; codecs=\"ec-3\"',\n    'audio/mp4; codecs=\"opus\"',\n    'audio/mp4; codecs=\"flac\"',\n    // WebM types\n    'video/webm; codecs=\"vp8\"',\n    'video/webm; codecs=\"vp9\"',\n    'video/webm; codecs=\"vp09.00.10.08\"',\n    'audio/webm; codecs=\"vorbis\"',\n    'audio/webm; codecs=\"opus\"',\n    // MPEG2 TS types (video/ is also used for audio: https://bit.ly/TsMse)\n    'video/mp2t; codecs=\"avc1.42E01E\"',\n    'video/mp2t; codecs=\"avc3.42E01E\"',\n    'video/mp2t; codecs=\"hvc1.1.6.L93.90\"',\n    'video/mp2t; codecs=\"mp4a.40.2\"',\n    'video/mp2t; codecs=\"ac-3\"',\n    'video/mp2t; codecs=\"ec-3\"',\n    // WebVTT types\n    'text/vtt',\n    'application/mp4; codecs=\"wvtt\"',\n    // TTML types\n    'application/ttml+xml',\n    'application/mp4; codecs=\"stpp\"',\n  ];\n\n  testMimeTypes.forEach(function(type) {\n    support[type] = shaka.text.TextEngine.isTypeSupported(type) ||\n        MediaSource.isTypeSupported(type) ||\n        shaka.media.Transmuxer.isSupported(type);\n    let basicType = type.split(';')[0];\n    support[basicType] = support[basicType] || support[type];\n  });\n\n  return support;\n};\n\n\n/** @override */\nshaka.media.MediaSourceEngine.prototype.destroy = function() {\n  const Functional = shaka.util.Functional;\n  this.destroyed_ = true;\n\n  let cleanup = [];\n\n  for (let contentType in this.queues_) {\n    // Make a local copy of the queue and the first item.\n    let q = this.queues_[contentType];\n    let inProgress = q[0];\n\n    // Drop everything else out of the original queue.\n    this.queues_[contentType] = q.slice(0, 1);\n\n    // We will wait for this item to complete/fail.\n    if (inProgress) {\n      cleanup.push(inProgress.p.catch(Functional.noop));\n    }\n\n    // The rest will be rejected silently if possible.\n    for (let i = 1; i < q.length; ++i) {\n      q[i].p.catch(Functional.noop);\n      q[i].p.reject();\n    }\n  }\n\n  if (this.textEngine_) {\n    cleanup.push(this.textEngine_.destroy());\n  }\n  for (let contentType in this.transmuxers_) {\n    cleanup.push(this.transmuxers_[contentType].destroy());\n  }\n\n  if (this.video_) {\n    this.video_.removeAttribute('src');\n    this.video_.load();\n  }\n\n  return Promise.all(cleanup).then(function() {\n    this.eventManager_.destroy();\n    this.eventManager_ = null;\n    this.video_ = null;\n    this.mediaSource_ = null;\n    this.textEngine_ = null;\n    this.textDisplayer_ = null;\n    this.sourceBuffers_ = {};\n    this.transmuxers_ = {};\n    if (goog.DEBUG) {\n      for (let contentType in this.queues_) {\n        goog.asserts.assert(\n            this.queues_[contentType].length == 0,\n            contentType + ' queue should be empty after destroy!');\n      }\n    }\n    this.queues_ = {};\n  }.bind(this));\n};\n\n\n/**\n * @return {!Promise} Resolved when MediaSource is open and attached to the\n *   media element.  This process is actually initiated by the constructor.\n */\nshaka.media.MediaSourceEngine.prototype.open = function() {\n  return this.mediaSourceOpen_;\n};\n\n\n/**\n * Initialize MediaSourceEngine.\n *\n * Note that it is not valid to call this multiple times, except to add or\n * reinitialize text streams.\n *\n * @param {!Object.<shaka.util.ManifestParserUtils.ContentType,\n *                  shaka.extern.Stream>} streamsByType\n *   A map of content types to streams.  All streams must be supported according\n *   to MediaSourceEngine.isStreamSupported.\n * @param {boolean} forceTransmuxTS\n *   If true, this will transmux TS content even if it is natively supported.\n *\n * @return {!Promise}\n *\n * @throws InvalidAccessError if blank MIME types are given\n * @throws NotSupportedError if unsupported MIME types are given\n * @throws QuotaExceededError if the browser can't support that many buffers\n */\nshaka.media.MediaSourceEngine.prototype.init = function(\n    streamsByType, forceTransmuxTS) {\n  const ContentType = shaka.util.ManifestParserUtils.ContentType;\n\n  return this.mediaSourceOpen_.then(() => {\n    for (let contentType in streamsByType) {\n      let stream = streamsByType[contentType];\n      goog.asserts.assert(\n          shaka.media.MediaSourceEngine.isStreamSupported(stream),\n          'Type negotiation should happen before MediaSourceEngine.init!');\n\n      let mimeType = shaka.util.MimeUtils.getFullType(\n          stream.mimeType, stream.codecs);\n      if (contentType == ContentType.TEXT) {\n        this.reinitText(mimeType);\n      } else {\n        if ((forceTransmuxTS || !MediaSource.isTypeSupported(mimeType)) &&\n            shaka.media.Transmuxer.isSupported(mimeType, contentType)) {\n          this.transmuxers_[contentType] = new shaka.media.Transmuxer();\n          mimeType =\n              shaka.media.Transmuxer.convertTsCodecs(contentType, mimeType);\n        }\n        let sourceBuffer = this.mediaSource_.addSourceBuffer(mimeType);\n        this.eventManager_.listen(\n            sourceBuffer, 'error',\n            this.onError_.bind(this, contentType));\n        this.eventManager_.listen(\n            sourceBuffer, 'updateend',\n            this.onUpdateEnd_.bind(this, contentType));\n        this.sourceBuffers_[contentType] = sourceBuffer;\n        this.queues_[contentType] = [];\n      }\n    }\n  });\n};\n\n\n/**\n * @param {shaka.extern.TextDisplayer} textDisplayer\n */\nshaka.media.MediaSourceEngine.prototype.setTextDisplayer =\n    function(textDisplayer) {\n  this.textDisplayer_ = textDisplayer;\n};\n\n\n/**\n * Reinitialize the TextEngine for a new text type.\n * @param {string} mimeType\n */\nshaka.media.MediaSourceEngine.prototype.reinitText = function(mimeType) {\n  if (!this.textEngine_) {\n    this.textEngine_ = new shaka.text.TextEngine(this.textDisplayer_);\n  }\n  this.textEngine_.initParser(mimeType);\n};\n\n\n/**\n * @return {boolean} True if the MediaSource is in an \"ended\" state, or if the\n *   object has been destroyed.\n */\nshaka.media.MediaSourceEngine.prototype.ended = function() {\n  return this.mediaSource_ ? this.mediaSource_.readyState == 'ended' : true;\n};\n\n\n/**\n * Gets the first timestamp in buffer for the given content type.\n *\n * @param {shaka.util.ManifestParserUtils.ContentType} contentType\n * @return {?number} The timestamp in seconds, or null if nothing is buffered.\n */\nshaka.media.MediaSourceEngine.prototype.bufferStart = function(contentType) {\n  const ContentType = shaka.util.ManifestParserUtils.ContentType;\n  if (contentType == ContentType.TEXT) {\n    return this.textEngine_.bufferStart();\n  }\n  return shaka.media.TimeRangesUtils.bufferStart(\n      this.getBuffered_(contentType));\n};\n\n\n/**\n * Gets the last timestamp in buffer for the given content type.\n *\n * @param {shaka.util.ManifestParserUtils.ContentType} contentType\n * @return {?number} The timestamp in seconds, or null if nothing is buffered.\n */\nshaka.media.MediaSourceEngine.prototype.bufferEnd = function(contentType) {\n  const ContentType = shaka.util.ManifestParserUtils.ContentType;\n  if (contentType == ContentType.TEXT) {\n    return this.textEngine_.bufferEnd();\n  }\n  return shaka.media.TimeRangesUtils.bufferEnd(this.getBuffered_(contentType));\n};\n\n\n/**\n * Determines if the given time is inside the buffered range of the given\n * content type.\n *\n * @param {shaka.util.ManifestParserUtils.ContentType} contentType\n * @param {number} time Playhead time\n * @param {number=} smallGapLimit\n * @return {boolean}\n */\nshaka.media.MediaSourceEngine.prototype.isBuffered = function(\n    contentType, time, smallGapLimit) {\n  const ContentType = shaka.util.ManifestParserUtils.ContentType;\n  if (contentType == ContentType.TEXT) {\n    return this.textEngine_.isBuffered(time);\n  } else {\n    let buffered = this.getBuffered_(contentType);\n    return shaka.media.TimeRangesUtils.isBuffered(\n               buffered, time, smallGapLimit);\n  }\n};\n\n\n/**\n * Computes how far ahead of the given timestamp is buffered for the given\n * content type.\n *\n * @param {shaka.util.ManifestParserUtils.ContentType} contentType\n * @param {number} time\n * @return {number} The amount of time buffered ahead in seconds.\n */\nshaka.media.MediaSourceEngine.prototype.bufferedAheadOf =\n    function(contentType, time) {\n  const ContentType = shaka.util.ManifestParserUtils.ContentType;\n  if (contentType == ContentType.TEXT) {\n    return this.textEngine_.bufferedAheadOf(time);\n  } else {\n    let buffered = this.getBuffered_(contentType);\n    return shaka.media.TimeRangesUtils.bufferedAheadOf(buffered, time);\n  }\n};\n\n\n/**\n * Gets the current buffered ranges.\n * @return {shaka.extern.BufferedInfo}\n */\nshaka.media.MediaSourceEngine.prototype.getBufferedInfo = function() {\n  const ContentType = shaka.util.ManifestParserUtils.ContentType;\n  let getBufferedInfo = shaka.media.TimeRangesUtils.getBufferedInfo;\n\n  let textRanges;\n  if (this.textEngine_ && this.textEngine_.bufferStart() != null) {\n    textRanges = [{\n      start: this.textEngine_.bufferStart(),\n      end: this.textEngine_.bufferEnd(),\n    }];\n  } else {\n    textRanges = [];\n  }\n\n  return {\n    total: getBufferedInfo(this.video_.buffered),\n    audio: getBufferedInfo(this.getBuffered_(ContentType.AUDIO)),\n    video: getBufferedInfo(this.getBuffered_(ContentType.VIDEO)),\n    text: textRanges,\n  };\n};\n\n\n/**\n * @param {shaka.util.ManifestParserUtils.ContentType} contentType\n * @return {TimeRanges} The buffered ranges for the given content type, or\n *   null if the buffered ranges could not be obtained.\n * @private\n */\nshaka.media.MediaSourceEngine.prototype.getBuffered_ = function(contentType) {\n  try {\n    return this.sourceBuffers_[contentType].buffered;\n  } catch (exception) {\n    if (contentType in this.sourceBuffers_) {\n      // Note: previous MediaSource errors may cause access to |buffered| to\n      // throw.\n      shaka.log.error('failed to get buffered range for ' + contentType,\n                      exception);\n    }\n    return null;\n  }\n};\n\n\n/**\n * Enqueue an operation to append data to the SourceBuffer.\n * Start and end times are needed for TextEngine, but not for MediaSource.\n * Start and end times may be null for initialization segments; if present they\n * are relative to the presentation timeline.\n *\n * @param {shaka.util.ManifestParserUtils.ContentType} contentType\n * @param {!ArrayBuffer} data\n * @param {?number} startTime\n * @param {?number} endTime\n * @return {!Promise}\n */\nshaka.media.MediaSourceEngine.prototype.appendBuffer =\n    function(contentType, data, startTime, endTime) {\n  const ContentType = shaka.util.ManifestParserUtils.ContentType;\n\n  if (contentType == ContentType.TEXT) {\n    return this.textEngine_.appendBuffer(data, startTime, endTime);\n  } else if (this.transmuxers_[contentType]) {\n    return this.transmuxers_[contentType].transmux(data).then(\n        function(transmuxedData) {\n          // For CEA-608/708 CLOSED-CAPTIONS, text data is embedded in the\n          // video stream, so textEngine may not have been initialized.\n          if (!this.textEngine_) {\n            this.reinitText('text/vtt');\n          }\n          // This doesn't work for native TS support (ex. Edge/Chromecast),\n          // since no transmuxing is needed for native TS.\n          if (this.useEmbeddedText_) {\n            this.textEngine_.appendCues(transmuxedData.cues);\n          }\n          return this.enqueueOperation_(contentType,\n              this.append_.bind(this, contentType, transmuxedData.data.buffer));\n        }.bind(this));\n  } else {\n    return this.enqueueOperation_(\n        contentType,\n        this.append_.bind(this, contentType, data));\n  }\n};\n\n\n/**\n * Set whether to use embedded text cues.\n * Used for CEA 608/708 captions data, which is embedded inside the video\n * stream.\n *\n * @param {boolean} useEmbeddedText\n */\nshaka.media.MediaSourceEngine.prototype.setUseEmbeddedText =\n    function(useEmbeddedText) {\n  this.useEmbeddedText_ = useEmbeddedText;\n};\n\n\n/**\n * Get whether we're using the embedded text cues.\n *\n * @return {boolean}\n */\nshaka.media.MediaSourceEngine.prototype.getUseEmbeddedText = function() {\n  return this.useEmbeddedText_;\n};\n\n\n/**\n * Enqueue an operation to remove data from the SourceBuffer.\n *\n * @param {shaka.util.ManifestParserUtils.ContentType} contentType\n * @param {number} startTime\n * @param {number} endTime\n * @return {!Promise}\n */\nshaka.media.MediaSourceEngine.prototype.remove =\n    function(contentType, startTime, endTime) {\n  // On IE11, this operation would be permitted, but would have no effect!\n  // See https://github.com/google/shaka-player/issues/251\n  goog.asserts.assert(endTime < Number.MAX_VALUE,\n      'remove() with MAX_VALUE or Infinity is not IE-compatible!');\n  const ContentType = shaka.util.ManifestParserUtils.ContentType;\n  if (contentType == ContentType.TEXT) {\n    return this.textEngine_.remove(startTime, endTime);\n  }\n  return this.enqueueOperation_(\n      contentType,\n      this.remove_.bind(this, contentType, startTime, endTime));\n};\n\n\n/**\n * Enqueue an operation to clear the SourceBuffer.\n *\n * @param {shaka.util.ManifestParserUtils.ContentType} contentType\n * @return {!Promise}\n */\nshaka.media.MediaSourceEngine.prototype.clear = function(contentType) {\n  const ContentType = shaka.util.ManifestParserUtils.ContentType;\n  if (contentType == ContentType.TEXT) {\n    if (!this.textEngine_) {\n      return Promise.resolve();\n    }\n    return this.textEngine_.remove(0, Infinity);\n  }\n  // Note that not all platforms allow clearing to Infinity.\n  return this.enqueueOperation_(\n      contentType,\n      this.remove_.bind(this, contentType, 0, this.mediaSource_.duration));\n};\n\n\n/**\n * Enqueue an operation to flush the SourceBuffer.\n * This is a workaround for what we believe is a Chromecast bug.\n *\n * @param {shaka.util.ManifestParserUtils.ContentType} contentType\n * @return {!Promise}\n */\nshaka.media.MediaSourceEngine.prototype.flush = function(contentType) {\n  // Flush the pipeline.  Necessary on Chromecast, even though we have removed\n  // everything.\n  const ContentType = shaka.util.ManifestParserUtils.ContentType;\n  if (contentType == ContentType.TEXT) {\n    // Nothing to flush for text.\n    return Promise.resolve();\n  }\n  return this.enqueueOperation_(\n      contentType,\n      this.flush_.bind(this, contentType));\n};\n\n\n/**\n * Sets the timestamp offset and append window end for the given content type.\n *\n * @param {shaka.util.ManifestParserUtils.ContentType} contentType\n * @param {number} timestampOffset The timestamp offset.  Segments which start\n *   at time t will be inserted at time t + timestampOffset instead.  This\n *   value does not affect segments which have already been inserted.\n * @param {number} appendWindowStart The timestamp to set the append window\n *   start to.  Media before this value will be truncated.\n * @param {number} appendWindowEnd The timestamp to set the append window end\n *   to.  Media beyond this value will be truncated.\n * @return {!Promise}\n */\nshaka.media.MediaSourceEngine.prototype.setStreamProperties = function(\n    contentType, timestampOffset, appendWindowStart, appendWindowEnd) {\n  const ContentType = shaka.util.ManifestParserUtils.ContentType;\n  if (contentType == ContentType.TEXT) {\n    this.textEngine_.setTimestampOffset(timestampOffset);\n    this.textEngine_.setAppendWindow(appendWindowStart, appendWindowEnd);\n    return Promise.resolve();\n  }\n\n  return Promise.all([\n    // Queue an abort() to help MSE splice together overlapping segments.\n    // We set appendWindowEnd when we change periods in DASH content, and the\n    // period transition may result in overlap.\n    //\n    // An abort() also helps with MPEG2-TS.  When we append a TS segment, we\n    // always enter a PARSING_MEDIA_SEGMENT state and we can't change the\n    // timestamp offset.  By calling abort(), we reset the state so we can\n    // set it.\n    this.enqueueOperation_(\n        contentType,\n        this.abort_.bind(this, contentType)),\n    this.enqueueOperation_(\n        contentType,\n        this.setTimestampOffset_.bind(this, contentType, timestampOffset)),\n    this.enqueueOperation_(\n        contentType,\n        this.setAppendWindow_.bind(\n            this, contentType, appendWindowStart, appendWindowEnd)),\n  ]);\n};\n\n\n/**\n * @param {string=} reason Valid reasons are 'network' and 'decode'.\n * @return {!Promise}\n * @see http://w3c.github.io/media-source/#idl-def-EndOfStreamError\n */\nshaka.media.MediaSourceEngine.prototype.endOfStream = function(reason) {\n  return this.enqueueBlockingOperation_(function() {\n    // Chrome won't let us pass undefined, but it will let us omit the\n    // argument.  Firefox does not have this problem.\n    // TODO: File a bug about this.\n    if (reason) {\n      this.mediaSource_.endOfStream(reason);\n    } else {\n      this.mediaSource_.endOfStream();\n    }\n  }.bind(this));\n};\n\n\n/**\n * We only support increasing duration at this time.  Decreasing duration\n * causes the MSE removal algorithm to run, which results in an 'updateend'\n * event.  Supporting this scenario would be complicated, and is not currently\n * needed.\n *\n * @param {number} duration\n * @return {!Promise}\n */\nshaka.media.MediaSourceEngine.prototype.setDuration = function(duration) {\n  goog.asserts.assert(\n      isNaN(this.mediaSource_.duration) ||\n          this.mediaSource_.duration <= duration,\n      'duration cannot decrease: ' + this.mediaSource_.duration + ' -> ' +\n          duration);\n  return this.enqueueBlockingOperation_(function() {\n    this.mediaSource_.duration = duration;\n  }.bind(this));\n};\n\n\n/**\n * Get the current MediaSource duration.\n *\n * @return {number}\n */\nshaka.media.MediaSourceEngine.prototype.getDuration = function() {\n  return this.mediaSource_.duration;\n};\n\n\n/**\n * Append data to the SourceBuffer.\n * @param {shaka.util.ManifestParserUtils.ContentType} contentType\n * @param {!ArrayBuffer} data\n * @throws QuotaExceededError if the browser's buffer is full\n * @private\n */\nshaka.media.MediaSourceEngine.prototype.append_ =\n    function(contentType, data) {\n  // This will trigger an 'updateend' event.\n  this.sourceBuffers_[contentType].appendBuffer(data);\n};\n\n\n/**\n * Remove data from the SourceBuffer.\n * @param {shaka.util.ManifestParserUtils.ContentType} contentType\n * @param {number} startTime\n * @param {number} endTime\n * @private\n */\nshaka.media.MediaSourceEngine.prototype.remove_ =\n    function(contentType, startTime, endTime) {\n  if (endTime <= startTime) {\n    // Ignore removal of inverted or empty ranges.\n    // Fake 'updateend' event to resolve the operation.\n    this.onUpdateEnd_(contentType);\n    return;\n  }\n\n  // This will trigger an 'updateend' event.\n  this.sourceBuffers_[contentType].remove(startTime, endTime);\n};\n\n\n/**\n * Call abort() on the SourceBuffer.\n * This resets MSE's last_decode_timestamp on all track buffers, which should\n * trigger the splicing logic for overlapping segments.\n * @param {shaka.util.ManifestParserUtils.ContentType} contentType\n * @private\n */\nshaka.media.MediaSourceEngine.prototype.abort_ = function(contentType) {\n  // Save the append window, which is reset on abort().\n  let appendWindowStart = this.sourceBuffers_[contentType].appendWindowStart;\n  let appendWindowEnd = this.sourceBuffers_[contentType].appendWindowEnd;\n\n  // This will not trigger an 'updateend' event, since nothing is happening.\n  // This is only to reset MSE internals, not to abort an actual operation.\n  this.sourceBuffers_[contentType].abort();\n\n  // Restore the append window.\n  this.sourceBuffers_[contentType].appendWindowStart = appendWindowStart;\n  this.sourceBuffers_[contentType].appendWindowEnd = appendWindowEnd;\n\n  // Fake an 'updateend' event to resolve the operation.\n  this.onUpdateEnd_(contentType);\n};\n\n\n/**\n * Nudge the playhead to force the media pipeline to be flushed.\n * This seems to be necessary on Chromecast to get new content to replace old\n * content.\n * @param {shaka.util.ManifestParserUtils.ContentType} contentType\n * @private\n */\nshaka.media.MediaSourceEngine.prototype.flush_ = function(contentType) {\n  // Never use flush_ if there's data.  It causes a hiccup in playback.\n  goog.asserts.assert(\n      this.video_.buffered.length == 0,\n      'MediaSourceEngine.flush_ should only be used after clearing all data!');\n\n  // Seeking forces the pipeline to be flushed.\n  this.video_.currentTime -= 0.001;\n\n  // Fake an 'updateend' event to resolve the operation.\n  this.onUpdateEnd_(contentType);\n};\n\n\n/**\n * Set the SourceBuffer's timestamp offset.\n * @param {shaka.util.ManifestParserUtils.ContentType} contentType\n * @param {number} timestampOffset\n * @private\n */\nshaka.media.MediaSourceEngine.prototype.setTimestampOffset_ =\n    function(contentType, timestampOffset) {\n  // Work around for https://github.com/google/shaka-player/issues/1281:\n  // TODO(https://bit.ly/2ttKiBU): follow up when this is fixed in Edge\n  if (timestampOffset < 0) {\n    // Try to prevent rounding errors in Edge from removing the first keyframe.\n    timestampOffset += 0.001;\n  }\n\n  this.sourceBuffers_[contentType].timestampOffset = timestampOffset;\n\n  // Fake an 'updateend' event to resolve the operation.\n  this.onUpdateEnd_(contentType);\n};\n\n\n/**\n * Set the SourceBuffer's append window end.\n * @param {shaka.util.ManifestParserUtils.ContentType} contentType\n * @param {number} appendWindowStart\n * @param {number} appendWindowEnd\n * @private\n */\nshaka.media.MediaSourceEngine.prototype.setAppendWindow_ =\n    function(contentType, appendWindowStart, appendWindowEnd) {\n  // You can't set start > end, so first set start to 0, then set the new end,\n  // then set the new start.  That way, there are no intermediate states which\n  // are invalid.\n  this.sourceBuffers_[contentType].appendWindowStart = 0;\n  this.sourceBuffers_[contentType].appendWindowEnd = appendWindowEnd;\n  this.sourceBuffers_[contentType].appendWindowStart = appendWindowStart;\n\n  // Fake an 'updateend' event to resolve the operation.\n  this.onUpdateEnd_(contentType);\n};\n\n\n/**\n * @param {shaka.util.ManifestParserUtils.ContentType} contentType\n * @param {!Event} event\n * @private\n */\nshaka.media.MediaSourceEngine.prototype.onError_ =\n    function(contentType, event) {\n  let operation = this.queues_[contentType][0];\n  goog.asserts.assert(operation, 'Spurious error event!');\n  goog.asserts.assert(!this.sourceBuffers_[contentType].updating,\n                      'SourceBuffer should not be updating on error!');\n  let code = this.video_.error ? this.video_.error.code : 0;\n  operation.p.reject(new shaka.util.Error(\n      shaka.util.Error.Severity.CRITICAL,\n      shaka.util.Error.Category.MEDIA,\n      shaka.util.Error.Code.MEDIA_SOURCE_OPERATION_FAILED,\n      code));\n  // Do not pop from queue.  An 'updateend' event will fire next, and to avoid\n  // synchronizing these two event handlers, we will allow that one to pop from\n  // the queue as normal.  Note that because the operation has already been\n  // rejected, the call to resolve() in the 'updateend' handler will have no\n  // effect.\n};\n\n\n/**\n * @param {shaka.util.ManifestParserUtils.ContentType} contentType\n * @private\n */\nshaka.media.MediaSourceEngine.prototype.onUpdateEnd_ = function(contentType) {\n  let operation = this.queues_[contentType][0];\n  goog.asserts.assert(operation, 'Spurious updateend event!');\n  if (!operation) return;\n  goog.asserts.assert(!this.sourceBuffers_[contentType].updating,\n                      'SourceBuffer should not be updating on updateend!');\n  operation.p.resolve();\n  this.popFromQueue_(contentType);\n};\n\n\n/**\n * Enqueue an operation and start it if appropriate.\n *\n * @param {shaka.util.ManifestParserUtils.ContentType} contentType\n * @param {function()} start\n * @return {!Promise}\n * @private\n */\nshaka.media.MediaSourceEngine.prototype.enqueueOperation_ =\n    function(contentType, start) {\n  if (this.destroyed_) return Promise.reject();\n\n  let operation = {\n    start: start,\n    p: new shaka.util.PublicPromise(),\n  };\n  this.queues_[contentType].push(operation);\n\n  if (this.queues_[contentType].length == 1) {\n    try {\n      operation.start();\n    } catch (exception) {\n      if (exception.name == 'QuotaExceededError') {\n        operation.p.reject(new shaka.util.Error(\n            shaka.util.Error.Severity.CRITICAL,\n            shaka.util.Error.Category.MEDIA,\n            shaka.util.Error.Code.QUOTA_EXCEEDED_ERROR,\n            contentType));\n      } else {\n        operation.p.reject(new shaka.util.Error(\n            shaka.util.Error.Severity.CRITICAL,\n            shaka.util.Error.Category.MEDIA,\n            shaka.util.Error.Code.MEDIA_SOURCE_OPERATION_THREW,\n            exception));\n      }\n      this.popFromQueue_(contentType);\n    }\n  }\n  return operation.p;\n};\n\n\n/**\n * Enqueue an operation which must block all other operations on all\n * SourceBuffers.\n *\n * @param {function()} run\n * @return {!Promise}\n * @private\n */\nshaka.media.MediaSourceEngine.prototype.enqueueBlockingOperation_ =\n    function(run) {\n  if (this.destroyed_) return Promise.reject();\n\n  let allWaiters = [];\n\n  // Enqueue a 'wait' operation onto each queue.\n  // This operation signals its readiness when it starts.\n  // When all wait operations are ready, the real operation takes place.\n  for (let contentType in this.sourceBuffers_) {\n    let ready = new shaka.util.PublicPromise();\n    let operation = {\n      start: function(ready) { ready.resolve(); }.bind(null, ready),\n      p: ready,\n    };\n\n    this.queues_[contentType].push(operation);\n    allWaiters.push(ready);\n\n    if (this.queues_[contentType].length == 1) {\n      operation.start();\n    }\n  }\n\n  // Return a Promise to the real operation, which waits to begin until there\n  // are no other in-progress operations on any SourceBuffers.\n  return Promise.all(allWaiters).then(function() {\n    if (goog.DEBUG) {\n      // If we did it correctly, nothing is updating.\n      for (let contentType in this.sourceBuffers_) {\n        goog.asserts.assert(\n            this.sourceBuffers_[contentType].updating == false,\n            'SourceBuffers should not be updating after a blocking op!');\n      }\n    }\n\n    let ret;\n    // Run the real operation, which is synchronous.\n    try {\n      run();\n    } catch (exception) {\n      ret = Promise.reject(new shaka.util.Error(\n          shaka.util.Error.Severity.CRITICAL,\n          shaka.util.Error.Category.MEDIA,\n          shaka.util.Error.Code.MEDIA_SOURCE_OPERATION_THREW,\n          exception));\n    }\n\n    // Unblock the queues.\n    for (let contentType in this.sourceBuffers_) {\n      this.popFromQueue_(contentType);\n    }\n\n    return ret;\n  }.bind(this), function() {\n    // One of the waiters failed, which means we've been destroyed.\n    goog.asserts.assert(this.destroyed_, 'Should be destroyed by now');\n    // We haven't popped from the queue.  Canceled waiters have been removed by\n    // destroy.  What's left now should just be resolved waiters.  In uncompiled\n    // mode, we will maintain good hygiene and make sure the assert at the end\n    // of destroy passes.  In compiled mode, the queues are wiped in destroy.\n    if (goog.DEBUG) {\n      for (let contentType in this.sourceBuffers_) {\n        if (this.queues_[contentType].length) {\n          goog.asserts.assert(\n              this.queues_[contentType].length == 1,\n              'Should be at most one item in queue!');\n          goog.asserts.assert(\n              allWaiters.indexOf(this.queues_[contentType][0].p) != -1,\n              'The item in queue should be one of our waiters!');\n          this.queues_[contentType].shift();\n        }\n      }\n    }\n    return Promise.reject();\n  }.bind(this));\n};\n\n\n/**\n * Pop from the front of the queue and start a new operation.\n * @param {shaka.util.ManifestParserUtils.ContentType} contentType\n * @private\n */\nshaka.media.MediaSourceEngine.prototype.popFromQueue_ = function(contentType) {\n  // Remove the in-progress operation, which is now complete.\n  this.queues_[contentType].shift();\n  // Retrieve the next operation, if any, from the queue and start it.\n  let next = this.queues_[contentType][0];\n  if (next) {\n    try {\n      next.start();\n    } catch (exception) {\n      next.p.reject(new shaka.util.Error(\n          shaka.util.Error.Severity.CRITICAL,\n          shaka.util.Error.Category.MEDIA,\n          shaka.util.Error.Code.MEDIA_SOURCE_OPERATION_THREW,\n          exception));\n      this.popFromQueue_(contentType);\n    }\n  }\n};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.util.LanguageUtils');\n\ngoog.require('goog.asserts');\n\n\n/**\n * @namespace shaka.util.LanguageUtils\n * @summary A set of language utility functions.\n */\n\n\n/**\n * Compares two language tags as defined by RFC 5646 and ISO 639.  The\n * comparison takes sublanguages into account via the |fuzz| parameter.\n * The caller is expected to normalize the inputs first.\n *\n * @see shaka.util.LanguageUtils.normalize()\n * @see IETF RFC 5646\n * @see ISO 639\n *\n * @param {shaka.util.LanguageUtils.MatchType} fuzz What kind of match is\n *   acceptable.\n * @param {string} preference The user's preferred language tag.\n * @param {string} candidate An available language tag.\n * @return {boolean}\n */\nshaka.util.LanguageUtils.match = function(fuzz, preference, candidate) {\n  // Alias.\n  const LanguageUtils = shaka.util.LanguageUtils;\n\n  goog.asserts.assert(preference == LanguageUtils.normalize(preference),\n                      'Language pref should be normalized first');\n  goog.asserts.assert(candidate == LanguageUtils.normalize(candidate),\n                      'Language candidate should be normalized first');\n\n  if (candidate == preference) {\n    return true;\n  }\n\n  if (fuzz >= shaka.util.LanguageUtils.MatchType.BASE_LANGUAGE_OKAY &&\n      candidate == preference.split('-')[0]) {\n    return true;\n  }\n\n  if (fuzz >= shaka.util.LanguageUtils.MatchType.OTHER_SUB_LANGUAGE_OKAY &&\n      candidate.split('-')[0] == preference.split('-')[0]) {\n    return true;\n  }\n\n  return false;\n};\n\n\n/**\n * A match type for fuzzy-matching logic.\n *\n * @enum {number}\n */\nshaka.util.LanguageUtils.MatchType = {\n  /** Accepts an exact match. */\n  EXACT: 0,\n  /** Accepts a less-specific version of the preferred sublanguage. */\n  BASE_LANGUAGE_OKAY: 1,\n  /** Accepts a different sublanguage of the preferred base language. */\n  OTHER_SUB_LANGUAGE_OKAY: 2,\n};\n\n\n/**\n * Normalize the language tag.\n *\n * RFC 5646 specifies that language tags are case insensitive and that the\n * shortest representation of the base language should always be used.\n * This will convert the tag to lower-case and map 3-letter codes (ISO 639-2)\n * to 2-letter codes (ISO 639-1) whenever possible.\n *\n * @param {string} lang\n * @return {string}\n *\n * @see IETF RFC 5646\n * @see ISO 639\n */\nshaka.util.LanguageUtils.normalize = function(lang) {\n  let fields = lang.toLowerCase().split('-');\n  let base = fields[0];\n  let replacement = shaka.util.LanguageUtils.isoMap_[base];\n  if (replacement) {\n    fields[0] = replacement;\n  }\n  return fields.join('-');\n};\n\n\n/**\n * A map from 3-letter language codes (ISO 639-2) to 2-letter language codes\n * (ISO 639-1) for all languages which have both in the registry.\n *\n * @const {!Object.<string, string>}\n * @private\n */\nshaka.util.LanguageUtils.isoMap_ = {\n  'aar': 'aa', 'abk': 'ab', 'afr': 'af', 'aka': 'ak', 'alb': 'sq', 'amh': 'am',\n  'ara': 'ar', 'arg': 'an', 'arm': 'hy', 'asm': 'as', 'ava': 'av', 'ave': 'ae',\n  'aym': 'ay', 'aze': 'az', 'bak': 'ba', 'bam': 'bm', 'baq': 'eu', 'bel': 'be',\n  'ben': 'bn', 'bih': 'bh', 'bis': 'bi', 'bod': 'bo', 'bos': 'bs', 'bre': 'br',\n  'bul': 'bg', 'bur': 'my', 'cat': 'ca', 'ces': 'cs', 'cha': 'ch', 'che': 'ce',\n  'chi': 'zh', 'chu': 'cu', 'chv': 'cv', 'cor': 'kw', 'cos': 'co', 'cre': 'cr',\n  'cym': 'cy', 'cze': 'cs', 'dan': 'da', 'deu': 'de', 'div': 'dv', 'dut': 'nl',\n  'dzo': 'dz', 'ell': 'el', 'eng': 'en', 'epo': 'eo', 'est': 'et', 'eus': 'eu',\n  'ewe': 'ee', 'fao': 'fo', 'fas': 'fa', 'fij': 'fj', 'fin': 'fi', 'fra': 'fr',\n  'fre': 'fr', 'fry': 'fy', 'ful': 'ff', 'geo': 'ka', 'ger': 'de', 'gla': 'gd',\n  'gle': 'ga', 'glg': 'gl', 'glv': 'gv', 'gre': 'el', 'grn': 'gn', 'guj': 'gu',\n  'hat': 'ht', 'hau': 'ha', 'heb': 'he', 'her': 'hz', 'hin': 'hi', 'hmo': 'ho',\n  'hrv': 'hr', 'hun': 'hu', 'hye': 'hy', 'ibo': 'ig', 'ice': 'is', 'ido': 'io',\n  'iii': 'ii', 'iku': 'iu', 'ile': 'ie', 'ina': 'ia', 'ind': 'id', 'ipk': 'ik',\n  'isl': 'is', 'ita': 'it', 'jav': 'jv', 'jpn': 'ja', 'kal': 'kl', 'kan': 'kn',\n  'kas': 'ks', 'kat': 'ka', 'kau': 'kr', 'kaz': 'kk', 'khm': 'km', 'kik': 'ki',\n  'kin': 'rw', 'kir': 'ky', 'kom': 'kv', 'kon': 'kg', 'kor': 'ko', 'kua': 'kj',\n  'kur': 'ku', 'lao': 'lo', 'lat': 'la', 'lav': 'lv', 'lim': 'li', 'lin': 'ln',\n  'lit': 'lt', 'ltz': 'lb', 'lub': 'lu', 'lug': 'lg', 'mac': 'mk', 'mah': 'mh',\n  'mal': 'ml', 'mao': 'mi', 'mar': 'mr', 'may': 'ms', 'mkd': 'mk', 'mlg': 'mg',\n  'mlt': 'mt', 'mon': 'mn', 'mri': 'mi', 'msa': 'ms', 'mya': 'my', 'nau': 'na',\n  'nav': 'nv', 'nbl': 'nr', 'nde': 'nd', 'ndo': 'ng', 'nep': 'ne', 'nld': 'nl',\n  'nno': 'nn', 'nob': 'nb', 'nor': 'no', 'nya': 'ny', 'oci': 'oc', 'oji': 'oj',\n  'ori': 'or', 'orm': 'om', 'oss': 'os', 'pan': 'pa', 'per': 'fa', 'pli': 'pi',\n  'pol': 'pl', 'por': 'pt', 'pus': 'ps', 'que': 'qu', 'roh': 'rm', 'ron': 'ro',\n  'rum': 'ro', 'run': 'rn', 'rus': 'ru', 'sag': 'sg', 'san': 'sa', 'sin': 'si',\n  'slk': 'sk', 'slo': 'sk', 'slv': 'sl', 'sme': 'se', 'smo': 'sm', 'sna': 'sn',\n  'snd': 'sd', 'som': 'so', 'sot': 'st', 'spa': 'es', 'sqi': 'sq', 'srd': 'sc',\n  'srp': 'sr', 'ssw': 'ss', 'sun': 'su', 'swa': 'sw', 'swe': 'sv', 'tah': 'ty',\n  'tam': 'ta', 'tat': 'tt', 'tel': 'te', 'tgk': 'tg', 'tgl': 'tl', 'tha': 'th',\n  'tib': 'bo', 'tir': 'ti', 'ton': 'to', 'tsn': 'tn', 'tso': 'ts', 'tuk': 'tk',\n  'tur': 'tr', 'twi': 'tw', 'uig': 'ug', 'ukr': 'uk', 'urd': 'ur', 'uzb': 'uz',\n  'ven': 've', 'vie': 'vi', 'vol': 'vo', 'wel': 'cy', 'wln': 'wa', 'wol': 'wo',\n  'xho': 'xh', 'yid': 'yi', 'yor': 'yo', 'zha': 'za', 'zho': 'zh', 'zul': 'zu',\n};\n\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.util.StreamUtils');\n\ngoog.require('goog.asserts');\ngoog.require('shaka.log');\ngoog.require('shaka.media.DrmEngine');\ngoog.require('shaka.media.MediaSourceEngine');\ngoog.require('shaka.text.TextEngine');\ngoog.require('shaka.util.ArrayUtils');\ngoog.require('shaka.util.Functional');\ngoog.require('shaka.util.LanguageUtils');\ngoog.require('shaka.util.ManifestParserUtils');\ngoog.require('shaka.util.MimeUtils');\n\n\n/**\n * @namespace shaka.util.StreamUtils\n * @summary A set of utility functions for dealing with Streams and Manifests.\n */\n\n\n/**\n * @param {shaka.extern.Variant} variant\n * @param {shaka.extern.Restrictions} restrictions\n *   Configured restrictions from the user.\n * @param {{width: number, height: number}} maxHwRes\n *   The maximum resolution the hardware can handle.\n *   This is applied separately from user restrictions because the setting\n *   should not be easily replaced by the user's configuration.\n * @return {boolean}\n */\nshaka.util.StreamUtils.meetsRestrictions = function(\n    variant, restrictions, maxHwRes) {\n  /** @type {function(number, number, number):boolean} */\n  const inRange = (x, min, max) => {\n    return x >= min && x <= max;\n  };\n\n  const video = variant.video;\n\n  // |video.width| and |video.height| can be undefined, which breaks\n  // the math, so make sure they are there first.\n  if (video && video.width && video.height) {\n    if (!inRange(video.width,\n                 restrictions.minWidth,\n                 Math.min(restrictions.maxWidth, maxHwRes.width))) {\n      return false;\n    }\n\n    if (!inRange(video.height,\n                 restrictions.minHeight,\n                 Math.min(restrictions.maxHeight, maxHwRes.height))) {\n      return false;\n    }\n\n    if (!inRange(video.width * video.height,\n                 restrictions.minPixels,\n                 restrictions.maxPixels)) {\n      return false;\n    }\n  }\n\n  if (!inRange(variant.bandwidth,\n               restrictions.minBandwidth,\n               restrictions.maxBandwidth)) {\n    return false;\n  }\n\n  return true;\n};\n\n\n/**\n * @param {!Array.<shaka.extern.Variant>} variants\n * @param {shaka.extern.Restrictions} restrictions\n * @param {{width: number, height: number}} maxHwRes\n * @return {boolean} Whether the tracks changed.\n */\nshaka.util.StreamUtils.applyRestrictions =\n    function(variants, restrictions, maxHwRes) {\n  let tracksChanged = false;\n\n  variants.forEach((variant) => {\n    let originalAllowed = variant.allowedByApplication;\n    variant.allowedByApplication = shaka.util.StreamUtils.meetsRestrictions(\n        variant, restrictions, maxHwRes);\n\n    if (originalAllowed != variant.allowedByApplication) {\n      tracksChanged = true;\n    }\n  });\n\n  return tracksChanged;\n};\n\n\n/**\n * Alters the given Period to filter out any unplayable streams.\n *\n * @param {shaka.media.DrmEngine} drmEngine\n * @param {?shaka.extern.Stream} activeAudio\n * @param {?shaka.extern.Stream} activeVideo\n * @param {shaka.extern.Period} period\n */\nshaka.util.StreamUtils.filterNewPeriod = function(\n    drmEngine, activeAudio, activeVideo, period) {\n  const StreamUtils = shaka.util.StreamUtils;\n\n  if (activeAudio) {\n    goog.asserts.assert(StreamUtils.isAudio(activeAudio),\n                        'Audio streams must have the audio type.');\n  }\n\n  if (activeVideo) {\n    goog.asserts.assert(StreamUtils.isVideo(activeVideo),\n                        'Video streams must have the video type.');\n  }\n\n  // Filter variants.\n  period.variants = period.variants.filter((variant) => {\n    if (drmEngine && drmEngine.initialized()) {\n      if (!drmEngine.supportsVariant(variant)) {\n        shaka.log.debug('Dropping variant - not compatible with key system',\n                        variant);\n        return false;\n      }\n    }\n\n    const audio = variant.audio;\n    const video = variant.video;\n\n    if (audio && !shaka.media.MediaSourceEngine.isStreamSupported(audio)) {\n      shaka.log.debug('Dropping variant - audio not compatible with platform',\n                      StreamUtils.getStreamSummaryString_(audio));\n      return false;\n    }\n\n    if (video && !shaka.media.MediaSourceEngine.isStreamSupported(video)) {\n      shaka.log.debug('Dropping variant - video not compatible with platform',\n                      StreamUtils.getStreamSummaryString_(video));\n      return false;\n    }\n\n    if (audio && activeAudio) {\n      if (!StreamUtils.areStreamsCompatible_(audio, activeAudio)) {\n        shaka.log.debug('Droping variant - not compatible with active audio',\n                        'active audio',\n                        StreamUtils.getStreamSummaryString_(activeAudio),\n                        'variant.audio',\n                        StreamUtils.getStreamSummaryString_(audio));\n        return false;\n      }\n    }\n\n    if (video && activeVideo) {\n      if (!StreamUtils.areStreamsCompatible_(video, activeVideo)) {\n        shaka.log.debug('Droping variant - not compatible with active video',\n                        'active video',\n                        StreamUtils.getStreamSummaryString_(activeVideo),\n                        'variant.video',\n                        StreamUtils.getStreamSummaryString_(video));\n        return false;\n      }\n    }\n\n    return true;\n  });\n\n  // Filter text streams.\n  period.textStreams = period.textStreams.filter(function(stream) {\n    let fullMimeType = shaka.util.MimeUtils.getFullType(\n        stream.mimeType, stream.codecs);\n    let keep = shaka.text.TextEngine.isTypeSupported(fullMimeType);\n\n    if (!keep) {\n      shaka.log.debug('Dropping text stream. Is not supported by the ' +\n                      'platform.', stream);\n    }\n\n    return keep;\n  });\n};\n\n\n/**\n * @param {shaka.extern.Stream} s0\n * @param {shaka.extern.Stream} s1\n * @return {boolean}\n * @private\n */\nshaka.util.StreamUtils.areStreamsCompatible_ = function(s0, s1) {\n  // Basic mime types and basic codecs need to match.\n  // For example, we can't adapt between WebM and MP4,\n  // nor can we adapt between mp4a.* to ec-3.\n  // We can switch between text types on the fly,\n  // so don't run this check on text.\n  if (s0.mimeType != s1.mimeType) {\n    return false;\n  }\n\n  if (s0.codecs.split('.')[0] != s1.codecs.split('.')[0]) {\n    return false;\n  }\n\n  return true;\n};\n\n\n/**\n * @param {shaka.extern.Variant} variant\n * @return {shaka.extern.Track}\n */\nshaka.util.StreamUtils.variantToTrack = function(variant) {\n  /** @type {?shaka.extern.Stream} */\n  let audio = variant.audio;\n  /** @type {?shaka.extern.Stream} */\n  let video = variant.video;\n\n  /** @type {?string} */\n  let audioCodec = audio ? audio.codecs : null;\n  /** @type {?string} */\n  let videoCodec = video ? video.codecs : null;\n\n  /** @type {!Array.<string>} */\n  let codecs = [];\n  if (videoCodec) codecs.push(videoCodec);\n  if (audioCodec) codecs.push(audioCodec);\n\n  /** @type {!Array.<string>} */\n  let mimeTypes = [];\n  if (video) mimeTypes.push(video.mimeType);\n  if (audio) mimeTypes.push(audio.mimeType);\n  /** @type {?string} */\n  let mimeType = mimeTypes[0] || null;\n\n  /** @type {!Array.<string>} */\n  let kinds = [];\n  if (audio) kinds.push(audio.kind);\n  if (video) kinds.push(video.kind);\n  /** @type {?string} */\n  let kind = kinds[0] || null;\n\n  /** @type {!Array.<string>} */\n  let roles = [];\n  if (audio) roles.push.apply(roles, audio.roles);\n  if (video) roles.push.apply(roles, video.roles);\n  roles = shaka.util.ArrayUtils.removeDuplicates(roles);\n\n  /** @type {shaka.extern.Track} */\n  let track = {\n    id: variant.id,\n    active: false,\n    type: 'variant',\n    bandwidth: variant.bandwidth,\n    language: variant.language,\n    label: null,\n    kind: kind,\n    width: null,\n    height: null,\n    frameRate: null,\n    mimeType: mimeType,\n    codecs: codecs.join(', '),\n    audioCodec: audioCodec,\n    videoCodec: videoCodec,\n    primary: variant.primary,\n    roles: roles,\n    videoId: null,\n    audioId: null,\n    channelsCount: null,\n    audioBandwidth: null,\n    videoBandwidth: null,\n    originalVideoId: null,\n    originalAudioId: null,\n    originalTextId: null,\n  };\n\n  if (video) {\n    track.videoId = video.id;\n    track.originalVideoId = video.originalId;\n    track.width = video.width || null;\n    track.height = video.height || null;\n    track.frameRate = video.frameRate || null;\n    track.videoBandwidth = video.bandwidth || null;\n  }\n\n  if (audio) {\n    track.audioId = audio.id;\n    track.originalAudioId = audio.originalId;\n    track.channelsCount = audio.channelsCount;\n    track.audioBandwidth = audio.bandwidth || null;\n    track.label = audio.label;\n  }\n\n  return track;\n};\n\n\n/**\n * @param {shaka.extern.Stream} stream\n * @return {shaka.extern.Track}\n */\nshaka.util.StreamUtils.textStreamToTrack = function(stream) {\n  const ContentType = shaka.util.ManifestParserUtils.ContentType;\n\n  /** @type {shaka.extern.Track} */\n  let track = {\n    id: stream.id,\n    active: false,\n    type: ContentType.TEXT,\n    bandwidth: 0,\n    language: stream.language,\n    label: stream.label,\n    kind: stream.kind || null,\n    width: null,\n    height: null,\n    frameRate: null,\n    mimeType: stream.mimeType,\n    codecs: stream.codecs || null,\n    audioCodec: null,\n    videoCodec: null,\n    primary: stream.primary,\n    roles: stream.roles,\n    videoId: null,\n    audioId: null,\n    channelsCount: null,\n    audioBandwidth: null,\n    videoBandwidth: null,\n    originalVideoId: null,\n    originalAudioId: null,\n    originalTextId: stream.originalId,\n  };\n\n  return track;\n};\n\n\n/**\n * Gets track representations of all playable variants and all text streams.\n *\n * @param {shaka.extern.Period} period\n * @return {!Array.<shaka.extern.Track>}\n */\nshaka.util.StreamUtils.getTracks = function(period) {\n  const StreamUtils = shaka.util.StreamUtils;\n\n  let tracks = [];\n\n  let variants = StreamUtils.getPlayableVariants(period.variants);\n  let textStreams = period.textStreams;\n\n  variants.forEach(function(variant) {\n    tracks.push(StreamUtils.variantToTrack(variant));\n  });\n\n  textStreams.forEach(function(stream) {\n    tracks.push(StreamUtils.textStreamToTrack(stream));\n  });\n\n  return tracks;\n};\n\n\n/**\n * Gets an array of Track objects for the given Period.\n *\n * @param {shaka.extern.Period} period\n * @param {?number} activeAudioId\n * @param {?number} activeVideoId\n * @return {!Array.<shaka.extern.Track>}\n */\nshaka.util.StreamUtils.getVariantTracks =\n    function(period, activeAudioId, activeVideoId) {\n  const StreamUtils = shaka.util.StreamUtils;\n  let variants = StreamUtils.getPlayableVariants(period.variants);\n\n  return variants.map(function(variant) {\n    let track = StreamUtils.variantToTrack(variant);\n\n    if (variant.video && variant.audio) {\n      track.active = activeVideoId == variant.video.id &&\n                     activeAudioId == variant.audio.id;\n    } else if (variant.video) {\n      track.active = activeVideoId == variant.video.id;\n    } else if (variant.audio) {\n      track.active = activeAudioId == variant.audio.id;\n    }\n\n    return track;\n  });\n};\n\n\n/**\n * Gets an array of text Track objects for the given Period.\n *\n * @param {shaka.extern.Period} period\n * @param {?number} activeStreamId\n * @return {!Array.<shaka.extern.Track>}\n */\nshaka.util.StreamUtils.getTextTracks = function(period, activeStreamId) {\n  return period.textStreams.map(function(stream) {\n    let track = shaka.util.StreamUtils.textStreamToTrack(stream);\n    track.active = activeStreamId == stream.id;\n    return track;\n  });\n};\n\n\n/**\n * Finds the Variant for the given track.\n *\n * @param {shaka.extern.Period} period\n * @param {shaka.extern.Track} track\n * @return {?shaka.extern.Variant}\n */\nshaka.util.StreamUtils.findVariantForTrack = function(period, track) {\n  for (let i = 0; i < period.variants.length; i++) {\n    if (period.variants[i].id == track.id) {\n      return period.variants[i];\n    }\n  }\n  return null;\n};\n\n\n/**\n * Finds the text stream for the given track.\n *\n * @param {shaka.extern.Period} period\n * @param {shaka.extern.Track} track\n * @return {?shaka.extern.Stream}\n */\nshaka.util.StreamUtils.findTextStreamForTrack = function(period, track) {\n  for (let i = 0; i < period.textStreams.length; i++) {\n    if (period.textStreams[i].id == track.id) {\n      return period.textStreams[i];\n    }\n  }\n  return null;\n};\n\n\n/**\n * Determines if the given variant is playable.\n * @param {!shaka.extern.Variant} variant\n * @return {boolean}\n */\nshaka.util.StreamUtils.isPlayable = function(variant) {\n  return variant.allowedByApplication && variant.allowedByKeySystem;\n};\n\n\n/**\n * Filters out unplayable variants.\n * @param {!Array.<!shaka.extern.Variant>} variants\n * @return {!Array.<!shaka.extern.Variant>}\n */\nshaka.util.StreamUtils.getPlayableVariants = function(variants) {\n  return variants.filter(function(variant) {\n    return shaka.util.StreamUtils.isPlayable(variant);\n  });\n};\n\n\n/**\n * Chooses variants according to the given config.\n *\n * @param {!Array.<shaka.extern.Variant>} variants\n * @param {string} preferredLanguage\n * @param {string} preferredRole\n * @param {number} preferredAudioChannelCount\n * @param {!Object=} languageMatches\n * @return {!Array.<!shaka.extern.Variant>}\n */\nshaka.util.StreamUtils.filterVariantsByConfig = function(\n    variants, preferredLanguage, preferredRole, preferredAudioChannelCount,\n    languageMatches) {\n  let chosen = shaka.util.StreamUtils.filterVariantsByLanguageAndRole(\n      variants, preferredLanguage, preferredRole, languageMatches);\n  return shaka.util.StreamUtils.filterVariantsByAudioChannelCount(chosen,\n      preferredAudioChannelCount);\n};\n\n\n/**\n * Chooses variants according to the given config.\n *\n * @param {!Array.<shaka.extern.Variant>} variants\n * @param {string} preferredLanguage\n * @param {string} preferredRole\n * @param {!Object=} languageMatches\n * @return {!Array.<!shaka.extern.Variant>}\n */\nshaka.util.StreamUtils.filterVariantsByLanguageAndRole = function(\n    variants, preferredLanguage, preferredRole, languageMatches) {\n  const LanguageUtils = shaka.util.LanguageUtils;\n  const ContentType = shaka.util.ManifestParserUtils.ContentType;\n\n  /** @type {!Array.<!shaka.extern.Variant>} */\n  let playable = shaka.util.StreamUtils.getPlayableVariants(variants);\n\n  /** @type {!Array.<!shaka.extern.Variant>} */\n  let chosen = playable;\n\n  // Start with the set of primary variants.\n  /** @type {!Array.<!shaka.extern.Variant>} */\n  let primary = playable.filter(function(variant) {\n    return variant.primary;\n  });\n\n  if (primary.length) {\n    chosen = primary;\n  }\n\n  // Now reduce the set to one language.  This covers both arbitrary language\n  // choices and the reduction of the \"primary\" variant set to one language.\n  let firstLanguage = chosen.length ? chosen[0].language : '';\n  chosen = chosen.filter(function(variant) {\n    return variant.language == firstLanguage;\n  });\n\n  // Now search for matches based on language preference.  If any language match\n  // is found, it overrides the selection above.  Favor exact matches, then base\n  // matches, finally different subtags.  Execute in reverse order so the later\n  // steps override the previous ones.\n  if (preferredLanguage) {\n    let pref = LanguageUtils.normalize(preferredLanguage);\n    [LanguageUtils.MatchType.OTHER_SUB_LANGUAGE_OKAY,\n     LanguageUtils.MatchType.BASE_LANGUAGE_OKAY,\n     LanguageUtils.MatchType.EXACT]\n        .forEach(function(matchType) {\n          let betterLangMatchFound = false;\n          playable.forEach(function(variant) {\n            pref = LanguageUtils.normalize(pref);\n            let lang = LanguageUtils.normalize(variant.language);\n            if (LanguageUtils.match(matchType, pref, lang)) {\n              if (betterLangMatchFound) {\n                chosen.push(variant);\n              } else {\n                chosen = [variant];\n                betterLangMatchFound = true;\n              }\n              if (languageMatches) {\n                languageMatches[ContentType.AUDIO] = true;\n              }\n            }\n          }); // forEach(variant)\n        }); // forEach(matchType)\n  } // if (preferredLanguage)\n\n  // Now refine the choice based on role preference.\n  if (preferredRole) {\n    let roleMatches = shaka.util.StreamUtils.filterVariantsByRole_(\n        chosen, preferredRole);\n    if (roleMatches.length) {\n      return roleMatches;\n    } else {\n      shaka.log.warning('No exact match for the variant role could be found.');\n    }\n  }\n\n  // Either there was no role preference, or it could not be satisfied.\n  // Choose an arbitrary role, if there are any, and filter out any other roles.\n  // This ensures we never adapt between roles.\n  let allRoles = chosen.map(function(variant) {\n    let audioRoles = variant.audio ? variant.audio.roles : [];\n    let videoRoles = variant.video ? variant.video.roles : [];\n    return audioRoles.concat(videoRoles);\n  }).reduce(shaka.util.Functional.collapseArrays, []);\n\n  if (!allRoles.length) {\n    return chosen;\n  }\n  return shaka.util.StreamUtils.filterVariantsByRole_(chosen, allRoles[0]);\n};\n\n\n/**\n * Filters variants according to the given audio channel count config.\n *\n * @param {!Array.<shaka.extern.Variant>} variants\n * @param {number} preferredAudioChannelCount\n * @return {!Array.<!shaka.extern.Variant>}\n */\nshaka.util.StreamUtils.filterVariantsByAudioChannelCount = function(\n    variants, preferredAudioChannelCount) {\n  // Group variants by their audio channel counts.\n  let variantsByChannelCount = variants\n      .filter((v) => v.audio && v.audio.channelsCount)\n      .reduce((map, variant) => {\n        let count = variant.audio.channelsCount;\n        if (map[count]) {\n          map[count].push(variant);\n        } else {\n          map[count] = [variant];\n        }\n        return map;\n      }, {});\n\n  let channelCounts = Object.keys(variantsByChannelCount);\n\n  // If no variant has audio channel count info, return the original variants.\n  if (channelCounts.length == 0) {\n    return variants;\n  }\n\n  // Choose the variants with the largest number of audio channels less than or\n  // equal to the configured number of audio channels.\n  let countLessThanOrEqualtoConfig =\n      channelCounts.filter((count) => count <= preferredAudioChannelCount);\n  if (countLessThanOrEqualtoConfig.length) {\n    return variantsByChannelCount[Math.max.apply(null,\n        countLessThanOrEqualtoConfig)];\n  }\n  // If all variants have more audio channels than the config, choose the\n  // variants with the fewest audio channels.\n  return variantsByChannelCount[Math.min.apply(null, channelCounts)];\n};\n\n/**\n * Chooses streams according to the given config.\n *\n * @param {!Array.<shaka.extern.Stream>} streams\n * @param {string} preferredLanguage\n * @param {string} preferredRole\n * @param {!Object=} languageMatches\n * @return {!Array.<!shaka.extern.Stream>}\n */\nshaka.util.StreamUtils.filterStreamsByLanguageAndRole = function(\n    streams, preferredLanguage, preferredRole, languageMatches) {\n  const LanguageUtils = shaka.util.LanguageUtils;\n  const ContentType = shaka.util.ManifestParserUtils.ContentType;\n\n  /** @type {!Array.<!shaka.extern.Stream>} */\n  let chosen = streams;\n\n  // Start with the set of primary streams.\n  /** @type {!Array.<!shaka.extern.Stream>} */\n  let primary = streams.filter(function(stream) {\n    return stream.primary;\n  });\n\n  if (primary.length) {\n    chosen = primary;\n  }\n\n  // Now reduce the set to one language.  This covers both arbitrary language\n  // choice and the reduction of the \"primary\" stream set to one language.\n  let firstLanguage = chosen.length ? chosen[0].language : '';\n  chosen = chosen.filter(function(stream) {\n    return stream.language == firstLanguage;\n  });\n\n  // Now search for matches based on language preference.  If any language match\n  // is found, it overrides the selection above.  Favor exact matches, then base\n  // matches, finally different subtags.  Execute in reverse order so the later\n  // steps override the previous ones.\n  if (preferredLanguage) {\n    let pref = LanguageUtils.normalize(preferredLanguage);\n    [LanguageUtils.MatchType.OTHER_SUB_LANGUAGE_OKAY,\n     LanguageUtils.MatchType.BASE_LANGUAGE_OKAY,\n     LanguageUtils.MatchType.EXACT]\n        .forEach(function(matchType) {\n          let betterLangMatchFound = false;\n          streams.forEach(function(stream) {\n            let lang = LanguageUtils.normalize(stream.language);\n            if (LanguageUtils.match(matchType, pref, lang)) {\n              if (betterLangMatchFound) {\n                chosen.push(stream);\n              } else {\n                chosen = [stream];\n                betterLangMatchFound = true;\n              }\n              if (languageMatches) {\n                languageMatches[ContentType.TEXT] = true;\n              }\n            }\n          }); // forEach(stream)\n        }); // forEach(matchType)\n  } // if (preferredLanguage)\n\n  // Now refine the choice based on role preference.\n  if (preferredRole) {\n    let roleMatches = shaka.util.StreamUtils.filterTextStreamsByRole_(\n        chosen, preferredRole);\n    if (roleMatches.length) {\n      return roleMatches;\n    } else {\n      shaka.log.warning('No exact match for the text role could be found.');\n    }\n  } else {\n    // Prefer text streams with no roles, if they exist.\n    let noRoleMatches = chosen.filter(function(stream) {\n      return stream.roles.length == 0;\n    });\n    if (noRoleMatches.length) {\n      return noRoleMatches;\n    }\n  }\n\n  // Either there was no role preference, or it could not be satisfied.\n  // Choose an arbitrary role, if there are any, and filter out any other roles.\n  // This ensures we never adapt between roles.\n\n  let allRoles = chosen.map(function(stream) {\n    return stream.roles;\n  }).reduce(shaka.util.Functional.collapseArrays, []);\n\n  if (!allRoles.length) {\n    return chosen;\n  }\n  return shaka.util.StreamUtils.filterTextStreamsByRole_(chosen, allRoles[0]);\n};\n\n\n/**\n * Filter Variants by role.\n *\n * @param {!Array.<shaka.extern.Variant>} variants\n * @param {string} preferredRole\n * @return {!Array.<shaka.extern.Variant>}\n * @private\n */\nshaka.util.StreamUtils.filterVariantsByRole_ =\n    function(variants, preferredRole) {\n  return variants.filter(function(variant) {\n    return (variant.audio && variant.audio.roles.indexOf(preferredRole) >= 0) ||\n           (variant.video && variant.video.roles.indexOf(preferredRole) >= 0);\n  });\n};\n\n\n/**\n * Filter text Streams by role.\n *\n * @param {!Array.<shaka.extern.Stream>} textStreams\n * @param {string} preferredRole\n * @return {!Array.<shaka.extern.Stream>}\n * @private\n */\nshaka.util.StreamUtils.filterTextStreamsByRole_ =\n    function(textStreams, preferredRole) {\n  return textStreams.filter(function(stream) {\n    return stream.roles.indexOf(preferredRole) >= 0;\n  });\n};\n\n\n/**\n * Finds a Variant with given audio and video streams.\n * Returns null if no such Variant was found.\n *\n * @param {?shaka.extern.Stream} audio\n * @param {?shaka.extern.Stream} video\n * @param {!Array.<!shaka.extern.Variant>} variants\n * @return {?shaka.extern.Variant}\n */\nshaka.util.StreamUtils.getVariantByStreams = function(audio, video, variants) {\n  if (audio) {\n    goog.asserts.assert(\n        shaka.util.StreamUtils.isAudio(audio),\n        'Audio streams must have the audio type.');\n  }\n\n  if (video) {\n    goog.asserts.assert(\n        shaka.util.StreamUtils.isVideo(video),\n        'Video streams must have the video type.');\n  }\n\n  for (let i = 0; i < variants.length; i++) {\n    if (variants[i].audio == audio && variants[i].video == video) {\n      return variants[i];\n    }\n  }\n\n  return null;\n};\n\n\n/**\n * Finds a Variant with the given video and audio streams, by stream ID.\n * Returns null if no such Variant was found.\n *\n * @param {?number} audioId\n * @param {?number} videoId\n * @param {!Array.<shaka.extern.Variant>} variants\n * @return {?shaka.extern.Variant}\n */\nshaka.util.StreamUtils.getVariantByStreamIds = function(\n    audioId, videoId, variants) {\n  function matchesId(id, stream) {\n    if (id == null) {\n      return stream == null;\n    } else {\n      return stream.id == id;\n    }\n  }\n\n  for (let i = 0; i < variants.length; i++) {\n    if (matchesId(audioId, variants[i].audio) &&\n        matchesId(videoId, variants[i].video)) {\n      return variants[i];\n    }\n  }\n\n  return null;\n};\n\n\n/**\n * Gets the index of the Period that contains the given time.\n * @param {shaka.extern.Manifest} manifest\n * @param {number} time The time in seconds from the start of the presentation.\n * @return {number}\n */\nshaka.util.StreamUtils.findPeriodContainingTime = function(manifest, time) {\n  let threshold = shaka.util.ManifestParserUtils.GAP_OVERLAP_TOLERANCE_SECONDS;\n  for (let i = manifest.periods.length - 1; i > 0; --i) {\n    let period = manifest.periods[i];\n    // The last segment may end right before the end of the Period because of\n    // rounding issues.\n    if (time + threshold >= period.startTime) {\n      return i;\n    }\n  }\n  return 0;\n};\n\n\n/**\n * @param {shaka.extern.Manifest} manifest\n * @param {shaka.extern.Stream} stream\n * @return {number} The index of the Period which contains |stream|, or -1 if\n *   no Period contains |stream|.\n */\nshaka.util.StreamUtils.findPeriodContainingStream = function(manifest, stream) {\n  const ContentType = shaka.util.ManifestParserUtils.ContentType;\n  for (let periodIdx = 0; periodIdx < manifest.periods.length; ++periodIdx) {\n    let period = manifest.periods[periodIdx];\n    if (stream.type == ContentType.TEXT) {\n      for (let j = 0; j < period.textStreams.length; ++j) {\n        let textStream = period.textStreams[j];\n        if (textStream == stream) {\n          return periodIdx;\n        }\n      }\n    } else {\n      for (let j = 0; j < period.variants.length; ++j) {\n        let variant = period.variants[j];\n        if (variant.audio == stream || variant.video == stream ||\n            (variant.video && variant.video.trickModeVideo == stream)) {\n          return periodIdx;\n        }\n      }\n    }\n  }\n  return -1;\n};\n\n\n/**\n * @param {shaka.extern.Manifest} manifest\n * @param {shaka.extern.Variant} variant\n * @return {number} The index of the Period which contains |stream|, or -1 if\n *   no Period contains |stream|.\n */\nshaka.util.StreamUtils.findPeriodContainingVariant =\n    function(manifest, variant) {\n  for (let periodIdx = 0; periodIdx < manifest.periods.length; ++periodIdx) {\n    let period = manifest.periods[periodIdx];\n    for (let j = 0; j < period.variants.length; ++j) {\n      if (period.variants[j] == variant) {\n        return periodIdx;\n      }\n    }\n  }\n  return -1;\n};\n\n\n/**\n * Checks if the given stream is an audio stream.\n *\n * @param {shaka.extern.Stream} stream\n * @return {boolean}\n */\nshaka.util.StreamUtils.isAudio = function(stream) {\n  const ContentType = shaka.util.ManifestParserUtils.ContentType;\n  return stream.type == ContentType.AUDIO;\n};\n\n\n/**\n * Checks if the given stream is a video stream.\n *\n * @param {shaka.extern.Stream} stream\n * @return {boolean}\n */\nshaka.util.StreamUtils.isVideo = function(stream) {\n  const ContentType = shaka.util.ManifestParserUtils.ContentType;\n  return stream.type == ContentType.VIDEO;\n};\n\n\n/**\n * Get all the variants from all the periods in the manifest.\n *\n * @param {shaka.extern.Manifest} manifest\n * @return {!Array.<shaka.extern.Variant>}\n */\nshaka.util.StreamUtils.getAllVariants = function(manifest) {\n  /** @type {!Array.<shaka.extern.Variant>} */\n  const found = [];\n\n  manifest.periods.forEach((period) => {\n    period.variants.forEach((variant) => {\n      found.push(variant);\n    });\n  });\n\n  return found;\n};\n\n\n/**\n * Get all non-null streams in the variant as an array.\n *\n * @param {shaka.extern.Variant} variant\n * @return {!Array.<shaka.extern.Stream>}\n */\nshaka.util.StreamUtils.getVariantStreams = function(variant) {\n  const streams = [];\n\n  if (variant.audio) { streams.push(variant.audio); }\n  if (variant.video) { streams.push(variant.video); }\n\n  return streams;\n};\n\n\n/**\n * @param {shaka.extern.Stream} stream\n * @return {string}\n * @private\n */\nshaka.util.StreamUtils.getStreamSummaryString_ = function(stream) {\n  if (shaka.util.StreamUtils.isAudio(stream)) {\n    return 'type=audio' +\n           ' codecs=' + stream.codecs +\n           ' bandwidth='+ stream.bandwidth +\n           ' channelsCount=' + stream.channelsCount;\n  }\n\n  if (shaka.util.StreamUtils.isVideo(stream)) {\n    return 'type=video' +\n           ' codecs=' + stream.codecs +\n           ' bandwidth=' + stream.bandwidth +\n           ' frameRate=' + stream.frameRate +\n           ' width=' + stream.width +\n           ' height=' + stream.height;\n  }\n\n  return 'unexpected stream type';\n};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.abr.SimpleAbrManager');\n\ngoog.require('goog.asserts');\ngoog.require('shaka.abr.EwmaBandwidthEstimator');\ngoog.require('shaka.log');\ngoog.require('shaka.util.StreamUtils');\n\n\n/**\n * <p>\n * This defines the default ABR manager for the Player.  An instance of this\n * class is used when no ABR manager is given.\n * </p>\n * <p>\n * The behavior of this class is to take throughput samples using\n * segmentDownloaded to estimate the current network bandwidth.  Then it will\n * use that to choose the streams that best fit the current bandwidth.  It will\n * always pick the highest bandwidth variant it thinks can be played.\n * </p>\n * <p>\n * After initial choices are made, this class will call switchCallback() when\n * there is a better choice.  switchCallback() will not be called more than once\n * per ({@link shaka.abr.SimpleAbrManager.SWITCH_INTERVAL_MS}).\n * </p>\n *\n * @constructor\n * @struct\n * @implements {shaka.extern.AbrManager}\n * @export\n */\nshaka.abr.SimpleAbrManager = function() {\n  /** @private {?shaka.extern.AbrManager.SwitchCallback} */\n  this.switch_ = null;\n\n  /** @private {boolean} */\n  this.enabled_ = false;\n\n  /** @private {shaka.abr.EwmaBandwidthEstimator} */\n  this.bandwidthEstimator_ = new shaka.abr.EwmaBandwidthEstimator();\n  // TODO: Consider using NetworkInformation's change event to throw out an old\n  // estimate based on changing network types, such as wifi => 3g.\n\n  /**\n   * A filtered list of Variants to choose from.\n   * @private {!Array.<!shaka.extern.Variant>}\n   */\n  this.variants_ = [];\n\n  /** @private {boolean} */\n  this.startupComplete_ = false;\n\n  /**\n   * The last wall-clock time, in milliseconds, when streams were chosen.\n   *\n   * @private {?number}\n   */\n  this.lastTimeChosenMs_ = null;\n\n  /** @private {?shaka.extern.AbrConfiguration} */\n  this.config_ = null;\n};\n\n\n/**\n * @override\n * @export\n */\nshaka.abr.SimpleAbrManager.prototype.stop = function() {\n  this.switch_ = null;\n  this.enabled_ = false;\n  this.variants_ = [];\n  this.lastTimeChosenMs_ = null;\n\n  // Don't reset |startupComplete_|: if we've left the startup interval, we can\n  // start using bandwidth estimates right away after init() is called.\n};\n\n\n/**\n * @override\n * @export\n */\nshaka.abr.SimpleAbrManager.prototype.init = function(switchCallback) {\n  this.switch_ = switchCallback;\n};\n\n\n/**\n * @override\n * @export\n */\nshaka.abr.SimpleAbrManager.prototype.chooseVariant = function() {\n  const SimpleAbrManager = shaka.abr.SimpleAbrManager;\n\n  // Get sorted Variants.\n  let sortedVariants = SimpleAbrManager.filterAndSortVariants_(\n      this.config_.restrictions, this.variants_);\n  let currentBandwidth = this.bandwidthEstimator_.getBandwidthEstimate(\n      this.config_.defaultBandwidthEstimate);\n\n  if (this.variants_.length && !sortedVariants.length) {\n    // If we couldn't meet the ABR restrictions, we should still play something.\n    // These restrictions are not \"hard\" restrictions in the way that top-level\n    // or DRM-based restrictions are.  Sort the variants without restrictions\n    // and keep just the first (lowest-bandwidth) one.\n    shaka.log.warning('No variants met the ABR restrictions. ' +\n                      'Choosing a variant by lowest bandwidth.');\n    sortedVariants = SimpleAbrManager.filterAndSortVariants_(\n        /* restrictions */ null, this.variants_);\n    sortedVariants = [sortedVariants[0]];\n  }\n\n  // Start by assuming that we will use the first Stream.\n  let chosen = sortedVariants[0] || null;\n\n  for (let i = 0; i < sortedVariants.length; ++i) {\n    let variant = sortedVariants[i];\n    let nextVariant = sortedVariants[i + 1] || {bandwidth: Infinity};\n\n    let minBandwidth = variant.bandwidth /\n                       this.config_.bandwidthDowngradeTarget;\n    let maxBandwidth = nextVariant.bandwidth /\n                       this.config_.bandwidthUpgradeTarget;\n    shaka.log.v2('Bandwidth ranges:',\n                 (variant.bandwidth / 1e6).toFixed(3),\n                 (minBandwidth / 1e6).toFixed(3),\n                 (maxBandwidth / 1e6).toFixed(3));\n\n    if (currentBandwidth >= minBandwidth && currentBandwidth <= maxBandwidth) {\n      chosen = variant;\n    }\n  }\n\n  this.lastTimeChosenMs_ = Date.now();\n  return chosen;\n};\n\n\n/**\n * @override\n * @export\n */\nshaka.abr.SimpleAbrManager.prototype.enable = function() {\n  this.enabled_ = true;\n};\n\n\n/**\n * @override\n * @export\n */\nshaka.abr.SimpleAbrManager.prototype.disable = function() {\n  this.enabled_ = false;\n};\n\n\n/**\n * @override\n * @export\n */\nshaka.abr.SimpleAbrManager.prototype.segmentDownloaded = function(\n    deltaTimeMs, numBytes) {\n  shaka.log.v2('Segment downloaded:',\n               'deltaTimeMs=' + deltaTimeMs,\n               'numBytes=' + numBytes,\n               'lastTimeChosenMs=' + this.lastTimeChosenMs_,\n               'enabled=' + this.enabled_);\n  goog.asserts.assert(deltaTimeMs >= 0, 'expected a non-negative duration');\n  this.bandwidthEstimator_.sample(deltaTimeMs, numBytes);\n\n  if ((this.lastTimeChosenMs_ != null) && this.enabled_) {\n    this.suggestStreams_();\n  }\n};\n\n\n/**\n * @override\n * @export\n */\nshaka.abr.SimpleAbrManager.prototype.getBandwidthEstimate = function() {\n  return this.bandwidthEstimator_.getBandwidthEstimate(\n      this.config_.defaultBandwidthEstimate);\n};\n\n\n/**\n * @override\n * @export\n */\nshaka.abr.SimpleAbrManager.prototype.setVariants = function(variants) {\n  this.variants_ = variants;\n};\n\n\n/**\n * @override\n * @export\n */\nshaka.abr.SimpleAbrManager.prototype.configure = function(config) {\n  this.config_ = config;\n};\n\n\n/**\n * Calls switch_() with the variant chosen by chooseVariant().\n *\n * @private\n */\nshaka.abr.SimpleAbrManager.prototype.suggestStreams_ = function() {\n  shaka.log.v2('Suggesting Streams...');\n  goog.asserts.assert(this.lastTimeChosenMs_ != null,\n                      'lastTimeChosenMs_ should not be null');\n\n  if (!this.startupComplete_) {\n    // Check if we've got enough data yet.\n    if (!this.bandwidthEstimator_.hasGoodEstimate()) {\n      shaka.log.v2('Still waiting for a good estimate...');\n      return;\n    }\n    this.startupComplete_ = true;\n  } else {\n    // Check if we've left the switch interval.\n    let now = Date.now();\n    let delta = now - this.lastTimeChosenMs_;\n    if (delta < this.config_.switchInterval * 1000) {\n      shaka.log.v2('Still within switch interval...');\n      return;\n    }\n  }\n\n  let chosenVariant = this.chooseVariant();\n  let bandwidthEstimate = this.bandwidthEstimator_.getBandwidthEstimate(\n      this.config_.defaultBandwidthEstimate);\n  let currentBandwidthKbps = Math.round(bandwidthEstimate / 1000.0);\n\n  shaka.log.debug(\n      'Calling switch_(), bandwidth=' + currentBandwidthKbps + ' kbps');\n  // If any of these chosen streams are already chosen, Player will filter them\n  // out before passing the choices on to StreamingEngine.\n  this.switch_(chosenVariant);\n};\n\n\n/**\n * @param {?shaka.extern.Restrictions} restrictions\n * @param {!Array.<shaka.extern.Variant>} variants\n * @return {!Array.<shaka.extern.Variant>} variants filtered according to\n *   |restrictions| and sorted in ascending order of bandwidth.\n * @private\n */\nshaka.abr.SimpleAbrManager.filterAndSortVariants_ = function(\n    restrictions, variants) {\n  if (restrictions) {\n    variants = variants.filter((variant) => {\n      // This was already checked in another scope, but the compiler doesn't\n      // seem to understand that.\n      goog.asserts.assert(restrictions, 'Restrictions should exist!');\n\n      return shaka.util.StreamUtils.meetsRestrictions(\n          variant, restrictions,\n          /* maxHwRes */ {width: Infinity, height: Infinity});\n    });\n  }\n\n  return variants.sort((v1, v2) => {\n    return v1.bandwidth - v2.bandwidth;\n  });\n};\n\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.cast.CastUtils');\n\ngoog.require('shaka.util.FakeEvent');\n\n\n/**\n * @namespace shaka.cast.CastUtils\n * @summary A set of cast utility functions and variables shared between sender\n *   and receiver.\n */\n\n\n/**\n * HTMLMediaElement events that are proxied while casting.\n * @const {!Array.<string>}\n */\nshaka.cast.CastUtils.VideoEvents = [\n  'ended',\n  'play',\n  'playing',\n  'pause',\n  'pausing',\n  'ratechange',\n  'seeked',\n  'seeking',\n  'timeupdate',\n  'volumechange',\n];\n\n\n/**\n * HTMLMediaElement attributes that are proxied while casting.\n * @const {!Array.<string>}\n */\nshaka.cast.CastUtils.VideoAttributes = [\n  'buffered',\n  'currentTime',\n  'duration',\n  'ended',\n  'loop',\n  'muted',\n  'paused',\n  'playbackRate',\n  'seeking',\n  'videoHeight',\n  'videoWidth',\n  'volume',\n];\n\n\n/**\n * HTMLMediaElement attributes that are transferred when casting begins.\n * @const {!Array.<string>}\n */\nshaka.cast.CastUtils.VideoInitStateAttributes = [\n  'loop',\n  'playbackRate',\n];\n\n\n/**\n * HTMLMediaElement methods with no return value that are proxied while casting.\n * @const {!Array.<string>}\n */\nshaka.cast.CastUtils.VideoVoidMethods = [\n  'pause',\n  'play',\n];\n\n\n/**\n * Player events that are proxied while casting.\n * @const {!Array.<string>}\n */\nshaka.cast.CastUtils.PlayerEvents = [\n  'adaptation',\n  'buffering',\n  'emsg',\n  'error',\n  'loading',\n  'streaming',\n  'texttrackvisibility',\n  'timelineregionadded',\n  'timelineregionenter',\n  'timelineregionexit',\n  'trackschanged',\n  'unloading',\n];\n\n\n/**\n * Player getter methods that are proxied while casting.\n * The key is the method, the value is the frequency of updates.\n * Frequency 1 translates to every update; frequency 2 to every 2 updates, etc.\n * @const {!Object.<string, number>}\n */\nshaka.cast.CastUtils.PlayerGetterMethods = {\n  // NOTE: The 'drmInfo' property is not proxied, as it is very large.\n  'getAssetUri': 2,\n  'getAudioLanguages': 2,\n  'getAudioLanguagesAndRoles': 2,\n  'getBufferedInfo': 2,\n  // NOTE: The 'getSharedConfiguration' property is not proxied as it would\n  //       not be possible to share a reference.\n  'getConfiguration': 2,\n  'getExpiration': 2,\n  // NOTE: The 'getManifest' property is not proxied, as it is very large.\n  // TODO(vaage): Remove |getManifestUri| references in v2.6.\n  // NOTE: The 'getManifestUri' property is not proxied, as CastProxy has a\n  // handler for it.\n  'getPlaybackRate': 2,\n  'getTextLanguages': 2,\n  'getTextLanguagesAndRoles': 2,\n  'getTextTracks': 2,\n  'getStats': 5,\n  'usingEmbeddedTextTrack': 2,\n  'getVariantTracks': 2,\n  'isAudioOnly': 10,\n  'isBuffering': 1,\n  'isInProgress': 1,\n  'isLive': 10,\n  'isTextTrackVisible': 1,\n  'keySystem': 10,\n  'seekRange': 1,\n};\n\n\n/**\n * Player getter methods that are proxied while casting, but only when casting\n * a livestream.\n * The key is the method, the value is the frequency of updates.\n * Frequency 1 translates to every update; frequency 2 to every 2 updates, etc.\n * @const {!Object.<string, number>}\n */\nshaka.cast.CastUtils.PlayerGetterMethodsThatRequireLive = {\n  'getPlayheadTimeAsDate': 1,\n  'getPresentationStartTimeAsDate': 20,\n};\n\n\n/**\n * Player getter and setter methods that are used to transfer state when casting\n * begins.\n * @const {!Array.<!Array.<string>>}\n */\nshaka.cast.CastUtils.PlayerInitState = [\n  ['getConfiguration', 'configure'],\n];\n\n\n/**\n * Player getter and setter methods that are used to transfer state after\n * load() is resolved.\n * @const {!Array.<!Array.<string>>}\n */\nshaka.cast.CastUtils.PlayerInitAfterLoadState = [\n  ['isTextTrackVisible', 'setTextTrackVisibility'],\n];\n\n\n/**\n * Player methods with no return value that are proxied while casting.\n * @const {!Array.<string>}\n */\nshaka.cast.CastUtils.PlayerVoidMethods = [\n  'addTextTrack',\n  'cancelTrickPlay',\n  'configure',\n  'resetConfiguration',\n  'retryStreaming',\n  'selectAudioLanguage',\n  'selectEmbeddedTextTrack',\n  'selectTextLanguage',\n  'selectTextTrack',\n  'selectVariantTrack',\n  'setTextTrackVisibility',\n  'trickPlay',\n];\n\n\n/**\n * Player methods returning a Promise that are proxied while casting.\n * @const {!Array.<string>}\n */\nshaka.cast.CastUtils.PlayerPromiseMethods = [\n  'attach',\n  'detach',\n  // The manifestFactory parameter of load is not supported.\n  'load',\n  'unload',\n];\n\n\n/**\n * @typedef {{\n *   video: Object,\n *   player: Object,\n *   manifest: ?string,\n *   startTime: ?number\n * }}\n * @property {Object} video\n *   Dictionary of video properties to be set.\n * @property {Object} player\n *   Dictionary of player setters to be called.\n * @property {?string} manifest\n *   The currently-selected manifest, if present.\n * @property {?number} startTime\n *   The playback start time, if currently playing.\n */\nshaka.cast.CastUtils.InitStateType;\n\n\n/**\n * The namespace for Shaka messages on the cast bus.\n * @const {string}\n */\nshaka.cast.CastUtils.SHAKA_MESSAGE_NAMESPACE = 'urn:x-cast:com.google.shaka.v2';\n\n\n/**\n * The namespace for generic messages on the cast bus.\n * @const {string}\n */\nshaka.cast.CastUtils.GENERIC_MESSAGE_NAMESPACE =\n    'urn:x-cast:com.google.cast.media';\n\n\n/**\n * Serialize as JSON, but specially encode things JSON will not otherwise\n * represent.\n * @param {?} thing\n * @return {string}\n */\nshaka.cast.CastUtils.serialize = function(thing) {\n  return JSON.stringify(thing, function(key, value) {\n    if (typeof value == 'function') {\n      // Functions can't be (safely) serialized.\n      return undefined;\n    }\n\n    if (value instanceof Event || value instanceof shaka.util.FakeEvent) {\n      // Events don't serialize to JSON well because of the DOM objects\n      // and other complex objects they contain, so we strip these out.\n      // Note that using Object.keys or JSON.stringify directly on the event\n      // will not capture its properties.  We must use a for loop.\n      let simpleEvent = {};\n      for (let eventKey in value) {\n        let eventValue = value[eventKey];\n        if (eventValue && typeof eventValue == 'object') {\n          if (eventKey == 'detail') {\n            // Keep the detail value, because it contains important information\n            // for diagnosing errors.\n            simpleEvent[eventKey] = eventValue;\n          }\n          // Strip out non-null object types because they are complex and we\n          // don't need them.\n        } else if (eventKey in Event) {\n          // Strip out keys that are found on Event itself because they are\n          // class-level constants we don't need, like Event.MOUSEMOVE == 16.\n        } else {\n          simpleEvent[eventKey] = eventValue;\n        }\n      }\n      return simpleEvent;\n    }\n\n    if (value instanceof TimeRanges) {\n      // TimeRanges must be unpacked into plain data for serialization.\n      return shaka.cast.CastUtils.unpackTimeRanges_(value);\n    }\n\n    if (typeof value == 'number') {\n      // NaN and infinity cannot be represented directly in JSON.\n      if (isNaN(value)) return 'NaN';\n      if (isFinite(value)) return value;\n      if (value < 0) return '-Infinity';\n      return 'Infinity';\n    }\n\n    return value;\n  });\n};\n\n\n/**\n * Deserialize JSON using our special encodings.\n * @param {string} str\n * @return {?}\n */\nshaka.cast.CastUtils.deserialize = function(str) {\n  return JSON.parse(str, function(key, value) {\n    if (value == 'NaN') {\n      return NaN;\n    } else if (value == '-Infinity') {\n      return -Infinity;\n    } else if (value == 'Infinity') {\n      return Infinity;\n    } else if (value && typeof value == 'object' &&\n               value['__type__'] == 'TimeRanges') {\n      // TimeRanges objects have been unpacked and sent as plain data.\n      // Simulate the original TimeRanges object.\n      return shaka.cast.CastUtils.simulateTimeRanges_(value);\n    }\n    return value;\n  });\n};\n\n\n/**\n * @param {!TimeRanges} ranges\n * @return {Object}\n * @private\n */\nshaka.cast.CastUtils.unpackTimeRanges_ = function(ranges) {\n  let obj = {\n    '__type__': 'TimeRanges',  // a signal to deserialize\n    'length': ranges.length,\n    'start': [],\n    'end': [],\n  };\n\n  for (let i = 0; i < ranges.length; ++i) {\n    obj['start'].push(ranges.start(i));\n    obj['end'].push(ranges.end(i));\n  }\n\n  return obj;\n};\n\n\n/**\n * Creates a simulated TimeRanges object from data sent by the cast receiver.\n * @param {?} obj\n * @return {{\n *   length: number,\n *   start: function(number): number,\n *   end: function(number): number\n * }}\n * @private\n */\nshaka.cast.CastUtils.simulateTimeRanges_ = function(obj) {\n  return {\n    length: obj.length,\n    // NOTE: a more complete simulation would throw when |i| was out of range,\n    // but for simplicity we will assume a well-behaved application that uses\n    // length instead of catch to stop iterating.\n    start: function(i) { return obj.start[i]; },\n    end: function(i) { return obj.end[i]; },\n  };\n};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.cast.CastSender');\n\ngoog.require('goog.asserts');\ngoog.require('shaka.cast.CastUtils');\ngoog.require('shaka.log');\ngoog.require('shaka.util.Error');\ngoog.require('shaka.util.FakeEvent');\ngoog.require('shaka.util.IDestroyable');\ngoog.require('shaka.util.PublicPromise');\n\n\n/**\n * @constructor\n * @struct\n * @param {string} receiverAppId The ID of the cast receiver application.\n * @param {function()} onStatusChanged A callback invoked when the cast status\n *   changes.\n * @param {function()} onFirstCastStateUpdate A callback invoked when an\n *   \"update\" event has been received for the first time.\n * @param {function(string, !shaka.util.FakeEvent)} onRemoteEvent A callback\n *   invoked with target name and event when a remote event is received.\n * @param {function()} onResumeLocal A callback invoked when the local player\n *   should resume playback.  Called before the cached remote state is wiped.\n * @param {function()} onInitStateRequired A callback to get local player's.\n *   state.  Invoked when casting is initiated from Chrome's cast button.\n * @implements {shaka.util.IDestroyable}\n */\nshaka.cast.CastSender =\n    function(receiverAppId, onStatusChanged, onFirstCastStateUpdate,\n             onRemoteEvent, onResumeLocal, onInitStateRequired) {\n  /** @private {string} */\n  this.receiverAppId_ = receiverAppId;\n\n  /** @private {?function()} */\n  this.onStatusChanged_ = onStatusChanged;\n\n  /** @private {?function()} */\n  this.onFirstCastStateUpdate_ = onFirstCastStateUpdate;\n\n  /** @private {boolean} */\n  this.hasJoinedExistingSession_ = false;\n\n  /** @private {?function(string, !shaka.util.FakeEvent)} */\n  this.onRemoteEvent_ = onRemoteEvent;\n\n  /** @private {?function()} */\n  this.onResumeLocal_ = onResumeLocal;\n\n  /** @private {?function()} */\n  this.onInitStateRequired_ = onInitStateRequired;\n\n  /** @private {boolean} */\n  this.apiReady_ = false;\n\n  /** @private {boolean} */\n  this.isCasting_ = false;\n\n  /** @private {string} */\n  this.receiverName_ = '';\n\n  /** @private {Object} */\n  this.appData_ = null;\n\n  /** @private {?function()} */\n  this.onConnectionStatusChangedBound_ =\n      this.onConnectionStatusChanged_.bind(this);\n\n  /** @private {?function(string, string)} */\n  this.onMessageReceivedBound_ = this.onMessageReceived_.bind(this);\n\n  /** @private {Object} */\n  this.cachedProperties_ = {\n    'video': {},\n    'player': {},\n  };\n\n  /** @private {number} */\n  this.nextAsyncCallId_ = 0;\n\n  /** @private {Object.<string, !shaka.util.PublicPromise>} */\n  this.asyncCallPromises_ = {};\n\n  /** @private {shaka.util.PublicPromise} */\n  this.castPromise_ = null;\n};\n\n\n/** @private {boolean} */\nshaka.cast.CastSender.hasReceivers_ = false;\n\n\n/** @private {chrome.cast.Session} */\nshaka.cast.CastSender.session_ = null;\n\n\n/** @override */\nshaka.cast.CastSender.prototype.destroy = function() {\n  this.rejectAllPromises_();\n  if (shaka.cast.CastSender.session_) {\n    this.removeListeners_();\n    // Don't leave the session, so that this session can be re-used later if\n    // necessary.\n  }\n\n  this.onStatusChanged_ = null;\n  this.onRemoteEvent_ = null;\n  this.onResumeLocal_ = null;\n  this.apiReady_ = false;\n  this.isCasting_ = false;\n  this.appData_ = null;\n  this.cachedProperties_ = null;\n  this.asyncCallPromises_ = null;\n  this.castPromise_ = null;\n  this.onConnectionStatusChangedBound_ = null;\n  this.onMessageReceivedBound_ = null;\n\n  return Promise.resolve();\n};\n\n\n/**\n * @return {boolean} True if the cast API is available.\n */\nshaka.cast.CastSender.prototype.apiReady = function() {\n  return this.apiReady_;\n};\n\n\n/**\n * @return {boolean} True if there are receivers.\n */\nshaka.cast.CastSender.prototype.hasReceivers = function() {\n  return shaka.cast.CastSender.hasReceivers_;\n};\n\n\n/**\n * @return {boolean} True if we are currently casting.\n */\nshaka.cast.CastSender.prototype.isCasting = function() {\n  return this.isCasting_;\n};\n\n\n/**\n * @return {string} The name of the Cast receiver device, if isCasting().\n */\nshaka.cast.CastSender.prototype.receiverName = function() {\n  return this.receiverName_;\n};\n\n\n/**\n * @return {boolean} True if we have a cache of remote properties from the\n *   receiver.\n */\nshaka.cast.CastSender.prototype.hasRemoteProperties = function() {\n  return Object.keys(this.cachedProperties_['video']).length != 0;\n};\n\n\n/** Initialize the Cast API. */\nshaka.cast.CastSender.prototype.init = function() {\n  // Check for the cast extension.\n  if (!window.chrome || !chrome.cast || !chrome.cast.isAvailable) {\n    // Not available yet, so wait to be notified if/when it is available.\n    window.__onGCastApiAvailable = (function(loaded) {\n      if (loaded) {\n        this.init();\n      }\n    }).bind(this);\n    return;\n  }\n\n  // The API is now available.\n  delete window.__onGCastApiAvailable;\n  this.apiReady_ = true;\n  this.onStatusChanged_();\n\n  let sessionRequest = new chrome.cast.SessionRequest(this.receiverAppId_);\n  let apiConfig = new chrome.cast.ApiConfig(sessionRequest,\n      this.onExistingSessionJoined_.bind(this),\n      this.onReceiverStatusChanged_.bind(this),\n      'origin_scoped');\n\n  // TODO: Have never seen this fail.  When would it and how should we react?\n  chrome.cast.initialize(apiConfig,\n      function() { shaka.log.debug('CastSender: init'); },\n      function(error) { shaka.log.error('CastSender: init error', error); });\n  if (shaka.cast.CastSender.hasReceivers_) {\n    // Fire a fake cast status change, to simulate the update that\n    // would be fired normally.\n    // This is after a brief delay, to give users a chance to add event\n    // listeners.\n    setTimeout(this.onStatusChanged_.bind(this), 20);\n  }\n\n  let oldSession = shaka.cast.CastSender.session_;\n  if (oldSession && oldSession.status != chrome.cast.SessionStatus.STOPPED) {\n    // The old session still exists, so re-use it.\n    shaka.log.debug('CastSender: re-using existing connection');\n    this.onExistingSessionJoined_(oldSession);\n  } else {\n    // The session has been canceled in the meantime, so ignore it.\n    shaka.cast.CastSender.session_ = null;\n  }\n};\n\n\n/**\n * Set application-specific data.\n *\n * @param {Object} appData Application-specific data to relay to the receiver.\n */\nshaka.cast.CastSender.prototype.setAppData = function(appData) {\n  this.appData_ = appData;\n  if (this.isCasting_) {\n    this.sendMessage_({\n      'type': 'appData',\n      'appData': this.appData_,\n    });\n  }\n};\n\n\n/**\n * @param {shaka.cast.CastUtils.InitStateType} initState Video and player state\n *   to be sent to the receiver.\n * @return {!Promise} Resolved when connected to a receiver.  Rejected if the\n *   connection fails or is canceled by the user.\n */\nshaka.cast.CastSender.prototype.cast = function(initState) {\n  if (!this.apiReady_) {\n    return Promise.reject(new shaka.util.Error(\n        shaka.util.Error.Severity.RECOVERABLE,\n        shaka.util.Error.Category.CAST,\n        shaka.util.Error.Code.CAST_API_UNAVAILABLE));\n  }\n  if (!shaka.cast.CastSender.hasReceivers_) {\n    return Promise.reject(new shaka.util.Error(\n        shaka.util.Error.Severity.RECOVERABLE,\n        shaka.util.Error.Category.CAST,\n        shaka.util.Error.Code.NO_CAST_RECEIVERS));\n  }\n  if (this.isCasting_) {\n    return Promise.reject(new shaka.util.Error(\n        shaka.util.Error.Severity.RECOVERABLE,\n        shaka.util.Error.Category.CAST,\n        shaka.util.Error.Code.ALREADY_CASTING));\n  }\n\n  this.castPromise_ = new shaka.util.PublicPromise();\n  chrome.cast.requestSession(\n      this.onSessionInitiated_.bind(this, initState),\n      this.onConnectionError_.bind(this));\n  return this.castPromise_;\n};\n\n\n/**\n * Shows user a cast dialog where they can choose to stop\n * casting.  Relies on Chrome to perform disconnect if they do.\n * Doesn't do anything if not connected.\n */\nshaka.cast.CastSender.prototype.showDisconnectDialog = function() {\n  if (!this.isCasting_) {\n    return;\n  }\n  let initState = this.onInitStateRequired_();\n\n  chrome.cast.requestSession(\n      this.onSessionInitiated_.bind(this, initState),\n      this.onConnectionError_.bind(this));\n};\n\n\n/**\n * Forces the receiver app to shut down by disconnecting.  Does nothing if not\n * connected.\n */\nshaka.cast.CastSender.prototype.forceDisconnect = function() {\n  if (!this.isCasting_) {\n    return;\n  }\n\n  this.rejectAllPromises_();\n  if (shaka.cast.CastSender.session_) {\n    this.removeListeners_();\n    shaka.cast.CastSender.session_.stop(function() {}, function() {});\n    shaka.cast.CastSender.session_ = null;\n  }\n};\n\n\n/**\n * Getter for properties of remote objects.\n * @param {string} targetName\n * @param {string} property\n * @return {?}\n */\nshaka.cast.CastSender.prototype.get = function(targetName, property) {\n  goog.asserts.assert(targetName == 'video' || targetName == 'player',\n                      'Unexpected target name');\n  const CastUtils = shaka.cast.CastUtils;\n  if (targetName == 'video') {\n    if (CastUtils.VideoVoidMethods.indexOf(property) >= 0) {\n      return this.remoteCall_.bind(this, targetName, property);\n    }\n  } else if (targetName == 'player') {\n    if (CastUtils.PlayerGetterMethodsThatRequireLive[property]) {\n      let isLive = this.get('player', 'isLive')();\n      goog.asserts.assert(isLive,\n          property + ' should be called on a live stream!');\n      // If the property shouldn't exist, return a fake function so that the\n      // user doesn't call an undefined function and get a second error.\n      if (!isLive) {\n        return () => undefined;\n      }\n    }\n    if (CastUtils.PlayerVoidMethods.indexOf(property) >= 0) {\n      return this.remoteCall_.bind(this, targetName, property);\n    }\n    if (CastUtils.PlayerPromiseMethods.indexOf(property) >= 0) {\n      return this.remoteAsyncCall_.bind(this, targetName, property);\n    }\n    if (CastUtils.PlayerGetterMethods[property]) {\n      return this.propertyGetter_.bind(this, targetName, property);\n    }\n  }\n\n  return this.propertyGetter_(targetName, property);\n};\n\n\n/**\n * Setter for properties of remote objects.\n * @param {string} targetName\n * @param {string} property\n * @param {?} value\n */\nshaka.cast.CastSender.prototype.set = function(targetName, property, value) {\n  goog.asserts.assert(targetName == 'video' || targetName == 'player',\n                      'Unexpected target name');\n\n  this.cachedProperties_[targetName][property] = value;\n  this.sendMessage_({\n    'type': 'set',\n    'targetName': targetName,\n    'property': property,\n    'value': value,\n  });\n};\n\n\n/**\n * @param {shaka.cast.CastUtils.InitStateType} initState\n * @param {chrome.cast.Session} session\n * @private\n */\nshaka.cast.CastSender.prototype.onSessionInitiated_ =\n    function(initState, session) {\n  shaka.log.debug('CastSender: onSessionInitiated');\n  this.onSessionCreated_(session);\n\n  this.sendMessage_({\n    'type': 'init',\n    'initState': initState,\n    'appData': this.appData_,\n  });\n\n  this.castPromise_.resolve();\n};\n\n\n/**\n * @param {chrome.cast.Error} error\n * @private\n */\nshaka.cast.CastSender.prototype.onConnectionError_ = function(error) {\n  // Default error code:\n  let code = shaka.util.Error.Code.UNEXPECTED_CAST_ERROR;\n\n  switch (error.code) {\n    case 'cancel':\n      code = shaka.util.Error.Code.CAST_CANCELED_BY_USER;\n      break;\n    case 'timeout':\n      code = shaka.util.Error.Code.CAST_CONNECTION_TIMED_OUT;\n      break;\n    case 'receiver_unavailable':\n      code = shaka.util.Error.Code.CAST_RECEIVER_APP_UNAVAILABLE;\n      break;\n  }\n\n  this.castPromise_.reject(new shaka.util.Error(\n      shaka.util.Error.Severity.CRITICAL,\n      shaka.util.Error.Category.CAST,\n      code,\n      error));\n};\n\n\n/**\n * @param {string} targetName\n * @param {string} property\n * @return {?}\n * @private\n */\nshaka.cast.CastSender.prototype.propertyGetter_ =\n    function(targetName, property) {\n  goog.asserts.assert(targetName == 'video' || targetName == 'player',\n                      'Unexpected target name');\n  return this.cachedProperties_[targetName][property];\n};\n\n\n/**\n * @param {string} targetName\n * @param {string} methodName\n * @param {...*} varArgs\n * @private\n */\nshaka.cast.CastSender.prototype.remoteCall_ =\n    function(targetName, methodName, ...varArgs) {\n  goog.asserts.assert(targetName == 'video' || targetName == 'player',\n                      'Unexpected target name');\n  this.sendMessage_({\n    'type': 'call',\n    'targetName': targetName,\n    'methodName': methodName,\n    'args': varArgs,\n  });\n};\n\n\n/**\n * @param {string} targetName\n * @param {string} methodName\n * @param {...*} varArgs\n * @return {!Promise}\n * @private\n */\nshaka.cast.CastSender.prototype.remoteAsyncCall_ =\n    function(targetName, methodName, ...varArgs) {\n  goog.asserts.assert(targetName == 'video' || targetName == 'player',\n                      'Unexpected target name');\n\n  let p = new shaka.util.PublicPromise();\n  let id = this.nextAsyncCallId_.toString();\n  this.nextAsyncCallId_++;\n  this.asyncCallPromises_[id] = p;\n\n  this.sendMessage_({\n    'type': 'asyncCall',\n    'targetName': targetName,\n    'methodName': methodName,\n    'args': varArgs,\n    'id': id,\n  });\n  return p;\n};\n\n\n/**\n * @param {chrome.cast.Session} session\n * @private\n */\nshaka.cast.CastSender.prototype.onExistingSessionJoined_ = function(session) {\n  shaka.log.debug('CastSender: onExistingSessionJoined');\n\n  let initState = this.onInitStateRequired_();\n\n  this.castPromise_ = new shaka.util.PublicPromise();\n  this.hasJoinedExistingSession_ = true;\n\n  this.onSessionInitiated_(initState, session);\n};\n\n\n/**\n * @param {string} availability\n * @private\n */\nshaka.cast.CastSender.prototype.onReceiverStatusChanged_ =\n    function(availability) {\n  // The cast extension is telling us whether there are any cast receiver\n  // devices available.\n  shaka.log.debug('CastSender: receiver status', availability);\n  shaka.cast.CastSender.hasReceivers_ = availability == 'available';\n  this.onStatusChanged_();\n};\n\n\n/**\n * @param {chrome.cast.Session} session\n * @private\n */\nshaka.cast.CastSender.prototype.onSessionCreated_ = function(session) {\n  shaka.cast.CastSender.session_ = session;\n  session.addUpdateListener(this.onConnectionStatusChangedBound_);\n  session.addMessageListener(shaka.cast.CastUtils.SHAKA_MESSAGE_NAMESPACE,\n      this.onMessageReceivedBound_);\n  this.onConnectionStatusChanged_();\n};\n\n\n/**\n * @private\n */\nshaka.cast.CastSender.prototype.removeListeners_ = function() {\n  let session = shaka.cast.CastSender.session_;\n  session.removeUpdateListener(this.onConnectionStatusChangedBound_);\n  session.removeMessageListener(shaka.cast.CastUtils.SHAKA_MESSAGE_NAMESPACE,\n      this.onMessageReceivedBound_);\n};\n\n\n/**\n * @private\n */\nshaka.cast.CastSender.prototype.onConnectionStatusChanged_ = function() {\n  let connected = shaka.cast.CastSender.session_ ?\n      shaka.cast.CastSender.session_.status == 'connected' :\n      false;\n  shaka.log.debug('CastSender: connection status', connected);\n  if (this.isCasting_ && !connected) {\n    // Tell CastProxy to transfer state back to local player.\n    this.onResumeLocal_();\n\n    // Clear whatever we have cached.\n    for (let targetName in this.cachedProperties_) {\n      this.cachedProperties_[targetName] = {};\n    }\n\n    this.rejectAllPromises_();\n  }\n\n  this.isCasting_ = connected;\n  this.receiverName_ = connected ?\n      shaka.cast.CastSender.session_.receiver.friendlyName :\n      '';\n  this.onStatusChanged_();\n};\n\n\n/**\n * Reject any async call promises that are still pending.\n * @private\n */\nshaka.cast.CastSender.prototype.rejectAllPromises_ = function() {\n  for (let id in this.asyncCallPromises_) {\n    let p = this.asyncCallPromises_[id];\n    delete this.asyncCallPromises_[id];\n\n    // Reject pending async operations as if they were interrupted.\n    // At the moment, load() is the only async operation we are worried about.\n    p.reject(new shaka.util.Error(\n        shaka.util.Error.Severity.RECOVERABLE,\n        shaka.util.Error.Category.PLAYER,\n        shaka.util.Error.Code.LOAD_INTERRUPTED));\n  }\n};\n\n\n/**\n * @param {string} namespace\n * @param {string} serialized\n * @private\n */\nshaka.cast.CastSender.prototype.onMessageReceived_ =\n    function(namespace, serialized) {\n  // Since this method is in the compiled library, make sure all messages passed\n  // in here were created with quoted property names.\n\n  let message = shaka.cast.CastUtils.deserialize(serialized);\n  shaka.log.v2('CastSender: message', message);\n\n  switch (message['type']) {\n    case 'event': {\n      let targetName = message['targetName'];\n      let event = message['event'];\n      let fakeEvent = new shaka.util.FakeEvent(event['type'], event);\n      this.onRemoteEvent_(targetName, fakeEvent);\n      break;\n    }\n    case 'update': {\n      let update = message['update'];\n      for (let targetName in update) {\n        let target = this.cachedProperties_[targetName] || {};\n        for (let property in update[targetName]) {\n          target[property] = update[targetName][property];\n        }\n      }\n      if (this.hasJoinedExistingSession_) {\n        this.onFirstCastStateUpdate_();\n        this.hasJoinedExistingSession_ = false;\n      }\n      break;\n    }\n    case 'asyncComplete': {\n      let id = message['id'];\n      let error = message['error'];\n      let p = this.asyncCallPromises_[id];\n      delete this.asyncCallPromises_[id];\n\n      goog.asserts.assert(p, 'Unexpected async id');\n      if (!p) break;\n\n      if (error) {\n        // This is a hacky way to reconstruct the serialized error.\n        let reconstructedError = new shaka.util.Error(\n            error.severity, error.category, error.code);\n        for (let k in error) {\n          (/** @type {Object} */(reconstructedError))[k] = error[k];\n        }\n        p.reject(reconstructedError);\n      } else {\n        p.resolve();\n      }\n      break;\n    }\n  }\n};\n\n\n/**\n * @param {!Object} message\n * @private\n */\nshaka.cast.CastSender.prototype.sendMessage_ = function(message) {\n  // Since this method is in the compiled library, make sure all messages passed\n  // in here were created with quoted property names.\n\n  let serialized = shaka.cast.CastUtils.serialize(message);\n  // TODO: have never seen this fail.  When would it and how should we react?\n  let session = shaka.cast.CastSender.session_;\n  session.sendMessage(shaka.cast.CastUtils.SHAKA_MESSAGE_NAMESPACE,\n                      serialized,\n                      function() {},  // success callback\n                      shaka.log.error);  // error callback\n};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.cast.CastProxy');\n\ngoog.require('goog.asserts');\ngoog.require('shaka.cast.CastSender');\ngoog.require('shaka.cast.CastUtils');\ngoog.require('shaka.log');\ngoog.require('shaka.util.Error');\ngoog.require('shaka.util.EventManager');\ngoog.require('shaka.util.FakeEvent');\ngoog.require('shaka.util.FakeEventTarget');\ngoog.require('shaka.util.IDestroyable');\n\n\n/**\n * A proxy to switch between local and remote playback for Chromecast in a way\n * that is transparent to the app's controls.\n *\n * @constructor\n * @struct\n * @param {!HTMLMediaElement} video The local video element associated with the\n *   local Player instance.\n * @param {!shaka.Player} player A local Player instance.\n * @param {string} receiverAppId The ID of the cast receiver application.\n * @implements {shaka.util.IDestroyable}\n * @extends {shaka.util.FakeEventTarget}\n * @export\n */\nshaka.cast.CastProxy = function(video, player, receiverAppId) {\n  shaka.util.FakeEventTarget.call(this);\n\n  /** @private {HTMLMediaElement} */\n  this.localVideo_ = video;\n\n  /** @private {shaka.Player} */\n  this.localPlayer_ = player;\n\n  /** @private {Object} */\n  this.videoProxy_ = null;\n\n  /** @private {Object} */\n  this.playerProxy_ = null;\n\n  /** @private {shaka.util.FakeEventTarget} */\n  this.videoEventTarget_ = null;\n\n  /** @private {shaka.util.FakeEventTarget} */\n  this.playerEventTarget_ = null;\n\n  /** @private {shaka.util.EventManager} */\n  this.eventManager_ = null;\n\n  /** @private {shaka.cast.CastSender} */\n  this.sender_ = new shaka.cast.CastSender(\n      receiverAppId,\n      this.onCastStatusChanged_.bind(this),\n      this.onFirstCastStateUpdate_.bind(this),\n      this.onRemoteEvent_.bind(this),\n      this.onResumeLocal_.bind(this),\n      this.getInitState_.bind(this));\n\n  this.init_();\n};\ngoog.inherits(shaka.cast.CastProxy, shaka.util.FakeEventTarget);\n\n\n/**\n * Destroys the proxy and the underlying local Player.\n *\n * @param {boolean=} forceDisconnect If true, force the receiver app to shut\n *   down by disconnecting.  Does nothing if not connected.\n * @override\n * @export\n */\nshaka.cast.CastProxy.prototype.destroy = function(forceDisconnect) {\n  if (forceDisconnect && this.sender_) {\n    this.sender_.forceDisconnect();\n  }\n\n  let async = [\n    this.eventManager_ ? this.eventManager_.destroy() : null,\n    this.localPlayer_ ? this.localPlayer_.destroy() : null,\n    this.sender_ ? this.sender_.destroy() : null,\n  ];\n\n  this.localVideo_ = null;\n  this.localPlayer_ = null;\n  this.videoProxy_ = null;\n  this.playerProxy_ = null;\n  this.eventManager_ = null;\n  this.sender_ = null;\n\n  return Promise.all(async);\n};\n\n\n/**\n * @event shaka.cast.CastProxy.CastStatusChangedEvent\n * @description Fired when cast status changes.  The status change will be\n *   reflected in canCast() and isCasting().\n * @property {string} type\n *   'caststatuschanged'\n * @exportDoc\n */\n\n\n/**\n * Get a proxy for the video element that delegates to local and remote video\n * elements as appropriate.\n *\n * @suppress {invalidCasts} to cast proxy Objects to unrelated types\n * @return {HTMLMediaElement}\n * @export\n */\nshaka.cast.CastProxy.prototype.getVideo = function() {\n  return /** @type {HTMLMediaElement} */(this.videoProxy_);\n};\n\n\n/**\n * Get a proxy for the Player that delegates to local and remote Player objects\n * as appropriate.\n *\n * @suppress {invalidCasts} to cast proxy Objects to unrelated types\n * @return {shaka.Player}\n * @export\n */\nshaka.cast.CastProxy.prototype.getPlayer = function() {\n  return /** @type {shaka.Player} */(this.playerProxy_);\n};\n\n\n/**\n * @return {boolean} True if the cast API is available and there are receivers.\n * @export\n */\nshaka.cast.CastProxy.prototype.canCast = function() {\n  return this.sender_ ?\n      this.sender_.apiReady() && this.sender_.hasReceivers() :\n      false;\n};\n\n\n/**\n * @return {boolean} True if we are currently casting.\n * @export\n */\nshaka.cast.CastProxy.prototype.isCasting = function() {\n  return this.sender_ ? this.sender_.isCasting() : false;\n};\n\n\n/**\n * @return {string} The name of the Cast receiver device, if isCasting().\n * @export\n */\nshaka.cast.CastProxy.prototype.receiverName = function() {\n  return this.sender_ ? this.sender_.receiverName() : '';\n};\n\n\n/**\n * @return {!Promise} Resolved when connected to a receiver.  Rejected if the\n *   connection fails or is canceled by the user.\n * @export\n */\nshaka.cast.CastProxy.prototype.cast = function() {\n  let initState = this.getInitState_();\n\n  // TODO: transfer manually-selected tracks?\n  // TODO: transfer side-loaded text tracks?\n\n  return this.sender_.cast(initState).then(function() {\n    if (!this.localPlayer_) {\n      // We've already been destroyed.\n      return;\n    }\n\n    // Unload the local manifest when casting succeeds.\n    return this.localPlayer_.unload();\n  }.bind(this));\n};\n\n\n/**\n * Set application-specific data.\n *\n * @param {Object} appData Application-specific data to relay to the receiver.\n * @export\n */\nshaka.cast.CastProxy.prototype.setAppData = function(appData) {\n  this.sender_.setAppData(appData);\n};\n\n\n/**\n * Show a dialog where user can choose to disconnect from the cast connection.\n * @export\n */\nshaka.cast.CastProxy.prototype.suggestDisconnect = function() {\n  this.sender_.showDisconnectDialog();\n};\n\n\n/**\n * Force the receiver app to shut down by disconnecting.\n * @export\n */\nshaka.cast.CastProxy.prototype.forceDisconnect = function() {\n  this.sender_.forceDisconnect();\n};\n\n\n/**\n * Initialize the Proxies and the Cast sender.\n * @private\n */\nshaka.cast.CastProxy.prototype.init_ = function() {\n  this.sender_.init();\n\n  this.eventManager_ = new shaka.util.EventManager();\n\n  shaka.cast.CastUtils.VideoEvents.forEach(function(name) {\n    this.eventManager_.listen(this.localVideo_, name,\n        this.videoProxyLocalEvent_.bind(this));\n  }.bind(this));\n\n  shaka.cast.CastUtils.PlayerEvents.forEach(function(name) {\n    this.eventManager_.listen(this.localPlayer_, name,\n        this.playerProxyLocalEvent_.bind(this));\n  }.bind(this));\n\n  // We would like to use Proxy here, but it is not supported on IE11 or Safari.\n  this.videoProxy_ = {};\n  for (let k in this.localVideo_) {\n    Object.defineProperty(this.videoProxy_, k, {\n      configurable: false,\n      enumerable: true,\n      get: this.videoProxyGet_.bind(this, k),\n      set: this.videoProxySet_.bind(this, k),\n    });\n  }\n\n  this.playerProxy_ = {};\n  for (let k in /** @type {Object} */(this.localPlayer_)) {\n    Object.defineProperty(this.playerProxy_, k, {\n      configurable: false,\n      enumerable: true,\n      get: this.playerProxyGet_.bind(this, k),\n    });\n  }\n\n  this.videoEventTarget_ = new shaka.util.FakeEventTarget();\n  this.videoEventTarget_.dispatchTarget =\n      /** @type {EventTarget} */(this.videoProxy_);\n\n  this.playerEventTarget_ = new shaka.util.FakeEventTarget();\n  this.playerEventTarget_.dispatchTarget =\n      /** @type {EventTarget} */(this.playerProxy_);\n};\n\n\n/**\n * @return {shaka.cast.CastUtils.InitStateType} initState Video and player state\n *   to be sent to the receiver.\n * @private\n */\nshaka.cast.CastProxy.prototype.getInitState_ = function() {\n  let initState = {\n    'video': {},\n    'player': {},\n    'playerAfterLoad': {},\n    'manifest': this.localPlayer_.getAssetUri(),\n    'startTime': null,\n  };\n\n  // Pause local playback before capturing state.\n  this.localVideo_.pause();\n\n  shaka.cast.CastUtils.VideoInitStateAttributes.forEach(function(name) {\n    initState['video'][name] = this.localVideo_[name];\n  }.bind(this));\n\n  // If the video is still playing, set the startTime.\n  // Has no effect if nothing is loaded.\n  if (!this.localVideo_.ended) {\n    initState['startTime'] = this.localVideo_.currentTime;\n  }\n\n  shaka.cast.CastUtils.PlayerInitState.forEach(function(pair) {\n    let getter = pair[0];\n    let setter = pair[1];\n    let value = /** @type {Object} */(this.localPlayer_)[getter]();\n\n    initState['player'][setter] = value;\n  }.bind(this));\n\n  shaka.cast.CastUtils.PlayerInitAfterLoadState.forEach(function(pair) {\n    let getter = pair[0];\n    let setter = pair[1];\n    let value = /** @type {Object} */(this.localPlayer_)[getter]();\n\n    initState['playerAfterLoad'][setter] = value;\n  }.bind(this));\n\n  return initState;\n};\n\n\n/**\n * Dispatch an event to notify the app that the status has changed.\n * @private\n */\nshaka.cast.CastProxy.prototype.onCastStatusChanged_ = function() {\n  let event = new shaka.util.FakeEvent('caststatuschanged');\n  this.dispatchEvent(event);\n};\n\n\n/**\n * Dispatch a synthetic play or pause event to ensure that the app correctly\n * knows that the player is playing, if joining an existing receiver.\n * @private\n */\nshaka.cast.CastProxy.prototype.onFirstCastStateUpdate_ = function() {\n  let type = this.videoProxy_.paused ? 'pause' : 'play';\n  let fakeEvent = new shaka.util.FakeEvent(type);\n  this.videoEventTarget_.dispatchEvent(fakeEvent);\n};\n\n\n/**\n * Transfer remote state back and resume local playback.\n * @private\n */\nshaka.cast.CastProxy.prototype.onResumeLocal_ = function() {\n  // Transfer back the player state.\n  shaka.cast.CastUtils.PlayerInitState.forEach(function(pair) {\n    let getter = pair[0];\n    let setter = pair[1];\n    let value = this.sender_.get('player', getter)();\n    /** @type {Object} */(this.localPlayer_)[setter](value);\n  }.bind(this));\n\n  // Get the most recent manifest URI and ended state.\n  let assetUri = this.sender_.get('player', 'getAssetUri')();\n  let ended = this.sender_.get('video', 'ended');\n\n  let manifestReady = Promise.resolve();\n  let autoplay = this.localVideo_.autoplay;\n\n  let startTime = null;\n\n  // If the video is still playing, set the startTime.\n  // Has no effect if nothing is loaded.\n  if (!ended) {\n    startTime = this.sender_.get('video', 'currentTime');\n  }\n\n  // Now load the manifest, if present.\n  if (assetUri) {\n    // Don't autoplay the content until we finish setting up initial state.\n    this.localVideo_.autoplay = false;\n    manifestReady = this.localPlayer_.load(assetUri, startTime);\n  }\n\n  // Get the video state into a temp variable since we will apply it async.\n  let videoState = {};\n  shaka.cast.CastUtils.VideoInitStateAttributes.forEach(function(name) {\n    videoState[name] = this.sender_.get('video', name);\n  }.bind(this));\n\n  // Finally, take on video state and player's \"after load\" state.\n  manifestReady.then(() => {\n    if (!this.localVideo_) {\n      // We've already been destroyed.\n      return;\n    }\n\n    shaka.cast.CastUtils.VideoInitStateAttributes.forEach(function(name) {\n      this.localVideo_[name] = videoState[name];\n    }.bind(this));\n\n    shaka.cast.CastUtils.PlayerInitAfterLoadState.forEach(function(pair) {\n      let getter = pair[0];\n      let setter = pair[1];\n      let value = this.sender_.get('player', getter)();\n      /** @type {Object} */(this.localPlayer_)[setter](value);\n    }.bind(this));\n\n    // Restore the original autoplay setting.\n    this.localVideo_.autoplay = autoplay;\n    if (assetUri) {\n      // Resume playback with transferred state.\n      this.localVideo_.play();\n    }\n  }, (error) => {\n    // Pass any errors through to the app.\n    goog.asserts.assert(error instanceof shaka.util.Error,\n                        'Wrong error type!');\n    let event = new shaka.util.FakeEvent('error', {'detail': error});\n    this.localPlayer_.dispatchEvent(event);\n  });\n};\n\n\n/**\n * @param {string} name\n * @return {?}\n * @private\n */\nshaka.cast.CastProxy.prototype.videoProxyGet_ = function(name) {\n  if (name == 'addEventListener') {\n    return this.videoEventTarget_.addEventListener.bind(\n        this.videoEventTarget_);\n  }\n  if (name == 'removeEventListener') {\n    return this.videoEventTarget_.removeEventListener.bind(\n        this.videoEventTarget_);\n  }\n\n  // If we are casting, but the first update has not come in yet, use local\n  // values, but not local methods.\n  if (this.sender_.isCasting() && !this.sender_.hasRemoteProperties()) {\n    let value = this.localVideo_[name];\n    if (typeof value != 'function') {\n      return value;\n    }\n  }\n\n  // Use local values and methods if we are not casting.\n  if (!this.sender_.isCasting()) {\n    let value = this.localVideo_[name];\n    if (typeof value == 'function') {\n      value = value.bind(this.localVideo_);\n    }\n    return value;\n  }\n\n  return this.sender_.get('video', name);\n};\n\n\n/**\n * @param {string} name\n * @param {?} value\n * @private\n */\nshaka.cast.CastProxy.prototype.videoProxySet_ = function(name, value) {\n  if (!this.sender_.isCasting()) {\n    this.localVideo_[name] = value;\n    return;\n  }\n\n  this.sender_.set('video', name, value);\n};\n\n\n/**\n * @param {!Event} event\n * @private\n */\nshaka.cast.CastProxy.prototype.videoProxyLocalEvent_ = function(event) {\n  if (this.sender_.isCasting()) {\n    // Ignore any unexpected local events while casting.  Events can still be\n    // fired by the local video and Player when we unload() after the Cast\n    // connection is complete.\n    return;\n  }\n\n  // Convert this real Event into a FakeEvent for dispatch from our\n  // FakeEventListener.\n  let fakeEvent = new shaka.util.FakeEvent(event.type, event);\n  this.videoEventTarget_.dispatchEvent(fakeEvent);\n};\n\n\n/**\n * @param {string} name\n * @return {?}\n * @private\n */\nshaka.cast.CastProxy.prototype.playerProxyGet_ = function(name) {\n  if (name == 'addEventListener') {\n    return this.playerEventTarget_.addEventListener.bind(\n        this.playerEventTarget_);\n  }\n  if (name == 'removeEventListener') {\n    return this.playerEventTarget_.removeEventListener.bind(\n        this.playerEventTarget_);\n  }\n\n  if (name == 'getMediaElement') {\n    return function() { return this.videoProxy_; }.bind(this);\n  }\n\n  if (name == 'getSharedConfiguration') {\n    shaka.log.warning(\n        'Can\\'t share configuration across a network. Returning copy.');\n    return this.sender_.get('player', 'getConfiguration');\n  }\n\n  if (name == 'getNetworkingEngine') {\n    // Always returns a local instance, in case you need to make a request.\n    // Issues a warning, in case you think you are making a remote request\n    // or affecting remote filters.\n    if (this.sender_.isCasting()) {\n      shaka.log.warning('NOTE: getNetworkingEngine() is always local!');\n    }\n    return this.localPlayer_.getNetworkingEngine.bind(this.localPlayer_);\n  }\n\n  if (this.sender_.isCasting()) {\n    // These methods are unavailable or otherwise stubbed during casting.\n    if (name == 'getManifest' || name == 'drmInfo') {\n      return function() {\n        shaka.log.alwaysWarn(name + '() does not work while casting!');\n        return null;\n      };\n    }\n\n    // TODO(vaage): Remove when |getManifestUri| is removed in v2.6.\n    if (name == 'getManifestUri') {\n      shaka.log.alwaysWarn(\n          '\"getManifestUri\" is deprecated. Please use \"getAssetUri\".');\n      return this.playerProxyGet_('getAssetUri');\n    }\n\n    if (name == 'attach' || name == 'detach') {\n      return function() {\n        shaka.log.alwaysWarn(name + '() does not work while casting!');\n        return Promise.resolve();\n      };\n    }\n  }  // if (this.sender_.isCasting())\n\n  // If we are casting, but the first update has not come in yet, use local\n  // getters, but not local methods.\n  if (this.sender_.isCasting() && !this.sender_.hasRemoteProperties()) {\n    if (shaka.cast.CastUtils.PlayerGetterMethods[name]) {\n      let value = /** @type {Object} */(this.localPlayer_)[name];\n      goog.asserts.assert(typeof value == 'function', 'only methods on Player');\n      return value.bind(this.localPlayer_);\n    }\n  }\n\n  // Use local getters and methods if we are not casting.\n  if (!this.sender_.isCasting()) {\n    let value = /** @type {Object} */(this.localPlayer_)[name];\n    goog.asserts.assert(typeof value == 'function', 'only methods on Player');\n    return value.bind(this.localPlayer_);\n  }\n\n  return this.sender_.get('player', name);\n};\n\n\n/**\n * @param {!Event} event\n * @private\n */\nshaka.cast.CastProxy.prototype.playerProxyLocalEvent_ = function(event) {\n  if (this.sender_.isCasting()) {\n    // Ignore any unexpected local events while casting.\n    return;\n  }\n\n  this.playerEventTarget_.dispatchEvent(event);\n};\n\n\n/**\n * @param {string} targetName\n * @param {!shaka.util.FakeEvent} event\n * @private\n */\nshaka.cast.CastProxy.prototype.onRemoteEvent_ = function(targetName, event) {\n  goog.asserts.assert(this.sender_.isCasting(),\n                      'Should only receive remote events while casting');\n  if (!this.sender_.isCasting()) {\n    // Ignore any unexpected remote events.\n    return;\n  }\n\n  if (targetName == 'video') {\n    this.videoEventTarget_.dispatchEvent(event);\n  } else if (targetName == 'player') {\n    this.playerEventTarget_.dispatchEvent(event);\n  }\n};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.cast.CastReceiver');\n\ngoog.require('goog.asserts');\ngoog.require('shaka.cast.CastUtils');\ngoog.require('shaka.log');\ngoog.require('shaka.util.Error');\ngoog.require('shaka.util.EventManager');\ngoog.require('shaka.util.FakeEvent');\ngoog.require('shaka.util.FakeEventTarget');\ngoog.require('shaka.util.IDestroyable');\n\n\n/**\n * A receiver to communicate between the Chromecast-hosted player and the\n * sender application.\n *\n * @constructor\n * @struct\n * @param {!HTMLMediaElement} video The local video element associated with the\n *   local Player instance.\n * @param {!shaka.Player} player A local Player instance.\n * @param {function(Object)=} appDataCallback A callback to handle\n *   application-specific data passed from the sender.\n  * @param {function(string):string=} contentIdCallback A callback to\n *   retrieve manifest URI from the provided content id.\n * @implements {shaka.util.IDestroyable}\n * @extends {shaka.util.FakeEventTarget}\n * @export\n */\nshaka.cast.CastReceiver =\n    function(video, player, appDataCallback, contentIdCallback) {\n  shaka.util.FakeEventTarget.call(this);\n\n  /** @private {HTMLMediaElement} */\n  this.video_ = video;\n\n  /** @private {shaka.Player} */\n  this.player_ = player;\n\n  /** @private {shaka.util.EventManager} */\n  this.eventManager_ = new shaka.util.EventManager();\n\n  /** @private {Object} */\n  this.targets_ = {\n    'video': video,\n    'player': player,\n  };\n\n  /** @private {?function(Object)} */\n  this.appDataCallback_ = appDataCallback || function() {};\n\n  /** @private {?function(string):string} */\n  this.contentIdCallback_ = contentIdCallback ||\n                            /** @param {string} contentId\n                                @return {string} */\n                            function(contentId) { return contentId; };\n\n  /** @private {boolean} */\n  this.isConnected_ = false;\n\n  /** @private {boolean} */\n  this.isIdle_ = true;\n\n  /** @private {number} */\n  this.updateNumber_ = 0;\n\n  /** @private {boolean} */\n  this.startUpdatingUpdateNumber_ = false;\n\n  /** @private {boolean} */\n  this.initialStatusUpdatePending_ = true;\n\n  /** @private {cast.receiver.CastMessageBus} */\n  this.shakaBus_ = null;\n\n  /** @private {cast.receiver.CastMessageBus} */\n  this.genericBus_ = null;\n\n  /** @private {?number} */\n  this.pollTimerId_ = null;\n\n  this.init_();\n};\ngoog.inherits(shaka.cast.CastReceiver, shaka.util.FakeEventTarget);\n\n\n/**\n * @return {boolean} True if the cast API is available and there are receivers.\n * @export\n */\nshaka.cast.CastReceiver.prototype.isConnected = function() {\n  return this.isConnected_;\n};\n\n\n/**\n * @return {boolean} True if the receiver is not currently doing loading or\n *   playing anything.\n * @export\n */\nshaka.cast.CastReceiver.prototype.isIdle = function() {\n  return this.isIdle_;\n};\n\n\n/**\n * Destroys the underlying Player, then terminates the cast receiver app.\n *\n * @override\n * @export\n */\nshaka.cast.CastReceiver.prototype.destroy = function() {\n  const async = [\n    this.eventManager_ ? this.eventManager_.destroy() : null,\n    this.player_ ? this.player_.destroy() : null,\n  ];\n\n  if (this.pollTimerId_ != null) {\n    window.clearTimeout(this.pollTimerId_);\n  }\n\n  this.video_ = null;\n  this.player_ = null;\n  this.eventManager_ = null;\n  this.targets_ = null;\n  this.appDataCallback_ = null;\n  this.isConnected_ = false;\n  this.isIdle_ = true;\n  this.shakaBus_ = null;\n  this.genericBus_ = null;\n  this.pollTimerId_ = null;\n\n  return Promise.all(async).then(function() {\n    let manager = cast.receiver.CastReceiverManager.getInstance();\n    manager.stop();\n  });\n};\n\n\n/** @private */\nshaka.cast.CastReceiver.prototype.init_ = function() {\n  let manager = cast.receiver.CastReceiverManager.getInstance();\n  manager.onSenderConnected = this.onSendersChanged_.bind(this);\n  manager.onSenderDisconnected = this.onSendersChanged_.bind(this);\n  manager.onSystemVolumeChanged = this.fakeVolumeChangeEvent_.bind(this);\n\n  this.genericBus_ = manager.getCastMessageBus(\n      shaka.cast.CastUtils.GENERIC_MESSAGE_NAMESPACE);\n  this.genericBus_.onMessage = this.onGenericMessage_.bind(this);\n\n  this.shakaBus_ = manager.getCastMessageBus(\n      shaka.cast.CastUtils.SHAKA_MESSAGE_NAMESPACE);\n  this.shakaBus_.onMessage = this.onShakaMessage_.bind(this);\n\n  if (goog.DEBUG) {\n    // Sometimes it is useful to load the receiver app in Chrome to work on the\n    // UI.  To avoid log spam caused by the SDK trying to connect to web sockets\n    // that don't exist, in uncompiled mode we check if the hosting browser is a\n    // Chromecast before starting the receiver manager.  We wouldn't do browser\n    // detection except for debugging, so only do this in uncompiled mode.\n    let isChromecast = navigator.userAgent.indexOf('CrKey') >= 0;\n    if (isChromecast) {\n      manager.start();\n    }\n  } else {\n    manager.start();\n  }\n\n  shaka.cast.CastUtils.VideoEvents.forEach(function(name) {\n    this.eventManager_.listen(\n        this.video_, name, this.proxyEvent_.bind(this, 'video'));\n  }.bind(this));\n\n  shaka.cast.CastUtils.PlayerEvents.forEach(function(name) {\n    this.eventManager_.listen(\n        this.player_, name, this.proxyEvent_.bind(this, 'player'));\n  }.bind(this));\n\n  // In our tests, the original Chromecast seems to have trouble decoding above\n  // 1080p.  It would be a waste to select a higher res anyway, given that the\n  // device only outputs 1080p to begin with.\n\n  // Chromecast has an extension to query the device/display's resolution.\n  if (cast.__platform__ && cast.__platform__.canDisplayType(\n      'video/mp4; codecs=\"avc1.640028\"; width=3840; height=2160')) {\n    // The device and display can both do 4k.  Assume a 4k limit.\n    this.player_.setMaxHardwareResolution(3840, 2160);\n  } else {\n    // Chromecast has always been able to do 1080p.  Assume a 1080p limit.\n    this.player_.setMaxHardwareResolution(1920, 1080);\n  }\n\n  // Do not start excluding values from update messages until the video is\n  // fully loaded.\n  this.eventManager_.listen(this.video_, 'loadeddata', function() {\n    this.startUpdatingUpdateNumber_ = true;\n  }.bind(this));\n\n  // Maintain idle state.\n  this.eventManager_.listen(this.player_, 'loading', function() {\n    // No longer idle once loading.  This allows us to show the spinner during\n    // the initial buffering phase.\n    this.isIdle_ = false;\n    this.onCastStatusChanged_();\n  }.bind(this));\n  this.eventManager_.listen(this.video_, 'playing', function() {\n    // No longer idle once playing.  This allows us to replay a video without\n    // reloading.\n    this.isIdle_ = false;\n    this.onCastStatusChanged_();\n  }.bind(this));\n  this.eventManager_.listen(this.video_, 'pause', function() {\n    this.onCastStatusChanged_();\n  }.bind(this));\n  this.eventManager_.listen(this.player_, 'unloading', function() {\n    // Go idle when unloading content.\n    this.isIdle_ = true;\n    this.onCastStatusChanged_();\n  }.bind(this));\n  this.eventManager_.listen(this.video_, 'ended', function() {\n    // Go idle 5 seconds after 'ended', assuming we haven't started again or\n    // been destroyed.\n    window.setTimeout(function() {\n      if (this.video_ && this.video_.ended) {\n        this.isIdle_ = true;\n        this.onCastStatusChanged_();\n      }\n    }.bind(this), 5000);\n  }.bind(this));\n\n  // Do not start polling until after the sender's 'init' message is handled.\n};\n\n\n/** @private */\nshaka.cast.CastReceiver.prototype.onSendersChanged_ = function() {\n  // Reset update message frequency values, to make sure whomever joined\n  // will get a full update message.\n  this.updateNumber_ = 0;\n  // Don't reset startUpdatingUpdateNumber_, because this operation does not\n  // result in new data being loaded.\n  this.initialStatusUpdatePending_ = true;\n\n  let manager = cast.receiver.CastReceiverManager.getInstance();\n  this.isConnected_ = manager.getSenders().length != 0;\n  this.onCastStatusChanged_();\n};\n\n\n/**\n * Dispatch an event to notify the receiver app that the status has changed.\n * @private\n */\nshaka.cast.CastReceiver.prototype.onCastStatusChanged_ = function() {\n  // Do this asynchronously so that synchronous changes to idle state (such as\n  // Player calling unload() as part of load()) are coalesced before the event\n  // goes out.\n  Promise.resolve().then(function() {\n    if (!this.player_) {\n      // We've already been destroyed.\n      return;\n    }\n\n    let event = new shaka.util.FakeEvent('caststatuschanged');\n    this.dispatchEvent(event);\n    // Send a media status message, with a media info message if appropriate.\n    if (!this.maybeSendMediaInfoMessage_()) {\n      this.sendMediaStatus_(0);\n    }\n  }.bind(this));\n};\n\n\n/**\n * Take on initial state from the sender.\n * @param {shaka.cast.CastUtils.InitStateType} initState\n * @param {Object} appData\n * @private\n */\nshaka.cast.CastReceiver.prototype.initState_ = function(initState, appData) {\n  // Take on player state first.\n  for (let k in initState['player']) {\n    let v = initState['player'][k];\n    // All player state vars are setters to be called.\n    /** @type {Object} */(this.player_)[k](v);\n  }\n\n  // Now process custom app data, which may add additional player configs:\n  this.appDataCallback_(appData);\n\n  let manifestReady = Promise.resolve();\n  let autoplay = this.video_.autoplay;\n\n  // Now load the manifest, if present.\n  if (initState['manifest']) {\n    // Don't autoplay the content until we finish setting up initial state.\n    this.video_.autoplay = false;\n    manifestReady = this.player_.load(\n        initState['manifest'], initState['startTime']);\n  }\n\n  // Finally, take on video state and player's \"after load\" state.\n  manifestReady.then(() => {\n    if (!this.player_) {\n      // We've already been destroyed.\n      return;\n    }\n\n    for (let k in initState['video']) {\n      let v = initState['video'][k];\n      this.video_[k] = v;\n    }\n\n    for (let k in initState['playerAfterLoad']) {\n      let v = initState['playerAfterLoad'][k];\n      // All player state vars are setters to be called.\n      /** @type {Object} */(this.player_)[k](v);\n    }\n\n    // Restore original autoplay setting.\n    this.video_.autoplay = autoplay;\n    if (initState['manifest']) {\n      // Resume playback with transferred state.\n      this.video_.play();\n      // Notify generic controllers of the state change.\n      this.sendMediaStatus_(0);\n    }\n  }, (error) => {\n    // Pass any errors through to the app.\n    goog.asserts.assert(error instanceof shaka.util.Error,\n                        'Wrong error type!');\n    let event = new shaka.util.FakeEvent('error', {'detail': error});\n    this.player_.dispatchEvent(event);\n  });\n};\n\n\n/**\n * @param {string} targetName\n * @param {!Event} event\n * @private\n */\nshaka.cast.CastReceiver.prototype.proxyEvent_ = function(targetName, event) {\n  if (!this.player_) {\n    // The receiver is destroyed, so it should ignore further events.\n    return;\n  }\n\n  // Poll and send an update right before we send the event.  Some events\n  // indicate an attribute change, so that change should be visible when the\n  // event is handled.\n  this.pollAttributes_();\n\n  this.sendMessage_({\n    'type': 'event',\n    'targetName': targetName,\n    'event': event,\n  }, this.shakaBus_);\n};\n\n\n/** @private */\nshaka.cast.CastReceiver.prototype.pollAttributes_ = function() {\n  // The poll timer may have been pre-empted by an event.\n  // To avoid polling too often, we clear it here.\n  if (this.pollTimerId_ != null) {\n    window.clearTimeout(this.pollTimerId_);\n  }\n  // Since we know the timer has been cleared, start a new one now.\n  // This will be preempted by events, including 'timeupdate'.\n  this.pollTimerId_ = window.setTimeout(this.pollAttributes_.bind(this), 500);\n\n  let update = {\n    'video': {},\n    'player': {},\n  };\n\n  shaka.cast.CastUtils.VideoAttributes.forEach(function(name) {\n    update['video'][name] = this.video_[name];\n  }.bind(this));\n\n  // TODO: Instead of this variable frequency update system, instead cache the\n  // previous player state and only send over changed values, with complete\n  // updates every ~20 updates to account for dropped messages.\n\n  if (this.player_.isLive()) {\n    for (let name in shaka.cast.CastUtils.PlayerGetterMethodsThatRequireLive) {\n      let frequency =\n          shaka.cast.CastUtils.PlayerGetterMethodsThatRequireLive[name];\n      if (this.updateNumber_ % frequency == 0) {\n        update['player'][name] = /** @type {Object} */ (this.player_)[name]();\n      }\n    }\n  }\n  for (let name in shaka.cast.CastUtils.PlayerGetterMethods) {\n    let frequency = shaka.cast.CastUtils.PlayerGetterMethods[name];\n    if (this.updateNumber_ % frequency == 0) {\n      update['player'][name] = /** @type {Object} */ (this.player_)[name]();\n    }\n  }\n\n  // Volume attributes are tied to the system volume.\n  let manager = cast.receiver.CastReceiverManager.getInstance();\n  let systemVolume = manager.getSystemVolume();\n  if (systemVolume) {\n    update['video']['volume'] = systemVolume.level;\n    update['video']['muted'] = systemVolume.muted;\n  }\n\n  // Only start progressing the update number once data is loaded,\n  // just in case any of the \"rarely changing\" properties with less frequent\n  // update messages changes significantly during the loading process.\n  if (this.startUpdatingUpdateNumber_) {\n    this.updateNumber_ += 1;\n  }\n\n  this.sendMessage_({\n    'type': 'update',\n    'update': update,\n  }, this.shakaBus_);\n\n  this.maybeSendMediaInfoMessage_();\n};\n\n\n/**\n * Composes and sends a mediaStatus message if appropriate.\n * @return {boolean}\n * @private\n */\nshaka.cast.CastReceiver.prototype.maybeSendMediaInfoMessage_ = function() {\n  if (this.initialStatusUpdatePending_ &&\n      (this.video_.duration || this.player_.isLive())) {\n    // Send over a media status message to set the duration of the cast\n    // dialogue.\n    this.sendMediaInfoMessage_();\n    this.initialStatusUpdatePending_ = false;\n    return true;\n  }\n  return false;\n};\n\n\n/**\n * Composes and sends a mediaStatus message with a mediaInfo component.\n * @private\n */\nshaka.cast.CastReceiver.prototype.sendMediaInfoMessage_ = function() {\n  let media = {\n    'contentId': this.player_.getAssetUri(),\n    'streamType': this.player_.isLive() ? 'LIVE' : 'BUFFERED',\n    'duration': this.video_.duration,\n    // TODO: Is there a use case when this would be required?\n    // Sending an empty string for now since it's a mandatory\n    // field.\n    'contentType': '',\n  };\n  this.sendMediaStatus_(0, media);\n};\n\n\n/**\n * Dispatch a fake 'volumechange' event to mimic the video element, since volume\n * changes are routed to the system volume on the receiver.\n * @private\n */\nshaka.cast.CastReceiver.prototype.fakeVolumeChangeEvent_ = function() {\n  // Volume attributes are tied to the system volume.\n  let manager = cast.receiver.CastReceiverManager.getInstance();\n  let systemVolume = manager.getSystemVolume();\n  goog.asserts.assert(systemVolume, 'System volume should not be null!');\n\n  if (systemVolume) {\n    // Send an update message with just the latest volume level and muted state.\n    this.sendMessage_({\n      'type': 'update',\n      'update': {\n        'video': {\n          'volume': systemVolume.level,\n          'muted': systemVolume.muted,\n        },\n      },\n    }, this.shakaBus_);\n  }\n\n  // Send another message with a 'volumechange' event to update the sender's UI.\n  this.sendMessage_({\n    'type': 'event',\n    'targetName': 'video',\n    'event': {'type': 'volumechange'},\n  }, this.shakaBus_);\n};\n\n\n/**\n * Since this method is in the compiled library, make sure all messages are\n * read with quoted properties.\n * @param {!cast.receiver.CastMessageBus.Event} event\n * @private\n */\nshaka.cast.CastReceiver.prototype.onShakaMessage_ = function(event) {\n  let message = shaka.cast.CastUtils.deserialize(event.data);\n  shaka.log.debug('CastReceiver: message', message);\n\n  switch (message['type']) {\n    case 'init':\n      // Reset update message frequency values after initialization.\n      this.updateNumber_ = 0;\n      this.startUpdatingUpdateNumber_ = false;\n      this.initialStatusUpdatePending_ = true;\n\n      this.initState_(message['initState'], message['appData']);\n      // The sender is supposed to reflect the cast system volume after\n      // connecting.  Using fakeVolumeChangeEvent_() would create a race on the\n      // sender side, since it would have volume properties, but no others.\n      // This would lead to hasRemoteProperties() being true, even though a\n      // complete set had never been sent.\n      // Now that we have init state, this is a good time for the first update\n      // message anyway.\n      this.pollAttributes_();\n      break;\n    case 'appData':\n      this.appDataCallback_(message['appData']);\n      break;\n    case 'set': {\n      let targetName = message['targetName'];\n      let property = message['property'];\n      let value = message['value'];\n\n      if (targetName == 'video') {\n        // Volume attributes must be rerouted to the system.\n        let manager = cast.receiver.CastReceiverManager.getInstance();\n        if (property == 'volume') {\n          manager.setSystemVolumeLevel(value);\n          break;\n        } else if (property == 'muted') {\n          manager.setSystemVolumeMuted(value);\n          break;\n        }\n      }\n\n      this.targets_[targetName][property] = value;\n      break;\n    }\n    case 'call': {\n      let targetName = message['targetName'];\n      let methodName = message['methodName'];\n      let args = message['args'];\n      let target = this.targets_[targetName];\n      target[methodName].apply(target, args);\n      break;\n    }\n    case 'asyncCall': {\n      let targetName = message['targetName'];\n      let methodName = message['methodName'];\n      if (targetName == 'player' && methodName == 'load') {\n        // Reset update message frequency values after a load.\n        this.updateNumber_ = 0;\n        this.startUpdatingUpdateNumber_ = false;\n      }\n      let args = message['args'];\n      let id = message['id'];\n      let senderId = event.senderId;\n      let target = this.targets_[targetName];\n      let p = target[methodName].apply(target, args);\n      if (targetName == 'player' && methodName == 'load') {\n        // Wait until the manifest has actually loaded to send another media\n        // info message, so on a new load it doesn't send the old info over.\n        p = p.then(function() {\n          this.initialStatusUpdatePending_ = true;\n        }.bind(this));\n      }\n      // Replies must go back to the specific sender who initiated, so that we\n      // don't have to deal with conflicting IDs between senders.\n      p.then(this.sendAsyncComplete_.bind(this, senderId, id, /* error */ null),\n             this.sendAsyncComplete_.bind(this, senderId, id));\n      break;\n    }\n  }\n};\n\n\n/**\n * @param {!cast.receiver.CastMessageBus.Event} event\n * @private\n */\nshaka.cast.CastReceiver.prototype.onGenericMessage_ = function(event) {\n  let message = shaka.cast.CastUtils.deserialize(event.data);\n  shaka.log.debug('CastReceiver: message', message);\n  // TODO(ismena): error message on duplicate request id from the same sender\n  switch (message['type']) {\n    case 'PLAY':\n      this.video_.play();\n      // Notify generic controllers that the player state changed.\n      // requestId=0 (the parameter) means that the message was not\n      // triggered by a GET_STATUS request.\n      this.sendMediaStatus_(0);\n      break;\n    case 'PAUSE':\n      this.video_.pause();\n      this.sendMediaStatus_(0);\n      break;\n    case 'SEEK': {\n      let currentTime = message['currentTime'];\n      let resumeState = message['resumeState'];\n      if (currentTime != null) {\n        this.video_.currentTime = Number(currentTime);\n      }\n      if (resumeState && resumeState == 'PLAYBACK_START') {\n        this.video_.play();\n        this.sendMediaStatus_(0);\n      } else if (resumeState && resumeState == 'PLAYBACK_PAUSE') {\n        this.video_.pause();\n        this.sendMediaStatus_(0);\n      }\n      break;\n    }\n    case 'STOP':\n      this.player_.unload().then(function() {\n        if (!this.player_) {\n          // We've already been destroyed.\n          return;\n        }\n\n        this.sendMediaStatus_(0);\n      }.bind(this));\n      break;\n    case 'GET_STATUS':\n      // TODO(ismena): According to the SDK this is supposed to be a\n      // unicast message to the sender that requested the status,\n      // but it doesn't appear to be working.\n      // Look into what's going on there and change this to be a\n      // unicast.\n      this.sendMediaStatus_(Number(message['requestId']));\n      break;\n    case 'VOLUME': {\n      let volumeObject = message['volume'];\n      let level = volumeObject['level'];\n      let muted = volumeObject['muted'];\n      let oldVolumeLevel = this.video_.volume;\n      let oldVolumeMuted = this.video_.muted;\n      if (level != null) {\n        this.video_.volume = Number(level);\n      }\n      if (muted != null) {\n        this.video_.muted = muted;\n      }\n      // Notify generic controllers if the volume changed.\n      if (oldVolumeLevel != this.video_.volume ||\n          oldVolumeMuted != this.video_.muted) {\n        this.sendMediaStatus_(0);\n      }\n      break;\n    }\n    case 'LOAD': {\n      // Reset update message frequency values after a load.\n      this.updateNumber_ = 0;\n      this.startUpdatingUpdateNumber_ = false;\n      this.initialStatusUpdatePending_ = false; // This already sends an update.\n\n      let mediaInfo = message['media'];\n      let contentId = mediaInfo['contentId'];\n      let currentTime = message['currentTime'];\n      let assetUri = this.contentIdCallback_(contentId);\n      let autoplay = message['autoplay'] || true;\n      if (autoplay) {\n        this.video_.autoplay = true;\n      }\n      this.player_.load(assetUri, currentTime).then(function() {\n        if (!this.player_) {\n          // We've already been destroyed.\n          return;\n        }\n\n        // Notify generic controllers that the media has changed.\n        this.sendMediaInfoMessage_();\n      }.bind(this)).catch(function(error) {\n        // Load failed.  Dispatch the error message to the sender.\n        let type = 'LOAD_FAILED';\n        if (error.category == shaka.util.Error.Category.PLAYER &&\n            error.code == shaka.util.Error.Code.LOAD_INTERRUPTED) {\n          type = 'LOAD_CANCELLED';\n        }\n\n        this.sendMessage_({\n          'requestId': Number(message['requestId']),\n          'type': type,\n        }, this.genericBus_);\n      }.bind(this));\n      break;\n    }\n    default:\n      shaka.log.warning(\n          'Unrecognized message type from the generic Chromecast controller!',\n          message['type']);\n      // Dispatch an error to the sender.\n      this.sendMessage_({\n        'requestId': Number(message['requestId']),\n        'type': 'INVALID_REQUEST',\n        'reason': 'INVALID_COMMAND',\n      }, this.genericBus_);\n      break;\n  }\n};\n\n\n/**\n * Tell the sender that the async operation is complete.\n * @param {string} senderId\n * @param {string} id\n * @param {shaka.util.Error} error\n * @private\n */\nshaka.cast.CastReceiver.prototype.sendAsyncComplete_ =\n    function(senderId, id, error) {\n  if (!this.player_) {\n    // We've already been destroyed.\n    return;\n  }\n\n  this.sendMessage_({\n    'type': 'asyncComplete',\n    'id': id,\n    'error': error,\n  }, this.shakaBus_, senderId);\n};\n\n\n/**\n * Since this method is in the compiled library, make sure all messages passed\n * in here were created with quoted property names.\n * @param {!Object} message\n * @param {cast.receiver.CastMessageBus} bus\n * @param {string=} senderId\n * @private\n */\nshaka.cast.CastReceiver.prototype.sendMessage_ =\n    function(message, bus, senderId) {\n  // Cuts log spam when debugging the receiver UI in Chrome.\n  if (!this.isConnected_) return;\n\n  let serialized = shaka.cast.CastUtils.serialize(message);\n  if (senderId) {\n    bus.getCastChannel(senderId).send(serialized);\n  } else {\n    bus.broadcast(serialized);\n  }\n};\n\n\n/**\n * @return {string}\n * @private\n */\nshaka.cast.CastReceiver.prototype.getPlayState_ = function() {\n  let playState = shaka.cast.CastReceiver.PLAY_STATE;\n  if (this.isIdle_) {\n    return playState.IDLE;\n  } else if (this.player_.isBuffering()) {\n    return playState.BUFFERING;\n  } else if (this.video_.paused) {\n    return playState.PAUSED;\n  } else {\n    return playState.PLAYING;\n  }\n};\n\n\n/**\n * @param {number} requestId\n * @param {Object=} media\n * @private\n */\nshaka.cast.CastReceiver.prototype.sendMediaStatus_ =\n    function(requestId, media) {\n  let mediaStatus = {\n    // mediaSessionId is a unique ID for the playback of this specific session.\n    // It's used to identify a specific instance of a playback.\n    // We don't support multiple playbacks, so just return 0.\n    'mediaSessionId': 0,\n    'playbackRate': this.video_.playbackRate,\n    'playerState': this.getPlayState_(),\n    'currentTime': this.video_.currentTime,\n    // supportedMediaCommands is a sum of all the flags of commands that the\n    // player supports.\n    // The list of comands with respective flags is:\n    // 1 - Pause\n    // 2 - Seek\n    // 4 - Stream volume\n    // 8 - Stream mute\n    // 16 - Skip forward\n    // 32 - Skip backward\n    // We support pause, seek, volume and mute which gives a value of\n    // 1+2+4+8=15\n    'supportedMediaCommands': 15,\n    'volume': {\n      'level': this.video_.volume,\n      'muted': this.video_.muted,\n    },\n  };\n\n  if (media) {\n    mediaStatus['media'] = media;\n  }\n\n  let ret = {\n    'requestId': requestId,\n    'type': 'MEDIA_STATUS',\n    'status': [mediaStatus],\n  };\n\n  this.sendMessage_(ret, this.genericBus_);\n};\n\n\n/**\n * @enum {string}\n */\nshaka.cast.CastReceiver.PLAY_STATE = {\n  IDLE: 'IDLE',\n  PLAYING: 'PLAYING',\n  BUFFERING: 'BUFFERING',\n  PAUSED: 'PAUSED',\n};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.util.XmlUtils');\n\ngoog.require('shaka.log');\n\n\n/**\n * @namespace shaka.util.XmlUtils\n * @summary A set of XML utility functions.\n */\n\n\n/**\n * Finds a child XML element.\n * @param {!Node} elem The parent XML element.\n * @param {string} name The child XML element's tag name.\n * @return {Element} The child XML element, or null if a child XML element does\n *   not exist with the given tag name OR if there exists more than one\n *   child XML element with the given tag name.\n */\nshaka.util.XmlUtils.findChild = function(elem, name) {\n  let children = shaka.util.XmlUtils.findChildren(elem, name);\n  if (children.length != 1) {\n    return null;\n  }\n  return children[0];\n};\n\n\n/**\n * Finds child XML elements.\n * @param {!Node} elem The parent XML element.\n * @param {string} name The child XML element's tag name.\n * @return {!Array.<!Element>} The child XML elements.\n */\nshaka.util.XmlUtils.findChildren = function(elem, name) {\n  return Array.prototype.filter.call(elem.childNodes, function(child) {\n    return child instanceof Element && child.tagName == name;\n  });\n};\n\n\n/**\n * Finds namespace-qualified child XML elements.\n * @param {!Node} elem The parent XML element.\n * @param {string} ns The child XML element's namespace URI.\n * @param {string} name The child XML element's local name.\n * @return {!Array.<!Element>} The child XML elements.\n */\nshaka.util.XmlUtils.findChildrenNS = function(elem, ns, name) {\n  return Array.prototype.filter.call(elem.childNodes, function(child) {\n    return child instanceof Element && child.localName == name &&\n        child.namespaceURI == ns;\n  });\n};\n\n\n/**\n * Gets a namespace-qualified attribute.\n * @param {!Element} elem The element to get from.\n * @param {string} ns The namespace URI.\n * @param {string} name The local name of the attribute.\n * @return {?string} The attribute's value, or null if not present.\n */\nshaka.util.XmlUtils.getAttributeNS = function(elem, ns, name) {\n  // Some browsers return the empty string when the attribute is missing,\n  // so check if it exists first.  See: https://mzl.la/2L7F0UK\n  return elem.hasAttributeNS(ns, name) ? elem.getAttributeNS(ns, name) : null;\n};\n\n\n/**\n * Gets the text contents of a node.\n * @param {!Node} elem The XML element.\n * @return {?string} The text contents, or null if there are none.\n */\nshaka.util.XmlUtils.getContents = function(elem) {\n  let isText = (child) => {\n    return child.nodeType == Node.TEXT_NODE ||\n        child.nodeType == Node.CDATA_SECTION_NODE;\n  };\n  if (!Array.prototype.every.call(elem.childNodes, isText)) {\n    return null;\n  }\n\n  // Read merged text content from all text nodes.\n  return elem.textContent.trim();\n};\n\n\n/**\n * Parses an attribute by its name.\n * @param {!Element} elem The XML element.\n * @param {string} name The attribute name.\n * @param {function(string): (T|null)} parseFunction A function that parses\n *   the attribute.\n * @param {(T|null)=} defaultValue The attribute's default value, if not\n *   specified, the attibute's default value is null.\n * @return {(T|null)} The parsed attribute on success, or the attribute's\n *   default value if the attribute does not exist or could not be parsed.\n * @template T\n */\nshaka.util.XmlUtils.parseAttr = function(\n    elem, name, parseFunction, defaultValue = null) {\n  let parsedValue = null;\n\n  let value = elem.getAttribute(name);\n  if (value != null) {\n    parsedValue = parseFunction(value);\n  }\n  return parsedValue == null ? defaultValue : parsedValue;\n};\n\n\n/**\n * Parses an XML date string.\n * @param {string} dateString\n * @return {?number} The parsed date in seconds on success; otherwise, return\n *   null.\n */\nshaka.util.XmlUtils.parseDate = function(dateString) {\n  if (!dateString) {\n    return null;\n  }\n\n  // Times in the manifest should be in UTC.  If they don't specify a timezone,\n  // Date.parse() will use the local timezone instead of UTC.  So manually add\n  // the timezone if missing ('Z' indicates the UTC timezone).\n  // Format: YYYY-MM-DDThh:mm:ss.ssssss\n  if (/^\\d+-\\d+-\\d+T\\d+:\\d+:\\d+(\\.\\d+)?$/.test(dateString)) {\n    dateString += 'Z';\n  }\n\n  let result = Date.parse(dateString);\n  return (!isNaN(result) ? Math.floor(result / 1000.0) : null);\n};\n\n\n/**\n * Parses an XML duration string.\n * Negative values are not supported. Years and months are treated as exactly\n * 365 and 30 days respectively.\n * @param {string} durationString The duration string, e.g., \"PT1H3M43.2S\",\n *   which means 1 hour, 3 minutes, and 43.2 seconds.\n * @return {?number} The parsed duration in seconds on success; otherwise,\n *   return null.\n * @see {@link http://www.datypic.com/sc/xsd/t-xsd_duration.html}\n */\nshaka.util.XmlUtils.parseDuration = function(durationString) {\n  if (!durationString) {\n    return null;\n  }\n\n  let re = '^P(?:([0-9]*)Y)?(?:([0-9]*)M)?(?:([0-9]*)D)?' +\n           '(?:T(?:([0-9]*)H)?(?:([0-9]*)M)?(?:([0-9.]*)S)?)?$';\n  let matches = new RegExp(re).exec(durationString);\n\n  if (!matches) {\n    shaka.log.warning('Invalid duration string:', durationString);\n    return null;\n  }\n\n  // Note: Number(null) == 0 but Number(undefined) == NaN.\n  let years = Number(matches[1] || null);\n  let months = Number(matches[2] || null);\n  let days = Number(matches[3] || null);\n  let hours = Number(matches[4] || null);\n  let minutes = Number(matches[5] || null);\n  let seconds = Number(matches[6] || null);\n\n  // Assume a year always has 365 days and a month always has 30 days.\n  let d = (60 * 60 * 24 * 365) * years +\n          (60 * 60 * 24 * 30) * months +\n          (60 * 60 * 24) * days +\n          (60 * 60) * hours +\n          60 * minutes +\n          seconds;\n  return isFinite(d) ? d : null;\n};\n\n\n/**\n * Parses a range string.\n * @param {string} rangeString The range string, e.g., \"101-9213\".\n * @return {?{start: number, end: number}} The parsed range on success;\n *   otherwise, return null.\n */\nshaka.util.XmlUtils.parseRange = function(rangeString) {\n  let matches = /([0-9]+)-([0-9]+)/.exec(rangeString);\n\n  if (!matches) {\n    return null;\n  }\n\n  let start = Number(matches[1]);\n  if (!isFinite(start)) {\n    return null;\n  }\n\n  let end = Number(matches[2]);\n  if (!isFinite(end)) {\n    return null;\n  }\n\n  return {start: start, end: end};\n};\n\n\n/**\n * Parses an integer.\n * @param {string} intString The integer string.\n * @return {?number} The parsed integer on success; otherwise, return null.\n */\nshaka.util.XmlUtils.parseInt = function(intString) {\n  let n = Number(intString);\n  return (n % 1 === 0) ? n : null;\n};\n\n\n/**\n * Parses a positive integer.\n * @param {string} intString The integer string.\n * @return {?number} The parsed positive integer on success; otherwise,\n *   return null.\n */\nshaka.util.XmlUtils.parsePositiveInt = function(intString) {\n  let n = Number(intString);\n  return (n % 1 === 0) && (n > 0) ? n : null;\n};\n\n\n/**\n * Parses a non-negative integer.\n * @param {string} intString The integer string.\n * @return {?number} The parsed non-negative integer on success; otherwise,\n *   return null.\n */\nshaka.util.XmlUtils.parseNonNegativeInt = function(intString) {\n  let n = Number(intString);\n  return (n % 1 === 0) && (n >= 0) ? n : null;\n};\n\n\n/**\n * Parses a floating point number.\n * @param {string} floatString The floating point number string.\n * @return {?number} The parsed floating point number on success; otherwise,\n *   return null. May return -Infinity or Infinity.\n */\nshaka.util.XmlUtils.parseFloat = function(floatString) {\n  let n = Number(floatString);\n  return !isNaN(n) ? n : null;\n};\n\n\n/**\n * Evaluate a division expressed as a string.\n * @param {string} exprString\n *   The expression to evaluate, e.g. \"200/2\". Can also be a single number.\n * @return {?number} The evaluated expression as floating point number on\n *   success; otherwise return null.\n */\nshaka.util.XmlUtils.evalDivision = function(exprString) {\n  let res;\n  let n;\n  if ((res = exprString.match(/^(\\d+)\\/(\\d+)$/))) {\n    n = Number(res[1] / res[2]);\n  } else {\n    n = Number(exprString);\n  }\n  return !isNaN(n) ? n : null;\n};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.dash.ContentProtection');\n\ngoog.require('goog.asserts');\ngoog.require('shaka.log');\ngoog.require('shaka.util.Error');\ngoog.require('shaka.util.Functional');\ngoog.require('shaka.util.ManifestParserUtils');\ngoog.require('shaka.util.MapUtils');\ngoog.require('shaka.util.Uint8ArrayUtils');\ngoog.require('shaka.util.XmlUtils');\n\n\n/**\n * @namespace shaka.dash.ContentProtection\n * @summary A set of functions for parsing and interpreting ContentProtection\n *   elements.\n */\n\n\n/**\n * @typedef {{\n *   defaultKeyId: ?string,\n *   defaultInit: Array.<shaka.extern.InitDataOverride>,\n *   drmInfos: !Array.<shaka.extern.DrmInfo>,\n *   firstRepresentation: boolean\n * }}\n *\n * @description\n * Contains information about the ContentProtection elements found at the\n * AdaptationSet level.\n *\n * @property {?string} defaultKeyId\n *   The default key ID to use.  This is used by parseKeyIds as a default.  This\n *   can be null to indicate that there is no default.\n * @property {Array.<shaka.extern.InitDataOverride>} defaultInit\n *   The default init data override.  This can be null to indicate that there\n *   is no default.\n * @property {!Array.<shaka.extern.DrmInfo>} drmInfos\n *   The DrmInfo objects.\n * @property {boolean} firstRepresentation\n *   True when first parsed; changed to false after the first call to\n *   parseKeyIds.  This is used to determine if a dummy key-system should be\n *   overwritten; namely that the first representation can replace the dummy\n *   from the AdaptationSet.\n */\nshaka.dash.ContentProtection.Context;\n\n\n/**\n * @typedef {{\n *   node: !Element,\n *   schemeUri: string,\n *   keyId: ?string,\n *   init: Array.<shaka.extern.InitDataOverride>\n * }}\n *\n * @description\n * The parsed result of a single ContentProtection element.\n *\n * @property {!Element} node\n *   The ContentProtection XML element.\n * @property {string} schemeUri\n *   The scheme URI.\n * @property {?string} keyId\n *   The default key ID, if present.\n * @property {Array.<shaka.extern.InitDataOverride>} init\n *   The init data, if present.  If there is no init data, it will be null.  If\n *   this is non-null, there is at least one element.\n */\nshaka.dash.ContentProtection.Element;\n\n\n/**\n * A map of scheme URI to key system name.\n *\n * @const {!Object.<string, string>}\n * @private\n */\nshaka.dash.ContentProtection.defaultKeySystems_ = {\n  'urn:uuid:1077efec-c0b2-4d02-ace3-3c1e52e2fb4b': 'org.w3.clearkey',\n  'urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed': 'com.widevine.alpha',\n  'urn:uuid:9a04f079-9840-4286-ab92-e65be0885f95': 'com.microsoft.playready',\n  'urn:uuid:f239e769-efa3-4850-9c16-a903c6932efb': 'com.adobe.primetime',\n};\n\n\n/**\n * @const {string}\n * @private\n */\nshaka.dash.ContentProtection.MP4Protection_ =\n    'urn:mpeg:dash:mp4protection:2011';\n\n\n/**\n * @const {string}\n * @private\n */\nshaka.dash.ContentProtection.CencNamespaceUri_ = 'urn:mpeg:cenc:2013';\n\n\n/**\n * Parses info from the ContentProtection elements at the AdaptationSet level.\n *\n * @param {!Array.<!Element>} elems\n * @param {shaka.extern.DashContentProtectionCallback} callback\n * @param {boolean} ignoreDrmInfo\n * @return {shaka.dash.ContentProtection.Context}\n */\nshaka.dash.ContentProtection.parseFromAdaptationSet = function(\n    elems, callback, ignoreDrmInfo) {\n  const ContentProtection = shaka.dash.ContentProtection;\n  const Functional = shaka.util.Functional;\n  const MapUtils = shaka.util.MapUtils;\n  const ManifestParserUtils = shaka.util.ManifestParserUtils;\n  let parsed = ContentProtection.parseElements_(elems);\n  /** @type {Array.<shaka.extern.InitDataOverride>} */\n  let defaultInit = null;\n  /** @type {!Array.<shaka.extern.DrmInfo>} */\n  let drmInfos = [];\n  let parsedNonCenc = [];\n\n  // Get the default key ID; if there are multiple, they must all match.\n  let keyIds = parsed.map(function(elem) { return elem.keyId; })\n      .filter(Functional.isNotNull);\n  if (keyIds.length) {\n    if (keyIds.filter(Functional.isNotDuplicate).length > 1) {\n      throw new shaka.util.Error(\n          shaka.util.Error.Severity.CRITICAL,\n          shaka.util.Error.Category.MANIFEST,\n          shaka.util.Error.Code.DASH_CONFLICTING_KEY_IDS);\n    }\n  }\n\n  if (!ignoreDrmInfo) {\n    // Find the default key ID and init data.  Create a new array of all the\n    // non-CENC elements.\n    parsedNonCenc = parsed.filter(function(elem) {\n      if (elem.schemeUri == ContentProtection.MP4Protection_) {\n        goog.asserts.assert(!elem.init || elem.init.length,\n                            'Init data must be null or non-empty.');\n        defaultInit = elem.init || defaultInit;\n        return false;\n      } else {\n        return true;\n      }\n    });\n\n    if (parsedNonCenc.length) {\n      drmInfos = ContentProtection.convertElements_(\n          defaultInit, callback, parsedNonCenc);\n\n      // If there are no drmInfos after parsing, then add a dummy entry.\n      // This may be removed in parseKeyIds.\n      if (drmInfos.length == 0) {\n        drmInfos = [ManifestParserUtils.createDrmInfo('', defaultInit)];\n      }\n    }\n  }\n\n  // If there are only CENC element(s) or ignoreDrmInfo flag is set, assume all\n  // key-systems are supported.\n  if (parsed.length && (ignoreDrmInfo || !parsedNonCenc.length)) {\n    let keySystems = ContentProtection.defaultKeySystems_;\n    drmInfos =\n        MapUtils.values(keySystems)\n            .filter(function(keySystem) {\n              // If the manifest doesn't specify any key systems, we shouldn't\n              // put clearkey in this list.  Otherwise, it may be triggered when\n              // a real key system should be used instead.\n              return keySystem != 'org.w3.clearkey';\n            })\n            .map(function(keySystem) {\n              return ManifestParserUtils.createDrmInfo(keySystem, defaultInit);\n            });\n  }\n\n  /** @type {?string} */\n  let defaultKeyId = keyIds[0] || null;\n\n  // Attach the default keyId, if it exists, to every initData.\n  if (defaultKeyId) {\n    drmInfos.forEach(function(drmInfo) {\n      drmInfo.initData.forEach(function(initData) {\n        initData.keyId = defaultKeyId;\n      });\n    });\n  }\n\n  return {\n    defaultKeyId: defaultKeyId,\n    defaultInit: defaultInit,\n    drmInfos: drmInfos,\n    firstRepresentation: true,\n  };\n};\n\n\n/**\n * Parses the given ContentProtection elements found at the Representation\n * level.  This may update the |context|.\n *\n * @param {!Array.<!Element>} elems\n * @param {shaka.extern.DashContentProtectionCallback} callback\n * @param {shaka.dash.ContentProtection.Context} context\n * @param {boolean} ignoreDrmInfo\n * @return {?string} The parsed key ID\n */\nshaka.dash.ContentProtection.parseFromRepresentation = function(\n    elems, callback, context, ignoreDrmInfo) {\n  const ContentProtection = shaka.dash.ContentProtection;\n  let repContext = ContentProtection.parseFromAdaptationSet(\n      elems, callback, ignoreDrmInfo);\n\n  if (context.firstRepresentation) {\n    let asUnknown = context.drmInfos.length == 1 &&\n        !context.drmInfos[0].keySystem;\n    let asUnencrypted = context.drmInfos.length == 0;\n    let repUnencrypted = repContext.drmInfos.length == 0;\n\n    // There are two cases where we need to replace the |drmInfos| in the\n    // context with those in the Representation:\n    //   1. The AdaptationSet does not list any ContentProtection.\n    //   2. The AdaptationSet only lists unknown key-systems.\n    if (asUnencrypted || (asUnknown && !repUnencrypted)) {\n      context.drmInfos = repContext.drmInfos;\n    }\n    context.firstRepresentation = false;\n  } else if (repContext.drmInfos.length > 0) {\n    // If this is not the first Representation, then we need to remove entries\n    // from the context that do not appear in this Representation.\n    context.drmInfos = context.drmInfos.filter(function(asInfo) {\n      return repContext.drmInfos.some(function(repInfo) {\n        return repInfo.keySystem == asInfo.keySystem;\n      });\n    });\n    // If we have filtered out all key-systems, throw an error.\n    if (context.drmInfos.length == 0) {\n      throw new shaka.util.Error(\n          shaka.util.Error.Severity.CRITICAL,\n          shaka.util.Error.Category.MANIFEST,\n          shaka.util.Error.Code.DASH_NO_COMMON_KEY_SYSTEM);\n    }\n  }\n\n  return repContext.defaultKeyId || context.defaultKeyId;\n};\n\n\n/**\n * Creates DrmInfo objects from the given element.\n *\n * @param {Array.<shaka.extern.InitDataOverride>} defaultInit\n * @param {shaka.extern.DashContentProtectionCallback} callback\n * @param {!Array.<shaka.dash.ContentProtection.Element>} elements\n * @return {!Array.<shaka.extern.DrmInfo>}\n * @private\n */\nshaka.dash.ContentProtection.convertElements_ = function(\n    defaultInit, callback, elements) {\n  const Functional = shaka.util.Functional;\n  return elements.map(\n      /**\n       * @param {shaka.dash.ContentProtection.Element} element\n       * @return {!Array.<shaka.extern.DrmInfo>}\n       */\n      function(element) {\n        const ManifestParserUtils = shaka.util.ManifestParserUtils;\n        const ContentProtection = shaka.dash.ContentProtection;\n        let keySystem = ContentProtection.defaultKeySystems_[element.schemeUri];\n        if (keySystem) {\n          goog.asserts.assert(!element.init || element.init.length,\n                              'Init data must be null or non-empty.');\n          let initData = element.init || defaultInit;\n          return [ManifestParserUtils.createDrmInfo(keySystem, initData)];\n        } else {\n          goog.asserts.assert(\n              callback, 'ContentProtection callback is required');\n          return callback(element.node) || [];\n        }\n      }).reduce(Functional.collapseArrays, []);\n};\n\n\n/**\n * Parses the given ContentProtection elements.  If there is an error, it\n * removes those elements.\n *\n * @param {!Array.<!Element>} elems\n * @return {!Array.<shaka.dash.ContentProtection.Element>}\n * @private\n */\nshaka.dash.ContentProtection.parseElements_ = function(elems) {\n  const Functional = shaka.util.Functional;\n  return elems.map(\n      /**\n       * @param {!Element} elem\n       * @return {?shaka.dash.ContentProtection.Element}\n       */\n      function(elem) {\n        const NS = shaka.dash.ContentProtection.CencNamespaceUri_;\n        /** @type {?string} */\n        let schemeUri = elem.getAttribute('schemeIdUri');\n        /** @type {?string} */\n        let keyId = shaka.util.XmlUtils.getAttributeNS(elem, NS, 'default_KID');\n        /** @type {!Array.<string>} */\n        let psshs = shaka.util.XmlUtils.findChildrenNS(elem, NS, 'pssh')\n                        .map(shaka.util.XmlUtils.getContents);\n\n        if (!schemeUri) {\n          shaka.log.error('Missing required schemeIdUri attribute on',\n                          'ContentProtection element', elem);\n          return null;\n        }\n\n        schemeUri = schemeUri.toLowerCase();\n        if (keyId) {\n          keyId = keyId.replace(/-/g, '').toLowerCase();\n          if (keyId.indexOf(' ') >= 0) {\n            throw new shaka.util.Error(\n                shaka.util.Error.Severity.CRITICAL,\n                shaka.util.Error.Category.MANIFEST,\n                shaka.util.Error.Code.DASH_MULTIPLE_KEY_IDS_NOT_SUPPORTED);\n          }\n        }\n\n        /** @type {!Array.<shaka.extern.InitDataOverride>} */\n        let init = [];\n        try {\n          init = psshs.map(function(pssh) {\n            /** @type {shaka.extern.InitDataOverride} */\n            let ret = {\n              initDataType: 'cenc',\n              initData: shaka.util.Uint8ArrayUtils.fromBase64(pssh),\n              keyId: null,\n            };\n            return ret;\n          });\n        } catch (e) {\n          throw new shaka.util.Error(\n              shaka.util.Error.Severity.CRITICAL,\n              shaka.util.Error.Category.MANIFEST,\n              shaka.util.Error.Code.DASH_PSSH_BAD_ENCODING);\n        }\n\n        /** @type {shaka.dash.ContentProtection.Element} */\n        let element = {\n          node: elem,\n          schemeUri: schemeUri,\n          keyId: keyId,\n          init: (init.length > 0 ? init : null),\n        };\n        return element;\n      }).filter(Functional.isNotNull);\n};\n\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.dash.MpdUtils');\n\ngoog.require('goog.asserts');\ngoog.require('shaka.log');\ngoog.require('shaka.net.NetworkingEngine');\ngoog.require('shaka.util.AbortableOperation');\ngoog.require('shaka.util.Error');\ngoog.require('shaka.util.Functional');\ngoog.require('shaka.util.ManifestParserUtils');\ngoog.require('shaka.util.StringUtils');\ngoog.require('shaka.util.XmlUtils');\n\n\n/**\n * @namespace shaka.dash.MpdUtils\n * @summary MPD processing utility functions.\n */\n\n\n/**\n * @typedef {{\n *   start: number,\n *   unscaledStart: number,\n *   end: number\n * }}\n *\n * @description\n * Defines a time range of a media segment.  Times are in seconds.\n *\n * @property {number} start\n *   The start time of the range.\n * @property {number} unscaledStart\n *   The start time of the range in representation timescale units.\n * @property {number} end\n *   The end time (exclusive) of the range.\n */\nshaka.dash.MpdUtils.TimeRange;\n\n\n/**\n * @typedef {{\n *   timescale: number,\n *   segmentDuration: ?number,\n *   startNumber: number,\n *   scaledPresentationTimeOffset: number,\n *   unscaledPresentationTimeOffset: number,\n *   timeline: Array.<shaka.dash.MpdUtils.TimeRange>\n * }}\n *\n * @description\n * Contains common information between SegmentList and SegmentTemplate items.\n *\n * @property {number} timescale\n *   The time-scale of the representation.\n * @property {?number} segmentDuration\n *   The duration of the segments in seconds, if given.\n * @property {number} startNumber\n *   The start number of the segments; 1 or greater.\n * @property {number} scaledPresentationTimeOffset\n *   The presentation time offset of the representation, in seconds.\n * @property {number} unscaledPresentationTimeOffset\n *   The presentation time offset of the representation, in timescale units.\n * @property {Array.<shaka.dash.MpdUtils.TimeRange>} timeline\n *   The timeline of the representation, if given.  Times in seconds.\n */\nshaka.dash.MpdUtils.SegmentInfo;\n\n\n/**\n * @const {string}\n * @private\n */\nshaka.dash.MpdUtils.XlinkNamespaceUri_ = 'http://www.w3.org/1999/xlink';\n\n\n/**\n * Fills a SegmentTemplate URI template.  This function does not validate the\n * resulting URI.\n *\n * @param {string} uriTemplate\n * @param {?string} representationId\n * @param {?number} number\n * @param {?number} bandwidth\n * @param {?number} time\n * @return {string} A URI string.\n * @see ISO/IEC 23009-1:2014 section 5.3.9.4.4\n */\nshaka.dash.MpdUtils.fillUriTemplate = function(\n    uriTemplate, representationId, number, bandwidth, time) {\n  /** @type {!Object.<string, ?number|?string>} */\n  let valueTable = {\n    'RepresentationID': representationId,\n    'Number': number,\n    'Bandwidth': bandwidth,\n    'Time': time,\n  };\n\n  const re =\n      /\\$(RepresentationID|Number|Bandwidth|Time)?(?:%0([0-9]+)([diouxX]))?\\$/g;\n  let uri = uriTemplate.replace(re, function(match, name, widthString, format) {\n    if (match == '$$') {\n      return '$';\n    }\n\n    let value = valueTable[name];\n    goog.asserts.assert(value !== undefined, 'Unrecognized identifier');\n\n    // Note that |value| may be 0 or ''.\n    if (value == null) {\n      shaka.log.warning(\n          'URL template does not have an available substitution for identifier',\n          '\"' + name + '\":',\n          uriTemplate);\n      return match;\n    }\n\n    if (name == 'RepresentationID' && widthString) {\n      shaka.log.warning(\n          'URL template should not contain a width specifier for identifier',\n          '\"RepresentationID\":',\n          uriTemplate);\n      widthString = undefined;\n    }\n\n    if (name == 'Time') {\n      goog.asserts.assert(Math.abs(value - Math.round(value)) < 0.2,\n                          'Calculated $Time$ values must be close to integers');\n      value = Math.round(value);\n    }\n\n    /** @type {string} */\n    let valueString;\n    switch (format) {\n      case undefined:  // Happens if there is no format specifier.\n      case 'd':\n      case 'i':\n      case 'u':\n        valueString = value.toString();\n        break;\n      case 'o':\n        valueString = value.toString(8);\n        break;\n      case 'x':\n        valueString = value.toString(16);\n        break;\n      case 'X':\n        valueString = value.toString(16).toUpperCase();\n        break;\n      default:\n        goog.asserts.assert(false, 'Unhandled format specifier');\n        valueString = value.toString();\n        break;\n    }\n\n    // Create a padding string.\n    let width = window.parseInt(widthString, 10) || 1;\n    let paddingSize = Math.max(0, width - valueString.length);\n    let padding = (new Array(paddingSize + 1)).join('0');\n\n    return padding + valueString;\n  });\n\n  return uri;\n};\n\n\n/**\n * Expands a SegmentTimeline into an array-based timeline.  The results are in\n * seconds.\n *\n * @param {!Element} segmentTimeline\n * @param {number} timescale\n * @param {number} unscaledPresentationTimeOffset\n * @param {number} periodDuration The Period's duration in seconds.\n *   Infinity indicates that the Period continues indefinitely.\n * @return {!Array.<shaka.dash.MpdUtils.TimeRange>}\n */\nshaka.dash.MpdUtils.createTimeline =\n    function(segmentTimeline, timescale, unscaledPresentationTimeOffset,\n             periodDuration) {\n  goog.asserts.assert(\n      timescale > 0 && timescale < Infinity,\n      'timescale must be a positive, finite integer');\n  goog.asserts.assert(periodDuration > 0,\n                      'period duration must be a positive integer');\n\n  // Alias.\n  const XmlUtils = shaka.util.XmlUtils;\n\n  let timePoints = XmlUtils.findChildren(segmentTimeline, 'S');\n\n  /** @type {!Array.<shaka.dash.MpdUtils.TimeRange>} */\n  let timeline = [];\n  let lastEndTime = 0;\n\n  for (let i = 0; i < timePoints.length; ++i) {\n    let timePoint = timePoints[i];\n    let t = XmlUtils.parseAttr(timePoint, 't', XmlUtils.parseNonNegativeInt);\n    let d = XmlUtils.parseAttr(timePoint, 'd', XmlUtils.parseNonNegativeInt);\n    let r = XmlUtils.parseAttr(timePoint, 'r', XmlUtils.parseInt);\n\n    // Adjust the start time to account for the presentation time offset.\n    if (t != null) {\n      t -= unscaledPresentationTimeOffset;\n    }\n\n    if (!d) {\n      shaka.log.warning(\n          '\"S\" element must have a duration:',\n          'ignoring the remaining \"S\" elements.',\n          timePoint);\n      return timeline;\n    }\n\n    let startTime = t != null ? t : lastEndTime;\n\n    let repeat = r || 0;\n    if (repeat < 0) {\n      if (i + 1 < timePoints.length) {\n        let nextTimePoint = timePoints[i + 1];\n        let nextStartTime = XmlUtils.parseAttr(\n            nextTimePoint, 't', XmlUtils.parseNonNegativeInt);\n        if (nextStartTime == null) {\n          shaka.log.warning(\n              'An \"S\" element cannot have a negative repeat',\n              'if the next \"S\" element does not have a valid start time:',\n              'ignoring the remaining \"S\" elements.',\n              timePoint);\n          return timeline;\n        } else if (startTime >= nextStartTime) {\n          shaka.log.warning(\n              'An \"S\" element cannot have a negative repeat',\n              'if its start time exceeds the next \"S\" element\\'s start time:',\n              'ignoring the remaining \"S\" elements.',\n              timePoint);\n          return timeline;\n        }\n        repeat = Math.ceil((nextStartTime - startTime) / d) - 1;\n      } else {\n        if (periodDuration == Infinity) {\n          // The DASH spec. actually allows the last \"S\" element to have a\n          // negative repeat value even when the Period has an infinite\n          // duration.  No one uses this feature and no one ever should, ever.\n          shaka.log.warning(\n              'The last \"S\" element cannot have a negative repeat',\n              'if the Period has an infinite duration:',\n              'ignoring the last \"S\" element.',\n              timePoint);\n          return timeline;\n        } else if (startTime / timescale >= periodDuration) {\n          shaka.log.warning(\n              'The last \"S\" element cannot have a negative repeat',\n              'if its start time exceeds the Period\\'s duration:',\n              'igoring the last \"S\" element.',\n              timePoint);\n          return timeline;\n        }\n        repeat = Math.ceil((periodDuration * timescale - startTime) / d) - 1;\n      }\n    }\n\n    // The end of the last segment may be before the start of the current\n    // segment (a gap) or after the start of the current segment (an overlap).\n    // If there is a gap/overlap then stretch/compress the end of the last\n    // segment to the start of the current segment.\n    //\n    // Note: it is possible to move the start of the current segment to the\n    // end of the last segment, but this would complicate the computation of\n    // the $Time$ placeholder later on.\n    if ((timeline.length > 0) && (startTime != lastEndTime)) {\n      let delta = startTime - lastEndTime;\n\n      if (Math.abs(delta / timescale) >=\n          shaka.util.ManifestParserUtils.GAP_OVERLAP_TOLERANCE_SECONDS) {\n        shaka.log.warning(\n            'SegmentTimeline contains a large gap/overlap:',\n            'the content may have errors in it.',\n            timePoint);\n      }\n\n      timeline[timeline.length - 1].end = startTime / timescale;\n    }\n\n    for (let j = 0; j <= repeat; ++j) {\n      let endTime = startTime + d;\n      let item = {\n        start: startTime / timescale,\n        end: endTime / timescale,\n        unscaledStart: startTime,\n      };\n      timeline.push(item);\n\n      startTime = endTime;\n      lastEndTime = endTime;\n    }\n  }\n\n  return timeline;\n};\n\n\n/**\n * Parses common segment info for SegmentList and SegmentTemplate.\n *\n * @param {shaka.dash.DashParser.Context} context\n * @param {function(?shaka.dash.DashParser.InheritanceFrame):Element} callback\n *   Gets the element that contains the segment info.\n * @return {shaka.dash.MpdUtils.SegmentInfo}\n */\nshaka.dash.MpdUtils.parseSegmentInfo = function(context, callback) {\n  goog.asserts.assert(\n      callback(context.representation),\n      'There must be at least one element of the given type.');\n  const MpdUtils = shaka.dash.MpdUtils;\n  const XmlUtils = shaka.util.XmlUtils;\n\n  let timescaleStr = MpdUtils.inheritAttribute(context, callback, 'timescale');\n  let timescale = 1;\n  if (timescaleStr) {\n    timescale = XmlUtils.parsePositiveInt(timescaleStr) || 1;\n  }\n\n  let durationStr = MpdUtils.inheritAttribute(context, callback, 'duration');\n  let segmentDuration = XmlUtils.parsePositiveInt(durationStr || '');\n  if (segmentDuration) {\n    segmentDuration /= timescale;\n  }\n\n  let startNumberStr =\n      MpdUtils.inheritAttribute(context, callback, 'startNumber');\n  let unscaledPresentationTimeOffset =\n      Number(MpdUtils.inheritAttribute(context, callback,\n                                       'presentationTimeOffset')) || 0;\n  let startNumber = XmlUtils.parseNonNegativeInt(startNumberStr || '');\n  if (startNumberStr == null || startNumber == null) {\n    startNumber = 1;\n  }\n\n  let timelineNode =\n      MpdUtils.inheritChild(context, callback, 'SegmentTimeline');\n  /** @type {Array.<shaka.dash.MpdUtils.TimeRange>} */\n  let timeline = null;\n  if (timelineNode) {\n    timeline = MpdUtils.createTimeline(\n        timelineNode, timescale, unscaledPresentationTimeOffset,\n        context.periodInfo.duration || Infinity);\n  }\n\n  let scaledPresentationTimeOffset =\n      (unscaledPresentationTimeOffset / timescale) || 0;\n  return {\n    timescale: timescale,\n    segmentDuration: segmentDuration,\n    startNumber: startNumber,\n    scaledPresentationTimeOffset: scaledPresentationTimeOffset,\n    unscaledPresentationTimeOffset: unscaledPresentationTimeOffset,\n    timeline: timeline,\n  };\n};\n\n\n/**\n * Searches the inheritance for a Segment* with the given attribute.\n *\n * @param {shaka.dash.DashParser.Context} context\n * @param {function(?shaka.dash.DashParser.InheritanceFrame):Element} callback\n *   Gets the Element that contains the attribute to inherit.\n * @param {string} attribute\n * @return {?string}\n */\nshaka.dash.MpdUtils.inheritAttribute = function(context, callback, attribute) {\n  const Functional = shaka.util.Functional;\n  goog.asserts.assert(\n      callback(context.representation),\n      'There must be at least one element of the given type');\n\n  /** @type {!Array.<!Element>} */\n  let nodes = [\n    callback(context.representation),\n    callback(context.adaptationSet),\n    callback(context.period),\n  ].filter(Functional.isNotNull);\n\n  return nodes\n      .map(function(s) { return s.getAttribute(attribute); })\n      .reduce(function(all, part) { return all || part; });\n};\n\n\n/**\n * Searches the inheritance for a Segment* with the given child.\n *\n * @param {shaka.dash.DashParser.Context} context\n * @param {function(?shaka.dash.DashParser.InheritanceFrame):Element} callback\n *   Gets the Element that contains the child to inherit.\n * @param {string} child\n * @return {Element}\n */\nshaka.dash.MpdUtils.inheritChild = function(context, callback, child) {\n  const Functional = shaka.util.Functional;\n  goog.asserts.assert(\n      callback(context.representation),\n      'There must be at least one element of the given type');\n\n  /** @type {!Array.<!Element>} */\n  let nodes = [\n    callback(context.representation),\n    callback(context.adaptationSet),\n    callback(context.period),\n  ].filter(Functional.isNotNull);\n\n  const XmlUtils = shaka.util.XmlUtils;\n  return nodes\n      .map(function(s) { return XmlUtils.findChild(s, child); })\n      .reduce(function(all, part) { return all || part; });\n};\n\n\n/**\n * Parse some UTF8 data and return the resulting root element if\n * it was valid XML.\n * @param {ArrayBuffer} data\n * @param {string} expectedRootElemName\n * @return {Element|undefined}\n */\nshaka.dash.MpdUtils.parseXml = function(data, expectedRootElemName) {\n  let parser = new DOMParser();\n  let rootElem;\n  let xml;\n  try {\n    let string = shaka.util.StringUtils.fromUTF8(data);\n    xml = parser.parseFromString(string, 'text/xml');\n  } catch (exception) {}\n  if (xml) {\n    // The top-level element in the loaded xml should have the\n    // same type as the element linking.\n    if (xml.documentElement.tagName == expectedRootElemName) {\n      rootElem = xml.documentElement;\n    }\n  }\n  if (rootElem && rootElem.getElementsByTagName('parsererror').length > 0) {\n    return null;\n  }  // It had a parser error in it.\n\n  return rootElem;\n};\n\n\n/**\n * Follow the xlink link contained in the given element.\n * It also strips the xlink properties off of the element,\n * even if the process fails.\n *\n * @param {!Element} element\n * @param {!shaka.extern.RetryParameters} retryParameters\n * @param {boolean} failGracefully\n * @param {string} baseUri\n * @param {!shaka.net.NetworkingEngine} networkingEngine\n * @param {number} linkDepth\n * @return {!shaka.util.AbortableOperation.<!Element>}\n * @private\n */\nshaka.dash.MpdUtils.handleXlinkInElement_ =\n    function(element, retryParameters, failGracefully, baseUri,\n             networkingEngine, linkDepth) {\n  const MpdUtils = shaka.dash.MpdUtils;\n  const XmlUtils = shaka.util.XmlUtils;\n  const Error = shaka.util.Error;\n  const ManifestParserUtils = shaka.util.ManifestParserUtils;\n  const NS = MpdUtils.XlinkNamespaceUri_;\n\n  let xlinkHref = XmlUtils.getAttributeNS(element, NS, 'href');\n  let xlinkActuate =\n      XmlUtils.getAttributeNS(element, NS, 'actuate') || 'onRequest';\n\n  // Remove the xlink properties, so it won't download again\n  // when re-processed.\n  for (let i = 0; i < element.attributes.length; i++) {\n    let attribute = element.attributes[i];\n    if (attribute.namespaceURI == NS) {\n      element.removeAttributeNS(attribute.namespaceURI, attribute.localName);\n      i -= 1;\n    }\n  }\n\n  if (linkDepth >= 5) {\n    return shaka.util.AbortableOperation.failed(new Error(\n        Error.Severity.CRITICAL, Error.Category.MANIFEST,\n        Error.Code.DASH_XLINK_DEPTH_LIMIT));\n  }\n\n  if (xlinkActuate != 'onLoad') {\n    // Only xlink:actuate=\"onLoad\" is supported.\n    // When no value is specified, the assumed value is \"onRequest\".\n    return shaka.util.AbortableOperation.failed(new Error(\n        Error.Severity.CRITICAL, Error.Category.MANIFEST,\n        Error.Code.DASH_UNSUPPORTED_XLINK_ACTUATE));\n  }\n\n  // Resolve the xlink href, in case it's a relative URL.\n  let uris = ManifestParserUtils.resolveUris([baseUri], [xlinkHref]);\n\n  // Load in the linked elements.\n  const requestType = shaka.net.NetworkingEngine.RequestType.MANIFEST;\n  let request = shaka.net.NetworkingEngine.makeRequest(\n      uris, retryParameters);\n\n  let requestOperation = networkingEngine.request(requestType, request);\n  // The interface is abstract, but we know it was implemented with the\n  // more capable internal class.\n  goog.asserts.assert(requestOperation instanceof shaka.util.AbortableOperation,\n                      'Unexpected implementation of IAbortableOperation!');\n  // Satisfy the compiler with a cast.\n  let networkOperation =\n      /** @type {!shaka.util.AbortableOperation.<shaka.extern.Response>} */(\n          requestOperation);\n\n  // Chain onto that operation.\n  return networkOperation.chain((response) => {\n    // This only supports the case where the loaded xml has a single\n    // top-level element.  If there are multiple roots, it will be rejected.\n    let rootElem = MpdUtils.parseXml(response.data, element.tagName);\n    if (!rootElem) {\n      // It was not valid XML.\n      return shaka.util.AbortableOperation.failed(new Error(\n          Error.Severity.CRITICAL, Error.Category.MANIFEST,\n          Error.Code.DASH_INVALID_XML, xlinkHref));\n    }\n\n    // Now that there is no other possibility of the process erroring,\n    // the element can be changed further.\n\n    // Remove the current contents of the node.\n    while (element.childNodes.length) {\n      element.removeChild(element.childNodes[0]);\n    }\n\n    // Move the children of the loaded xml into the current element.\n    while (rootElem.childNodes.length) {\n      let child = rootElem.childNodes[0];\n      rootElem.removeChild(child);\n      element.appendChild(child);\n    }\n\n    // Move the attributes of the loaded xml into the current element.\n    for (let i = 0; i < rootElem.attributes.length; i++) {\n      let attribute = rootElem.attributes[i].nodeName;\n      let attributeValue = rootElem.getAttribute(attribute);\n      element.setAttribute(attribute, attributeValue);\n    }\n\n    return shaka.dash.MpdUtils.processXlinks(\n        element, retryParameters, failGracefully, uris[0], networkingEngine,\n        linkDepth + 1);\n  });\n};\n\n\n/**\n * Filter the contents of a node recursively, replacing xlink links\n * with their associated online data.\n *\n * @param {!Element} element\n * @param {!shaka.extern.RetryParameters} retryParameters\n * @param {boolean} failGracefully\n * @param {string} baseUri\n * @param {!shaka.net.NetworkingEngine} networkingEngine\n * @param {number=} linkDepth, default set to 0\n * @return {!shaka.util.AbortableOperation.<!Element>}\n */\nshaka.dash.MpdUtils.processXlinks =\n    function(element, retryParameters, failGracefully, baseUri,\n             networkingEngine, linkDepth = 0) {\n  const MpdUtils = shaka.dash.MpdUtils;\n  const XmlUtils = shaka.util.XmlUtils;\n  const NS = MpdUtils.XlinkNamespaceUri_;\n\n  if (XmlUtils.getAttributeNS(element, NS, 'href')) {\n    let handled = MpdUtils.handleXlinkInElement_(\n        element, retryParameters, failGracefully, baseUri,\n        networkingEngine, linkDepth);\n    if (failGracefully) {\n      // Catch any error and go on.\n      handled = handled.chain(undefined, (error) => {\n        // handleXlinkInElement_ strips the xlink properties off of the element\n        // even if it fails, so calling processXlinks again will handle whatever\n        // contents the element natively has.\n        return MpdUtils.processXlinks(element, retryParameters, failGracefully,\n                                      baseUri, networkingEngine,\n                                      linkDepth);\n      });\n    }\n    return handled;\n  }\n\n  // Filter out any children that should be nulled.\n  for (let i = 0; i < element.childNodes.length; i++) {\n    let child = element.childNodes[i];\n    if (child instanceof Element) {\n      const resolveToZeroString = 'urn:mpeg:dash:resolve-to-zero:2013';\n      if (XmlUtils.getAttributeNS(child, NS, 'href') == resolveToZeroString) {\n        // This is a 'resolve to zero' code; it means the element should\n        // be removed, as specified by the mpeg-dash rules for xlink.\n        element.removeChild(child);\n        i -= 1;\n      }\n    }\n  }\n\n  let childOperations = [];\n  for (let i = 0; i < element.childNodes.length; i++) {\n    let child = element.childNodes[i];\n    if (child.nodeType == Node.ELEMENT_NODE) {\n      // Replace the child with its processed form.\n      childOperations.push(shaka.dash.MpdUtils.processXlinks(\n          /** @type {!Element} */ (child), retryParameters, failGracefully,\n          baseUri, networkingEngine, linkDepth));\n    }\n  }\n\n  return shaka.util.AbortableOperation.all(childOperations).chain(() => {\n    return element;\n  });\n};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.media.InitSegmentReference');\ngoog.provide('shaka.media.SegmentReference');\n\ngoog.require('goog.asserts');\n\n\n/**\n * Creates an InitSegmentReference, which provides the location to an\n * initialization segment.\n *\n * @param {function():!Array.<string>} uris A function that creates the URIs of\n *   the resource containing the segment.\n * @param {number} startByte The offset from the start of the resource to the\n *   start of the segment.\n * @param {?number} endByte The offset from the start of the resource to the\n *   end of the segment, inclusive.  A value of null indicates that the segment\n *   extends to the end of the resource.\n *\n * @constructor\n * @struct\n * @export\n */\nshaka.media.InitSegmentReference = function(uris, startByte, endByte) {\n  /** @type {function():!Array.<string>} */\n  this.getUris = uris;\n\n  /** @const {number} */\n  this.startByte = startByte;\n\n  /** @const {?number} */\n  this.endByte = endByte;\n};\n\n\n/**\n * Creates the URIs of the resource containing the segment.\n *\n * @return {!Array.<string>}\n * @export\n */\nshaka.media.InitSegmentReference.prototype.createUris = function() {\n  return this.getUris();\n};\n\n\n/**\n * Returns the offset from the start of the resource to the\n * start of the segment.\n *\n * @return {number}\n * @export\n */\nshaka.media.InitSegmentReference.prototype.getStartByte = function() {\n  return this.startByte;\n};\n\n\n/**\n * Returns the offset from the start of the resource to the end of the segment,\n * inclusive.  A value of null indicates that the segment extends to the end of\n * the resource.\n *\n * @return {?number}\n * @export\n */\nshaka.media.InitSegmentReference.prototype.getEndByte = function() {\n  return this.endByte;\n};\n\n\n/**\n * Creates a SegmentReference, which provides the start time, end time, and\n * location to a media segment.\n *\n * @param {number} position The segment's position within a particular Period.\n *   The following should hold true between any two SegmentReferences from the\n *   same Period, r1 and r2:\n *   IF r2.position > r1.position THEN\n *     [ (r2.startTime > r1.startTime) OR\n *       (r2.startTime == r1.startTime AND r2.endTime >= r1.endTime) ]\n * @param {number} startTime The segment's start time in seconds, relative to\n *   the start of a particular Period.\n * @param {number} endTime The segment's end time in seconds, relative to\n *   the start of a particular Period.  The segment ends the instant before\n *   this time, so |endTime| must be strictly greater than |startTime|.\n * @param {function():!Array.<string>} uris\n *   A function that creates the URIs of the resource containing the segment.\n * @param {number} startByte The offset from the start of the resource to the\n *   start of the segment.\n * @param {?number} endByte The offset from the start of the resource to the\n *   end of the segment, inclusive.  A value of null indicates that the segment\n *   extends to the end of the resource.\n *\n * @constructor\n * @struct\n * @export\n */\nshaka.media.SegmentReference = function(\n    position, startTime, endTime, uris, startByte, endByte) {\n  goog.asserts.assert(startTime < endTime,\n                      'startTime must be less than endTime');\n  goog.asserts.assert((startByte < endByte) || (endByte == null),\n                      'startByte must be < endByte');\n  /** @const {number} */\n  this.position = position;\n\n  /** @type {number} */\n  this.startTime = startTime;\n\n  /** @type {number} */\n  this.endTime = endTime;\n\n  /** @type {function():!Array.<string>} */\n  this.getUris = uris;\n\n  /** @const {number} */\n  this.startByte = startByte;\n\n  /** @const {?number} */\n  this.endByte = endByte;\n};\n\n\n/**\n * Returns the segment's position within a particular Period.\n *\n * @return {number} The segment's position.\n * @export\n */\nshaka.media.SegmentReference.prototype.getPosition = function() {\n  return this.position;\n};\n\n\n/**\n * Returns the segment's start time in seconds, relative to\n * the start of a particular Period.\n *\n * @return {number}\n * @export\n */\nshaka.media.SegmentReference.prototype.getStartTime = function() {\n  return this.startTime;\n};\n\n\n/**\n * Returns the segment's end time in seconds, relative to\n * the start of a particular Period.\n *\n * @return {number}\n * @export\n */\nshaka.media.SegmentReference.prototype.getEndTime = function() {\n  return this.endTime;\n};\n\n\n/**\n * Creates the URIs of the resource containing the segment.\n *\n * @return {!Array.<string>}\n * @export\n */\nshaka.media.SegmentReference.prototype.createUris = function() {\n  return this.getUris();\n};\n\n\n/**\n * Returns the offset from the start of the resource to the\n * start of the segment.\n *\n * @return {number}\n * @export\n */\nshaka.media.SegmentReference.prototype.getStartByte = function() {\n  return this.startByte;\n};\n\n\n/**\n * Returns the offset from the start of the resource to the end of the segment,\n * inclusive.  A value of null indicates that the segment extends to the end of\n * the resource.\n *\n * @return {?number}\n * @export\n */\nshaka.media.SegmentReference.prototype.getEndByte = function() {\n  return this.endByte;\n};\n\n\n/**\n * A convenient typedef for when either type of reference is acceptable.\n *\n * @typedef {shaka.media.InitSegmentReference|shaka.media.SegmentReference}\n */\nshaka.media.AnySegmentReference;\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.util.DataViewReader');\n\ngoog.require('goog.asserts');\ngoog.require('shaka.util.Error');\ngoog.require('shaka.util.StringUtils');\n\n\n/**\n * Creates a DataViewReader, which abstracts a DataView object.\n *\n * @param {!DataView} dataView The DataView.\n * @param {shaka.util.DataViewReader.Endianness} endianness The endianness.\n *\n * @struct\n * @constructor\n * @export\n */\nshaka.util.DataViewReader = function(dataView, endianness) {\n  /** @private {!DataView} */\n  this.dataView_ = dataView;\n\n  /** @private {boolean} */\n  this.littleEndian_ =\n      endianness == shaka.util.DataViewReader.Endianness.LITTLE_ENDIAN;\n\n  /** @private {number} */\n  this.position_ = 0;\n};\n\n\n/**\n * Endianness.\n * @enum {number}\n * @export\n */\nshaka.util.DataViewReader.Endianness = {\n  BIG_ENDIAN: 0,\n  LITTLE_ENDIAN: 1,\n};\n\n\n/**\n * @return {boolean} True if the reader has more data, false otherwise.\n * @export\n */\nshaka.util.DataViewReader.prototype.hasMoreData = function() {\n  return this.position_ < this.dataView_.byteLength;\n};\n\n\n/**\n * Gets the current byte position.\n * @return {number}\n * @export\n */\nshaka.util.DataViewReader.prototype.getPosition = function() {\n  return this.position_;\n};\n\n\n/**\n * Gets the byte length of the DataView.\n * @return {number}\n * @export\n */\nshaka.util.DataViewReader.prototype.getLength = function() {\n  return this.dataView_.byteLength;\n};\n\n\n/**\n * Reads an unsigned 8 bit integer, and advances the reader.\n * @return {number} The integer.\n * @throws {shaka.util.Error} when reading past the end of the data view.\n * @export\n */\nshaka.util.DataViewReader.prototype.readUint8 = function() {\n  try {\n    let value = this.dataView_.getUint8(this.position_);\n    this.position_ += 1;\n    return value;\n  } catch (exception) {\n    this.throwOutOfBounds_();\n  }\n};\n\n\n/**\n * Reads an unsigned 16 bit integer, and advances the reader.\n * @return {number} The integer.\n * @throws {shaka.util.Error} when reading past the end of the data view.\n * @export\n */\nshaka.util.DataViewReader.prototype.readUint16 = function() {\n  try {\n    let value = this.dataView_.getUint16(this.position_, this.littleEndian_);\n    this.position_ += 2;\n    return value;\n  } catch (exception) {\n    this.throwOutOfBounds_();\n  }\n};\n\n\n/**\n * Reads an unsigned 32 bit integer, and advances the reader.\n * @return {number} The integer.\n * @throws {shaka.util.Error} when reading past the end of the data view.\n * @export\n */\nshaka.util.DataViewReader.prototype.readUint32 = function() {\n  try {\n    let value = this.dataView_.getUint32(this.position_, this.littleEndian_);\n    this.position_ += 4;\n    return value;\n  } catch (exception) {\n    this.throwOutOfBounds_();\n  }\n};\n\n\n/**\n * Reads a signed 32 bit integer, and advances the reader.\n * @return {number} The integer.\n * @throws {shaka.util.Error} when reading past the end of the data view.\n * @export\n */\nshaka.util.DataViewReader.prototype.readInt32 = function() {\n  try {\n    let value = this.dataView_.getInt32(this.position_, this.littleEndian_);\n    this.position_ += 4;\n    return value;\n  } catch (exception) {\n    this.throwOutOfBounds_();\n  }\n};\n\n\n/**\n * Reads an unsigned 64 bit integer, and advances the reader.\n * @return {number} The integer.\n * @throws {shaka.util.Error} when reading past the end of the data view or\n *   when reading an integer too large to store accurately in JavaScript.\n * @export\n */\nshaka.util.DataViewReader.prototype.readUint64 = function() {\n  let low;\n  let high;\n\n  try {\n    if (this.littleEndian_) {\n      low = this.dataView_.getUint32(this.position_, true);\n      high = this.dataView_.getUint32(this.position_ + 4, true);\n    } else {\n      high = this.dataView_.getUint32(this.position_, false);\n      low = this.dataView_.getUint32(this.position_ + 4, false);\n    }\n  } catch (exception) {\n    this.throwOutOfBounds_();\n  }\n\n  if (high > 0x1FFFFF) {\n    throw new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.MEDIA,\n        shaka.util.Error.Code.JS_INTEGER_OVERFLOW);\n  }\n\n  this.position_ += 8;\n\n  // NOTE: This is subtle, but in JavaScript you can't shift left by 32 and get\n  // the full range of 53-bit values possible.  You must multiply by 2^32.\n  return (high * Math.pow(2, 32)) + low;\n};\n\n\n/**\n * Reads the specified number of raw bytes.\n * @param {number} bytes The number of bytes to read.\n * @return {!Uint8Array}\n * @throws {shaka.util.Error} when reading past the end of the data view.\n * @export\n */\nshaka.util.DataViewReader.prototype.readBytes = function(bytes) {\n  goog.asserts.assert(bytes >= 0, 'Bad call to DataViewReader.readBytes');\n  if (this.position_ + bytes > this.dataView_.byteLength) {\n    this.throwOutOfBounds_();\n  }\n\n  let value = new Uint8Array(\n      this.dataView_.buffer, this.dataView_.byteOffset + this.position_, bytes);\n  this.position_ += bytes;\n  return new Uint8Array(value);\n};\n\n\n/**\n * Skips the specified number of bytes.\n * @param {number} bytes The number of bytes to skip.\n * @throws {shaka.util.Error} when skipping past the end of the data view.\n * @export\n */\nshaka.util.DataViewReader.prototype.skip = function(bytes) {\n  goog.asserts.assert(bytes >= 0, 'Bad call to DataViewReader.skip');\n  if (this.position_ + bytes > this.dataView_.byteLength) {\n    this.throwOutOfBounds_();\n  }\n  this.position_ += bytes;\n};\n\n\n/**\n * Rewinds the specified number of bytes.\n * @param {number} bytes The number of bytes to rewind.\n * @throws {shaka.util.Error} when rewinding past the beginning of the data\n *   view.\n * @export\n */\nshaka.util.DataViewReader.prototype.rewind = function(bytes) {\n  goog.asserts.assert(bytes >= 0, 'Bad call to DataViewReader.rewind');\n  if (this.position_ < bytes) {\n    this.throwOutOfBounds_();\n  }\n  this.position_ -= bytes;\n};\n\n\n/**\n * Seeks to a specified position.\n * @param {number} position The desired byte position within the DataView.\n * @throws {shaka.util.Error} when seeking outside the range of the data view.\n * @export\n */\nshaka.util.DataViewReader.prototype.seek = function(position) {\n  goog.asserts.assert(position >= 0, 'Bad call to DataViewReader.seek');\n  if (position < 0 || position > this.dataView_.byteLength) {\n    this.throwOutOfBounds_();\n  }\n  this.position_ = position;\n};\n\n\n/**\n * Keeps reading until it reaches a byte that equals to zero.  The text is\n * assumed to be UTF-8.\n * @return {string}\n * @export\n */\nshaka.util.DataViewReader.prototype.readTerminatedString = function() {\n  let start = this.position_;\n  while (this.hasMoreData()) {\n    let value = this.dataView_.getUint8(this.position_);\n    if (value == 0) break;\n    this.position_ += 1;\n  }\n\n  let ret = new Uint8Array(\n      this.dataView_.buffer, this.dataView_.byteOffset + start,\n      this.position_ - start);\n  // Skip string termination.\n  this.position_ += 1;\n  return shaka.util.StringUtils.fromUTF8(ret);\n};\n\n\n/**\n * @throws {shaka.util.Error}\n * @private\n */\nshaka.util.DataViewReader.prototype.throwOutOfBounds_ = function() {\n  throw new shaka.util.Error(\n      shaka.util.Error.Severity.CRITICAL,\n      shaka.util.Error.Category.MEDIA,\n      shaka.util.Error.Code.BUFFER_READ_OUT_OF_BOUNDS);\n};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.util.Mp4Parser');\n\ngoog.require('goog.asserts');\ngoog.require('shaka.log');\ngoog.require('shaka.util.DataViewReader');\n\n\n/**\n * Create a new MP4 Parser\n * @struct\n * @constructor\n * @export\n */\nshaka.util.Mp4Parser = function() {\n  /** @private {!Object.<number, shaka.util.Mp4Parser.BoxType_>} */\n  this.headers_ = [];\n\n  /** @private {!Object.<number, !shaka.util.Mp4Parser.CallbackType>} */\n  this.boxDefinitions_ = [];\n\n  /** @private {boolean} */\n  this.done_ = false;\n};\n\n\n/**\n * @typedef {function(!shaka.extern.ParsedBox)}\n * @exportInterface\n */\nshaka.util.Mp4Parser.CallbackType;\n\n\n/**\n * An enum used to track the type of box so that the correct values can be\n * read from the header.\n *\n * @enum {number}\n * @private\n */\nshaka.util.Mp4Parser.BoxType_ = {\n  BASIC_BOX: 0,\n  FULL_BOX: 1,\n};\n\n\n/**\n * Declare a box type as a Box.\n *\n * @param {string} type\n * @param {!shaka.util.Mp4Parser.CallbackType} definition\n * @return {!shaka.util.Mp4Parser}\n * @export\n */\nshaka.util.Mp4Parser.prototype.box = function(type, definition) {\n  let typeCode = shaka.util.Mp4Parser.typeFromString_(type);\n  this.headers_[typeCode] = shaka.util.Mp4Parser.BoxType_.BASIC_BOX;\n  this.boxDefinitions_[typeCode] = definition;\n  return this;\n};\n\n\n/**\n * Declare a box type as a Full Box.\n *\n * @param {string} type\n * @param {!shaka.util.Mp4Parser.CallbackType} definition\n * @return {!shaka.util.Mp4Parser}\n * @export\n */\nshaka.util.Mp4Parser.prototype.fullBox = function(type, definition) {\n  let typeCode = shaka.util.Mp4Parser.typeFromString_(type);\n  this.headers_[typeCode] = shaka.util.Mp4Parser.BoxType_.FULL_BOX;\n  this.boxDefinitions_[typeCode] = definition;\n  return this;\n};\n\n\n/**\n * Stop parsing.  Useful for extracting information from partial segments and\n * avoiding an out-of-bounds error once you find what you are looking for.\n *\n * @export\n */\nshaka.util.Mp4Parser.prototype.stop = function() {\n  this.done_ = true;\n};\n\n\n/**\n * Parse the given data using the added callbacks.\n *\n * @param {!BufferSource} data\n * @param {boolean=} partialOkay If true, allow reading partial payloads\n *   from some boxes. If the goal is a child box, we can sometimes find it\n *   without enough data to find all child boxes.\n * @export\n */\nshaka.util.Mp4Parser.prototype.parse = function(data, partialOkay) {\n  let wrapped = new Uint8Array(data);\n  let reader = new shaka.util.DataViewReader(\n      new DataView(wrapped.buffer, wrapped.byteOffset, wrapped.byteLength),\n      shaka.util.DataViewReader.Endianness.BIG_ENDIAN);\n\n  this.done_ = false;\n  while (reader.hasMoreData() && !this.done_) {\n    this.parseNext(0, reader, partialOkay);\n  }\n};\n\n\n/**\n * Parse the next box on the current level.\n *\n * @param {number} absStart The absolute start position in the original\n *   byte array.\n * @param {!shaka.util.DataViewReader} reader\n * @param {boolean=} partialOkay If true, allow reading partial payloads\n *   from some boxes. If the goal is a child box, we can sometimes find it\n *   without enough data to find all child boxes.\n * @export\n */\nshaka.util.Mp4Parser.prototype.parseNext =\n    function(absStart, reader, partialOkay) {\n  let start = reader.getPosition();\n\n  let size = reader.readUint32();\n  let type = reader.readUint32();\n  let name = shaka.util.Mp4Parser.typeToString(type);\n  shaka.log.v2('Parsing MP4 box', name);\n\n  switch (size) {\n    case 0:\n      size = reader.getLength() - start;\n      break;\n    case 1:\n      size = reader.readUint64();\n      break;\n  }\n\n  let boxDefinition = this.boxDefinitions_[type];\n\n  if (boxDefinition) {\n    let version = null;\n    let flags = null;\n\n    if (this.headers_[type] == shaka.util.Mp4Parser.BoxType_.FULL_BOX) {\n      let versionAndFlags = reader.readUint32();\n      version = versionAndFlags >>> 24;\n      flags = versionAndFlags & 0xFFFFFF;\n    }\n\n    // Read the whole payload so that the current level can be safely read\n    // regardless of how the payload is parsed.\n    let end = start + size;\n    if (partialOkay && end > reader.getLength()) {\n      // For partial reads, truncate the payload if we must.\n      end = reader.getLength();\n    }\n    let payloadSize = end - reader.getPosition();\n    let payload =\n        (payloadSize > 0) ? reader.readBytes(payloadSize) : new Uint8Array(0);\n\n    let payloadReader = new shaka.util.DataViewReader(\n        new DataView(payload.buffer, payload.byteOffset, payload.byteLength),\n        shaka.util.DataViewReader.Endianness.BIG_ENDIAN);\n\n    /** @type {shaka.extern.ParsedBox} */\n    let box = {\n      parser: this,\n      partialOkay: partialOkay || false,\n      version: version,\n      flags: flags,\n      reader: payloadReader,\n      size: size,\n      start: start + absStart,\n    };\n\n    boxDefinition(box);\n  } else {\n    // Move the read head to be at the end of the box.\n    // If the box is longer than the remaining parts of the file, e.g. the\n    // mp4 is improperly formatted, or this was a partial range request that\n    // ended in the middle of a box, just skip to the end.\n    const skipLength = Math.min(\n        start + size - reader.getPosition(),\n        reader.getLength() - reader.getPosition());\n    reader.skip(skipLength);\n  }\n};\n\n\n/**\n * A callback that tells the Mp4 parser to treat the body of a box as a series\n * of boxes. The number of boxes is limited by the size of the parent box.\n *\n * @param {!shaka.extern.ParsedBox} box\n * @export\n */\nshaka.util.Mp4Parser.children = function(box) {\n  while (box.reader.hasMoreData() && !box.parser.done_) {\n    box.parser.parseNext(box.start, box.reader, box.partialOkay);\n  }\n};\n\n\n/**\n * A callback that tells the Mp4 parser to treat the body of a box as a sample\n * description. A sample description box has a fixed number of children. The\n * number of children is represented by a 4 byte unsigned integer. Each child\n * is a box.\n *\n * @param {!shaka.extern.ParsedBox} box\n * @export\n */\nshaka.util.Mp4Parser.sampleDescription = function(box) {\n  for (let count = box.reader.readUint32();\n       count > 0 && !box.parser.done_;\n       count -= 1) {\n    box.parser.parseNext(box.start, box.reader, box.partialOkay);\n  }\n};\n\n\n/**\n * Create a callback that tells the Mp4 parser to treat the body of a box as a\n * binary blob and to parse the body's contents using the provided callback.\n *\n * @param {function(!Uint8Array)} callback\n * @return {!shaka.util.Mp4Parser.CallbackType}\n * @export\n */\nshaka.util.Mp4Parser.allData = function(callback) {\n  return function(box) {\n    let all = box.reader.getLength() - box.reader.getPosition();\n    callback(box.reader.readBytes(all));\n  };\n};\n\n\n/**\n * Convert an ascii string name to the integer type for a box.\n *\n * @param {string} name The name of the box. The name must be four\n *                      characters long.\n * @return {number}\n * @private\n */\nshaka.util.Mp4Parser.typeFromString_ = function(name) {\n  goog.asserts.assert(\n      name.length == 4,\n      'Mp4 box names must be 4 characters long');\n\n  let code = 0;\n  for (let i = 0; i < name.length; i++) {\n    code = (code << 8) | name.charCodeAt(i);\n  }\n  return code;\n};\n\n\n/**\n * Convert an integer type from a box into an ascii string name.\n * Useful for debugging.\n *\n * @param {number} type The type of the box, a uint32.\n * @return {string}\n * @export\n */\nshaka.util.Mp4Parser.typeToString = function(type) {\n  let name = String.fromCharCode(\n      (type >> 24) & 0xff,\n      (type >> 16) & 0xff,\n      (type >> 8) & 0xff,\n      type & 0xff);\n  return name;\n};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.media.Mp4SegmentIndexParser');\n\ngoog.require('goog.asserts');\ngoog.require('shaka.log');\ngoog.require('shaka.media.SegmentReference');\ngoog.require('shaka.util.Error');\ngoog.require('shaka.util.Mp4Parser');\n\n\n/**\n * Parses SegmentReferences from an ISO BMFF SIDX structure.\n * @param {!ArrayBuffer} sidxData The MP4's container's SIDX.\n * @param {number} sidxOffset The SIDX's offset, in bytes, from the start of\n *   the MP4 container.\n * @param {!Array.<string>} uris The possible locations of the MP4 file that\n *   contains the segments.\n * @param {number} scaledPresentationTimeOffset\n * @return {!Array.<!shaka.media.SegmentReference>}\n * @throws {shaka.util.Error}\n */\nshaka.media.Mp4SegmentIndexParser = function(\n    sidxData, sidxOffset, uris, scaledPresentationTimeOffset) {\n  const Mp4SegmentIndexParser = shaka.media.Mp4SegmentIndexParser;\n\n  let references;\n\n  let parser = new shaka.util.Mp4Parser()\n      .fullBox('sidx', function(box) {\n        references = Mp4SegmentIndexParser.parseSIDX_(\n            sidxOffset,\n            scaledPresentationTimeOffset,\n            uris,\n            box);\n      });\n\n  if (sidxData) {\n    parser.parse(sidxData);\n  }\n\n  if (references) {\n    return references;\n  } else {\n    shaka.log.error('Invalid box type, expected \"sidx\".');\n    throw new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.MEDIA,\n        shaka.util.Error.Code.MP4_SIDX_WRONG_BOX_TYPE);\n  }\n};\n\n\n/**\n * Parse a SIDX box from the given reader.\n *\n * @param {number} sidxOffset\n * @param {number} scaledPresentationTimeOffset\n * @param {!Array.<string>} uris The possible locations of the MP4 file that\n *   contains the segments.\n * @param {!shaka.extern.ParsedBox} box\n * @return {!Array.<!shaka.media.SegmentReference>}\n * @private\n */\nshaka.media.Mp4SegmentIndexParser.parseSIDX_ = function(\n    sidxOffset,\n    scaledPresentationTimeOffset,\n    uris,\n    box) {\n  goog.asserts.assert(\n      box.version != null,\n      'SIDX is a full box and should have a valid version.');\n\n  let references = [];\n\n  // Parse the SIDX structure.\n  // Skip reference_ID (32 bits).\n  box.reader.skip(4);\n\n  let timescale = box.reader.readUint32();\n\n  if (timescale == 0) {\n    shaka.log.error('Invalid timescale.');\n    throw new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.MEDIA,\n        shaka.util.Error.Code.MP4_SIDX_INVALID_TIMESCALE);\n  }\n\n  let earliestPresentationTime;\n  let firstOffset;\n\n  if (box.version == 0) {\n    earliestPresentationTime = box.reader.readUint32();\n    firstOffset = box.reader.readUint32();\n  } else {\n    earliestPresentationTime = box.reader.readUint64();\n    firstOffset = box.reader.readUint64();\n  }\n\n  // Skip reserved (16 bits).\n  box.reader.skip(2);\n\n  // Add references.\n  let referenceCount = box.reader.readUint16();\n\n  // Substract the presentation time offset\n  let unscaledStartTime = earliestPresentationTime;\n  let startByte = sidxOffset + box.size + firstOffset;\n\n  for (let i = 0; i < referenceCount; i++) {\n    // |chunk| is 1 bit for |referenceType|, and 31 bits for |referenceSize|.\n    let chunk = box.reader.readUint32();\n    let referenceType = (chunk & 0x80000000) >>> 31;\n    let referenceSize = chunk & 0x7FFFFFFF;\n\n    let subsegmentDuration = box.reader.readUint32();\n\n    // Skipping 1 bit for |startsWithSap|, 3 bits for |sapType|, and 28 bits\n    // for |sapDelta|.\n    box.reader.skip(4);\n\n    // If |referenceType| is 1 then the reference is to another SIDX.\n    // We do not support this.\n    if (referenceType == 1) {\n      shaka.log.error('Heirarchical SIDXs are not supported.');\n      throw new shaka.util.Error(\n          shaka.util.Error.Severity.CRITICAL,\n          shaka.util.Error.Category.MEDIA,\n          shaka.util.Error.Code.MP4_SIDX_TYPE_NOT_SUPPORTED);\n    }\n\n    references.push(\n        new shaka.media.SegmentReference(\n            references.length,\n            (unscaledStartTime / timescale) -\n                scaledPresentationTimeOffset,\n            ((unscaledStartTime + subsegmentDuration) / timescale) -\n                scaledPresentationTimeOffset,\n            function() { return uris; },\n            startByte,\n            startByte + referenceSize - 1));\n\n    unscaledStartTime += subsegmentDuration;\n    startByte += referenceSize;\n  }\n\n  box.parser.stop();\n  return references;\n};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.media.SegmentIndex');\n\ngoog.require('goog.asserts');\ngoog.require('shaka.log');\ngoog.require('shaka.media.SegmentReference');\ngoog.require('shaka.util.IDestroyable');\n\n\n/**\n * Creates a SegmentIndex.\n *\n * @param {!Array.<!shaka.media.SegmentReference>} references The list of\n *   SegmentReferences, which must be sorted first by their start times\n *   (ascending) and second by their end times (ascending).  They must have\n *   continuous, increasing positions.\n *\n * @constructor\n * @struct\n * @implements {shaka.util.IDestroyable}\n * @export\n */\nshaka.media.SegmentIndex = function(references) {\n  if (goog.DEBUG) {\n    shaka.media.SegmentIndex.assertCorrectReferences_(references);\n  }\n\n  /** @private {Array.<!shaka.media.SegmentReference>} */\n  this.references_ = references;\n};\n\n\n/**\n * @override\n * @export\n */\nshaka.media.SegmentIndex.prototype.destroy = function() {\n  this.references_ = null;\n  return Promise.resolve();\n};\n\n\n/**\n * Finds the position of the segment for the given time, in seconds, relative\n * to the start of a particular Period.  Returns the position of the segment\n * with the largest end time if more than one segment is known for the given\n * time.\n *\n * @param {number} time\n * @return {?number} The position of the segment, or null\n *   if the position of the segment could not be determined.\n * @export\n */\nshaka.media.SegmentIndex.prototype.find = function(time) {\n  // For live streams, searching from the end is faster.  For VOD, it balances\n  // out either way.  In both cases, references_.length is small enough that the\n  // difference isn't huge.\n  for (let i = this.references_.length - 1; i >= 0; --i) {\n    let r = this.references_[i];\n    // Note that a segment ends immediately before the end time.\n    if ((time >= r.startTime) && (time < r.endTime)) {\n      return r.position;\n    }\n  }\n  if (this.references_.length && time < this.references_[0].startTime) {\n    return this.references_[0].position;\n  }\n\n  return null;\n};\n\n\n/**\n * Gets the SegmentReference for the segment at the given position.\n *\n * @param {number} position The position of the segment.\n * @return {shaka.media.SegmentReference} The SegmentReference, or null if\n *   no such SegmentReference exists.\n * @export\n */\nshaka.media.SegmentIndex.prototype.get = function(position) {\n  if (this.references_.length == 0) {\n    return null;\n  }\n\n  let index = position - this.references_[0].position;\n  if (index < 0 || index >= this.references_.length) {\n    return null;\n  }\n\n  return this.references_[index];\n};\n\n\n/**\n * Offset all segment references by a fixed amount.\n *\n * @param {number} offset The amount to add to each segment's start and end\n *   times.\n * @export\n */\nshaka.media.SegmentIndex.prototype.offset = function(offset) {\n  for (let i = 0; i < this.references_.length; ++i) {\n    this.references_[i].startTime += offset;\n    this.references_[i].endTime += offset;\n  }\n};\n\n\n/**\n * Merges the given SegmentReferences.  Supports extending the original\n * references only.  Will not replace old references or interleave new ones.\n *\n * @param {!Array.<!shaka.media.SegmentReference>} references The list of\n *   SegmentReferences, which must be sorted first by their start times\n *   (ascending) and second by their end times (ascending).  They must have\n *   continuous, increasing positions.\n * @export\n */\nshaka.media.SegmentIndex.prototype.merge = function(references) {\n  if (goog.DEBUG) {\n    shaka.media.SegmentIndex.assertCorrectReferences_(references);\n  }\n\n  let newReferences = [];\n  let i = 0;\n  let j = 0;\n\n  while ((i < this.references_.length) && (j < references.length)) {\n    let r1 = this.references_[i];\n    let r2 = references[j];\n\n    if (r1.startTime < r2.startTime) {\n      newReferences.push(r1);\n      i++;\n    } else if (r1.startTime > r2.startTime) {\n      if (i == 0) {\n        // If the reference appears before any existing reference, it may have\n        // been evicted before; in this case, simply add it back and it will be\n        // evicted again later.\n        newReferences.push(r2);\n      } else {\n        // Drop the new reference if it would have to be interleaved with the\n        // old one.  Issue a warning, since this is not a supported update.\n        shaka.log.warning('Refusing to rewrite original references on update!');\n      }\n      j++;\n    } else {\n      // When period is changed, fit() will expand the last segment to the start\n      // of the next period.  So, it is valid to have end time updated to the\n      // last segment reference in a period.\n      if (Math.abs(r1.endTime - r2.endTime) > 0.1) {\n        goog.asserts.assert(r2.endTime > r1.endTime &&\n            i == this.references_.length - 1 &&\n            j == references.length - 1,\n            'This should be an update of the last segment in a period');\n        let r = new shaka.media.SegmentReference(r1.position,\n            r2.startTime, r2.endTime, r2.getUris, r2.startByte, r2.endByte);\n        newReferences.push(r);\n      } else {\n        // Drop the new reference if there's an old reference with the\n        // same time.\n        newReferences.push(r1);\n      }\n      i++;\n      j++;\n    }\n  }\n\n  while (i < this.references_.length) {\n    newReferences.push(this.references_[i++]);\n  }\n\n  if (newReferences.length) {\n    // The rest of these references may need to be renumbered.\n    let nextPosition = newReferences[newReferences.length - 1].position + 1;\n    while (j < references.length) {\n      let r = references[j++];\n      let r2 = new shaka.media.SegmentReference(nextPosition++,\n          r.startTime, r.endTime, r.getUris, r.startByte, r.endByte);\n      newReferences.push(r2);\n    }\n  } else {\n    newReferences = references;\n  }\n\n  if (goog.DEBUG) {\n    shaka.media.SegmentIndex.assertCorrectReferences_(newReferences);\n  }\n\n  this.references_ = newReferences;\n};\n\n\n/**\n * Replace existing references with new ones, without merging.\n *\n * @param {!Array.<!shaka.media.SegmentReference>} newReferences\n */\nshaka.media.SegmentIndex.prototype.replace = function(newReferences) {\n  if (goog.DEBUG) {\n    shaka.media.SegmentIndex.assertCorrectReferences_(newReferences);\n  }\n  this.references_ = newReferences;\n};\n\n\n/**\n * Removes all SegmentReferences that end before the given time.\n *\n * @param {number} time The time in seconds.\n * @export\n */\nshaka.media.SegmentIndex.prototype.evict = function(time) {\n  for (let i = 0; i < this.references_.length; ++i) {\n    if (this.references_[i].endTime > time) {\n      this.references_.splice(0, i);\n      return;\n    }\n  }\n  this.references_ = [];\n};\n\n\n/**\n * Expands the first SegmentReference so it begins at the start of its Period\n * if it already begins close to the start of its Period.\n *\n * Also expands or contracts the last SegmentReference so it ends at the end of\n * its Period.\n *\n * Do not call on the last period of a live presentation (unknown duration).\n * It is okay to call on the other periods of a live presentation, where the\n * duration is known and another period has been added.\n *\n * @param {?number} periodDuration\n */\nshaka.media.SegmentIndex.prototype.fit = function(periodDuration) {\n  goog.asserts.assert(periodDuration != null,\n                      'Period duration must be known for static content!');\n  goog.asserts.assert(periodDuration != Infinity,\n                      'Period duration must be finite for static content!');\n\n  // Trim out references we will never use.\n  while (this.references_.length) {\n    let lastReference = this.references_[this.references_.length - 1];\n    if (lastReference.startTime >= periodDuration) {\n      this.references_.pop();\n    } else {\n      break;\n    }\n  }\n  while (this.references_.length) {\n    let firstReference = this.references_[0];\n    if (firstReference.endTime <= 0) {\n      this.references_.shift();\n    } else {\n      break;\n    }\n  }\n\n  if (this.references_.length == 0) {\n    return;\n  }\n\n  // Adjust the last SegmentReference.\n  let lastReference = this.references_[this.references_.length - 1];\n  this.references_[this.references_.length - 1] =\n      new shaka.media.SegmentReference(\n          lastReference.position,\n          lastReference.startTime,\n          /* endTime */ periodDuration,\n          lastReference.getUris,\n          lastReference.startByte,\n          lastReference.endByte);\n};\n\n\nif (goog.DEBUG) {\n  /**\n   * Asserts that the given SegmentReferences are sorted and have continuous,\n   * increasing positions.\n   *\n   * @param {!Array.<shaka.media.SegmentReference>} references\n   * @private\n   */\n  shaka.media.SegmentIndex.assertCorrectReferences_ = function(references) {\n    goog.asserts.assert(references.every(function(r2, i) {\n      if (i == 0) return true;\n      let r1 = references[i - 1];\n      if (r2.position != r1.position + 1) return false;\n      if (r1.startTime < r2.startTime) {\n        return true;\n      } else if (r1.startTime > r2.startTime) {\n        return false;\n      } else {\n        if (r1.endTime <= r2.endTime) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n    }), 'SegmentReferences are incorrect');\n  };\n}\n\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.util.EbmlElement');\ngoog.provide('shaka.util.EbmlParser');\n\ngoog.require('shaka.util.DataViewReader');\ngoog.require('shaka.util.Error');\ngoog.require('shaka.util.Uint8ArrayUtils');\n\n\n/**\n * Creates an Extensible Binary Markup Language (EBML) parser.\n * @param {!DataView} dataView The EBML data.\n * @constructor\n * @struct\n */\nshaka.util.EbmlParser = function(dataView) {\n  /** @private {!DataView} */\n  this.dataView_ = dataView;\n\n  /** @private {!shaka.util.DataViewReader} */\n  this.reader_ = new shaka.util.DataViewReader(\n      dataView,\n      shaka.util.DataViewReader.Endianness.BIG_ENDIAN);\n\n  // If not already constructed, build a list of EBML dynamic size constants.\n  // This is not done at load-time to avoid exceptions on unsupported browsers.\n  if (!shaka.util.EbmlParser.DYNAMIC_SIZES) {\n    shaka.util.EbmlParser.DYNAMIC_SIZES = [\n      new Uint8Array([0xff]),\n      new Uint8Array([0x7f, 0xff]),\n      new Uint8Array([0x3f, 0xff, 0xff]),\n      new Uint8Array([0x1f, 0xff, 0xff, 0xff]),\n      new Uint8Array([0x0f, 0xff, 0xff, 0xff, 0xff]),\n      new Uint8Array([0x07, 0xff, 0xff, 0xff, 0xff, 0xff]),\n      new Uint8Array([0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]),\n      new Uint8Array([0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]),\n    ];\n  }\n};\n\n\n/** @const {!Array.<!Uint8Array>} */\nshaka.util.EbmlParser.DYNAMIC_SIZES;\n\n\n/**\n * @return {boolean} True if the parser has more data, false otherwise.\n */\nshaka.util.EbmlParser.prototype.hasMoreData = function() {\n  return this.reader_.hasMoreData();\n};\n\n\n/**\n * Parses an EBML element from the parser's current position, and advances\n * the parser.\n * @return {!shaka.util.EbmlElement} The EBML element.\n * @throws {shaka.util.Error}\n * @see http://matroska.org/technical/specs/rfc/index.html\n */\nshaka.util.EbmlParser.prototype.parseElement = function() {\n  let id = this.parseId_();\n\n  // Parse the element's size.\n  let vint = this.parseVint_();\n  let size;\n  if (shaka.util.EbmlParser.isDynamicSizeValue_(vint)) {\n    // If this has an unknown size, assume that it takes up the rest of the\n    // data.\n    size = this.dataView_.byteLength - this.reader_.getPosition();\n  } else {\n    size = shaka.util.EbmlParser.getVintValue_(vint);\n  }\n\n  // Note that if the element's size is larger than the buffer then we are\n  // parsing a \"partial element\". This may occur if for example we are\n  // parsing the beginning of some WebM container data, but our buffer does\n  // not contain the entire WebM container data.\n  let elementSize =\n      this.reader_.getPosition() + size <= this.dataView_.byteLength ?\n      size :\n      this.dataView_.byteLength - this.reader_.getPosition();\n\n  let dataView = new DataView(\n      this.dataView_.buffer,\n      this.dataView_.byteOffset + this.reader_.getPosition(), elementSize);\n\n  this.reader_.skip(elementSize);\n\n  return new shaka.util.EbmlElement(id, dataView);\n};\n\n\n/**\n * Parses an EBML ID from the parser's current position, and advances the\n * parser.\n * @throws {shaka.util.Error}\n * @return {number} The EBML ID.\n * @private\n */\nshaka.util.EbmlParser.prototype.parseId_ = function() {\n  let vint = this.parseVint_();\n\n  if (vint.length > 7) {\n    throw new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.MEDIA,\n        shaka.util.Error.Code.EBML_OVERFLOW);\n  }\n\n  let id = 0;\n  for (let i = 0; i < vint.length; i++) {\n    // Note that we cannot use << since |value| may exceed 32 bits.\n    id = (256 * id) + vint[i];\n  }\n\n  return id;\n};\n\n\n/**\n * Parses a variable sized integer from the parser's current position, and\n * advances the parser.\n * For example:\n *   1 byte  wide: 1xxx xxxx\n *   2 bytes wide: 01xx xxxx xxxx xxxx\n *   3 bytes wide: 001x xxxx xxxx xxxx xxxx xxxx\n * @throws {shaka.util.Error}\n * @return {!Uint8Array} The variable sized integer.\n * @private\n */\nshaka.util.EbmlParser.prototype.parseVint_ = function() {\n  let firstByte = this.reader_.readUint8();\n  let numBytes;\n\n  // Determine the byte width of the variable sized integer.\n  for (numBytes = 1; numBytes <= 8; numBytes++) {\n    let mask = 0x1 << (8 - numBytes);\n    if (firstByte & mask) {\n      break;\n    }\n  }\n\n  if (numBytes > 8) {\n    throw new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.MEDIA,\n        shaka.util.Error.Code.EBML_OVERFLOW);\n  }\n\n  let vint = new Uint8Array(numBytes);\n  vint[0] = firstByte;\n\n  // Include the remaining bytes.\n  for (let i = 1; i < numBytes; i++) {\n    vint[i] = this.reader_.readUint8();\n  }\n\n  return vint;\n};\n\n\n/**\n * Gets the value of a variable sized integer.\n * For example, the x's below are part of the vint's value.\n *    7-bit value: 1xxx xxxx\n *   14-bit value: 01xx xxxx xxxx xxxx\n *   21-bit value: 001x xxxx xxxx xxxx xxxx xxxx\n * @param {!Uint8Array} vint The variable sized integer.\n * @throws {shaka.util.Error}\n * @return {number} The value of the variable sized integer.\n * @private\n */\nshaka.util.EbmlParser.getVintValue_ = function(vint) {\n  // If |vint| is 8 bytes wide then we must ensure that it does not have more\n  // than 53 meaningful bits. For example, assume |vint| is 8 bytes wide,\n  // so it has the following structure,\n  // 0000 0001 | xxxx xxxx ...\n  // Thus, the first 3 bits following the first byte of |vint| must be 0.\n  if ((vint.length == 8) && (vint[1] & 0xe0)) {\n    throw new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.MEDIA,\n        shaka.util.Error.Code.JS_INTEGER_OVERFLOW);\n  }\n\n  // Mask out the first few bits of |vint|'s first byte to get the most\n  // significant bits of |vint|'s value. If |vint| is 8 bytes wide then |value|\n  // will be set to 0.\n  let mask = 0x1 << (8 - vint.length);\n  let value = vint[0] & (mask - 1);\n\n  // Add the remaining bytes.\n  for (let i = 1; i < vint.length; i++) {\n    // Note that we cannot use << since |value| may exceed 32 bits.\n    value = (256 * value) + vint[i];\n  }\n\n  return value;\n};\n\n\n/**\n * Checks if the given variable sized integer represents a dynamic size value.\n * @param {!Uint8Array} vint The variable sized integer.\n * @return {boolean} true if |vint| represents a dynamic size value,\n *   false otherwise.\n * @private\n */\nshaka.util.EbmlParser.isDynamicSizeValue_ = function(vint) {\n  const EbmlParser = shaka.util.EbmlParser;\n  let uint8ArrayEqual = shaka.util.Uint8ArrayUtils.equal;\n\n  for (let i = 0; i < EbmlParser.DYNAMIC_SIZES.length; i++) {\n    if (uint8ArrayEqual(vint, EbmlParser.DYNAMIC_SIZES[i])) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\n\n/**\n * Creates an EbmlElement.\n * @param {number} id The ID.\n * @param {!DataView} dataView The DataView.\n * @constructor\n */\nshaka.util.EbmlElement = function(id, dataView) {\n  /** @type {number} */\n  this.id = id;\n\n  /** @private {!DataView} */\n  this.dataView_ = dataView;\n};\n\n\n/**\n * Gets the element's offset from the beginning of the buffer.\n * @return {number}\n */\nshaka.util.EbmlElement.prototype.getOffset = function() {\n  return this.dataView_.byteOffset;\n};\n\n\n/**\n * Interpret the element's data as a list of sub-elements.\n * @throws {shaka.util.Error}\n * @return {!shaka.util.EbmlParser} A parser over the sub-elements.\n */\nshaka.util.EbmlElement.prototype.createParser = function() {\n  return new shaka.util.EbmlParser(this.dataView_);\n};\n\n\n/**\n * Interpret the element's data as an unsigned integer.\n * @throws {shaka.util.Error}\n * @return {number}\n */\nshaka.util.EbmlElement.prototype.getUint = function() {\n  if (this.dataView_.byteLength > 8) {\n    throw new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.MEDIA,\n        shaka.util.Error.Code.EBML_OVERFLOW);\n  }\n\n  // Ensure we have at most 53 meaningful bits.\n  if ((this.dataView_.byteLength == 8) && (this.dataView_.getUint8(0) & 0xe0)) {\n    throw new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.MEDIA,\n        shaka.util.Error.Code.JS_INTEGER_OVERFLOW);\n  }\n\n  let value = 0;\n\n  for (let i = 0; i < this.dataView_.byteLength; i++) {\n    let chunk = this.dataView_.getUint8(i);\n    value = (256 * value) + chunk;\n  }\n\n  return value;\n};\n\n\n/**\n * Interpret the element's data as a floating point number (32 bits or 64 bits).\n * 80-bit floating point numbers are not supported.\n * @throws {shaka.util.Error}\n * @return {number}\n */\nshaka.util.EbmlElement.prototype.getFloat = function() {\n  if (this.dataView_.byteLength == 4) {\n    return this.dataView_.getFloat32(0);\n  } else if (this.dataView_.byteLength == 8) {\n    return this.dataView_.getFloat64(0);\n  } else {\n    throw new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.MEDIA,\n        shaka.util.Error.Code.EBML_BAD_FLOATING_POINT_SIZE);\n  }\n};\n\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.media.WebmSegmentIndexParser');\n\ngoog.require('goog.asserts');\ngoog.require('shaka.log');\ngoog.require('shaka.media.SegmentReference');\ngoog.require('shaka.util.EbmlElement');\ngoog.require('shaka.util.EbmlParser');\ngoog.require('shaka.util.Error');\n\n\n/**\n * Creates a WebM Cues element parser.\n *\n * @constructor\n * @struct\n */\nshaka.media.WebmSegmentIndexParser = function() {};\n\n\n/** @const {number} */\nshaka.media.WebmSegmentIndexParser.EBML_ID = 0x1a45dfa3;\n\n\n/** @const {number} */\nshaka.media.WebmSegmentIndexParser.SEGMENT_ID = 0x18538067;\n\n\n/** @const {number} */\nshaka.media.WebmSegmentIndexParser.INFO_ID = 0x1549a966;\n\n\n/** @const {number} */\nshaka.media.WebmSegmentIndexParser.TIMECODE_SCALE_ID = 0x2ad7b1;\n\n\n/** @const {number} */\nshaka.media.WebmSegmentIndexParser.DURATION_ID = 0x4489;\n\n\n/** @const {number} */\nshaka.media.WebmSegmentIndexParser.CUES_ID = 0x1c53bb6b;\n\n\n/** @const {number} */\nshaka.media.WebmSegmentIndexParser.CUE_POINT_ID = 0xbb;\n\n\n/** @const {number} */\nshaka.media.WebmSegmentIndexParser.CUE_TIME_ID = 0xb3;\n\n\n/** @const {number} */\nshaka.media.WebmSegmentIndexParser.CUE_TRACK_POSITIONS_ID = 0xb7;\n\n\n/** @const {number} */\nshaka.media.WebmSegmentIndexParser.CUE_CLUSTER_POSITION = 0xf1;\n\n\n/**\n * Parses SegmentReferences from a WebM container.\n * @param {!ArrayBuffer} cuesData The WebM container's \"Cueing Data\" section.\n * @param {!ArrayBuffer} initData The WebM container's headers.\n * @param {!Array.<string>} uris The possible locations of the WebM file that\n *   contains the segments.\n * @param {number} scaledPresentationTimeOffset\n\n * @return {!Array.<!shaka.media.SegmentReference>}\n * @throws {shaka.util.Error}\n * @see http://www.matroska.org/technical/specs/index.html\n * @see http://www.webmproject.org/docs/container/\n */\nshaka.media.WebmSegmentIndexParser.prototype.parse = function(\n    cuesData, initData, uris, scaledPresentationTimeOffset) {\n  let tuple = this.parseWebmContainer_(initData);\n  let parser = new shaka.util.EbmlParser(new DataView(cuesData));\n  let cuesElement = parser.parseElement();\n  if (cuesElement.id != shaka.media.WebmSegmentIndexParser.CUES_ID) {\n    shaka.log.error('Not a Cues element.');\n    throw new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.MEDIA,\n        shaka.util.Error.Code.WEBM_CUES_ELEMENT_MISSING);\n  }\n\n  return this.parseCues_(\n      cuesElement, tuple.segmentOffset, tuple.timecodeScale, tuple.duration,\n      uris, scaledPresentationTimeOffset);\n};\n\n\n/**\n * Parses a WebM container to get the segment's offset, timecode scale, and\n * duration.\n *\n * @param {!ArrayBuffer} initData\n * @return {{segmentOffset: number, timecodeScale: number, duration: number}}\n *   The segment's offset in bytes, the segment's timecode scale in seconds,\n *   and the duration in seconds.\n * @throws {shaka.util.Error}\n * @private\n */\nshaka.media.WebmSegmentIndexParser.prototype.parseWebmContainer_ = function(\n    initData) {\n  let parser = new shaka.util.EbmlParser(new DataView(initData));\n\n  // Check that the WebM container data starts with the EBML header, but\n  // skip its contents.\n  let ebmlElement = parser.parseElement();\n  if (ebmlElement.id != shaka.media.WebmSegmentIndexParser.EBML_ID) {\n    shaka.log.error('Not an EBML element.');\n    throw new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.MEDIA,\n        shaka.util.Error.Code.WEBM_EBML_HEADER_ELEMENT_MISSING);\n  }\n\n  let segmentElement = parser.parseElement();\n  if (segmentElement.id != shaka.media.WebmSegmentIndexParser.SEGMENT_ID) {\n    shaka.log.error('Not a Segment element.');\n    throw new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.MEDIA,\n        shaka.util.Error.Code.WEBM_SEGMENT_ELEMENT_MISSING);\n  }\n\n  // This value is used as the initial offset to the first referenced segment.\n  let segmentOffset = segmentElement.getOffset();\n\n  // Parse the Segment element to get the segment info.\n  let segmentInfo = this.parseSegment_(segmentElement);\n  return {\n    segmentOffset: segmentOffset,\n    timecodeScale: segmentInfo.timecodeScale,\n    duration: segmentInfo.duration,\n  };\n};\n\n\n/**\n * Parses a WebM Info element to get the segment's timecode scale and duration.\n * @param {!shaka.util.EbmlElement} segmentElement\n * @return {{timecodeScale: number, duration: number}} The segment's timecode\n *   scale in seconds and duration in seconds.\n * @throws {shaka.util.Error}\n * @private\n */\nshaka.media.WebmSegmentIndexParser.prototype.parseSegment_ = function(\n    segmentElement) {\n  let parser = segmentElement.createParser();\n\n  // Find the Info element.\n  let infoElement = null;\n  while (parser.hasMoreData()) {\n    let elem = parser.parseElement();\n    if (elem.id != shaka.media.WebmSegmentIndexParser.INFO_ID) {\n      continue;\n    }\n\n    infoElement = elem;\n\n    break;\n  }\n\n  if (!infoElement) {\n    shaka.log.error('Not an Info element.');\n    throw new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.MEDIA,\n        shaka.util.Error.Code.WEBM_INFO_ELEMENT_MISSING);\n  }\n\n  return this.parseInfo_(infoElement);\n};\n\n\n/**\n * Parses a WebM Info element to get the segment's timecode scale and duration.\n * @param {!shaka.util.EbmlElement} infoElement\n * @return {{timecodeScale: number, duration: number}} The segment's timecode\n *   scale in seconds and duration in seconds.\n * @throws {shaka.util.Error}\n * @private\n */\nshaka.media.WebmSegmentIndexParser.prototype.parseInfo_ = function(\n    infoElement) {\n  let parser = infoElement.createParser();\n\n  // The timecode scale factor in units of [nanoseconds / T], where [T] are the\n  // units used to express all other time values in the WebM container. By\n  // default it's assumed that [T] == [milliseconds].\n  let timecodeScaleNanoseconds = 1000000;\n  /** @type {?number} */\n  let durationScale = null;\n\n  while (parser.hasMoreData()) {\n    let elem = parser.parseElement();\n    if (elem.id == shaka.media.WebmSegmentIndexParser.TIMECODE_SCALE_ID) {\n      timecodeScaleNanoseconds = elem.getUint();\n    } else if (elem.id == shaka.media.WebmSegmentIndexParser.DURATION_ID) {\n      durationScale = elem.getFloat();\n    }\n  }\n  if (durationScale == null) {\n    throw new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.MEDIA,\n        shaka.util.Error.Code.WEBM_DURATION_ELEMENT_MISSING);\n  }\n\n  // The timecode scale factor in units of [seconds / T].\n  let timecodeScale = timecodeScaleNanoseconds / 1000000000;\n  // The duration is stored in units of [T]\n  let durationSeconds = durationScale * timecodeScale;\n\n  return {timecodeScale: timecodeScale, duration: durationSeconds};\n};\n\n\n/**\n * Parses a WebM CuesElement.\n * @param {!shaka.util.EbmlElement} cuesElement\n * @param {number} segmentOffset\n * @param {number} timecodeScale\n * @param {number} duration\n * @param {!Array.<string>} uris\n * @param {number} scaledPresentationTimeOffset\n * @return {!Array.<!shaka.media.SegmentReference>}\n * @throws {shaka.util.Error}\n * @private\n */\nshaka.media.WebmSegmentIndexParser.prototype.parseCues_ = function(\n    cuesElement, segmentOffset, timecodeScale, duration, uris,\n    scaledPresentationTimeOffset) {\n  let references = [];\n  let getUris = function() { return uris; };\n\n  let parser = cuesElement.createParser();\n\n  let lastTime = null;\n  let lastOffset = null;\n\n  while (parser.hasMoreData()) {\n    let elem = parser.parseElement();\n    if (elem.id != shaka.media.WebmSegmentIndexParser.CUE_POINT_ID) {\n      continue;\n    }\n\n    let tuple = this.parseCuePoint_(elem);\n    if (!tuple) {\n      continue;\n    }\n\n    // Substract the presentation time offset from the unscaled time\n    let currentTime = timecodeScale * tuple.unscaledTime;\n    let currentOffset = segmentOffset + tuple.relativeOffset;\n\n    if (lastTime != null) {\n      goog.asserts.assert(lastOffset != null, 'last offset cannot be null');\n\n      references.push(\n          new shaka.media.SegmentReference(\n              references.length,\n              lastTime - scaledPresentationTimeOffset,\n              currentTime - scaledPresentationTimeOffset,\n              getUris,\n              lastOffset, currentOffset - 1));\n    }\n\n    lastTime = currentTime;\n    lastOffset = currentOffset;\n  }\n\n  if (lastTime != null) {\n    goog.asserts.assert(lastOffset != null, 'last offset cannot be null');\n\n    references.push(\n        new shaka.media.SegmentReference(\n            references.length,\n            lastTime - scaledPresentationTimeOffset,\n            duration - scaledPresentationTimeOffset,\n            getUris,\n            lastOffset, null));\n  }\n\n  return references;\n};\n\n\n/**\n * Parses a WebM CuePointElement to get an \"unadjusted\" segment reference.\n * @param {shaka.util.EbmlElement} cuePointElement\n * @return {{unscaledTime: number, relativeOffset: number}} The referenced\n *   segment's start time in units of [T] (see parseInfo_()), and the\n *   referenced segment's offset in bytes, relative to a WebM Segment\n *   element.\n * @throws {shaka.util.Error}\n * @private\n */\nshaka.media.WebmSegmentIndexParser.prototype.parseCuePoint_ = function(\n    cuePointElement) {\n  let parser = cuePointElement.createParser();\n\n  // Parse CueTime element.\n  let cueTimeElement = parser.parseElement();\n  if (cueTimeElement.id != shaka.media.WebmSegmentIndexParser.CUE_TIME_ID) {\n    shaka.log.warning('Not a CueTime element.');\n    throw new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.MEDIA,\n        shaka.util.Error.Code.WEBM_CUE_TIME_ELEMENT_MISSING);\n  }\n  let unscaledTime = cueTimeElement.getUint();\n\n  // Parse CueTrackPositions element.\n  let cueTrackPositionsElement = parser.parseElement();\n  if (cueTrackPositionsElement.id !=\n      shaka.media.WebmSegmentIndexParser.CUE_TRACK_POSITIONS_ID) {\n    shaka.log.warning('Not a CueTrackPositions element.');\n    throw new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.MEDIA,\n        shaka.util.Error.Code.WEBM_CUE_TRACK_POSITIONS_ELEMENT_MISSING);\n  }\n\n  let cueTrackParser = cueTrackPositionsElement.createParser();\n  let relativeOffset = 0;\n\n  while (cueTrackParser.hasMoreData()) {\n    let elem = cueTrackParser.parseElement();\n    if (elem.id != shaka.media.WebmSegmentIndexParser.CUE_CLUSTER_POSITION) {\n      continue;\n    }\n\n    relativeOffset = elem.getUint();\n    break;\n  }\n\n  return {unscaledTime: unscaledTime, relativeOffset: relativeOffset};\n};\n\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.dash.SegmentBase');\n\ngoog.require('goog.asserts');\ngoog.require('shaka.dash.MpdUtils');\ngoog.require('shaka.log');\ngoog.require('shaka.media.InitSegmentReference');\ngoog.require('shaka.media.Mp4SegmentIndexParser');\ngoog.require('shaka.media.SegmentIndex');\ngoog.require('shaka.media.WebmSegmentIndexParser');\ngoog.require('shaka.util.Error');\ngoog.require('shaka.util.ManifestParserUtils');\ngoog.require('shaka.util.XmlUtils');\n\n\n/**\n * @namespace shaka.dash.SegmentBase\n * @summary A set of functions for parsing SegmentBase elements.\n */\n\n\n/**\n * Creates an init segment reference from a Context object.\n *\n * @param {shaka.dash.DashParser.Context} context\n * @param {function(?shaka.dash.DashParser.InheritanceFrame):Element} callback\n * @return {shaka.media.InitSegmentReference}\n */\nshaka.dash.SegmentBase.createInitSegment = function(context, callback) {\n  const MpdUtils = shaka.dash.MpdUtils;\n  const XmlUtils = shaka.util.XmlUtils;\n  const ManifestParserUtils = shaka.util.ManifestParserUtils;\n\n  let initialization =\n      MpdUtils.inheritChild(context, callback, 'Initialization');\n  if (!initialization) {\n    return null;\n  }\n\n  let resolvedUris = context.representation.baseUris;\n  let uri = initialization.getAttribute('sourceURL');\n  if (uri) {\n    resolvedUris =\n        ManifestParserUtils.resolveUris(context.representation.baseUris, [uri]);\n  }\n\n  let startByte = 0;\n  let endByte = null;\n  let range = XmlUtils.parseAttr(initialization, 'range', XmlUtils.parseRange);\n  if (range) {\n    startByte = range.start;\n    endByte = range.end;\n  }\n\n  let getUris = function() { return resolvedUris; };\n  return new shaka.media.InitSegmentReference(getUris, startByte, endByte);\n};\n\n\n/**\n * Creates a new Stream object.\n *\n * @param {shaka.dash.DashParser.Context} context\n * @param {shaka.dash.DashParser.RequestInitSegmentCallback} requestInitSegment\n * @throws shaka.util.Error When there is a parsing error.\n * @return {shaka.dash.DashParser.StreamInfo}\n */\nshaka.dash.SegmentBase.createStream = function(context, requestInitSegment) {\n  goog.asserts.assert(context.representation.segmentBase,\n                      'Should only be called with SegmentBase');\n  // Since SegmentBase does not need updates, simply treat any call as\n  // the initial parse.\n  const MpdUtils = shaka.dash.MpdUtils;\n  const SegmentBase = shaka.dash.SegmentBase;\n  const XmlUtils = shaka.util.XmlUtils;\n\n  let unscaledPresentationTimeOffset = Number(MpdUtils.inheritAttribute(\n      context, SegmentBase.fromInheritance_, 'presentationTimeOffset')) || 0;\n\n  let timescaleStr = MpdUtils.inheritAttribute(\n      context, SegmentBase.fromInheritance_, 'timescale');\n  let timescale = 1;\n  if (timescaleStr) {\n    timescale = XmlUtils.parsePositiveInt(timescaleStr) || 1;\n  }\n\n  let scaledPresentationTimeOffset =\n      (unscaledPresentationTimeOffset / timescale) || 0;\n\n  let init =\n      SegmentBase.createInitSegment(context, SegmentBase.fromInheritance_);\n  let index = SegmentBase.createSegmentIndex_(\n      context, requestInitSegment, init, scaledPresentationTimeOffset);\n\n  return {\n    createSegmentIndex: index.createSegmentIndex,\n    findSegmentPosition: index.findSegmentPosition,\n    getSegmentReference: index.getSegmentReference,\n    initSegmentReference: init,\n    scaledPresentationTimeOffset: scaledPresentationTimeOffset,\n  };\n};\n\n\n/**\n * Creates segment index info for the given info.\n *\n * @param {shaka.dash.DashParser.Context} context\n * @param {shaka.dash.DashParser.RequestInitSegmentCallback} requestInitSegment\n * @param {shaka.media.InitSegmentReference} init\n * @param {!Array.<string>} uris\n * @param {number} startByte\n * @param {?number} endByte\n * @param {string} containerType\n * @param {number} scaledPresentationTimeOffset\n * @return {shaka.dash.DashParser.SegmentIndexFunctions}\n */\nshaka.dash.SegmentBase.createSegmentIndexFromUris = function(\n    context, requestInitSegment, init, uris,\n    startByte, endByte, containerType, scaledPresentationTimeOffset) {\n  let presentationTimeline = context.presentationTimeline;\n  let fitLast = !context.dynamic || !context.periodInfo.isLastPeriod;\n  let periodStart = context.periodInfo.start;\n  let periodDuration = context.periodInfo.duration;\n\n  // Create a local variable to bind to so we can set to null to help the GC.\n  let localRequest = requestInitSegment;\n  let segmentIndex = null;\n  let create = function() {\n    let async = [\n      localRequest(uris, startByte, endByte),\n      containerType == 'webm' ?\n          localRequest(init.getUris(), init.startByte, init.endByte) :\n          null,\n    ];\n\n    localRequest = null;\n    return Promise.all(async).then(function(results) {\n      let indexData = results[0];\n      let initData = results[1] || null;\n      let references = null;\n\n      if (containerType == 'mp4') {\n        // eslint-disable-next-line new-cap\n        references = shaka.media.Mp4SegmentIndexParser(\n            indexData, startByte, uris, scaledPresentationTimeOffset);\n      } else {\n        goog.asserts.assert(initData, 'WebM requires init data');\n        let parser = new shaka.media.WebmSegmentIndexParser();\n        references = parser.parse(indexData, initData, uris,\n            scaledPresentationTimeOffset);\n      }\n\n      presentationTimeline.notifySegments(references, periodStart);\n\n      // Since containers are never updated, we don't need to store the\n      // segmentIndex in the map.\n      goog.asserts.assert(!segmentIndex,\n                          'Should not call createSegmentIndex twice');\n\n      segmentIndex = new shaka.media.SegmentIndex(references);\n      if (fitLast) {\n        segmentIndex.fit(periodDuration);\n      }\n    });\n  };\n  let get = function(i) {\n    goog.asserts.assert(segmentIndex, 'Must call createSegmentIndex first');\n    return segmentIndex.get(i);\n  };\n  let find = function(t) {\n    goog.asserts.assert(segmentIndex, 'Must call createSegmentIndex first');\n    return segmentIndex.find(t);\n  };\n\n  return {\n    createSegmentIndex: create,\n    findSegmentPosition: find,\n    getSegmentReference: get,\n  };\n};\n\n\n/**\n * @param {?shaka.dash.DashParser.InheritanceFrame} frame\n * @return {Element}\n * @private\n */\nshaka.dash.SegmentBase.fromInheritance_ = function(frame) {\n  return frame.segmentBase;\n};\n\n\n/**\n * Creates segment index info from a Context object.\n *\n * @param {shaka.dash.DashParser.Context} context\n * @param {shaka.dash.DashParser.RequestInitSegmentCallback} requestInitSegment\n * @param {shaka.media.InitSegmentReference} init\n * @param {number} scaledPresentationTimeOffset\n * @return {shaka.dash.DashParser.SegmentIndexFunctions}\n * @throws shaka.util.Error When there is a parsing error.\n * @private\n */\nshaka.dash.SegmentBase.createSegmentIndex_ = function(\n    context, requestInitSegment, init, scaledPresentationTimeOffset) {\n  const MpdUtils = shaka.dash.MpdUtils;\n  const SegmentBase = shaka.dash.SegmentBase;\n  const XmlUtils = shaka.util.XmlUtils;\n  const ManifestParserUtils = shaka.util.ManifestParserUtils;\n  const ContentType = shaka.util.ManifestParserUtils.ContentType;\n\n  let contentType = context.representation.contentType;\n  let containerType = context.representation.mimeType.split('/')[1];\n  if (contentType != ContentType.TEXT && containerType != 'mp4' &&\n      containerType != 'webm') {\n    shaka.log.error(\n        'SegmentBase specifies an unsupported container type.',\n        context.representation);\n    throw new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.MANIFEST,\n        shaka.util.Error.Code.DASH_UNSUPPORTED_CONTAINER);\n  }\n\n  if ((containerType == 'webm') && !init) {\n    shaka.log.error(\n        'SegmentBase does not contain sufficient segment information:',\n        'the SegmentBase uses a WebM container,',\n        'but does not contain an Initialization element.',\n        context.representation);\n    throw new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.MANIFEST,\n        shaka.util.Error.Code.DASH_WEBM_MISSING_INIT);\n  }\n\n  let representationIndex = MpdUtils.inheritChild(\n      context, SegmentBase.fromInheritance_, 'RepresentationIndex');\n  let indexRangeElem = MpdUtils.inheritAttribute(\n      context, SegmentBase.fromInheritance_, 'indexRange');\n\n  let indexUris = context.representation.baseUris;\n  let indexRange = XmlUtils.parseRange(indexRangeElem || '');\n  if (representationIndex) {\n    let representationUri = representationIndex.getAttribute('sourceURL');\n    if (representationUri) {\n      indexUris = ManifestParserUtils.resolveUris(\n          context.representation.baseUris, [representationUri]);\n    }\n\n    indexRange = XmlUtils.parseAttr(\n        representationIndex, 'range', XmlUtils.parseRange, indexRange);\n  }\n\n  if (!indexRange) {\n    shaka.log.error(\n        'SegmentBase does not contain sufficient segment information:',\n        'the SegmentBase does not contain @indexRange',\n        'or a RepresentationIndex element.',\n        context.representation);\n    throw new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.MANIFEST,\n        shaka.util.Error.Code.DASH_NO_SEGMENT_INFO);\n  }\n\n  return shaka.dash.SegmentBase.createSegmentIndexFromUris(\n      context, requestInitSegment, init, indexUris, indexRange.start,\n      indexRange.end, containerType, scaledPresentationTimeOffset);\n};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.dash.SegmentList');\n\ngoog.require('goog.asserts');\ngoog.require('shaka.dash.MpdUtils');\ngoog.require('shaka.dash.SegmentBase');\ngoog.require('shaka.log');\ngoog.require('shaka.media.SegmentIndex');\ngoog.require('shaka.media.SegmentReference');\ngoog.require('shaka.util.Error');\ngoog.require('shaka.util.Functional');\ngoog.require('shaka.util.ManifestParserUtils');\ngoog.require('shaka.util.XmlUtils');\n\n\n/**\n * @namespace shaka.dash.SegmentList\n * @summary A set of functions for parsing SegmentList elements.\n */\n\n\n/**\n * Creates a new Stream object or updates the Stream in the manifest.\n *\n * @param {shaka.dash.DashParser.Context} context\n * @param {!Object.<string, !shaka.media.SegmentIndex>} segmentIndexMap\n * @return {shaka.dash.DashParser.StreamInfo}\n */\nshaka.dash.SegmentList.createStream = function(context, segmentIndexMap) {\n  goog.asserts.assert(context.representation.segmentList,\n                      'Should only be called with SegmentList');\n  const SegmentList = shaka.dash.SegmentList;\n\n  let init = shaka.dash.SegmentBase.createInitSegment(\n      context, SegmentList.fromInheritance_);\n  let info = SegmentList.parseSegmentListInfo_(context);\n\n  SegmentList.checkSegmentListInfo_(context, info);\n\n  /** @type {shaka.media.SegmentIndex} */\n  let segmentIndex = null;\n  let id = null;\n  if (context.period.id && context.representation.id) {\n    // Only check/store the index if period and representation IDs are set.\n    id = context.period.id + ',' + context.representation.id;\n    segmentIndex = segmentIndexMap[id];\n  }\n\n  let references = SegmentList.createSegmentReferences_(\n      context.periodInfo.duration, info.startNumber,\n      context.representation.baseUris, info);\n\n  if (segmentIndex) {\n    segmentIndex.merge(references);\n    let start = context.presentationTimeline.getSegmentAvailabilityStart();\n    segmentIndex.evict(start - context.periodInfo.start);\n  } else {\n    context.presentationTimeline.notifySegments(\n        references, context.periodInfo.start);\n    segmentIndex = new shaka.media.SegmentIndex(references);\n    if (id && context.dynamic) {\n      segmentIndexMap[id] = segmentIndex;\n    }\n  }\n\n  if (!context.dynamic || !context.periodInfo.isLastPeriod) {\n    segmentIndex.fit(context.periodInfo.duration);\n  }\n\n  return {\n    createSegmentIndex: Promise.resolve.bind(Promise),\n    findSegmentPosition: segmentIndex.find.bind(segmentIndex),\n    getSegmentReference: segmentIndex.get.bind(segmentIndex),\n    initSegmentReference: init,\n    scaledPresentationTimeOffset: info.scaledPresentationTimeOffset,\n  };\n};\n\n\n/**\n * @typedef {{\n *   mediaUri: string,\n *   start: number,\n *   end: ?number\n * }}\n *\n * @property {string} mediaUri\n *   The URI of the segment.\n * @property {number} start\n *   The start byte of the segment.\n * @property {?number} end\n *   The end byte of the segment, or null.\n */\nshaka.dash.SegmentList.MediaSegment;\n\n\n/**\n * @typedef {{\n *   segmentDuration: ?number,\n *   startTime: number,\n *   startNumber: number,\n *   scaledPresentationTimeOffset: number,\n *   timeline: Array.<shaka.dash.MpdUtils.TimeRange>,\n *   mediaSegments: !Array.<shaka.dash.SegmentList.MediaSegment>\n * }}\n * @private\n *\n * @description\n * Contains information about a SegmentList.\n *\n * @property {?number} segmentDuration\n *   The duration of the segments, if given.\n * @property {number} startTime\n *   The start time of the first segment, in seconds.\n * @property {number} startNumber\n *   The start number of the segments; 1 or greater.\n * @property {number} scaledPresentationTimeOffset\n *   The scaledPresentationTimeOffset of the representation, in seconds.\n * @property {Array.<shaka.dash.MpdUtils.TimeRange>} timeline\n *   The timeline of the representation, if given.  Times in seconds.\n * @property {!Array.<shaka.dash.SegmentList.MediaSegment>} mediaSegments\n *   The URI and byte-ranges of the media segments.\n */\nshaka.dash.SegmentList.SegmentListInfo;\n\n\n/**\n * @param {?shaka.dash.DashParser.InheritanceFrame} frame\n * @return {Element}\n * @private\n */\nshaka.dash.SegmentList.fromInheritance_ = function(frame) {\n  return frame.segmentList;\n};\n\n\n/**\n * Parses the SegmentList items to create an info object.\n *\n * @param {shaka.dash.DashParser.Context} context\n * @return {shaka.dash.SegmentList.SegmentListInfo}\n * @private\n */\nshaka.dash.SegmentList.parseSegmentListInfo_ = function(context) {\n  const SegmentList = shaka.dash.SegmentList;\n  const MpdUtils = shaka.dash.MpdUtils;\n\n  let mediaSegments = SegmentList.parseMediaSegments_(context);\n  let segmentInfo =\n      MpdUtils.parseSegmentInfo(context, SegmentList.fromInheritance_);\n\n  let startNumber = segmentInfo.startNumber;\n  if (startNumber == 0) {\n    shaka.log.warning('SegmentList@startNumber must be > 0');\n    startNumber = 1;\n  }\n\n  let startTime = 0;\n  if (segmentInfo.segmentDuration) {\n    // See DASH sec. 5.3.9.5.3\n    // Don't use presentationTimeOffset for @duration.\n    startTime = segmentInfo.segmentDuration * (startNumber - 1);\n  } else if (segmentInfo.timeline && segmentInfo.timeline.length > 0) {\n    // The presentationTimeOffset was considered in timeline creation.\n    startTime = segmentInfo.timeline[0].start;\n  }\n\n  return {\n    segmentDuration: segmentInfo.segmentDuration,\n    startTime: startTime,\n    startNumber: startNumber,\n    scaledPresentationTimeOffset: segmentInfo.scaledPresentationTimeOffset,\n    timeline: segmentInfo.timeline,\n    mediaSegments: mediaSegments,\n  };\n};\n\n\n/**\n * Checks whether a SegmentListInfo object is valid.\n *\n * @param {shaka.dash.DashParser.Context} context\n * @param {shaka.dash.SegmentList.SegmentListInfo} info\n * @throws shaka.util.Error When there is a parsing error.\n * @private\n */\nshaka.dash.SegmentList.checkSegmentListInfo_ = function(context, info) {\n  if (!info.segmentDuration && !info.timeline &&\n      info.mediaSegments.length > 1) {\n    shaka.log.warning(\n        'SegmentList does not contain sufficient segment information:',\n        'the SegmentList specifies multiple segments,',\n        'but does not specify a segment duration or timeline.',\n        context.representation);\n    throw new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.MANIFEST,\n        shaka.util.Error.Code.DASH_NO_SEGMENT_INFO);\n  }\n\n  if (!info.segmentDuration && !context.periodInfo.duration && !info.timeline &&\n      info.mediaSegments.length == 1) {\n    shaka.log.warning(\n        'SegmentList does not contain sufficient segment information:',\n        'the SegmentList specifies one segment,',\n        'but does not specify a segment duration, period duration,',\n        'or timeline.',\n        context.representation);\n    throw new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.MANIFEST,\n        shaka.util.Error.Code.DASH_NO_SEGMENT_INFO);\n  }\n\n  if (info.timeline && info.timeline.length == 0) {\n    shaka.log.warning(\n        'SegmentList does not contain sufficient segment information:',\n        'the SegmentList has an empty timeline.',\n        context.representation);\n    throw new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.MANIFEST,\n        shaka.util.Error.Code.DASH_NO_SEGMENT_INFO);\n  }\n};\n\n\n/**\n * Creates an array of segment references for the given data.\n *\n * @param {?number} periodDuration in seconds.\n * @param {number} startNumber\n * @param {!Array.<string>} baseUris\n * @param {shaka.dash.SegmentList.SegmentListInfo} info\n * @return {!Array.<!shaka.media.SegmentReference>}\n * @private\n */\nshaka.dash.SegmentList.createSegmentReferences_ = function(\n    periodDuration, startNumber, baseUris, info) {\n  const ManifestParserUtils = shaka.util.ManifestParserUtils;\n\n  let max = info.mediaSegments.length;\n  if (info.timeline && info.timeline.length != info.mediaSegments.length) {\n    max = Math.min(info.timeline.length, info.mediaSegments.length);\n    shaka.log.warning(\n        'The number of items in the segment timeline and the number of segment',\n        'URLs do not match, truncating', info.mediaSegments.length, 'to', max);\n  }\n\n  /** @type {!Array.<!shaka.media.SegmentReference>} */\n  let references = [];\n  let prevEndTime = info.startTime;\n  for (let i = 0; i < max; i++) {\n    let segment = info.mediaSegments[i];\n    let mediaUri = ManifestParserUtils.resolveUris(\n        baseUris, [segment.mediaUri]);\n\n    let startTime = prevEndTime;\n    let endTime;\n\n    if (info.segmentDuration != null) {\n      endTime = startTime + info.segmentDuration;\n    } else if (info.timeline) {\n      // Ignore the timepoint start since they are continuous.\n      endTime = info.timeline[i].end;\n    } else {\n      // If segmentDuration and timeline are null then there must\n      // be exactly one segment.\n      goog.asserts.assert(\n          info.mediaSegments.length == 1 && periodDuration,\n          'There should be exactly one segment with a Period duration.');\n      endTime = startTime + periodDuration;\n    }\n\n    let getUris = (function(uris) { return uris; }.bind(null, mediaUri));\n    references.push(\n        new shaka.media.SegmentReference(\n            i + startNumber, startTime, endTime, getUris, segment.start,\n            segment.end));\n    prevEndTime = endTime;\n  }\n\n  return references;\n};\n\n\n/**\n * Parses the media URIs from the context.\n *\n * @param {shaka.dash.DashParser.Context} context\n * @return {!Array.<shaka.dash.SegmentList.MediaSegment>}\n * @private\n */\nshaka.dash.SegmentList.parseMediaSegments_ = function(context) {\n  const Functional = shaka.util.Functional;\n  /** @type {!Array.<!Element>} */\n  let segmentLists = [\n    context.representation.segmentList,\n    context.adaptationSet.segmentList,\n    context.period.segmentList,\n  ].filter(Functional.isNotNull);\n\n  const XmlUtils = shaka.util.XmlUtils;\n  // Search each SegmentList for one with at least one SegmentURL element,\n  // select the first one, and convert each SegmentURL element to a tuple.\n  return segmentLists\n      .map(function(node) { return XmlUtils.findChildren(node, 'SegmentURL'); })\n      .reduce(function(all, part) { return all.length > 0 ? all : part; })\n      .map(function(urlNode) {\n        if (urlNode.getAttribute('indexRange') &&\n            !context.indexRangeWarningGiven) {\n          context.indexRangeWarningGiven = true;\n          shaka.log.warning(\n              'We do not support the SegmentURL@indexRange attribute on ' +\n              'SegmentList.  We only use the SegmentList@duration attribute ' +\n              'or SegmentTimeline, which must be accurate.');\n        }\n\n        let uri = urlNode.getAttribute('media');\n        let range = XmlUtils.parseAttr(\n            urlNode, 'mediaRange', XmlUtils.parseRange, {start: 0, end: null});\n        return {mediaUri: uri, start: range.start, end: range.end};\n      });\n};\n\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.dash.SegmentTemplate');\n\ngoog.require('goog.asserts');\ngoog.require('shaka.dash.MpdUtils');\ngoog.require('shaka.dash.SegmentBase');\ngoog.require('shaka.log');\ngoog.require('shaka.media.InitSegmentReference');\ngoog.require('shaka.media.SegmentIndex');\ngoog.require('shaka.media.SegmentReference');\ngoog.require('shaka.util.Error');\ngoog.require('shaka.util.ManifestParserUtils');\n\n\n/**\n * @namespace shaka.dash.SegmentTemplate\n * @summary A set of functions for parsing SegmentTemplate elements.\n */\n\n\n/**\n * Creates a new Stream object or updates the Stream in the manifest.\n *\n * @param {shaka.dash.DashParser.Context} context\n * @param {shaka.dash.DashParser.RequestInitSegmentCallback} requestInitSegment\n * @param {!Object.<string, !shaka.media.SegmentIndex>} segmentIndexMap\n * @param {boolean} isUpdate True if the manifest is being updated.\n * @throws shaka.util.Error When there is a parsing error.\n * @return {shaka.dash.DashParser.StreamInfo}\n */\nshaka.dash.SegmentTemplate.createStream = function(\n    context, requestInitSegment, segmentIndexMap, isUpdate) {\n  goog.asserts.assert(context.representation.segmentTemplate,\n                      'Should only be called with SegmentTemplate');\n  const SegmentTemplate = shaka.dash.SegmentTemplate;\n\n  let init = SegmentTemplate.createInitSegment_(context);\n  let info = SegmentTemplate.parseSegmentTemplateInfo_(context);\n\n  SegmentTemplate.checkSegmentTemplateInfo_(context, info);\n\n  /** @type {?shaka.dash.DashParser.SegmentIndexFunctions} */\n  let segmentIndexFunctions = null;\n  if (info.indexTemplate) {\n    segmentIndexFunctions = SegmentTemplate.createFromIndexTemplate_(\n        context, requestInitSegment, init, info);\n  } else if (info.segmentDuration) {\n    if (!isUpdate) {\n      context.presentationTimeline.notifyMaxSegmentDuration(\n          info.segmentDuration);\n    }\n    segmentIndexFunctions = SegmentTemplate.createFromDuration_(context, info);\n  } else {\n    /** @type {shaka.media.SegmentIndex} */\n    let segmentIndex = null;\n    let id = null;\n    if (context.period.id && context.representation.id) {\n      // Only check/store the index if period and representation IDs are set.\n      id = context.period.id + ',' + context.representation.id;\n      segmentIndex = segmentIndexMap[id];\n    }\n\n    let references = SegmentTemplate.createFromTimeline_(context, info);\n\n    // Don't fit live content, since it might receive more segments.\n    // Unless that live content is multi-period; it's safe to fit every period\n    // but the last one, since only the last period might receive new segments.\n    let shouldFit = !context.dynamic || !context.periodInfo.isLastPeriod;\n\n    if (segmentIndex) {\n      if (shouldFit) {\n        // Fit the new references before merging them, so that the merge\n        // algorithm has a more accurate view of their start and end times.\n        let wrapper = new shaka.media.SegmentIndex(references);\n        wrapper.fit(context.periodInfo.duration);\n      }\n\n      segmentIndex.merge(references);\n      let start = context.presentationTimeline.getSegmentAvailabilityStart();\n      segmentIndex.evict(start - context.periodInfo.start);\n    } else {\n      context.presentationTimeline.notifySegments(\n          references, context.periodInfo.start);\n      segmentIndex = new shaka.media.SegmentIndex(references);\n      if (id && context.dynamic) {\n        segmentIndexMap[id] = segmentIndex;\n      }\n    }\n\n    if (shouldFit) {\n      segmentIndex.fit(context.periodInfo.duration);\n    }\n\n    segmentIndexFunctions = {\n      createSegmentIndex: Promise.resolve.bind(Promise),\n      findSegmentPosition: segmentIndex.find.bind(segmentIndex),\n      getSegmentReference: segmentIndex.get.bind(segmentIndex),\n    };\n  }\n\n  return {\n    createSegmentIndex: segmentIndexFunctions.createSegmentIndex,\n    findSegmentPosition: segmentIndexFunctions.findSegmentPosition,\n    getSegmentReference: segmentIndexFunctions.getSegmentReference,\n    initSegmentReference: init,\n    scaledPresentationTimeOffset: info.scaledPresentationTimeOffset,\n  };\n};\n\n\n/**\n * @typedef {{\n *   timescale: number,\n *   segmentDuration: ?number,\n *   startNumber: number,\n *   scaledPresentationTimeOffset: number,\n *   unscaledPresentationTimeOffset: number,\n *   timeline: Array.<shaka.dash.MpdUtils.TimeRange>,\n *   mediaTemplate: ?string,\n *   indexTemplate: ?string\n * }}\n * @private\n *\n * @description\n * Contains information about a SegmentTemplate.\n *\n * @property {number} timescale\n *   The time-scale of the representation.\n * @property {?number} segmentDuration\n *   The duration of the segments in seconds, if given.\n * @property {number} startNumber\n *   The start number of the segments; 1 or greater.\n * @property {number} scaledPresentationTimeOffset\n *   The presentation time offset of the representation, in seconds.\n * @property {number} unscaledPresentationTimeOffset\n *   The presentation time offset of the representation, in timescale units.\n * @property {Array.<shaka.dash.MpdUtils.TimeRange>} timeline\n *   The timeline of the representation, if given.  Times in seconds.\n * @property {?string} mediaTemplate\n *   The media URI template, if given.\n * @property {?string} indexTemplate\n *   The index URI template, if given.\n */\nshaka.dash.SegmentTemplate.SegmentTemplateInfo;\n\n\n/**\n * @param {?shaka.dash.DashParser.InheritanceFrame} frame\n * @return {Element}\n * @private\n */\nshaka.dash.SegmentTemplate.fromInheritance_ = function(frame) {\n  return frame.segmentTemplate;\n};\n\n\n/**\n * Parses a SegmentTemplate element into an info object.\n *\n * @param {shaka.dash.DashParser.Context} context\n * @return {shaka.dash.SegmentTemplate.SegmentTemplateInfo}\n * @private\n */\nshaka.dash.SegmentTemplate.parseSegmentTemplateInfo_ = function(context) {\n  const SegmentTemplate = shaka.dash.SegmentTemplate;\n  const MpdUtils = shaka.dash.MpdUtils;\n  let segmentInfo =\n      MpdUtils.parseSegmentInfo(context, SegmentTemplate.fromInheritance_);\n\n  let media = MpdUtils.inheritAttribute(\n      context, SegmentTemplate.fromInheritance_, 'media');\n  let index = MpdUtils.inheritAttribute(\n      context, SegmentTemplate.fromInheritance_, 'index');\n\n  return {\n    segmentDuration: segmentInfo.segmentDuration,\n    timescale: segmentInfo.timescale,\n    startNumber: segmentInfo.startNumber,\n    scaledPresentationTimeOffset: segmentInfo.scaledPresentationTimeOffset,\n    unscaledPresentationTimeOffset: segmentInfo.unscaledPresentationTimeOffset,\n    timeline: segmentInfo.timeline,\n    mediaTemplate: media,\n    indexTemplate: index,\n  };\n};\n\n\n/**\n * Verifies a SegmentTemplate info object.\n *\n * @param {shaka.dash.DashParser.Context} context\n * @param {shaka.dash.SegmentTemplate.SegmentTemplateInfo} info\n * @throws shaka.util.Error When there is a parsing error.\n * @private\n */\nshaka.dash.SegmentTemplate.checkSegmentTemplateInfo_ = function(context, info) {\n  let n = 0;\n  n += info.indexTemplate ? 1 : 0;\n  n += info.timeline ? 1 : 0;\n  n += info.segmentDuration ? 1 : 0;\n\n  if (n == 0) {\n    shaka.log.error(\n        'SegmentTemplate does not contain any segment information:',\n        'the SegmentTemplate must contain either an index URL template',\n        'a SegmentTimeline, or a segment duration.',\n        context.representation);\n    throw new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.MANIFEST,\n        shaka.util.Error.Code.DASH_NO_SEGMENT_INFO);\n  } else if (n != 1) {\n    shaka.log.warning(\n        'SegmentTemplate containes multiple segment information sources:',\n        'the SegmentTemplate should only contain an index URL template,',\n        'a SegmentTimeline or a segment duration.',\n        context.representation);\n    if (info.indexTemplate) {\n      shaka.log.info('Using the index URL template by default.');\n      info.timeline = null;\n      info.segmentDuration = null;\n    } else {\n      goog.asserts.assert(info.timeline, 'There should be a timeline');\n      shaka.log.info('Using the SegmentTimeline by default.');\n      info.segmentDuration = null;\n    }\n  }\n\n  if (!info.indexTemplate && !info.mediaTemplate) {\n    shaka.log.error(\n        'SegmentTemplate does not contain sufficient segment information:',\n        'the SegmentTemplate\\'s media URL template is missing.',\n        context.representation);\n    throw new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.MANIFEST,\n        shaka.util.Error.Code.DASH_NO_SEGMENT_INFO);\n  }\n};\n\n\n/**\n * Creates segment index functions from a index URL template.\n *\n * @param {shaka.dash.DashParser.Context} context\n * @param {shaka.dash.DashParser.RequestInitSegmentCallback} requestInitSegment\n * @param {shaka.media.InitSegmentReference} init\n * @param {shaka.dash.SegmentTemplate.SegmentTemplateInfo} info\n * @throws shaka.util.Error When there is a parsing error.\n * @return {shaka.dash.DashParser.SegmentIndexFunctions}\n * @private\n */\nshaka.dash.SegmentTemplate.createFromIndexTemplate_ = function(\n    context, requestInitSegment, init, info) {\n  const MpdUtils = shaka.dash.MpdUtils;\n  const ManifestParserUtils = shaka.util.ManifestParserUtils;\n\n  // Determine the container type.\n  let containerType = context.representation.mimeType.split('/')[1];\n  if ((containerType != 'mp4') && (containerType != 'webm')) {\n    shaka.log.error(\n        'SegmentTemplate specifies an unsupported container type.',\n        context.representation);\n    throw new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.MANIFEST,\n        shaka.util.Error.Code.DASH_UNSUPPORTED_CONTAINER);\n  }\n\n  if ((containerType == 'webm') && !init) {\n    shaka.log.error(\n        'SegmentTemplate does not contain sufficient segment information:',\n        'the SegmentTemplate uses a WebM container,',\n        'but does not contain an initialization URL template.',\n        context.representation);\n    throw new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.MANIFEST,\n        shaka.util.Error.Code.DASH_WEBM_MISSING_INIT);\n  }\n\n  goog.asserts.assert(info.indexTemplate, 'must be using index template');\n  let filledTemplate = MpdUtils.fillUriTemplate(\n      info.indexTemplate, context.representation.id,\n      null, context.bandwidth || null, null);\n\n  let resolvedUris = ManifestParserUtils.resolveUris(\n      context.representation.baseUris, [filledTemplate]);\n\n  return shaka.dash.SegmentBase.createSegmentIndexFromUris(\n      context, requestInitSegment, init, resolvedUris, 0, null, containerType,\n      info.scaledPresentationTimeOffset);\n};\n\n\n/**\n * Creates segment index functions from a segment duration.\n *\n * @param {shaka.dash.DashParser.Context} context\n * @param {shaka.dash.SegmentTemplate.SegmentTemplateInfo} info\n * @return {shaka.dash.DashParser.SegmentIndexFunctions}\n * @private\n */\nshaka.dash.SegmentTemplate.createFromDuration_ = function(context, info) {\n  goog.asserts.assert(info.mediaTemplate,\n                      'There should be a media template with duration');\n  const MpdUtils = shaka.dash.MpdUtils;\n  const ManifestParserUtils = shaka.util.ManifestParserUtils;\n\n  let periodDuration = context.periodInfo.duration;\n  let segmentDuration = info.segmentDuration;\n  let startNumber = info.startNumber;\n  let timescale = info.timescale;\n\n  let template = info.mediaTemplate;\n  let bandwidth = context.bandwidth || null;\n  let id = context.representation.id;\n  let baseUris = context.representation.baseUris;\n\n  let find = function(periodTime) {\n    if (periodTime < 0) {\n      return null;\n    } else if (periodDuration && periodTime >= periodDuration) {\n      return null;\n    }\n\n    return Math.floor(periodTime / segmentDuration);\n  };\n  let get = function(position) {\n    let segmentStart = position * segmentDuration;\n    // Cap the segment end at the period end, to avoid period transition issues\n    // in StreamingEngine.\n    let segmentEnd = segmentStart + segmentDuration;\n    if (periodDuration) segmentEnd = Math.min(segmentEnd, periodDuration);\n\n    // Do not construct segments references that should not exist.\n    if (segmentEnd < 0) {\n      return null;\n    } else if (periodDuration && segmentStart >= periodDuration) {\n      return null;\n    }\n\n    let getUris = function() {\n      let mediaUri = MpdUtils.fillUriTemplate(\n          template, id, position + startNumber, bandwidth,\n          segmentStart * timescale);\n      return ManifestParserUtils.resolveUris(baseUris, [mediaUri]);\n    };\n\n    return new shaka.media.SegmentReference(\n        position, segmentStart, segmentEnd, getUris, 0, null);\n  };\n\n  return {\n    createSegmentIndex: Promise.resolve.bind(Promise),\n    findSegmentPosition: find,\n    getSegmentReference: get,\n  };\n};\n\n\n/**\n * Creates segment references from a timeline.\n *\n * @param {shaka.dash.DashParser.Context} context\n * @param {shaka.dash.SegmentTemplate.SegmentTemplateInfo} info\n * @return {!Array.<!shaka.media.SegmentReference>}\n * @private\n */\nshaka.dash.SegmentTemplate.createFromTimeline_ = function(context, info) {\n  goog.asserts.assert(info.mediaTemplate,\n                      'There should be a media template with a timeline');\n  const MpdUtils = shaka.dash.MpdUtils;\n  const ManifestParserUtils = shaka.util.ManifestParserUtils;\n\n  /** @type {!Array.<!shaka.media.SegmentReference>} */\n  let references = [];\n  for (let i = 0; i < info.timeline.length; i++) {\n    let start = info.timeline[i].start;\n    let unscaledStart = info.timeline[i].unscaledStart;\n    let end = info.timeline[i].end;\n\n    // Note: i = k - 1, where k indicates the k'th segment listed in the MPD.\n    // (See section 5.3.9.5.3 of the DASH spec.)\n    let segmentReplacement = i + info.startNumber;\n\n    // Consider the presentation time offset in segment uri computation\n    let timeReplacement = unscaledStart +\n        info.unscaledPresentationTimeOffset;\n    let createUris = (function(\n            template, repId, bandwidth, baseUris, segmentId, time) {\n          let mediaUri = MpdUtils.fillUriTemplate(\n              template, repId, segmentId, bandwidth, time);\n          return ManifestParserUtils.resolveUris(baseUris, [mediaUri])\n              .map(function(g) { return g.toString(); });\n        }.bind(null, info.mediaTemplate, context.representation.id,\n               context.bandwidth || null, context.representation.baseUris,\n               segmentReplacement, timeReplacement));\n\n    references.push(new shaka.media.SegmentReference(\n        segmentReplacement, start, end, createUris, 0, null));\n  }\n\n  return references;\n};\n\n\n/**\n * Creates an init segment reference from a context object.\n *\n * @param {shaka.dash.DashParser.Context} context\n * @return {shaka.media.InitSegmentReference}\n * @private\n */\nshaka.dash.SegmentTemplate.createInitSegment_ = function(context) {\n  const MpdUtils = shaka.dash.MpdUtils;\n  const ManifestParserUtils = shaka.util.ManifestParserUtils;\n  const SegmentTemplate = shaka.dash.SegmentTemplate;\n\n  let initialization = MpdUtils.inheritAttribute(\n      context, SegmentTemplate.fromInheritance_, 'initialization');\n  if (!initialization) {\n    return null;\n  }\n\n  let repId = context.representation.id;\n  let bandwidth = context.bandwidth || null;\n  let baseUris = context.representation.baseUris;\n  let getUris = function() {\n    goog.asserts.assert(initialization, 'Should have returned earler');\n    let filledTemplate = MpdUtils.fillUriTemplate(\n        initialization, repId, null, bandwidth, null);\n    let resolvedUris = ManifestParserUtils.resolveUris(\n        baseUris, [filledTemplate]);\n    return resolvedUris;\n  };\n\n  return new shaka.media.InitSegmentReference(getUris, 0, null);\n};\n\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.media.ManifestParser');\n\ngoog.require('goog.Uri');\ngoog.require('goog.asserts');\ngoog.require('shaka.log');\ngoog.require('shaka.net.NetworkingEngine');\ngoog.require('shaka.util.Error');\n\n\n/**\n * @namespace shaka.media.ManifestParser\n * @summary An interface to register manifest parsers.\n * @exportDoc\n */\n\n\n/**\n * Contains the parser factory functions indexed by MIME type.\n *\n * @type {!Object.<string, shaka.extern.ManifestParser.Factory>}\n */\nshaka.media.ManifestParser.parsersByMime = {};\n\n\n/**\n * Contains the parser factory functions indexed by file extension.\n *\n * @type {!Object.<string, shaka.extern.ManifestParser.Factory>}\n */\nshaka.media.ManifestParser.parsersByExtension = {};\n\n\n/**\n * Registers a manifest parser by file extension.\n *\n * @param {string} extension The file extension of the manifest.\n * @param {shaka.extern.ManifestParser.Factory} parserFactory The factory\n *   used to create parser instances.\n * @export\n */\nshaka.media.ManifestParser.registerParserByExtension = function(\n    extension, parserFactory) {\n  shaka.media.ManifestParser.parsersByExtension[extension] = parserFactory;\n};\n\n\n/**\n * Registers a manifest parser by MIME type.\n *\n * @param {string} mimeType The MIME type of the manifest.\n * @param {shaka.extern.ManifestParser.Factory} parserFactory The factory\n *   used to create parser instances.\n * @export\n */\nshaka.media.ManifestParser.registerParserByMime = function(\n    mimeType, parserFactory) {\n  shaka.media.ManifestParser.parsersByMime[mimeType] = parserFactory;\n};\n\n\n/**\n * Returns a map of manifest support for well-known types.\n *\n * @return {!Object.<string, boolean>}\n */\nshaka.media.ManifestParser.probeSupport = function() {\n  // Make sure all registered parsers are shown.\n  let support = {};\n  for (let type in shaka.media.ManifestParser.parsersByMime) {\n    support[type] = true;\n  }\n  for (let type in shaka.media.ManifestParser.parsersByExtension) {\n    support[type] = true;\n  }\n\n  // Make sure all well-known types are tested as well, just to show an explicit\n  // false for things people might be expecting.\n  let testMimeTypes = [\n    // DASH\n    'application/dash+xml',\n    // HLS\n    'application/x-mpegurl',\n    'application/vnd.apple.mpegurl',\n    // SmoothStreaming\n    'application/vnd.ms-sstr+xml',\n  ];\n  let testExtensions = [\n    // DASH\n    'mpd',\n    // HLS\n    'm3u8',\n    // SmoothStreaming\n    'ism',\n  ];\n\n  testMimeTypes.forEach(function(type) {\n    support[type] = !!shaka.media.ManifestParser.parsersByMime[type];\n  });\n  testExtensions.forEach(function(type) {\n    support[type] = !!shaka.media.ManifestParser.parsersByExtension[type];\n  });\n\n  return support;\n};\n\n\n/**\n * Finds a manifest parser factory to parse the given manifest.\n *\n * @param {string} uri\n * @param {!shaka.net.NetworkingEngine} netEngine\n * @param {shaka.extern.RetryParameters} retryParams\n * @param {?string} mimeType\n * @return {!Promise.<shaka.extern.ManifestParser.Factory>}\n */\nshaka.media.ManifestParser.getFactory = async function(\n    uri, netEngine, retryParams, mimeType) {\n  try {\n    return await shaka.media.ManifestParser.getFactory_(\n        uri, netEngine, retryParams, mimeType);\n  } catch (error) {\n    goog.asserts.assert(\n        error instanceof shaka.util.Error, 'Incorrect error type');\n\n    error.severity = shaka.util.Error.Severity.CRITICAL;\n\n    throw error;\n  }\n};\n\n\n/**\n * The internal version of |getFactory| which does not ensure the some error\n * constraints as the public |getFactory|.\n *\n * @param {string} uri\n * @param {!shaka.net.NetworkingEngine} netEngine\n * @param {shaka.extern.RetryParameters} retryParams\n * @param {?string} mimeType\n * @return {!Promise.<shaka.extern.ManifestParser.Factory>}\n * @private\n */\nshaka.media.ManifestParser.getFactory_ = async function(\n    uri, netEngine, retryParams, mimeType) {\n  // Try using the mime type we were given.\n  if (mimeType) {\n    let mime = mimeType.toLowerCase();\n    let factory = shaka.media.ManifestParser.parsersByMime[mime];\n\n    if (factory) {\n      return factory;\n    }\n\n    shaka.log.warning(\n        'Could not determine manifest type using mime type ', mime);\n  }\n\n  // Try using the uri extension.\n  let uriObj = new goog.Uri(uri);\n  let uriPieces = uriObj.getPath().split('/');\n  let uriFilename = uriPieces.pop();\n  let filenamePieces = uriFilename.split('.');\n\n  // Only one piece means there is no extension.\n  if (filenamePieces.length > 1) {\n    let extension = filenamePieces.pop().toLowerCase();\n    let factory = shaka.media.ManifestParser.parsersByExtension[extension];\n\n    if (factory) {\n      return factory;\n    }\n\n    shaka.log.warning(\n        'Could not determine manifest type for extension ', extension);\n  } else {\n    shaka.log.warning('Could not find extension for ', uri);\n  }\n\n  let mime = await shaka.media.ManifestParser.getMimeType_(uri,\n                                                           netEngine,\n                                                           retryParams);\n  let factory = shaka.media.ManifestParser.parsersByMime[mime];\n  if (factory) {\n    return factory;\n  }\n\n  shaka.log.warning('Could not determine manifest type using mime type ', mime);\n\n  throw new shaka.util.Error(\n      shaka.util.Error.Severity.CRITICAL,\n      shaka.util.Error.Category.MANIFEST,\n      shaka.util.Error.Code.UNABLE_TO_GUESS_MANIFEST_TYPE,\n      uri);\n};\n\n\n/**\n * @param {string} uri\n * @param {!shaka.net.NetworkingEngine} netEngine\n * @param {shaka.extern.RetryParameters} retryParams\n * @return {!Promise.<string>}\n * @private\n */\nshaka.media.ManifestParser.getMimeType_ = async function(\n    uri, netEngine, retryParams) {\n  const type = shaka.net.NetworkingEngine.RequestType.MANIFEST;\n\n  let request = shaka.net.NetworkingEngine.makeRequest([uri], retryParams);\n  request.method = 'HEAD';\n\n  let response = await netEngine.request(type, request).promise;\n\n  // https://bit.ly/2K9s9kf says this header should always be available,\n  // but just to be safe:\n  let mimeType = response.headers['content-type'];\n  return mimeType ? mimeType.toLowerCase() : '';\n};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.media.PresentationTimeline');\n\ngoog.require('goog.asserts');\ngoog.require('shaka.log');\ngoog.require('shaka.media.SegmentReference');\n\n\n/**\n * Creates a PresentationTimeline.\n *\n * @param {?number} presentationStartTime The wall-clock time, in seconds,\n *   when the presentation started or will start. Only required for live.\n * @param {number} presentationDelay The delay to give the presentation, in\n *   seconds.  Only required for live.\n *\n * @see {shaka.extern.Manifest}\n * @see {@tutorial architecture}\n *\n * @constructor\n * @struct\n * @export\n */\nshaka.media.PresentationTimeline = function(\n    presentationStartTime, presentationDelay) {\n  /** @private {?number} */\n  this.presentationStartTime_ = presentationStartTime;\n\n  /** @private {number} */\n  this.presentationDelay_ = presentationDelay;\n\n  /** @private {number} */\n  this.duration_ = Infinity;\n\n  /** @private {number} */\n  this.segmentAvailabilityDuration_ = Infinity;\n\n  /**\n   * The maximum segment duration (in seconds).  Can be based on explicitly-\n   * known segments or on signalling in the manifest.\n   *\n   * @private {number}\n   */\n  this.maxSegmentDuration_ = 1;\n\n  /**\n   * The minimum segment start time (in seconds, in the presentation timeline)\n   * for segments we explicitly know about.\n   *\n   * This is null if we have no explicit descriptions of segments, such as in\n   * DASH when using SegmentTemplate w/ duration.\n   *\n   * @private {?number}\n   */\n  this.minSegmentStartTime_ = null;\n\n  /**\n   * The maximum segment end time (in seconds, in the presentation timeline) for\n   * segments we explicitly know about.\n   *\n   * This is null if we have no explicit descriptions of segments, such as in\n   * DASH when using SegmentTemplate w/ duration.  When this is non-null, the\n   * presentation start time is calculated from the segment end times.\n   *\n   * @private {?number}\n   */\n  this.maxSegmentEndTime_ = null;\n\n  /** @private {number} */\n  this.clockOffset_ = 0;\n\n  /** @private {boolean} */\n  this.static_ = true;\n\n  /** @private {number} */\n  this.userSeekStart_ = 0;\n};\n\n\n/**\n * @return {number} The presentation's duration in seconds.\n *   Infinity indicates that the presentation continues indefinitely.\n * @export\n */\nshaka.media.PresentationTimeline.prototype.getDuration = function() {\n  return this.duration_;\n};\n\n\n/**\n * @return {number} The presentation's max segment duration in seconds.\n */\nshaka.media.PresentationTimeline.prototype.getMaxSegmentDuration = function() {\n  return this.maxSegmentDuration_;\n};\n\n\n/**\n * Sets the presentation's duration.\n *\n * @param {number} duration The presentation's duration in seconds.\n *   Infinity indicates that the presentation continues indefinitely.\n * @export\n */\nshaka.media.PresentationTimeline.prototype.setDuration = function(duration) {\n  goog.asserts.assert(duration > 0, 'duration must be > 0');\n  this.duration_ = duration;\n};\n\n\n/**\n * @return {?number} The presentation's start time in seconds.\n * @export\n */\nshaka.media.PresentationTimeline.prototype.getPresentationStartTime =\n    function() {\n  return this.presentationStartTime_;\n};\n\n\n/**\n * Sets the clock offset, which is the the difference between the client's clock\n * and the server's clock, in milliseconds (i.e., serverTime = Date.now() +\n * clockOffset).\n *\n * @param {number} offset The clock offset, in ms.\n * @export\n */\nshaka.media.PresentationTimeline.prototype.setClockOffset = function(offset) {\n  this.clockOffset_ = offset;\n};\n\n\n/**\n * Sets the presentation's static flag.\n *\n * @param {boolean} isStatic If true, the presentation is static, meaning all\n *   segments are available at once.\n * @export\n */\nshaka.media.PresentationTimeline.prototype.setStatic = function(isStatic) {\n  // NOTE: the argument name is not \"static\" because that's a keyword in ES6\n  this.static_ = isStatic;\n};\n\n\n/**\n * Sets the presentation's segment availability duration. The segment\n * availability duration should only be set for live.\n *\n * @param {number} segmentAvailabilityDuration The presentation's new segment\n *   availability duration in seconds.\n * @export\n */\nshaka.media.PresentationTimeline.prototype.setSegmentAvailabilityDuration =\n    function(segmentAvailabilityDuration) {\n  goog.asserts.assert(segmentAvailabilityDuration >= 0,\n                      'segmentAvailabilityDuration must be >= 0');\n  this.segmentAvailabilityDuration_ = segmentAvailabilityDuration;\n};\n\n\n/**\n * Sets the presentation delay in seconds.\n *\n * @param {number} delay\n * @export\n */\nshaka.media.PresentationTimeline.prototype.setDelay = function(delay) {\n  // NOTE: This is no longer used internally, but is exported.\n  // So we cannot remove it without deprecating it and waiting one release\n  // cycle, or else we risk breaking custom manifest parsers.\n  goog.asserts.assert(delay >= 0, 'delay must be >= 0');\n  this.presentationDelay_ = delay;\n};\n\n\n/**\n * Gets the presentation delay in seconds.\n * @return {number}\n * @export\n */\nshaka.media.PresentationTimeline.prototype.getDelay = function() {\n  return this.presentationDelay_;\n};\n\n\n/**\n * Gives PresentationTimeline a Stream's segments so it can size and position\n * the segment availability window, and account for missing segment\n * information.  This function should be called once for each Stream (no more,\n * no less).\n *\n * @param {!Array.<!shaka.media.SegmentReference>} references\n * @param {number} periodStart\n * @export\n */\nshaka.media.PresentationTimeline.prototype.notifySegments = function(\n    references, periodStart) {\n  if (references.length == 0) {\n    return;\n  }\n\n  // TODO: Make SegmentReferences use timestamps in the presentation timeline,\n  // not the period timeline.\n  const firstReferenceStartTime = references[0].startTime + periodStart;\n  const lastReferenceEndTime =\n      references[references.length - 1].endTime + periodStart;\n\n  if (this.minSegmentStartTime_ == null) {\n    // No data yet, and Math.min(null, startTime) is always 0.  So just store\n    // the segment startTime.\n    this.minSegmentStartTime_ = firstReferenceStartTime;\n  } else {\n    this.minSegmentStartTime_ =\n        Math.min(this.minSegmentStartTime_, firstReferenceStartTime);\n  }\n\n  this.maxSegmentDuration_ = references.reduce(\n      function(max, r) { return Math.max(max, r.endTime - r.startTime); },\n      this.maxSegmentDuration_);\n\n  this.maxSegmentEndTime_ =\n      Math.max(this.maxSegmentEndTime_, lastReferenceEndTime);\n\n  if (this.presentationStartTime_ != null) {\n    // Since we have explicit segment end times, calculate a presentation start\n    // based on them.  This start time accounts for drift.\n    // Date.now() is in milliseconds, from which we compute \"now\" in seconds.\n    let now = (Date.now() + this.clockOffset_) / 1000.0;\n    this.presentationStartTime_ =\n        now - this.maxSegmentEndTime_ - this.maxSegmentDuration_;\n  }\n\n  shaka.log.v1('notifySegments:',\n               'maxSegmentDuration=' + this.maxSegmentDuration_);\n};\n\n\n/**\n * Gives PresentationTimeline a Stream's maximum segment duration so it can\n * size and position the segment availability window.  This function should be\n * called once for each Stream (no more, no less), but does not have to be\n * called if notifySegments() is called instead for a particular stream.\n *\n * @param {number} maxSegmentDuration The maximum segment duration for a\n *   particular stream.\n * @export\n */\nshaka.media.PresentationTimeline.prototype.notifyMaxSegmentDuration = function(\n    maxSegmentDuration) {\n  this.maxSegmentDuration_ = Math.max(\n      this.maxSegmentDuration_, maxSegmentDuration);\n\n  shaka.log.v1('notifyNewSegmentDuration:',\n               'maxSegmentDuration=' + this.maxSegmentDuration_);\n};\n\n\n/**\n * @return {boolean} True if the presentation is live; otherwise, return\n *   false.\n * @export\n */\nshaka.media.PresentationTimeline.prototype.isLive = function() {\n  return this.duration_ == Infinity &&\n         !this.static_;\n};\n\n\n/**\n * @return {boolean} True if the presentation is in progress (meaning not live,\n *   but also not completely available); otherwise, return false.\n * @export\n */\nshaka.media.PresentationTimeline.prototype.isInProgress = function() {\n  return this.duration_ != Infinity &&\n         !this.static_;\n};\n\n\n/**\n * Gets the presentation's current segment availability start time.  Segments\n * ending at or before this time should be assumed to be unavailable.\n *\n * @return {number} The current segment availability start time, in seconds,\n *   relative to the start of the presentation.\n * @export\n */\nshaka.media.PresentationTimeline.prototype.getSegmentAvailabilityStart =\n    function() {\n  goog.asserts.assert(this.segmentAvailabilityDuration_ >= 0,\n                      'The availability duration should be positive');\n\n  if (this.segmentAvailabilityDuration_ == Infinity) {\n    return this.userSeekStart_;\n  }\n\n  let end = this.getSegmentAvailabilityEnd();\n  let start = end - this.segmentAvailabilityDuration_;\n  return Math.max(this.userSeekStart_, start);\n};\n\n\n/**\n * Sets the start time of the user-defined seek range.  This is only used for\n * VOD content.\n *\n * @param {number} time\n * @export\n */\nshaka.media.PresentationTimeline.prototype.setUserSeekStart =\n    function(time) {\n  this.userSeekStart_ = time;\n};\n\n\n/**\n * Gets the presentation's current segment availability end time.  Segments\n * starting after this time should be assumed to be unavailable.\n *\n * @return {number} The current segment availability end time, in seconds,\n *   relative to the start of the presentation.  Always returns the\n *   presentation's duration for video-on-demand.\n * @export\n */\nshaka.media.PresentationTimeline.prototype.getSegmentAvailabilityEnd =\n    function() {\n  if (!this.isLive() && !this.isInProgress()) {\n    return this.duration_;\n  }\n\n  return Math.min(this.getLiveEdge_(), this.duration_);\n};\n\n\n/**\n * Gets the seek range start time, offset by the given amount.  This is used to\n * ensure that we don't \"fall\" back out of the seek window while we are\n * buffering.\n *\n * @param {number} offset The offset to add to the start time.\n * @return {number} The current seek start time, in seconds, relative to the\n *   start of the presentation.\n * @export\n */\nshaka.media.PresentationTimeline.prototype.getSafeSeekRangeStart = function(\n    offset) {\n  // The earliest known segment time, ignoring segment availability duration.\n  const earliestSegmentTime =\n      Math.max(this.minSegmentStartTime_, this.userSeekStart_);\n  if (this.segmentAvailabilityDuration_ == Infinity) {\n    return earliestSegmentTime;\n  }\n\n  // AKA the live edge for live streams.\n  const availabilityEnd = this.getSegmentAvailabilityEnd();\n\n  // The ideal availability start, not considering known segments.\n  const availabilityStart = availabilityEnd - this.segmentAvailabilityDuration_;\n\n  // Add the offset to the availability start to ensure that we don't fall\n  // outside the availability window while we buffer; we don't need to add the\n  // offset to earliestSegmentTime since that won't change over time.\n  // Also see: https://github.com/google/shaka-player/issues/692\n  const desiredStart =\n      Math.min(availabilityStart + offset, this.getSeekRangeEnd());\n  return Math.max(earliestSegmentTime, desiredStart);\n};\n\n\n/**\n * Gets the seek range start time.\n *\n * @return {number}\n * @export\n */\nshaka.media.PresentationTimeline.prototype.getSeekRangeStart = function() {\n  return this.getSafeSeekRangeStart(/* offset */ 0);\n};\n\n\n/**\n * Gets the seek range end.\n *\n * @return {number}\n * @export\n */\nshaka.media.PresentationTimeline.prototype.getSeekRangeEnd = function() {\n  let useDelay = this.isLive() || this.isInProgress();\n  let delay = useDelay ? this.presentationDelay_ : 0;\n  return Math.max(0, this.getSegmentAvailabilityEnd() - delay);\n};\n\n\n/**\n * True if the presentation start time is being used to calculate the live edge.\n * Using the presentation start time means that the stream may be subject to\n * encoder drift.  At runtime, we will avoid using the presentation start time\n * whenever possible.\n *\n * @return {boolean}\n * @export\n */\nshaka.media.PresentationTimeline.prototype.usingPresentationStartTime =\n    function() {\n  // If it's VOD, IPR, or an HLS \"event\", we are not using the presentation\n  // start time.\n  if (this.presentationStartTime_ == null) {\n    return false;\n  }\n\n  // If we have explicit segment times, we're not using the presentation\n  // start time.\n  if (this.maxSegmentEndTime_ != null) {\n    return false;\n  }\n\n  return true;\n};\n\n\n/**\n * @return {number} The current presentation time in seconds.\n * @private\n */\nshaka.media.PresentationTimeline.prototype.getLiveEdge_ = function() {\n  goog.asserts.assert(this.presentationStartTime_ != null,\n                      'Cannot compute timeline live edge without start time');\n  // Date.now() is in milliseconds, from which we compute \"now\" in seconds.\n  let now = (Date.now() + this.clockOffset_) / 1000.0;\n  return Math.max(\n      0, now - this.maxSegmentDuration_ - this.presentationStartTime_);\n};\n\n\nif (goog.DEBUG) {\n  /**\n   * Debug only: assert that the timeline parameters make sense for the type of\n   *   presentation (VOD, IPR, live).\n   */\n  shaka.media.PresentationTimeline.prototype.assertIsValid = function() {\n    if (this.isLive()) {\n      // Implied by isLive(): infinite and dynamic.\n      // Live streams should have a start time.\n      goog.asserts.assert(this.presentationStartTime_ != null,\n          'Detected as live stream, but does not match our model of live!');\n    } else if (this.isInProgress()) {\n      // Implied by isInProgress(): finite and dynamic.\n      // IPR streams should have a start time, and segments should not expire.\n      goog.asserts.assert(this.presentationStartTime_ != null &&\n                          this.segmentAvailabilityDuration_ == Infinity,\n          'Detected as IPR stream, but does not match our model of IPR!');\n    } else {  // VOD\n      // VOD segments should not expire and the presentation should be finite\n      // and static.\n      goog.asserts.assert(this.segmentAvailabilityDuration_ == Infinity &&\n                          this.duration_ != Infinity &&\n                          this.static_,\n          'Detected as VOD stream, but does not match our model of VOD!');\n    }\n  };\n}\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.dash.DashParser');\n\ngoog.require('goog.asserts');\ngoog.require('shaka.abr.Ewma');\ngoog.require('shaka.dash.ContentProtection');\ngoog.require('shaka.dash.MpdUtils');\ngoog.require('shaka.dash.SegmentBase');\ngoog.require('shaka.dash.SegmentList');\ngoog.require('shaka.dash.SegmentTemplate');\ngoog.require('shaka.log');\ngoog.require('shaka.media.DrmEngine');\ngoog.require('shaka.media.ManifestParser');\ngoog.require('shaka.media.PresentationTimeline');\ngoog.require('shaka.media.SegmentReference');\ngoog.require('shaka.net.NetworkingEngine');\ngoog.require('shaka.text.TextEngine');\ngoog.require('shaka.util.Error');\ngoog.require('shaka.util.Functional');\ngoog.require('shaka.util.LanguageUtils');\ngoog.require('shaka.util.ManifestParserUtils');\ngoog.require('shaka.util.MimeUtils');\ngoog.require('shaka.util.OperationManager');\ngoog.require('shaka.util.StringUtils');\ngoog.require('shaka.util.XmlUtils');\n\n\n/**\n * Creates a new DASH parser.\n *\n * @struct\n * @constructor\n * @implements {shaka.extern.ManifestParser}\n * @export\n */\nshaka.dash.DashParser = function() {\n  /** @private {?shaka.extern.ManifestConfiguration} */\n  this.config_ = null;\n\n  /** @private {?shaka.extern.ManifestParser.PlayerInterface} */\n  this.playerInterface_ = null;\n\n  /** @private {!Array.<string>} */\n  this.manifestUris_ = [];\n\n  /** @private {?shaka.extern.Manifest} */\n  this.manifest_ = null;\n\n  /** @private {!Array.<string>} */\n  this.periodIds_ = [];\n\n  /** @private {number} */\n  this.globalId_ = 1;\n\n  /**\n   * A map of IDs to SegmentIndex objects.\n   * ID: Period@id,AdaptationSet@id,@Representation@id\n   * e.g.: '1,5,23'\n   * @private {!Object.<string, !shaka.media.SegmentIndex>}\n   */\n  this.segmentIndexMap_ = {};\n\n  /**\n   * The update period in seconds, or 0 for no updates.\n   * @private {number}\n   */\n  this.updatePeriod_ = 0;\n\n  /**\n   * An ewma that tracks how long updates take.\n   * This is to mitigate issues caused by slow parsing on embedded devices.\n   * @private {!shaka.abr.Ewma}\n   */\n  this.averageUpdateDuration_ = new shaka.abr.Ewma(5);\n\n  /** @private {?number} */\n  this.updateTimer_ = null;\n\n  /** @private {!shaka.util.OperationManager} */\n  this.operationManager_ = new shaka.util.OperationManager();\n};\n\n\n/**\n * Contains the minimum amount of time, in seconds, between manifest update\n * requests.\n *\n * @private\n * @const {number}\n */\nshaka.dash.DashParser.MIN_UPDATE_PERIOD_ = 3;\n\n\n/**\n * @typedef {\n *   function(!Array.<string>, ?number, ?number):!Promise.<!ArrayBuffer>\n * }\n */\nshaka.dash.DashParser.RequestInitSegmentCallback;\n\n\n/**\n * @typedef {{\n *   segmentBase: Element,\n *   segmentList: Element,\n *   segmentTemplate: Element,\n *   baseUris: !Array.<string>,\n *   width: (number|undefined),\n *   height: (number|undefined),\n *   contentType: string,\n *   mimeType: string,\n *   codecs: string,\n *   frameRate: (number|undefined),\n *   emsgSchemeIdUris: !Array.<string>,\n *   id: ?string,\n *   numChannels: ?number\n * }}\n *\n * @description\n * A collection of elements and properties which are inherited across levels\n * of a DASH manifest.\n *\n * @property {Element} segmentBase\n *   The XML node for SegmentBase.\n * @property {Element} segmentList\n *   The XML node for SegmentList.\n * @property {Element} segmentTemplate\n *   The XML node for SegmentTemplate.\n * @property {!Array.<string>} baseUris\n *   An array of absolute base URIs for the frame.\n * @property {(number|undefined)} width\n *   The inherited width value.\n * @property {(number|undefined)} height\n *   The inherited height value.\n * @property {string} contentType\n *   The inherited media type.\n * @property {string} mimeType\n *   The inherited MIME type value.\n * @property {string} codecs\n *   The inherited codecs value.\n * @property {(number|undefined)} frameRate\n *   The inherited framerate value.\n * @property {!Array.<string>} emsgSchemeIdUris\n *   emsg registered schemeIdUris.\n * @property {?string} id\n *   The ID of the element.\n * @property {?number} numChannels\n *   The number of audio channels, or null if unknown.\n */\nshaka.dash.DashParser.InheritanceFrame;\n\n\n/**\n * @typedef {{\n *   dynamic: boolean,\n *   presentationTimeline: !shaka.media.PresentationTimeline,\n *   period: ?shaka.dash.DashParser.InheritanceFrame,\n *   periodInfo: ?shaka.dash.DashParser.PeriodInfo,\n *   adaptationSet: ?shaka.dash.DashParser.InheritanceFrame,\n *   representation: ?shaka.dash.DashParser.InheritanceFrame,\n *   bandwidth: number,\n *   indexRangeWarningGiven: boolean\n * }}\n *\n * @description\n * Contains context data for the streams.\n *\n * @property {boolean} dynamic\n *   True if the MPD is dynamic (not all segments available at once)\n * @property {!shaka.media.PresentationTimeline} presentationTimeline\n *   The PresentationTimeline.\n * @property {?shaka.dash.DashParser.InheritanceFrame} period\n *   The inheritance from the Period element.\n * @property {?shaka.dash.DashParser.PeriodInfo} periodInfo\n *   The Period info for the current Period.\n * @property {?shaka.dash.DashParser.InheritanceFrame} adaptationSet\n *   The inheritance from the AdaptationSet element.\n * @property {?shaka.dash.DashParser.InheritanceFrame} representation\n *   The inheritance from the Representation element.\n * @property {number} bandwidth\n *   The bandwidth of the Representation, or zero if missing.\n * @property {boolean} indexRangeWarningGiven\n *   True if the warning about SegmentURL@indexRange has been printed.\n */\nshaka.dash.DashParser.Context;\n\n\n/**\n * @typedef {{\n *   start: number,\n *   duration: ?number,\n *   node: !Element,\n *   isLastPeriod: boolean\n * }}\n *\n * @description\n * Contains information about a Period element.\n *\n * @property {number} start\n *   The start time of the period.\n * @property {?number} duration\n *   The duration of the period; or null if the duration is not given.  This\n *   will be non-null for all periods except the last.\n * @property {!Element} node\n *   The XML Node for the Period.\n * @property {boolean} isLastPeriod\n *   Whether this Period is the last one in the manifest.\n */\nshaka.dash.DashParser.PeriodInfo;\n\n\n/**\n * @typedef {{\n *   id: string,\n *   contentType: ?string,\n *   language: string,\n *   main: boolean,\n *   streams: !Array.<shaka.extern.Stream>,\n *   drmInfos: !Array.<shaka.extern.DrmInfo>,\n *   trickModeFor: ?string,\n *   representationIds: !Array.<string>\n * }}\n *\n * @description\n * Contains information about an AdaptationSet element.\n *\n * @property {string} id\n *   The unique ID of the adaptation set.\n * @property {?string} contentType\n *   The content type of the AdaptationSet.\n * @property {string} language\n *   The language of the AdaptationSet.\n * @property {boolean} main\n *   Whether the AdaptationSet has the 'main' type.\n * @property {!Array.<shaka.extern.Stream>} streams\n *   The streams this AdaptationSet contains.\n * @property {!Array.<shaka.extern.DrmInfo>} drmInfos\n *   The DRM info for the AdaptationSet.\n * @property {?string} trickModeFor\n *   If non-null, this AdaptationInfo represents trick mode tracks.  This\n *   property is the ID of the normal AdaptationSet these tracks should be\n *   associated with.\n * @property {!Array.<string>} representationIds\n *   An array of the IDs of the Representations this AdaptationSet contains.\n */\nshaka.dash.DashParser.AdaptationInfo;\n\n\n/**\n * @typedef {{\n *   createSegmentIndex: shaka.extern.CreateSegmentIndexFunction,\n *   findSegmentPosition: shaka.extern.FindSegmentPositionFunction,\n *   getSegmentReference: shaka.extern.GetSegmentReferenceFunction\n * }}\n *\n * @description\n * Contains functions used to create and find segment references.  Used as\n * a return value, to temporarily store them before StreamInfo is created.\n *\n * @property {shaka.extern.CreateSegmentIndexFunction} createSegmentIndex\n *   The createSegmentIndex function.\n * @property {shaka.extern.FindSegmentPositionFunction} findSegmentPosition\n *   The findSegmentPosition function.\n * @property {shaka.extern.GetSegmentReferenceFunction} getSegmentReference\n *   The getSegmentReference function.\n */\nshaka.dash.DashParser.SegmentIndexFunctions;\n\n\n/**\n * @typedef {{\n *   createSegmentIndex: shaka.extern.CreateSegmentIndexFunction,\n *   findSegmentPosition: shaka.extern.FindSegmentPositionFunction,\n *   getSegmentReference: shaka.extern.GetSegmentReferenceFunction,\n *   initSegmentReference: shaka.media.InitSegmentReference,\n *   scaledPresentationTimeOffset: number\n * }}\n *\n * @description\n * Contains information about a Stream.  This is passed from the createStream\n * methods.\n *\n * @property {shaka.extern.CreateSegmentIndexFunction} createSegmentIndex\n *   The createSegmentIndex function for the stream.\n * @property {shaka.extern.FindSegmentPositionFunction} findSegmentPosition\n *   The findSegmentPosition function for the stream.\n * @property {shaka.extern.GetSegmentReferenceFunction} getSegmentReference\n *   The getSegmentReference function for the stream.\n * @property {shaka.media.InitSegmentReference} initSegmentReference\n *   The init segment for the stream.\n * @property {number} scaledPresentationTimeOffset\n *   The presentation time offset for the stream, in seconds.\n */\nshaka.dash.DashParser.StreamInfo;\n\n\n/**\n * @override\n * @exportInterface\n */\nshaka.dash.DashParser.prototype.configure = function(config) {\n  goog.asserts.assert(config.dash != null,\n                      'DashManifestConfiguration should not be null!');\n\n  this.config_ = config;\n};\n\n\n/**\n * @override\n * @exportInterface\n */\nshaka.dash.DashParser.prototype.start = function(uri, playerInterface) {\n  goog.asserts.assert(this.config_, 'Must call configure() before start()!');\n  this.manifestUris_ = [uri];\n  this.playerInterface_ = playerInterface;\n  return this.requestManifest_().then(function(updateDuration) {\n    if (this.playerInterface_) {\n      this.setUpdateTimer_(updateDuration);\n    }\n    return this.manifest_;\n  }.bind(this));\n};\n\n\n/**\n * @override\n * @exportInterface\n */\nshaka.dash.DashParser.prototype.stop = function() {\n  this.playerInterface_ = null;\n  this.config_ = null;\n  this.manifestUris_ = [];\n  this.manifest_ = null;\n  this.periodIds_ = [];\n  this.segmentIndexMap_ = {};\n\n  if (this.updateTimer_ != null) {\n    window.clearTimeout(this.updateTimer_);\n    this.updateTimer_ = null;\n  }\n\n  return this.operationManager_.destroy();\n};\n\n\n/**\n * @override\n * @exportInterface\n */\nshaka.dash.DashParser.prototype.update = function() {\n  this.requestManifest_().catch(function(error) {\n    if (!this.playerInterface_) return;\n    this.playerInterface_.onError(error);\n  }.bind(this));\n};\n\n\n/**\n * @override\n * @exportInterface\n */\nshaka.dash.DashParser.prototype.onExpirationUpdated = function(\n    sessionId, expiration) {\n  // No-op\n};\n\n\n/**\n * Makes a network request for the manifest and parses the resulting data.\n *\n * @return {!Promise.<number>} Resolves with the time it took, in seconds, to\n *   fulfill the request and parse the data.\n * @private\n */\nshaka.dash.DashParser.prototype.requestManifest_ = function() {\n  const requestType = shaka.net.NetworkingEngine.RequestType.MANIFEST;\n  let request = shaka.net.NetworkingEngine.makeRequest(\n      this.manifestUris_, this.config_.retryParameters);\n  let networkingEngine = this.playerInterface_.networkingEngine;\n\n  const startTime = Date.now();\n  let operation = networkingEngine.request(requestType, request);\n  this.operationManager_.manage(operation);\n\n  return operation.promise.then((response) => {\n    // Detect calls to stop().\n    if (!this.playerInterface_) {\n      return;\n    }\n\n    // This may throw, but it will result in a failed promise.\n    return this.parseManifest_(response.data, response.uri);\n  }).then(() => {\n    // Keep track of how long the longest manifest update took.\n    const endTime = Date.now();\n    const updateDuration = (endTime - startTime) / 1000.0;\n    this.averageUpdateDuration_.sample(1, updateDuration);\n\n    // Let the caller know how long this update took.\n    return updateDuration;\n  });\n};\n\n\n/**\n * Parses the manifest XML.  This also handles updates and will update the\n * stored manifest.\n *\n * @param {ArrayBuffer} data\n * @param {string} finalManifestUri The final manifest URI, which may\n *   differ from this.manifestUri_ if there has been a redirect.\n * @return {!Promise}\n * @throws shaka.util.Error When there is a parsing error.\n * @private\n */\nshaka.dash.DashParser.prototype.parseManifest_ =\n    function(data, finalManifestUri) {\n  const Error = shaka.util.Error;\n  const MpdUtils = shaka.dash.MpdUtils;\n\n  let mpd = MpdUtils.parseXml(data, 'MPD');\n  if (!mpd) {\n    throw new Error(\n        Error.Severity.CRITICAL, Error.Category.MANIFEST,\n        Error.Code.DASH_INVALID_XML, finalManifestUri);\n  }\n\n  // Process the mpd to account for xlink connections.\n  let failGracefully = this.config_.dash.xlinkFailGracefully;\n  let xlinkOperation = MpdUtils.processXlinks(\n      mpd, this.config_.retryParameters, failGracefully, finalManifestUri,\n      this.playerInterface_.networkingEngine);\n  this.operationManager_.manage(xlinkOperation);\n  return xlinkOperation.promise.then((finalMpd) => {\n    return this.processManifest_(finalMpd, finalManifestUri);\n  });\n};\n\n\n/**\n * Takes a formatted MPD and converts it into a manifest.\n *\n * @param {!Element} mpd\n * @param {string} finalManifestUri The final manifest URI, which may\n *   differ from this.manifestUri_ if there has been a redirect.\n * @return {!Promise}\n * @throws shaka.util.Error When there is a parsing error.\n * @private\n */\nshaka.dash.DashParser.prototype.processManifest_ =\n    async function(mpd, finalManifestUri) {\n  const Functional = shaka.util.Functional;\n  const XmlUtils = shaka.util.XmlUtils;\n\n  // Get any Location elements.  This will update the manifest location and\n  // the base URI.\n  /** @type {!Array.<string>} */\n  let manifestBaseUris = [finalManifestUri];\n  /** @type {!Array.<string>} */\n  let locations = XmlUtils.findChildren(mpd, 'Location')\n                      .map(XmlUtils.getContents)\n                      .filter(Functional.isNotNull);\n  if (locations.length > 0) {\n    this.manifestUris_ = locations;\n    manifestBaseUris = locations;\n  }\n\n  let uris = XmlUtils.findChildren(mpd, 'BaseURL').map(XmlUtils.getContents);\n  let baseUris = shaka.util.ManifestParserUtils.resolveUris(\n      manifestBaseUris, uris);\n\n  let minBufferTime =\n      XmlUtils.parseAttr(mpd, 'minBufferTime', XmlUtils.parseDuration);\n  this.updatePeriod_ = /** @type {number} */ (XmlUtils.parseAttr(\n      mpd, 'minimumUpdatePeriod', XmlUtils.parseDuration, -1));\n\n  let presentationStartTime = XmlUtils.parseAttr(\n      mpd, 'availabilityStartTime', XmlUtils.parseDate);\n  let segmentAvailabilityDuration = XmlUtils.parseAttr(\n      mpd, 'timeShiftBufferDepth', XmlUtils.parseDuration);\n  let suggestedPresentationDelay = XmlUtils.parseAttr(\n      mpd, 'suggestedPresentationDelay', XmlUtils.parseDuration);\n  let maxSegmentDuration = XmlUtils.parseAttr(\n      mpd, 'maxSegmentDuration', XmlUtils.parseDuration);\n  let mpdType = mpd.getAttribute('type') || 'static';\n\n  /** @type {!shaka.media.PresentationTimeline} */\n  let presentationTimeline;\n  if (this.manifest_) {\n    presentationTimeline = this.manifest_.presentationTimeline;\n  } else {\n    // DASH IOP v3.0 suggests using a default delay between minBufferTime and\n    // timeShiftBufferDepth.  This is literally the range of all feasible\n    // choices for the value.  Nothing older than timeShiftBufferDepth is still\n    // available, and anything less than minBufferTime will cause buffering\n    // issues.\n    //\n    // We have decided that our default will be 1.5 * minBufferTime,\n    // or 10s (configurable) whichever is larger.  This is fairly conservative.\n    // Content providers should provide a suggestedPresentationDelay\n    // whenever possible to optimize the live streaming experience.\n    let defaultPresentationDelay = Math.max(\n        this.config_.dash.defaultPresentationDelay,\n        minBufferTime * 1.5);\n    let presentationDelay = suggestedPresentationDelay != null ?\n        suggestedPresentationDelay : defaultPresentationDelay;\n    presentationTimeline = new shaka.media.PresentationTimeline(\n        presentationStartTime, presentationDelay);\n  }\n\n  /** @type {shaka.dash.DashParser.Context} */\n  let context = {\n    // Don't base on updatePeriod_ since emsg boxes can cause manifest updates.\n    dynamic: mpdType != 'static',\n    presentationTimeline: presentationTimeline,\n    period: null,\n    periodInfo: null,\n    adaptationSet: null,\n    representation: null,\n    bandwidth: 0,\n    indexRangeWarningGiven: false,\n  };\n\n  let periodsAndDuration = this.parsePeriods_(context, baseUris, mpd);\n  let duration = periodsAndDuration.duration;\n  let periods = periodsAndDuration.periods;\n\n  presentationTimeline.setStatic(mpdType == 'static');\n  if (mpdType == 'static' || !periodsAndDuration.durationDerivedFromPeriods) {\n    // Ignore duration calculated from Period lengths if this is dynamic.\n    presentationTimeline.setDuration(duration || Infinity);\n  }\n\n  let isLive = presentationTimeline.isLive();\n\n  // If it's live, we check for an override.\n  if (isLive && !isNaN(this.config_.availabilityWindowOverride)) {\n    segmentAvailabilityDuration = this.config_.availabilityWindowOverride;\n  }\n\n  // If it's null, that means segments are always available.  This is always the\n  // case for VOD, and sometimes the case for live.\n  if (segmentAvailabilityDuration == null) {\n    segmentAvailabilityDuration = Infinity;\n  }\n\n  presentationTimeline.setSegmentAvailabilityDuration(\n      segmentAvailabilityDuration);\n\n  // Use @maxSegmentDuration to override smaller, derived values.\n  presentationTimeline.notifyMaxSegmentDuration(maxSegmentDuration || 1);\n  if (goog.DEBUG) presentationTimeline.assertIsValid();\n\n  // These steps are not done on manifest update.\n  if (!this.manifest_) {\n    this.manifest_ = {\n      presentationTimeline: presentationTimeline,\n      periods: periods,\n      offlineSessionIds: [],\n      minBufferTime: minBufferTime || 0,\n    };\n\n    // We only need to do clock sync when we're using presentation start time.\n    // This condition also excludes VOD streams.\n    if (presentationTimeline.usingPresentationStartTime()) {\n      let timingElements = XmlUtils.findChildren(mpd, 'UTCTiming');\n      const offset =\n          await this.parseUtcTiming_(baseUris, timingElements, isLive);\n      // Detect calls to stop().\n      if (!this.playerInterface_) {\n        return;\n      }\n      presentationTimeline.setClockOffset(offset);\n    }\n  }\n};\n\n\n/**\n * Reads and parses the periods from the manifest.  This first does some\n * partial parsing so the start and duration is available when parsing children.\n *\n * @param {shaka.dash.DashParser.Context} context\n * @param {!Array.<string>} baseUris\n * @param {!Element} mpd\n * @return {{\n *   periods: !Array.<shaka.extern.Period>,\n *   duration: ?number,\n *   durationDerivedFromPeriods: boolean\n * }}\n * @private\n */\nshaka.dash.DashParser.prototype.parsePeriods_ = function(\n    context, baseUris, mpd) {\n  const XmlUtils = shaka.util.XmlUtils;\n  let presentationDuration = XmlUtils.parseAttr(\n      mpd, 'mediaPresentationDuration', XmlUtils.parseDuration);\n\n  let periods = [];\n  let prevEnd = 0;\n  let periodNodes = XmlUtils.findChildren(mpd, 'Period');\n  for (let i = 0; i < periodNodes.length; i++) {\n    let elem = periodNodes[i];\n    let start = /** @type {number} */ (\n        XmlUtils.parseAttr(elem, 'start', XmlUtils.parseDuration, prevEnd));\n    let givenDuration =\n        XmlUtils.parseAttr(elem, 'duration', XmlUtils.parseDuration);\n\n    let periodDuration = null;\n    if (i != periodNodes.length - 1) {\n      // \"The difference between the start time of a Period and the start time\n      // of the following Period is the duration of the media content\n      // represented by this Period.\"\n      let nextPeriod = periodNodes[i + 1];\n      let nextStart =\n          XmlUtils.parseAttr(nextPeriod, 'start', XmlUtils.parseDuration);\n      if (nextStart != null) {\n        periodDuration = nextStart - start;\n      }\n    } else if (presentationDuration != null) {\n      // \"The Period extends until the Period.start of the next Period, or\n      // until the end of the Media Presentation in the case of the last\n      // Period.\"\n      periodDuration = presentationDuration - start;\n    }\n\n    let threshold =\n        shaka.util.ManifestParserUtils.GAP_OVERLAP_TOLERANCE_SECONDS;\n    if (periodDuration && givenDuration &&\n        Math.abs(periodDuration - givenDuration) > threshold) {\n      shaka.log.warning('There is a gap/overlap between Periods', elem);\n    }\n    // Only use the @duration in the MPD if we can't calculate it.  We should\n    // favor the @start of the following Period.  This ensures that there aren't\n    // gaps between Periods.\n    if (periodDuration == null) {\n      periodDuration = givenDuration;\n    }\n\n    // Parse child nodes.\n    let info = {\n      start: start,\n      duration: periodDuration,\n      node: elem,\n      isLastPeriod: periodDuration == null || i == periodNodes.length - 1,\n    };\n    let period = this.parsePeriod_(context, baseUris, info);\n    periods.push(period);\n\n    // If the period ID is new, add it to the list.  This must be done for both\n    // the initial manifest parse and for updates.\n    // See https://github.com/google/shaka-player/issues/963\n    let periodId = context.period.id;\n    goog.asserts.assert(periodId, 'Period IDs should not be null!');\n    if (this.periodIds_.indexOf(periodId) == -1) {\n      this.periodIds_.push(periodId);\n\n      // If this is an update, call filterNewPeriod and add it to the manifest.\n      // If this is the first parse of the manifest (this.manifest_ == null),\n      // filterAllPeriods will be called later.\n      if (this.manifest_) {\n        this.playerInterface_.filterNewPeriod(period);\n        this.manifest_.periods.push(period);\n      }\n    }\n\n    if (periodDuration == null) {\n      if (i != periodNodes.length - 1) {\n        // If the duration is still null and we aren't at the end, then we will\n        // skip any remaining periods.\n        shaka.log.warning(\n            'Skipping Period', i + 1, 'and any subsequent Periods:', 'Period',\n            i + 1, 'does not have a valid start time.', periods[i + 1]);\n      }\n\n      // The duration is unknown, so the end is unknown.\n      prevEnd = null;\n      break;\n    }\n\n    prevEnd = start + periodDuration;\n  } // end of period parsing loop\n\n  // Call filterAllPeriods if this is the initial parse.\n  if (this.manifest_ == null) {\n    this.playerInterface_.filterAllPeriods(periods);\n  }\n\n  if (presentationDuration != null) {\n    if (prevEnd != presentationDuration) {\n      shaka.log.warning(\n          '@mediaPresentationDuration does not match the total duration of all',\n          'Periods.');\n      // Assume @mediaPresentationDuration is correct.\n    }\n    return {\n      periods: periods,\n      duration: presentationDuration,\n      durationDerivedFromPeriods: false,\n    };\n  } else {\n    return {\n      periods: periods,\n      duration: prevEnd,\n      durationDerivedFromPeriods: true,\n    };\n  }\n};\n\n\n/**\n * Parses a Period XML element.  Unlike the other parse methods, this is not\n * given the Node; it is given a PeriodInfo structure.  Also, partial parsing\n * was done before this was called so start and duration are valid.\n *\n * @param {shaka.dash.DashParser.Context} context\n * @param {!Array.<string>} baseUris\n * @param {shaka.dash.DashParser.PeriodInfo} periodInfo\n * @return {shaka.extern.Period}\n * @throws shaka.util.Error When there is a parsing error.\n * @private\n */\nshaka.dash.DashParser.prototype.parsePeriod_ = function(\n    context, baseUris, periodInfo) {\n  const Functional = shaka.util.Functional;\n  const XmlUtils = shaka.util.XmlUtils;\n  const ContentType = shaka.util.ManifestParserUtils.ContentType;\n\n  context.period = this.createFrame_(periodInfo.node, null, baseUris);\n  context.periodInfo = periodInfo;\n\n  // If the period doesn't have an ID, give it one based on its start time.\n  if (!context.period.id) {\n    shaka.log.info(\n        'No Period ID given for Period with start time ' + periodInfo.start +\n        ',  Assigning a default');\n    context.period.id = '__shaka_period_' + periodInfo.start;\n  }\n\n  let eventStreamNodes = XmlUtils.findChildren(periodInfo.node, 'EventStream');\n  eventStreamNodes.forEach(\n      this.parseEventStream_.bind(this, periodInfo.start, periodInfo.duration));\n\n  let adaptationSetNodes =\n      XmlUtils.findChildren(periodInfo.node, 'AdaptationSet');\n  let adaptationSets = adaptationSetNodes\n      .map(this.parseAdaptationSet_.bind(this, context))\n      .filter(Functional.isNotNull);\n\n  // For dynamic manifests, we use rep IDs internally, and they must be unique.\n  if (context.dynamic) {\n    let representationIds = adaptationSets\n        .map(function(as) { return as.representationIds; })\n        .reduce(Functional.collapseArrays, []);\n    let uniqueRepIds = representationIds.filter(Functional.isNotDuplicate);\n\n    if (representationIds.length != uniqueRepIds.length) {\n      throw new shaka.util.Error(\n          shaka.util.Error.Severity.CRITICAL,\n          shaka.util.Error.Category.MANIFEST,\n          shaka.util.Error.Code.DASH_DUPLICATE_REPRESENTATION_ID);\n    }\n  }\n\n  let normalAdaptationSets = adaptationSets\n      .filter(function(as) { return !as.trickModeFor; });\n\n  let trickModeAdaptationSets = adaptationSets\n      .filter(function(as) { return as.trickModeFor; });\n\n  // Attach trick mode tracks to normal tracks.\n  trickModeAdaptationSets.forEach(function(trickModeSet) {\n    // There may be multiple trick mode streams, but we do not currently\n    // support that.  Just choose one.\n    let trickModeVideo = trickModeSet.streams[0];\n    let targetId = trickModeSet.trickModeFor;\n    normalAdaptationSets.forEach(function(normalSet) {\n      if (normalSet.id == targetId) {\n        normalSet.streams.forEach(function(stream) {\n          stream.trickModeVideo = trickModeVideo;\n        });\n      }\n    });\n  });\n\n  let videoSets = this.getSetsOfType_(normalAdaptationSets, ContentType.VIDEO);\n  let audioSets = this.getSetsOfType_(normalAdaptationSets, ContentType.AUDIO);\n\n  if (!videoSets.length && !audioSets.length) {\n    throw new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.MANIFEST,\n        shaka.util.Error.Code.DASH_EMPTY_PERIOD);\n  }\n\n  // In case of audio-only or video-only content, we create an array of one item\n  // containing a null.  This way, the double-loop works for all kinds of\n  // content.\n  if (!audioSets.length) {\n    audioSets = [null];\n  }\n  if (!videoSets.length) {\n    videoSets = [null];\n  }\n\n  // TODO: Limit number of combinations.  Come up with a heuristic\n  // to decide which audio tracks to combine with which video tracks.\n  let variants = [];\n  for (let i = 0; i < audioSets.length; i++) {\n    for (let j = 0; j < videoSets.length; j++) {\n      let audioSet = audioSets[i];\n      let videoSet = videoSets[j];\n      this.createVariants_(audioSet, videoSet, variants);\n    }\n  }\n\n  let textSets = this.getSetsOfType_(normalAdaptationSets, ContentType.TEXT);\n  let textStreams = [];\n  for (let i = 0; i < textSets.length; i++) {\n    textStreams.push.apply(textStreams, textSets[i].streams);\n  }\n\n  return {\n    startTime: periodInfo.start,\n    textStreams: textStreams,\n    variants: variants,\n  };\n};\n\n\n/**\n * @param {!Array.<!shaka.dash.DashParser.AdaptationInfo>} adaptationSets\n * @param {string} type\n * @return {!Array.<!shaka.dash.DashParser.AdaptationInfo>}\n * @private\n */\nshaka.dash.DashParser.prototype.getSetsOfType_ = function(\n    adaptationSets, type) {\n  return adaptationSets.filter(function(as) {\n    return as.contentType == type;\n  });\n};\n\n\n/**\n * Combines Streams into Variants\n *\n * @param {?shaka.dash.DashParser.AdaptationInfo} audio\n * @param {?shaka.dash.DashParser.AdaptationInfo} video\n * @param {!Array.<shaka.extern.Variant>} variants New variants are pushed onto\n *   this array.\n * @private\n */\nshaka.dash.DashParser.prototype.createVariants_ =\n    function(audio, video, variants) {\n  const ContentType = shaka.util.ManifestParserUtils.ContentType;\n\n  // Since both audio and video are of the same type, this assertion will catch\n  // certain mistakes at runtime that the compiler would miss.\n  goog.asserts.assert(!audio || audio.contentType == ContentType.AUDIO,\n                      'Audio parameter mismatch!');\n  goog.asserts.assert(!video || video.contentType == ContentType.VIDEO,\n                      'Video parameter mismatch!');\n\n  /** @type {number} */\n  let bandwidth;\n  /** @type {shaka.extern.Variant} */\n  let variant;\n\n  if (!audio && !video) {\n    return;\n  }\n\n  if (audio && video) {\n    // Audio+video variants\n    const DrmEngine = shaka.media.DrmEngine;\n    if (DrmEngine.areDrmCompatible(audio.drmInfos, video.drmInfos)) {\n      let drmInfos = DrmEngine.getCommonDrmInfos(audio.drmInfos,\n                                                 video.drmInfos);\n\n      for (let i = 0; i < audio.streams.length; i++) {\n        for (let j = 0; j < video.streams.length; j++) {\n          bandwidth =\n              (video.streams[j].bandwidth || 0) +\n              (audio.streams[i].bandwidth || 0);\n          variant = {\n            id: this.globalId_++,\n            language: audio.language,\n            primary: audio.main || video.main,\n            audio: audio.streams[i],\n            video: video.streams[j],\n            bandwidth: bandwidth,\n            drmInfos: drmInfos,\n            allowedByApplication: true,\n            allowedByKeySystem: true,\n          };\n\n          variants.push(variant);\n        }\n      }\n    }\n  } else {\n    // Audio or video only variants\n    let set = audio || video;\n    for (let i = 0; i < set.streams.length; i++) {\n      bandwidth = set.streams[i].bandwidth || 0;\n      variant = {\n        id: this.globalId_++,\n        language: set.language || 'und',\n        primary: set.main,\n        audio: audio ? set.streams[i] : null,\n        video: video ? set.streams[i] : null,\n        bandwidth: bandwidth,\n        drmInfos: set.drmInfos,\n        allowedByApplication: true,\n        allowedByKeySystem: true,\n      };\n\n      variants.push(variant);\n    }\n  }\n};\n\n\n/**\n * Parses an AdaptationSet XML element.\n *\n * @param {shaka.dash.DashParser.Context} context\n * @param {!Element} elem The AdaptationSet element.\n * @return {?shaka.dash.DashParser.AdaptationInfo}\n * @throws shaka.util.Error When there is a parsing error.\n * @private\n */\nshaka.dash.DashParser.prototype.parseAdaptationSet_ = function(context, elem) {\n  const XmlUtils = shaka.util.XmlUtils;\n  const Functional = shaka.util.Functional;\n  const ManifestParserUtils = shaka.util.ManifestParserUtils;\n  const ContentType = ManifestParserUtils.ContentType;\n\n  context.adaptationSet = this.createFrame_(elem, context.period, null);\n\n  let main = false;\n  let roleElements = XmlUtils.findChildren(elem, 'Role');\n  let roleValues = roleElements.map(function(role) {\n    return role.getAttribute('value');\n  }).filter(Functional.isNotNull);\n\n  // Default kind for text streams is 'subtitle' if unspecified in the manifest.\n  let kind = undefined;\n  const isText =\n      context.adaptationSet.contentType == ManifestParserUtils.ContentType.TEXT;\n  if (isText) {\n    kind = ManifestParserUtils.TextStreamKind.SUBTITLE;\n  }\n\n  for (let i = 0; i < roleElements.length; i++) {\n    let scheme = roleElements[i].getAttribute('schemeIdUri');\n    if (scheme == null || scheme == 'urn:mpeg:dash:role:2011') {\n      // These only apply for the given scheme, but allow them to be specified\n      // if there is no scheme specified.\n      // See: DASH section 5.8.5.5\n      let value = roleElements[i].getAttribute('value');\n      switch (value) {\n        case 'main':\n          main = true;\n          break;\n        case 'caption':\n        case 'subtitle':\n          kind = value;\n          break;\n      }\n    }\n  }\n\n  let essentialProperties = XmlUtils.findChildren(elem, 'EssentialProperty');\n  // ID of real AdaptationSet if this is a trick mode set:\n  let trickModeFor = null;\n  let unrecognizedEssentialProperty = false;\n  essentialProperties.forEach(function(prop) {\n    let schemeId = prop.getAttribute('schemeIdUri');\n    if (schemeId == 'http://dashif.org/guidelines/trickmode') {\n      trickModeFor = prop.getAttribute('value');\n    } else {\n      unrecognizedEssentialProperty = true;\n    }\n  });\n\n  const accessibilities = XmlUtils.findChildren(elem, 'Accessibility');\n  const LanguageUtils = shaka.util.LanguageUtils;\n  let closedCaptions = {};\n  let captionId = 0;\n  for (const prop of accessibilities) {\n    let schemeId = prop.getAttribute('schemeIdUri');\n    if (schemeId == 'urn:scte:dash:cc:cea-608:2015' ||\n        schemeId == 'urn:scte:dash:cc:cea-708:2015') {\n      let closedCaptionsValue = prop.getAttribute('value');\n      if (closedCaptionsValue != null) {\n        closedCaptionsValue.split(';').forEach((captionStr) => {\n          // Some closed caption strings have channel number and language, like\n          // \"CC1=eng\", some may have only language, like \"eng\".\n          // When the channel number is not provided, use a 0-based index as the\n          // key.\n          let channel;\n          let language;\n          if (captionStr.indexOf('=') == -1) {\n            channel = (captionId++).toString();\n            language = captionStr;\n          } else {\n            [channel, language] = captionStr.split('=');\n          }\n          closedCaptions[channel] = LanguageUtils.normalize(language);\n        });\n      }\n    }\n  }\n\n  // According to DASH spec (2014) section 5.8.4.8, \"the successful processing\n  // of the descriptor is essential to properly use the information in the\n  // parent element\".  According to DASH IOP v3.3, section 3.3.4, \"if the scheme\n  // or the value\" for EssentialProperty is not recognized, \"the DASH client\n  // shall ignore the parent element.\"\n  if (unrecognizedEssentialProperty) {\n    // Stop parsing this AdaptationSet and let the caller filter out the nulls.\n    return null;\n  }\n\n  let contentProtectionElems = XmlUtils.findChildren(elem, 'ContentProtection');\n  let contentProtection = shaka.dash.ContentProtection.parseFromAdaptationSet(\n      contentProtectionElems, this.config_.dash.customScheme,\n      this.config_.dash.ignoreDrmInfo);\n\n  let language =\n      shaka.util.LanguageUtils.normalize(elem.getAttribute('lang') || 'und');\n\n  // This attribute is currently non-standard, but it is supported by Kaltura.\n  let label = elem.getAttribute('label');\n\n  // Parse Representations into Streams.\n  let representations = XmlUtils.findChildren(elem, 'Representation');\n  let streams = representations\n      .map(this.parseRepresentation_.bind(this, context, contentProtection,\n          kind, language, label, main, roleValues, closedCaptions))\n      .filter(function(s) { return !!s; });\n\n  if (streams.length == 0) {\n    // Ignore empty AdaptationSets if they are for text content.\n    if (isText) {\n      return null;\n    }\n    throw new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.MANIFEST,\n        shaka.util.Error.Code.DASH_EMPTY_ADAPTATION_SET);\n  }\n\n  // If AdaptationSet's type is unknown or is ambiguously \"application\",\n  // guess based on the information in the first stream.  If the attributes\n  // mimeType and codecs are split across levels, they will both be inherited\n  // down to the stream level by this point, so the stream will have all the\n  // necessary information.\n  if (!context.adaptationSet.contentType ||\n      context.adaptationSet.contentType == ContentType.APPLICATION) {\n    let mimeType = streams[0].mimeType;\n    let codecs = streams[0].codecs;\n    context.adaptationSet.contentType =\n        shaka.dash.DashParser.guessContentType_(mimeType, codecs);\n\n    streams.forEach(function(stream) {\n      stream.type = context.adaptationSet.contentType;\n    });\n  }\n\n  streams.forEach(function(stream) {\n    // Some DRM license providers require that we have a default\n    // key ID from the manifest in the wrapped license request.\n    // Thus, it should be put in drmInfo to be accessible to request filters.\n    contentProtection.drmInfos.forEach(function(drmInfo) {\n      if (stream.keyId) {\n        drmInfo.keyIds.push(stream.keyId);\n      }\n    });\n  });\n\n  let repIds = representations\n      .map(function(node) { return node.getAttribute('id'); })\n      .filter(shaka.util.Functional.isNotNull);\n\n  return {\n    id: context.adaptationSet.id || ('__fake__' + this.globalId_++),\n    contentType: context.adaptationSet.contentType,\n    language: language,\n    main: main,\n    streams: streams,\n    drmInfos: contentProtection.drmInfos,\n    trickModeFor: trickModeFor,\n    representationIds: repIds,\n  };\n};\n\n\n/**\n * Parses a Representation XML element.\n *\n * @param {shaka.dash.DashParser.Context} context\n * @param {shaka.dash.ContentProtection.Context} contentProtection\n * @param {(string|undefined)} kind\n * @param {string} language\n * @param {string} label\n * @param {boolean} isPrimary\n * @param {!Array.<string>} roles\n * @param {Object.<string, string>} closedCaptions\n * @param {!Element} node\n * @return {?shaka.extern.Stream} The Stream, or null when there is a\n *   non-critical parsing error.\n * @throws shaka.util.Error When there is a parsing error.\n * @private\n */\nshaka.dash.DashParser.prototype.parseRepresentation_ = function(\n    context, contentProtection, kind, language, label, isPrimary, roles,\n    closedCaptions, node) {\n  const XmlUtils = shaka.util.XmlUtils;\n  const ContentType = shaka.util.ManifestParserUtils.ContentType;\n\n  context.representation = this.createFrame_(node, context.adaptationSet, null);\n  if (!this.verifyRepresentation_(context.representation)) {\n    shaka.log.warning('Skipping Representation', context.representation);\n    return null;\n  }\n\n  // NOTE: bandwidth is a mandatory attribute according to the spec, and zero\n  // does not make sense in the DASH spec's bandwidth formulas.\n  // In some content, however, the attribute is missing or zero.\n  // To avoid NaN at the variant level on broken content, fall back to zero.\n  // https://github.com/google/shaka-player/issues/938#issuecomment-317278180\n  context.bandwidth =\n      XmlUtils.parseAttr(node, 'bandwidth', XmlUtils.parsePositiveInt) || 0;\n\n  /** @type {?shaka.dash.DashParser.StreamInfo} */\n  let streamInfo;\n\n  const contentType = context.representation.contentType;\n  const isText = contentType == ContentType.TEXT ||\n                 contentType == ContentType.APPLICATION;\n\n  try {\n    const requestInitSegment = this.requestInitSegment_.bind(this);\n    if (context.representation.segmentBase) {\n      streamInfo = shaka.dash.SegmentBase.createStream(\n          context, requestInitSegment);\n    } else if (context.representation.segmentList) {\n      streamInfo = shaka.dash.SegmentList.createStream(\n          context, this.segmentIndexMap_);\n    } else if (context.representation.segmentTemplate) {\n      streamInfo = shaka.dash.SegmentTemplate.createStream(\n          context, requestInitSegment, this.segmentIndexMap_, !!this.manifest_);\n    } else {\n      goog.asserts.assert(isText,\n          'Must have Segment* with non-text streams.');\n\n      let baseUris = context.representation.baseUris;\n      let duration = context.periodInfo.duration || 0;\n      streamInfo = {\n        createSegmentIndex: Promise.resolve.bind(Promise),\n        findSegmentPosition:\n            /** @return {?number} */ function(/** number */ time) {\n              if (time >= 0 && time < duration) {\n                return 1;\n              } else {\n                return null;\n              }\n            },\n        getSegmentReference:\n            /** @return {shaka.media.SegmentReference} */\n            function(/** number */ ref) {\n              if (ref != 1) {\n                return null;\n              }\n\n              return new shaka.media.SegmentReference(\n                  1, 0, duration, function() { return baseUris; }, 0, null);\n            },\n        initSegmentReference: null,\n        scaledPresentationTimeOffset: 0,\n      };\n    }\n  } catch (error) {\n    if (isText && error.code == shaka.util.Error.Code.DASH_NO_SEGMENT_INFO) {\n      // We will ignore any DASH_NO_SEGMENT_INFO errors for text streams.\n      return null;\n    }\n\n    // For anything else, re-throw.\n    throw error;\n  }\n\n  let contentProtectionElems = XmlUtils.findChildren(node, 'ContentProtection');\n  let keyId = shaka.dash.ContentProtection.parseFromRepresentation(\n      contentProtectionElems, this.config_.dash.customScheme,\n      contentProtection, this.config_.dash.ignoreDrmInfo);\n\n  return {\n    id: this.globalId_++,\n    originalId: context.representation.id,\n    createSegmentIndex: streamInfo.createSegmentIndex,\n    findSegmentPosition: streamInfo.findSegmentPosition,\n    getSegmentReference: streamInfo.getSegmentReference,\n    initSegmentReference: streamInfo.initSegmentReference,\n    presentationTimeOffset: streamInfo.scaledPresentationTimeOffset,\n    mimeType: context.representation.mimeType,\n    codecs: context.representation.codecs,\n    frameRate: context.representation.frameRate,\n    bandwidth: context.bandwidth,\n    width: context.representation.width,\n    height: context.representation.height,\n    kind: kind,\n    encrypted: contentProtection.drmInfos.length > 0,\n    keyId: keyId,\n    language: language,\n    label: label,\n    type: context.adaptationSet.contentType,\n    primary: isPrimary,\n    trickModeVideo: null,\n    emsgSchemeIdUris:\n        context.representation.emsgSchemeIdUris,\n    roles: roles,\n    channelsCount: context.representation.numChannels,\n    closedCaptions: closedCaptions,\n  };\n};\n\n\n/**\n * Called when the update timer ticks.\n *\n * @private\n */\nshaka.dash.DashParser.prototype.onUpdate_ = function() {\n  goog.asserts.assert(this.updateTimer_, 'Should only be called by timer');\n  goog.asserts.assert(this.updatePeriod_ >= 0,\n                      'There should be an update period');\n\n  shaka.log.info('Updating manifest...');\n\n  this.updateTimer_ = null;\n\n  this.requestManifest_().then(function(updateDuration) {\n    // Detect a call to stop()\n    if (!this.playerInterface_) {\n      return;\n    }\n\n    // Ensure the next update occurs within |updatePeriod_| seconds by taking\n    // into account the time it took to update the manifest.\n    this.setUpdateTimer_(updateDuration);\n  }.bind(this)).catch(function(error) {\n    goog.asserts.assert(error instanceof shaka.util.Error,\n                        'Should only receive a Shaka error');\n\n    // Try updating again, but ensure we haven't been destroyed.\n    if (this.playerInterface_) {\n      // We will retry updating, so override the severity of the error.\n      error.severity = shaka.util.Error.Severity.RECOVERABLE;\n      this.playerInterface_.onError(error);\n\n      this.setUpdateTimer_(0);\n    }\n  }.bind(this));\n};\n\n\n/**\n * Sets the update timer.  Does nothing if the manifest does not specify an\n * update period.\n *\n * @param {number} offset An offset, in seconds, to apply to the manifest's\n *   update period.\n * @private\n */\nshaka.dash.DashParser.prototype.setUpdateTimer_ = function(offset) {\n  // NOTE: An updatePeriod_ of -1 means the attribute was missing.\n  // An attribute which is present and set to 0 should still result in periodic\n  // updates.  For more, see: https://github.com/google/shaka-player/issues/331\n  if (this.updatePeriod_ < 0) {\n    return;\n  }\n  goog.asserts.assert(this.updateTimer_ == null,\n                      'Timer should not be already set');\n\n  let period = Math.max(\n      shaka.dash.DashParser.MIN_UPDATE_PERIOD_,\n      this.updatePeriod_ - offset,\n      this.averageUpdateDuration_.getEstimate());\n  shaka.log.debug('actual update period', period);\n\n  let callback = this.onUpdate_.bind(this);\n  this.updateTimer_ = window.setTimeout(callback, 1000 * period);\n};\n\n\n/**\n * Creates a new inheritance frame for the given element.\n *\n * @param {!Element} elem\n * @param {?shaka.dash.DashParser.InheritanceFrame} parent\n * @param {Array.<string>} baseUris\n * @return {shaka.dash.DashParser.InheritanceFrame}\n * @private\n */\nshaka.dash.DashParser.prototype.createFrame_ = function(\n    elem, parent, baseUris) {\n  goog.asserts.assert(parent || baseUris,\n                      'Must provide either parent or baseUris');\n  const ManifestParserUtils = shaka.util.ManifestParserUtils;\n  const XmlUtils = shaka.util.XmlUtils;\n  parent = parent || /** @type {shaka.dash.DashParser.InheritanceFrame} */ ({\n    contentType: '',\n    mimeType: '',\n    codecs: '',\n    emsgSchemeIdUris: [],\n    frameRate: undefined,\n    numChannels: null,\n  });\n  baseUris = baseUris || parent.baseUris;\n\n  let parseNumber = XmlUtils.parseNonNegativeInt;\n  let evalDivision = XmlUtils.evalDivision;\n  let uris = XmlUtils.findChildren(elem, 'BaseURL').map(XmlUtils.getContents);\n\n  let contentType = elem.getAttribute('contentType') || parent.contentType;\n  let mimeType = elem.getAttribute('mimeType') || parent.mimeType;\n  let codecs = elem.getAttribute('codecs') || parent.codecs;\n  let frameRate =\n      XmlUtils.parseAttr(elem, 'frameRate', evalDivision) || parent.frameRate;\n  let emsgSchemeIdUris = this.emsgSchemeIdUris_(\n      XmlUtils.findChildren(elem, 'InbandEventStream'),\n      parent.emsgSchemeIdUris);\n  let audioChannelConfigs =\n      XmlUtils.findChildren(elem, 'AudioChannelConfiguration');\n  let numChannels =\n      this.parseAudioChannels_(audioChannelConfigs) || parent.numChannels;\n\n  if (!contentType) {\n    contentType = shaka.dash.DashParser.guessContentType_(mimeType, codecs);\n  }\n\n  return {\n    baseUris: ManifestParserUtils.resolveUris(baseUris, uris),\n    segmentBase: XmlUtils.findChild(elem, 'SegmentBase') || parent.segmentBase,\n    segmentList: XmlUtils.findChild(elem, 'SegmentList') || parent.segmentList,\n    segmentTemplate:\n        XmlUtils.findChild(elem, 'SegmentTemplate') || parent.segmentTemplate,\n    width: XmlUtils.parseAttr(elem, 'width', parseNumber) || parent.width,\n    height: XmlUtils.parseAttr(elem, 'height', parseNumber) || parent.height,\n    contentType: contentType,\n    mimeType: mimeType,\n    codecs: codecs,\n    frameRate: frameRate,\n    emsgSchemeIdUris: emsgSchemeIdUris,\n    id: elem.getAttribute('id'),\n    numChannels: numChannels,\n  };\n};\n\n/**\n * Returns a new array of InbandEventStream schemeIdUri containing the union of\n * the ones parsed from inBandEventStreams and the ones provided in\n * emsgSchemeIdUris.\n *\n * @param {!Array.<!Element>} inBandEventStreams Array of InbandEventStream\n *     elements to parse and add to the returned array.\n * @param {!Array.<string>} emsgSchemeIdUris Array of parsed\n *     InbandEventStream schemeIdUri attributes to add to the returned array.\n * @return {!Array.<string>} schemeIdUris Array of parsed\n *     InbandEventStream schemeIdUri attributes.\n * @private\n */\nshaka.dash.DashParser.prototype.emsgSchemeIdUris_ = function(\n    inBandEventStreams, emsgSchemeIdUris) {\n  let schemeIdUris = emsgSchemeIdUris.slice();\n  for (let event of inBandEventStreams) {\n    let schemeIdUri = event.getAttribute('schemeIdUri');\n    if (schemeIdUris.indexOf(schemeIdUri) == -1) {\n      schemeIdUris.push(schemeIdUri);\n    }\n  }\n  return schemeIdUris;\n};\n\n/**\n * @param {!Array.<!Element>} audioChannelConfigs An array of\n *   AudioChannelConfiguration elements.\n * @return {?number} The number of audio channels, or null if unknown.\n * @private\n */\nshaka.dash.DashParser.prototype.parseAudioChannels_ =\n    function(audioChannelConfigs) {\n  for (let i = 0; i < audioChannelConfigs.length; ++i) {\n    let elem = audioChannelConfigs[i];\n\n    let scheme = elem.getAttribute('schemeIdUri');\n    if (!scheme) continue;\n\n    let value = elem.getAttribute('value');\n    if (!value) continue;\n\n    switch (scheme) {\n      case 'urn:mpeg:dash:outputChannelPositionList:2012':\n        // A space-separated list of speaker positions, so the number of\n        // channels is the length of this list.\n        return value.trim().split(/ +/).length;\n\n      case 'urn:mpeg:dash:23003:3:audio_channel_configuration:2011':\n      case 'urn:dts:dash:audio_channel_configuration:2012': {\n        // As far as we can tell, this is a number of channels.\n        let intValue = parseInt(value, 10);\n        if (!intValue) {  // 0 or NaN\n          shaka.log.warning('Channel parsing failure! ' +\n                            'Ignoring scheme and value', scheme, value);\n          continue;\n        }\n        return intValue;\n      }\n\n      case 'tag:dolby.com,2014:dash:audio_channel_configuration:2011':\n      case 'urn:dolby:dash:audio_channel_configuration:2011': {\n        // A hex-encoded 16-bit integer, in which each bit represents a channel.\n        let hexValue = parseInt(value, 16);\n        if (!hexValue) {  // 0 or NaN\n          shaka.log.warning('Channel parsing failure! ' +\n                            'Ignoring scheme and value', scheme, value);\n          continue;\n        }\n        // Count the 1-bits in hexValue.\n        let numBits = 0;\n        while (hexValue) {\n          if (hexValue & 1) ++numBits;\n          hexValue >>= 1;\n        }\n        return numBits;\n      }\n\n      default:\n        shaka.log.warning('Unrecognized audio channel scheme:', scheme, value);\n        continue;\n    }\n  }\n\n  return null;\n};\n\n\n/**\n * Verifies that a Representation has exactly one Segment* element.  Prints\n * warnings if there is a problem.\n *\n * @param {shaka.dash.DashParser.InheritanceFrame} frame\n * @return {boolean} True if the Representation is usable; otherwise return\n *   false.\n * @private\n */\nshaka.dash.DashParser.prototype.verifyRepresentation_ = function(frame) {\n  const ContentType = shaka.util.ManifestParserUtils.ContentType;\n\n  let n = 0;\n  n += frame.segmentBase ? 1 : 0;\n  n += frame.segmentList ? 1 : 0;\n  n += frame.segmentTemplate ? 1 : 0;\n\n  if (n == 0) {\n    // TODO: Extend with the list of MIME types registered to TextEngine.\n    if (frame.contentType == ContentType.TEXT ||\n        frame.contentType == ContentType.APPLICATION) {\n      return true;\n    } else {\n      shaka.log.warning(\n          'Representation does not contain a segment information source:',\n          'the Representation must contain one of SegmentBase, SegmentList,',\n          'SegmentTemplate, or explicitly indicate that it is \"text\".',\n          frame);\n      return false;\n    }\n  }\n\n  if (n != 1) {\n    shaka.log.warning(\n        'Representation contains multiple segment information sources:',\n        'the Representation should only contain one of SegmentBase,',\n        'SegmentList, or SegmentTemplate.',\n        frame);\n    if (frame.segmentBase) {\n      shaka.log.info('Using SegmentBase by default.');\n      frame.segmentList = null;\n      frame.segmentTemplate = null;\n    } else {\n      goog.asserts.assert(frame.segmentList, 'There should be a SegmentList');\n      shaka.log.info('Using SegmentList by default.');\n      frame.segmentTemplate = null;\n    }\n  }\n\n  return true;\n};\n\n\n/**\n * Makes a request to the given URI and calculates the clock offset.\n *\n * @param {!Array.<string>} baseUris\n * @param {string} uri\n * @param {string} method\n * @return {!Promise.<number>}\n * @private\n */\nshaka.dash.DashParser.prototype.requestForTiming_ =\n    function(baseUris, uri, method) {\n  let requestUris = shaka.util.ManifestParserUtils.resolveUris(baseUris, [uri]);\n  let request = shaka.net.NetworkingEngine.makeRequest(\n      requestUris, this.config_.retryParameters);\n  request.method = method;\n  const type = shaka.net.NetworkingEngine.RequestType.TIMING;\n\n  let operation = this.playerInterface_.networkingEngine.request(type, request);\n  this.operationManager_.manage(operation);\n\n  return operation.promise.then((response) => {\n    let text;\n    if (method == 'HEAD') {\n      if (!response.headers || !response.headers['date']) {\n        shaka.log.warning('UTC timing response is missing',\n                          'expected date header');\n        return 0;\n      }\n      text = response.headers['date'];\n    } else {\n      text = shaka.util.StringUtils.fromUTF8(response.data);\n    }\n    let date = Date.parse(text);\n    if (isNaN(date)) {\n      shaka.log.warning('Unable to parse date from UTC timing response');\n      return 0;\n    }\n    return (date - Date.now());\n  });\n};\n\n\n/**\n * Parses an array of UTCTiming elements.\n *\n * @param {!Array.<string>} baseUris\n * @param {!Array.<!Element>} elems\n * @param {boolean} isLive\n * @return {!Promise.<number>}\n * @private\n */\nshaka.dash.DashParser.prototype.parseUtcTiming_ =\n    function(baseUris, elems, isLive) {\n  let schemesAndValues = elems.map(function(elem) {\n    return {\n      scheme: elem.getAttribute('schemeIdUri'),\n      value: elem.getAttribute('value'),\n    };\n  });\n\n  // If there's nothing specified in the manifest, but we have a default from\n  // the config, use that.\n  let clockSyncUri = this.config_.dash.clockSyncUri;\n  if (isLive && !schemesAndValues.length && clockSyncUri) {\n    schemesAndValues.push({\n      scheme: 'urn:mpeg:dash:utc:http-head:2014',\n      value: clockSyncUri,\n    });\n  }\n\n  const Functional = shaka.util.Functional;\n  return Functional.createFallbackPromiseChain(schemesAndValues, function(sv) {\n    let scheme = sv.scheme;\n    let value = sv.value;\n    switch (scheme) {\n      // See DASH IOP Guidelines Section 4.7\n      // https://bit.ly/DashIop3-2\n      // Some old ISO23009-1 drafts used 2012.\n      case 'urn:mpeg:dash:utc:http-head:2014':\n      case 'urn:mpeg:dash:utc:http-head:2012':\n        return this.requestForTiming_(baseUris, value, 'HEAD');\n      case 'urn:mpeg:dash:utc:http-xsdate:2014':\n      case 'urn:mpeg:dash:utc:http-iso:2014':\n      case 'urn:mpeg:dash:utc:http-xsdate:2012':\n      case 'urn:mpeg:dash:utc:http-iso:2012':\n        return this.requestForTiming_(baseUris, value, 'GET');\n      case 'urn:mpeg:dash:utc:direct:2014':\n      case 'urn:mpeg:dash:utc:direct:2012': {\n        let date = Date.parse(value);\n        return isNaN(date) ? 0 : (date - Date.now());\n      }\n\n      case 'urn:mpeg:dash:utc:http-ntp:2014':\n      case 'urn:mpeg:dash:utc:ntp:2014':\n      case 'urn:mpeg:dash:utc:sntp:2014':\n        shaka.log.warning('NTP UTCTiming scheme is not supported');\n        return Promise.reject();\n      default:\n        shaka.log.warning(\n            'Unrecognized scheme in UTCTiming element', scheme);\n        return Promise.reject();\n    }\n  }.bind(this)).catch(function() {\n    if (isLive) {\n      shaka.log.warning(\n          'A UTCTiming element should always be given in live manifests! ' +\n          'This content may not play on clients with bad clocks!');\n    }\n    return 0;\n  });\n};\n\n\n/**\n * Parses an EventStream element.\n *\n * @param {number} periodStart\n * @param {?number} periodDuration\n * @param {!Element} elem\n * @private\n */\nshaka.dash.DashParser.prototype.parseEventStream_ = function(\n    periodStart, periodDuration, elem) {\n  const XmlUtils = shaka.util.XmlUtils;\n  let parseNumber = XmlUtils.parseNonNegativeInt;\n\n  let schemeIdUri = elem.getAttribute('schemeIdUri') || '';\n  let value = elem.getAttribute('value') || '';\n  let timescale = XmlUtils.parseAttr(elem, 'timescale', parseNumber) || 1;\n\n  XmlUtils.findChildren(elem, 'Event').forEach(function(eventNode) {\n    let presentationTime =\n        XmlUtils.parseAttr(eventNode, 'presentationTime', parseNumber) || 0;\n    let duration = XmlUtils.parseAttr(eventNode, 'duration', parseNumber) || 0;\n\n    let startTime = presentationTime / timescale + periodStart;\n    let endTime = startTime + (duration / timescale);\n    if (periodDuration != null) {\n      // An event should not go past the Period, even if the manifest says so.\n      // See: Dash sec. 5.10.2.1\n      startTime = Math.min(startTime, periodStart + periodDuration);\n      endTime = Math.min(endTime, periodStart + periodDuration);\n    }\n\n    /** @type {shaka.extern.TimelineRegionInfo} */\n    let region = {\n      schemeIdUri: schemeIdUri,\n      value: value,\n      startTime: startTime,\n      endTime: endTime,\n      id: eventNode.getAttribute('id') || '',\n      eventElement: eventNode,\n    };\n\n    this.playerInterface_.onTimelineRegionAdded(region);\n  }.bind(this));\n};\n\n\n/**\n * Makes a network request on behalf of SegmentBase.createStream.\n *\n * @param {!Array.<string>} uris\n * @param {?number} startByte\n * @param {?number} endByte\n * @return {!Promise.<!ArrayBuffer>}\n * @private\n */\nshaka.dash.DashParser.prototype.requestInitSegment_ = function(\n    uris, startByte, endByte) {\n  const requestType = shaka.net.NetworkingEngine.RequestType.SEGMENT;\n  let request = shaka.net.NetworkingEngine.makeRequest(\n      uris, this.config_.retryParameters);\n  if (startByte != null) {\n    let end = (endByte != null ? endByte : '');\n    request.headers['Range'] = 'bytes=' + startByte + '-' + end;\n  }\n\n  let networkingEngine = this.playerInterface_.networkingEngine;\n  let operation = networkingEngine.request(requestType, request);\n  this.operationManager_.manage(operation);\n  return operation.promise.then((response) => response.data);\n};\n\n\n/**\n * Guess the content type based on MIME type and codecs.\n *\n * @param {string} mimeType\n * @param {string} codecs\n * @return {string}\n * @private\n */\nshaka.dash.DashParser.guessContentType_ = function(mimeType, codecs) {\n  let fullMimeType = shaka.util.MimeUtils.getFullType(mimeType, codecs);\n\n  if (shaka.text.TextEngine.isTypeSupported(fullMimeType)) {\n    // If it's supported by TextEngine, it's definitely text.\n    // We don't check MediaSourceEngine, because that would report support\n    // for platform-supported video and audio types as well.\n    return shaka.util.ManifestParserUtils.ContentType.TEXT;\n  }\n\n  // Otherwise, just split the MIME type.  This handles video and audio\n  // types well.\n  return mimeType.split('/')[0];\n};\n\n\nshaka.media.ManifestParser.registerParserByExtension(\n    'mpd', shaka.dash.DashParser);\nshaka.media.ManifestParser.registerParserByMime(\n    'application/dash+xml', shaka.dash.DashParser);\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.hls.Attribute');\ngoog.provide('shaka.hls.Playlist');\ngoog.provide('shaka.hls.PlaylistType');\ngoog.provide('shaka.hls.Segment');\ngoog.provide('shaka.hls.Tag');\n\ngoog.require('goog.asserts');\n\n\n/**\n * Creates an HLS playlist object.\n *\n * @param {string} uri\n * @param {!shaka.hls.PlaylistType} type\n * @param {!Array.<shaka.hls.Tag>} tags\n * @param {!Array.<shaka.hls.Segment>=} segments\n *\n * @constructor\n * @struct\n */\nshaka.hls.Playlist = function(uri, type, tags, segments) {\n  /** @const {string} */\n  this.uri = uri;\n\n  /** @const {shaka.hls.PlaylistType} */\n  this.type = type;\n\n  /** @const {!Array.<!shaka.hls.Tag>} */\n  this.tags = tags;\n\n  /** @const {Array.<!shaka.hls.Segment>} */\n  this.segments = segments || null;\n};\n\n\n/**\n * @enum {number}\n */\nshaka.hls.PlaylistType = {\n  MASTER: 0,\n  MEDIA: 1,\n};\n\n\n/**\n * Creates an HLS tag object.\n *\n * @param {number} id\n * @param {string} name\n * @param {!Array.<shaka.hls.Attribute>} attributes\n * @param {?string=} value\n *\n * @constructor\n * @struct\n */\nshaka.hls.Tag = function(id, name, attributes, value = null) {\n  goog.asserts.assert(\n      (attributes.length == 0 && value) ||\n      (attributes.length > 0 && !value) ||\n      (attributes.length == 0 && !value),\n      'Tags can only take the form ' +\n      '(1) <NAME>:<VALUE> ' +\n      '(2) <NAME>:<ATTRIBUTE_LIST> ' +\n      ' (3) <NAME>');\n\n  /** @const {number} */\n  this.id = id;\n\n  /** @const {string} */\n  this.name = name;\n\n  /** @const {Array.<shaka.hls.Attribute>} */\n  this.attributes = attributes;\n\n  /** @const {?string} */\n  this.value = value;\n};\n\n\n/**\n * Create the string representation of the tag.\n *\n * For the DRM system - the full tag needs to be passed down to the CDM.  There\n * are two ways of doing this (1) save the original tag or (2) recreate the tag.\n * As in some cases (like in tests) the tag never existed in string form, it\n * is far easier to recreate the tag from the parsed form.\n *\n * @return {string}\n * @override\n */\nshaka.hls.Tag.prototype.toString = function() {\n  /**\n   * @param {shaka.hls.Attribute} attr\n   * @return {string}\n   */\n  let attrToStr = function(attr) {\n    return attr.name + '=\"' + attr.value + '\"';\n  };\n\n\n  // A valid tag can only follow 1 of 3 patterns.\n  //  1) <NAME>:<VALUE>\n  //  2) <NAME>:<ATTRIBUTE LIST>\n  //  3) <NAME>\n\n  if (this.value) {\n    return '#' + this.name + ':' + this.value;\n  }\n\n  if (this.attributes.length > 0) {\n    return '#' + this.name + ':' + this.attributes.map(attrToStr).join(',');\n  }\n\n  return '#' + this.name;\n};\n\n\n/**\n * Creates an HLS attribute object.\n *\n * @param {string} name\n * @param {string} value\n *\n * @constructor\n * @struct\n */\nshaka.hls.Attribute = function(name, value) {\n  /** @const {string} */\n  this.name = name;\n\n  /** @const {string} */\n  this.value = value;\n};\n\n\n/**\n * Adds an attribute to an HLS Tag.\n *\n * @param {!shaka.hls.Attribute} attribute\n */\nshaka.hls.Tag.prototype.addAttribute = function(attribute) {\n  this.attributes.push(attribute);\n};\n\n\n/**\n * Gets the first attribute of the tag with a specified name.\n *\n * @param {string} name\n * @return {?shaka.hls.Attribute} attribute\n */\nshaka.hls.Tag.prototype.getAttribute = function(name) {\n  let attributes = this.attributes.filter(function(attr) {\n    return attr.name == name;\n  });\n\n  goog.asserts.assert(attributes.length < 2,\n                      'A tag should not have multiple attributes ' +\n                      'with the same name!');\n\n  if (attributes.length) {\n    return attributes[0];\n  } else {\n    return null;\n  }\n};\n\n\n/**\n * Gets the value of the first attribute of the tag with a specified name.\n * If not found, returns an optional default value.\n *\n * @param {string} name\n * @param {string=} defaultValue\n * @return {?string}\n */\nshaka.hls.Tag.prototype.getAttributeValue = function(name, defaultValue) {\n  let attribute = this.getAttribute(name);\n  return attribute ? attribute.value : (defaultValue || null);\n};\n\n\n/**\n * Creates an HLS segment object.\n *\n * @param {string} uri\n * @param {!Array.<shaka.hls.Tag>} tags\n *\n * @constructor\n * @struct\n */\nshaka.hls.Segment = function(uri, tags) {\n  /** @const {!Array.<shaka.hls.Tag>} */\n  this.tags = tags;\n\n  /** @const {string} */\n  this.uri = uri;\n};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.hls.Utils');\n\ngoog.require('shaka.util.ManifestParserUtils');\n\n\n/**\n *\n * @param {!Array.<!shaka.hls.Tag>} tags\n * @param {string} name\n * @return {!Array.<!shaka.hls.Tag>}\n */\nshaka.hls.Utils.filterTagsByName = function(tags, name) {\n  return tags.filter(function(tag) {\n    return tag.name == name;\n  });\n};\n\n\n/**\n *\n * @param {!Array.<!shaka.hls.Tag>} tags\n * @param {string} name\n * @return {?shaka.hls.Tag}\n */\nshaka.hls.Utils.getFirstTagWithName = function(tags, name) {\n  let tagsWithName = shaka.hls.Utils.filterTagsByName(tags, name);\n  if (!tagsWithName.length) return null;\n\n  return tagsWithName[0];\n};\n\n\n/**\n * @param {!Array.<!shaka.hls.Tag>} tags An array of EXT-X-MEDIA tags.\n * @param {string} type\n * @param {string} groupId\n * @return {!Array.<!shaka.hls.Tag>} The first tag that has the given media type\n *   and group id.\n */\nshaka.hls.Utils.findMediaTags = function(tags, type, groupId) {\n  return tags.filter(function(tag) {\n    let typeAttr = tag.getAttribute('TYPE');\n    let groupIdAttr = tag.getAttribute('GROUP-ID');\n    return typeAttr.value == type && groupIdAttr.value == groupId;\n  });\n};\n\n\n/**\n * @param {string} parentAbsoluteUri\n * @param {string} uri\n * @return {string}\n */\nshaka.hls.Utils.constructAbsoluteUri = function(parentAbsoluteUri, uri) {\n  let uris = shaka.util.ManifestParserUtils.resolveUris(\n      [parentAbsoluteUri], [uri]);\n\n  return uris[0];\n};\n\n\n/**\n * Matches a string to an HLS comment format and returns the result.\n *\n * @param {string} line\n * @return {boolean}\n */\nshaka.hls.Utils.isComment = function(line) {\n  return /^#(?!EXT)/m.test(line);\n};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.util.TextParser');\n\ngoog.require('goog.asserts');\n\n\n/**\n * Reads elements from strings.\n *\n * @param {string} data\n * @constructor\n * @struct\n */\nshaka.util.TextParser = function(data) {\n  /**\n   * @const\n   * @private {string}\n   */\n  this.data_ = data;\n\n  /** @private {number} */\n  this.position_ = 0;\n};\n\n\n/** @return {boolean} Whether it is at the end of the string. */\nshaka.util.TextParser.prototype.atEnd = function() {\n  return this.position_ == this.data_.length;\n};\n\n\n/**\n * Reads a line from the parser.  This will read but not return the newline.\n * Returns null at the end.\n *\n * @return {?string}\n */\nshaka.util.TextParser.prototype.readLine = function() {\n  return this.readRegexReturnCapture_(/(.*?)(\\n|$)/gm, 1);\n};\n\n\n/**\n * Reads a word from the parser.  This will not read or return any whitespace\n * before or after the word (including newlines).  Returns null at the end.\n *\n * @return {?string}\n */\nshaka.util.TextParser.prototype.readWord = function() {\n  return this.readRegexReturnCapture_(/[^ \\t\\n]*/gm, 0);\n};\n\n\n/**\n * Skips any continuous whitespace from the parser.  Returns null at the end.\n */\nshaka.util.TextParser.prototype.skipWhitespace = function() {\n  this.readRegex(/[ \\t]+/gm);\n};\n\n\n/**\n * Reads the given regular expression from the parser.  This requires the match\n * to be at the current position; there is no need to include a head anchor.\n * This requires that the regex have the global flag to be set so that it can\n * set lastIndex to start the search at the current position.  Returns null at\n * the end or if the regex does not match the current position.\n *\n * @param {!RegExp} regex\n * @return {Array.<string>}\n */\nshaka.util.TextParser.prototype.readRegex = function(regex) {\n  let index = this.indexOf_(regex);\n  if (this.atEnd() || index == null || index.position != this.position_) {\n    return null;\n  }\n\n  this.position_ += index.length;\n  return index.results;\n};\n\n\n/**\n * Reads a regex from the parser and returns the given capture.\n *\n * @param {!RegExp} regex\n * @param {number} index\n * @return {?string}\n * @private\n */\nshaka.util.TextParser.prototype.readRegexReturnCapture_ = function(\n    regex, index) {\n  if (this.atEnd()) {\n    return null;\n  }\n\n  let ret = this.readRegex(regex);\n  if (!ret) {\n    return null;\n  } else {\n    return ret[index];\n  }\n};\n\n\n/**\n * Returns the index info about a regular expression match.\n *\n * @param {!RegExp} regex\n * @return {?{position: number, length: number, results: !Array.<string>}}\n * @private\n */\nshaka.util.TextParser.prototype.indexOf_ = function(regex) {\n  // The global flag is required to use lastIndex.\n  goog.asserts.assert(regex.global, 'global flag should be set');\n\n  regex.lastIndex = this.position_;\n  let results = regex.exec(this.data_);\n  if (results == null) {\n    return null;\n  } else {\n    return {\n      position: results.index,\n      length: results[0].length,\n      results: results,\n    };\n  }\n};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.hls.ManifestTextParser');\n\ngoog.require('shaka.hls.Attribute');\ngoog.require('shaka.hls.Playlist');\ngoog.require('shaka.hls.PlaylistType');\ngoog.require('shaka.hls.Segment');\ngoog.require('shaka.hls.Tag');\ngoog.require('shaka.hls.Utils');\ngoog.require('shaka.util.Error');\ngoog.require('shaka.util.StringUtils');\ngoog.require('shaka.util.TextParser');\n\n\n/**\n * Creates a new ManifestTextParser.\n *\n * @constructor\n * @struct\n */\nshaka.hls.ManifestTextParser = function() {\n  /** @private {number} */\n  this.globalId_ = 0;\n};\n\n\n/**\n * @param {!ArrayBuffer} data\n * @param {string} uri\n * @return {!shaka.hls.Playlist}\n * @throws {shaka.util.Error}\n */\nshaka.hls.ManifestTextParser.prototype.parsePlaylist = function(data, uri) {\n  const MEDIA_PLAYLIST_TAGS = shaka.hls.ManifestTextParser.MEDIA_PLAYLIST_TAGS;\n  const SEGMENT_TAGS = shaka.hls.ManifestTextParser.SEGMENT_TAGS;\n\n  // Get the input as a string.  Normalize newlines to \\n.\n  let str = shaka.util.StringUtils.fromUTF8(data);\n  str = str.replace(/\\r\\n|\\r(?=[^\\n]|$)/gm, '\\n').trim();\n\n  let lines = str.split(/\\n+/m);\n\n  if (!/^#EXTM3U($|[ \\t\\n])/m.test(lines[0])) {\n    throw new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.MANIFEST,\n        shaka.util.Error.Code.HLS_PLAYLIST_HEADER_MISSING);\n  }\n\n  /** shaka.hls.PlaylistType */\n  let playlistType = shaka.hls.PlaylistType.MASTER;\n\n  // First, look for media playlist tags, so that we know what the playlist\n  // type really is before we start parsing.\n  for (let i = 1; i < lines.length; i++) {\n    // Ignore comments.\n    if (!shaka.hls.Utils.isComment(lines[i])) {\n      let tag = this.parseTag_(lines[i]);\n      // These tags won't actually be used, so don't increment the global id.\n      this.globalId_ -= 1;\n\n      if (MEDIA_PLAYLIST_TAGS.indexOf(tag.name) >= 0) {\n        playlistType = shaka.hls.PlaylistType.MEDIA;\n        break;\n      } else if (tag.name == 'EXT-X-STREAM-INF') {\n        i += 1;\n      }\n    }\n  }\n\n  /** {Array.<shaka.hls.Tag>} */\n  let tags = [];\n  for (let i = 1; i < lines.length;) {\n    // Skip comments\n    if (shaka.hls.Utils.isComment(lines[i])) {\n      i += 1;\n      continue;\n    }\n\n    let tag = this.parseTag_(lines[i]);\n    if (SEGMENT_TAGS.indexOf(tag.name) >= 0) {\n      if (playlistType != shaka.hls.PlaylistType.MEDIA) {\n        // Only media playlists should contain segment tags\n        throw new shaka.util.Error(\n            shaka.util.Error.Severity.CRITICAL,\n            shaka.util.Error.Category.MANIFEST,\n            shaka.util.Error.Code.HLS_INVALID_PLAYLIST_HIERARCHY);\n      }\n\n      let segmentsData = lines.splice(i, lines.length - i);\n      let segments = this.parseSegments_(segmentsData, tags);\n      return new shaka.hls.Playlist(uri, playlistType, tags, segments);\n    }\n\n    tags.push(tag);\n    i += 1;\n\n    // An EXT-X-STREAM-INF tag is followed by a uri of a media playlist.\n    // Add the uri to the tag object.\n    if (tag.name == 'EXT-X-STREAM-INF') {\n      let tagUri = new shaka.hls.Attribute('URI', lines[i]);\n      tag.addAttribute(tagUri);\n      i += 1;\n    }\n  }\n\n  return new shaka.hls.Playlist(uri, playlistType, tags);\n};\n\n\n/**\n * Parses an array of strings into an array of HLS Segment objects.\n *\n * @param {!Array.<string>} lines\n * @param {!Array.<!shaka.hls.Tag>} playlistTags\n * @return {!Array.<shaka.hls.Segment>}\n * @private\n * @throws {shaka.util.Error}\n */\nshaka.hls.ManifestTextParser.prototype.parseSegments_ =\n    function(lines, playlistTags) {\n  /** @type {!Array.<shaka.hls.Segment>} */\n  let segments = [];\n  /** @type {!Array.<shaka.hls.Tag>} */\n  let segmentTags = [];\n  lines.forEach((line) => {\n    if (/^(#EXT)/.test(line)) {\n      let tag = this.parseTag_(line);\n      if (shaka.hls.ManifestTextParser.MEDIA_PLAYLIST_TAGS\n                                           .indexOf(tag.name) >= 0) {\n        playlistTags.push(tag);\n      } else {\n        segmentTags.push(tag);\n      }\n    } else if (shaka.hls.Utils.isComment(line)) {\n      // Skip comments.\n      return [];\n    } else {\n      let uri = line.trim();\n      // The uri appears after all of the tags describing the segment.\n      let segment = new shaka.hls.Segment(uri, segmentTags);\n      segments.push(segment);\n      segmentTags = [];\n    }\n  });\n  return segments;\n};\n\n\n/**\n * Parses a string into an HLS Tag object while tracking what id to use next.\n *\n * @param {string} word\n * @return {!shaka.hls.Tag}\n * @throws {shaka.util.Error}\n * @private\n */\nshaka.hls.ManifestTextParser.prototype.parseTag_ = function(word) {\n  return shaka.hls.ManifestTextParser.parseTag(this.globalId_++, word);\n};\n\n\n/**\n * Parses a string into an HLS Tag object.\n *\n * @param {number} id\n * @param {string} word\n * @return {!shaka.hls.Tag}\n * @throws {shaka.util.Error}\n */\nshaka.hls.ManifestTextParser.parseTag = function(id, word) {\n  /* HLS tags start with '#EXT'. A tag can have a set of attributes\n    (#EXT-<tagname>:<attribute list>) or a value (#EXT-<tagname>:<value>).\n    An attribute's format is 'AttributeName=AttributeValue'.\n    The parsing logic goes like this:\n     1. Everything before ':' is a name (we ignore '#').\n     2. Everything after should be parsed as attributes if it contains '='.\n     3. Otherwise, this is a value.\n     4. If there is no \":\", it's a simple tag with no attributes and no value */\n  let blocks = word.match(/^#(EXT[^:]*)(?::(.*))?$/);\n  if (!blocks) {\n    throw new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.MANIFEST,\n        shaka.util.Error.Code.INVALID_HLS_TAG,\n        word);\n  }\n  let name = blocks[1];\n  let data = blocks[2];\n  let attributes = [];\n\n  if (data && data.indexOf('=') >= 0) {\n    let parser = new shaka.util.TextParser(data);\n    let blockAttrs;\n\n    // Regex:\n    // 1. Key name ([1])\n    // 2. Equals sign\n    // 3. Either:\n    //   a. A quoted string (everything up to the next quote, [2])\n    //   b. An unquoted string\n    //    (everything up to the next comma or end of line, [3])\n    // 4. Either:\n    //   a. A comma\n    //   b. End of line\n    const regex = /([^=]+)=(?:\"([^\"]*)\"|([^\",]*))(?:,|$)/g;\n    while ((blockAttrs = parser.readRegex(regex))) {\n      let attrName = blockAttrs[1];\n      let attrValue = blockAttrs[2] || blockAttrs[3];\n      let attribute = new shaka.hls.Attribute(attrName, attrValue);\n      attributes.push(attribute);\n    }\n  } else if (data) {\n    return new shaka.hls.Tag(id, name, attributes, data);\n  }\n\n  return new shaka.hls.Tag(id, name, attributes);\n};\n\n\n/**\n * HLS tags that only appear on Media Playlists.\n * Used to determine a playlist type.\n *\n * @const {!Array.<string>}\n */\nshaka.hls.ManifestTextParser.MEDIA_PLAYLIST_TAGS = [\n  'EXT-X-TARGETDURATION',\n  'EXT-X-MEDIA-SEQUENCE',\n  'EXT-X-DISCONTINUITY-SEQUENCE',\n  'EXT-X-PLAYLIST-TYPE',\n  'EXT-X-MAP',\n  'EXT-X-I-FRAMES-ONLY',\n  'EXT-X-ENDLIST',\n];\n\n\n/**\n * HLS tags that only appear on Segments in a Media Playlists.\n * Used to determine the start of the segments info.\n *\n * @const {!Array.<string>}\n */\nshaka.hls.ManifestTextParser.SEGMENT_TAGS = [\n  'EXTINF',\n  'EXT-X-BYTERANGE',\n  'EXT-X-DISCONTINUITY',\n  'EXT-X-PROGRAM-DATE-TIME',\n  'EXT-X-KEY',\n  'EXT-X-DATERANGE',\n];\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.net.DataUriPlugin');\n\ngoog.require('shaka.log');\ngoog.require('shaka.net.NetworkingEngine');\ngoog.require('shaka.util.AbortableOperation');\ngoog.require('shaka.util.Error');\ngoog.require('shaka.util.StringUtils');\ngoog.require('shaka.util.Uint8ArrayUtils');\n\n\n/**\n * @namespace\n * @summary A networking plugin to handle data URIs.\n * @see https://developer.mozilla.org/en-US/docs/Web/HTTP/data_URIs\n * @param {string} uri\n * @param {shaka.extern.Request} request\n * @param {shaka.net.NetworkingEngine.RequestType=} requestType\n * @return {!shaka.extern.IAbortableOperation.<shaka.extern.Response>}\n * @export\n */\nshaka.net.DataUriPlugin = function(uri, request, requestType) {\n  try {\n    let parsed = shaka.net.DataUriPlugin.parse(uri);\n\n    /** @type {shaka.extern.Response} */\n    let response = {\n      uri: uri,\n      data: parsed.data,\n      headers: {\n        'content-type': parsed.contentType,\n      },\n    };\n\n    return shaka.util.AbortableOperation.completed(response);\n  } catch (error) {\n    return shaka.util.AbortableOperation.failed(error);\n  }\n};\n\n\n/**\n * @param {string} uri\n * @return {{data: ArrayBuffer, contentType: string}}\n */\nshaka.net.DataUriPlugin.parse = function(uri) {\n  // Extract the scheme.\n  let parts = uri.split(':');\n  if (parts.length < 2 || parts[0] != 'data') {\n    shaka.log.error('Bad data URI, failed to parse scheme');\n    throw new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.NETWORK,\n        shaka.util.Error.Code.MALFORMED_DATA_URI,\n        uri);\n  }\n  let path = parts.slice(1).join(':');\n\n  // Extract the encoding and MIME type (required but can be empty).\n  let infoAndData = path.split(',');\n  if (infoAndData.length < 2) {\n    shaka.log.error('Bad data URI, failed to extract encoding and MIME type');\n    throw new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.NETWORK,\n        shaka.util.Error.Code.MALFORMED_DATA_URI,\n        uri);\n  }\n  let info = infoAndData[0];\n  let dataStr = window.decodeURIComponent(infoAndData.slice(1).join(','));\n\n  // Extract the encoding (optional).\n  let typeAndEncoding = info.split(';');\n  let encoding = null;\n  if (typeAndEncoding.length > 1) {\n    encoding = typeAndEncoding[1];\n  }\n\n  // Convert the data.\n  /** @type {ArrayBuffer} */\n  let data;\n  if (encoding == 'base64') {\n    data = shaka.util.Uint8ArrayUtils.fromBase64(dataStr).buffer;\n  } else if (encoding) {\n    shaka.log.error('Bad data URI, unknown encoding');\n    throw new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.NETWORK,\n        shaka.util.Error.Code.UNKNOWN_DATA_URI_ENCODING,\n        uri);\n  } else {\n    data = shaka.util.StringUtils.toUTF8(dataStr);\n  }\n\n  return {data: data, contentType: typeAndEncoding[0]};\n};\n\n\nshaka.net.NetworkingEngine.registerScheme('data', shaka.net.DataUriPlugin);\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\ngoog.provide('shaka.hls.HlsParser');\n\ngoog.require('goog.Uri');\ngoog.require('goog.asserts');\ngoog.require('shaka.hls.ManifestTextParser');\ngoog.require('shaka.hls.Playlist');\ngoog.require('shaka.hls.PlaylistType');\ngoog.require('shaka.hls.Tag');\ngoog.require('shaka.hls.Utils');\ngoog.require('shaka.log');\ngoog.require('shaka.media.DrmEngine');\ngoog.require('shaka.media.InitSegmentReference');\ngoog.require('shaka.media.ManifestParser');\ngoog.require('shaka.media.PresentationTimeline');\ngoog.require('shaka.media.SegmentIndex');\ngoog.require('shaka.media.SegmentReference');\ngoog.require('shaka.net.DataUriPlugin');\ngoog.require('shaka.net.NetworkingEngine');\ngoog.require('shaka.text.TextEngine');\ngoog.require('shaka.util.DataViewReader');\ngoog.require('shaka.util.Error');\ngoog.require('shaka.util.Functional');\ngoog.require('shaka.util.LanguageUtils');\ngoog.require('shaka.util.ManifestParserUtils');\ngoog.require('shaka.util.MimeUtils');\ngoog.require('shaka.util.Mp4Parser');\ngoog.require('shaka.util.OperationManager');\n\n\n/**\n * Creates a new HLS parser.\n *\n * @struct\n * @constructor\n * @implements {shaka.extern.ManifestParser}\n * @export\n */\nshaka.hls.HlsParser = function() {\n  /** @private {?shaka.extern.ManifestParser.PlayerInterface} */\n  this.playerInterface_ = null;\n\n  /** @private {?shaka.extern.ManifestConfiguration} */\n  this.config_ = null;\n\n  /** @private {number} */\n  this.globalId_ = 1;\n\n  /**\n   * @private {!Object.<number, shaka.hls.HlsParser.StreamInfo>}\n   */\n  // TODO: This is now only used for text codec detection, try to remove.\n  this.mediaTagsToStreamInfosMap_ = {};\n\n  /**\n   * The key is a string of the form \"<VIDEO URI> - <AUDIO URI>\".\n   * @private {!Object.<string, shaka.extern.Variant>}\n   */\n  // TODO: Should use original, resolved URIs, before redirects.\n  this.urisToVariantsMap_ = {};\n\n  /** @private {!Object.<number, !shaka.media.SegmentIndex>} */\n  this.streamsToIndexMap_ = {};\n\n  /**\n   * A map from media playlists' uris to stream infos\n   * representing the playlists.\n   * @private {!Object.<string, shaka.hls.HlsParser.StreamInfo>}\n   */\n  // TODO: Should use original, resolved URIs, before redirects.\n  this.uriToStreamInfosMap_ = {};\n\n  /** @private {?shaka.media.PresentationTimeline} */\n  this.presentationTimeline_ = null;\n\n  /**\n   * @private {string}\n   */\n  // TODO: Should be resolved, post-redirect URI, so that media playlist URIs\n  // respect master playlist redirects.\n  this.manifestUri_ = '';\n\n  /** @private {shaka.hls.ManifestTextParser} */\n  this.manifestTextParser_ = new shaka.hls.ManifestTextParser();\n\n  /**\n   * The update period in seconds, or null for no updates.\n   * @private {?number}\n   */\n  this.updatePeriod_ = null;\n\n  /** @private {?number} */\n  this.updateTimer_ = null;\n\n  /** @private {shaka.hls.HlsParser.PresentationType_} */\n  this.presentationType_ = shaka.hls.HlsParser.PresentationType_.VOD;\n\n  /** @private {?shaka.extern.Manifest} */\n  this.manifest_ = null;\n\n  /** @private {number} */\n  this.maxTargetDuration_ = 0;\n\n  /** @private {number} */\n  this.minTargetDuration_ = Infinity;\n\n  /** @private {!shaka.util.OperationManager} */\n  this.operationManager_ = new shaka.util.OperationManager();\n\n  /** @private {!Array.<!Array.<!shaka.media.SegmentReference>>} */\n  this.segmentsToNotifyByStream_ = [];\n};\n\n\n/**\n * @typedef {{\n *   stream: !shaka.extern.Stream,\n *   segmentIndex: !shaka.media.SegmentIndex,\n *   drmInfos: !Array.<shaka.extern.DrmInfo>,\n *   relativeUri: string,\n *   minTimestamp: number,\n *   maxTimestamp: number,\n *   duration: number\n * }}\n *\n * @description\n * Contains a stream and information about it.\n *\n * @property {!shaka.extern.Stream} stream\n *   The Stream itself.\n * @property {!shaka.media.SegmentIndex} segmentIndex\n *   SegmentIndex of the stream.\n * @property {!Array.<shaka.extern.DrmInfo>} drmInfos\n *   DrmInfos of the stream.  There may be multiple for multi-DRM content.\n * @property {string} relativeUri\n *   The uri associated with the stream, relative to the manifest.\n * @property {number} minTimestamp\n *   The minimum timestamp found in the stream.\n * @property {number} maxTimestamp\n *   The maximum timestamp found in the stream.\n * @property {number} duration\n *   The duration of the playlist.  Used for VOD only.\n */\nshaka.hls.HlsParser.StreamInfo;\n\n\n/**\n * @override\n * @exportInterface\n */\nshaka.hls.HlsParser.prototype.configure = function(config) {\n  this.config_ = config;\n};\n\n\n/**\n * @override\n * @exportInterface\n */\nshaka.hls.HlsParser.prototype.start = function(uri, playerInterface) {\n  goog.asserts.assert(this.config_, 'Must call configure() before start()!');\n  this.playerInterface_ = playerInterface;\n  this.manifestUri_ = uri;\n  return this.requestManifest_(uri).then(function(response) {\n    return this.parseManifest_(response.data, uri).then(function() {\n      this.setUpdateTimer_(this.updatePeriod_);\n      return this.manifest_;\n    }.bind(this));\n  }.bind(this));\n};\n\n\n/**\n * @override\n * @exportInterface\n */\nshaka.hls.HlsParser.prototype.stop = function() {\n  this.playerInterface_ = null;\n  this.config_ = null;\n  this.mediaTagsToStreamInfosMap_ = {};\n  this.urisToVariantsMap_ = {};\n  this.manifest_ = null;\n  return this.operationManager_.destroy();\n};\n\n\n/**\n * @override\n * @exportInterface\n */\nshaka.hls.HlsParser.prototype.update = function() {\n  if (!this.isLive_()) {\n    return;\n  }\n\n  let promises = [];\n  for (let uri in this.uriToStreamInfosMap_) {\n    let streamInfo = this.uriToStreamInfosMap_[uri];\n\n    promises.push(this.updateStream_(streamInfo, uri));\n  }\n\n  return Promise.all(promises);\n};\n\n\n/**\n * Updates a stream.\n *\n * @param {!shaka.hls.HlsParser.StreamInfo} streamInfo\n * @param {string} uri\n * @throws shaka.util.Error\n * @private\n */\nshaka.hls.HlsParser.prototype.updateStream_ = function(streamInfo, uri) {\n  this.requestManifest_(uri).then(function(response) {\n    const Utils = shaka.hls.Utils;\n    const PresentationType = shaka.hls.HlsParser.PresentationType_;\n    let playlist = this.manifestTextParser_.parsePlaylist(response.data, uri);\n    if (playlist.type != shaka.hls.PlaylistType.MEDIA) {\n      throw new shaka.util.Error(\n          shaka.util.Error.Severity.CRITICAL,\n          shaka.util.Error.Category.MANIFEST,\n          shaka.util.Error.Code.HLS_INVALID_PLAYLIST_HIERARCHY);\n    }\n\n    let mediaSequenceTag = Utils.getFirstTagWithName(playlist.tags,\n                                                     'EXT-X-MEDIA-SEQUENCE');\n\n    let startPosition = mediaSequenceTag ? Number(mediaSequenceTag.value) : 0;\n    let stream = streamInfo.stream;\n    this.createSegments_(playlist, startPosition,\n                         stream.mimeType, stream.codecs)\n        .then(function(segments) {\n          streamInfo.segmentIndex.replace(segments);\n\n          let newestSegment = segments[segments.length - 1];\n          goog.asserts.assert(newestSegment, 'Should have segments!');\n\n          // Once the last segment has been added to the playlist,\n          // #EXT-X-ENDLIST tag will be appended.\n          // If that happened, treat the rest of the EVENT presentation as VOD.\n          let endListTag = Utils.getFirstTagWithName(playlist.tags,\n                                                     'EXT-X-ENDLIST');\n          if (endListTag) {\n            // Convert the presentation to VOD and set the duration to the last\n            // segment's end time.\n            this.setPresentationType_(PresentationType.VOD);\n            this.presentationTimeline_.setDuration(newestSegment.endTime);\n          }\n        }.bind(this));\n  }.bind(this));\n};\n\n\n/**\n * @override\n * @exportInterface\n */\nshaka.hls.HlsParser.prototype.onExpirationUpdated = function(\n    sessionId, expiration) {\n  // No-op\n};\n\n\n/**\n * Parses the manifest.\n *\n * @param {!ArrayBuffer} data\n * @param {string} uri\n * @throws shaka.util.Error When there is a parsing error.\n * @return {!Promise}\n * @private\n */\nshaka.hls.HlsParser.prototype.parseManifest_ = function(data, uri) {\n  let playlist = this.manifestTextParser_.parsePlaylist(data, uri);\n\n  // We don't support directly providing a Media Playlist.\n  // See the error code for details.\n  if (playlist.type != shaka.hls.PlaylistType.MASTER) {\n    throw new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.MANIFEST,\n        shaka.util.Error.Code.HLS_MASTER_PLAYLIST_NOT_PROVIDED);\n  }\n\n  return this.createPeriod_(playlist).then(function(period) {\n    // HLS has no notion of periods.  We're treating the whole presentation as\n    // one period.\n    this.playerInterface_.filterAllPeriods([period]);\n\n    // Find the min and max timestamp of the earliest segment in all streams.\n    // Find the minimum duration of all streams as well.\n    let minFirstTimestamp = Infinity;\n    let maxFirstTimestamp = 0;\n    let maxLastTimestamp = 0;\n    let minDuration = Infinity;\n\n    for (let uri in this.uriToStreamInfosMap_) {\n      let streamInfo = this.uriToStreamInfosMap_[uri];\n      minFirstTimestamp =\n          Math.min(minFirstTimestamp, streamInfo.minTimestamp);\n      maxFirstTimestamp =\n          Math.max(maxFirstTimestamp, streamInfo.minTimestamp);\n      maxLastTimestamp =\n          Math.max(maxLastTimestamp, streamInfo.maxTimestamp);\n      if (streamInfo.stream.type != 'text') {\n        minDuration = Math.min(minDuration, streamInfo.duration);\n      }\n    }\n\n    // This assert is our own sanity check.\n    goog.asserts.assert(this.presentationTimeline_ == null,\n                        'Presentation timeline created early!');\n    this.createPresentationTimeline_(maxLastTimestamp);\n\n    // This assert satisfies the compiler that it is not null for the rest of\n    // the method.\n    goog.asserts.assert(this.presentationTimeline_,\n                        'Presentation timeline not created!');\n\n    if (this.isLive_()) {\n      // The HLS spec (RFC 8216) states in 6.3.4:\n      // \"the client MUST wait for at least the target duration before\n      // attempting to reload the Playlist file again\"\n      this.updatePeriod_ = this.minTargetDuration_;\n\n      // The spec says nothing much about seeking in live content, but Safari's\n      // built-in HLS implementation does not allow it.  Therefore we will set\n      // the availability window equal to the presentation delay.  The player\n      // will be able to buffer ahead three segments, but the seek window will\n      // be zero-sized.\n      const PresentationType = shaka.hls.HlsParser.PresentationType_;\n\n      if (this.presentationType_ == PresentationType.LIVE) {\n        // This defaults to the presentation delay, which has the effect of\n        // making the live stream unseekable.  This is consistent with Apple's\n        // HLS implementation.\n        let segmentAvailabilityDuration = this.presentationTimeline_.getDelay();\n\n        // The app can override that with a longer duration, to allow seeking.\n        if (!isNaN(this.config_.availabilityWindowOverride)) {\n          segmentAvailabilityDuration = this.config_.availabilityWindowOverride;\n        }\n\n        this.presentationTimeline_.setSegmentAvailabilityDuration(\n            segmentAvailabilityDuration);\n      }\n\n      let rolloverSeconds =\n          shaka.hls.HlsParser.TS_ROLLOVER_ / shaka.hls.HlsParser.TS_TIMESCALE_;\n      let offset = 0;\n      while (maxFirstTimestamp >= rolloverSeconds) {\n        offset += rolloverSeconds;\n        maxFirstTimestamp -= rolloverSeconds;\n      }\n      if (offset) {\n        shaka.log.debug('Offsetting live streams by', offset,\n                        'to compensate for rollover');\n\n        for (let uri in this.uriToStreamInfosMap_) {\n          let streamInfo = this.uriToStreamInfosMap_[uri];\n          if (streamInfo.minTimestamp < rolloverSeconds) {\n            shaka.log.v1('Offset applied to', streamInfo.stream.type);\n            // This is the offset that StreamingEngine must apply to align the\n            // actual segment times with the period.\n            streamInfo.stream.presentationTimeOffset = -offset;\n            // The segments were created with actual media times, rather than\n            // period-aligned times, so offset them all to period time.\n            streamInfo.segmentIndex.offset(offset);\n          } else {\n            shaka.log.v1('Offset NOT applied to', streamInfo.stream.type);\n          }\n        }\n      }\n    } else {\n      // For VOD/EVENT content, offset everything back to 0.\n      // Use the minimum timestamp as the offset for all streams.\n      // Use the minimum duration as the presentation duration.\n      this.presentationTimeline_.setDuration(minDuration);\n\n      for (let uri in this.uriToStreamInfosMap_) {\n        let streamInfo = this.uriToStreamInfosMap_[uri];\n        // This is the offset that StreamingEngine must apply to align the\n        // actual segment times with the period.\n        streamInfo.stream.presentationTimeOffset = minFirstTimestamp;\n        // The segments were created with actual media times, rather than\n        // period-aligned times, so offset them all now.\n        streamInfo.segmentIndex.offset(-minFirstTimestamp);\n        // Finally, fit the segments to the period duration.\n        streamInfo.segmentIndex.fit(minDuration);\n      }\n    }\n\n    this.manifest_ = {\n      presentationTimeline: this.presentationTimeline_,\n      periods: [period],\n      offlineSessionIds: [],\n      minBufferTime: 0,\n    };\n  }.bind(this));\n};\n\n\n/**\n * Parses a playlist into a Period object.\n *\n * @param {!shaka.hls.Playlist} playlist\n * @return {!Promise.<!shaka.extern.Period>}\n * @private\n */\nshaka.hls.HlsParser.prototype.createPeriod_ = function(playlist) {\n  const Utils = shaka.hls.Utils;\n  const Functional = shaka.util.Functional;\n  let tags = playlist.tags;\n\n  let mediaTags = Utils.filterTagsByName(playlist.tags, 'EXT-X-MEDIA');\n  let textStreamTags = mediaTags.filter(function(tag) {\n    let type = shaka.hls.HlsParser.getRequiredAttributeValue_(tag, 'TYPE');\n    return type == 'SUBTITLES';\n  }.bind(this));\n\n  // TODO: CLOSED-CAPTIONS requires the parsing of CEA-608 from the video.\n  let textStreamPromises = textStreamTags.map(function(tag) {\n    return this.createTextStream_(tag, playlist);\n  }.bind(this));\n\n  return Promise.all(textStreamPromises).then(function(textStreams) {\n    // Create Variants for every 'EXT-X-STREAM-INF' tag.  Do this after text\n    // streams have been created, so that we can push text codecs found on the\n    // variant tag back into the created text streams.\n    let variantTags = Utils.filterTagsByName(tags, 'EXT-X-STREAM-INF');\n    let variantsPromises = variantTags.map(function(tag) {\n      return this.createVariantsForTag_(tag, playlist);\n    }.bind(this));\n\n    return Promise.all(variantsPromises).then(function(allVariants) {\n      let variants = allVariants.reduce(Functional.collapseArrays, []);\n      return {\n        startTime: 0,\n        variants: variants,\n        textStreams: textStreams,\n      };\n    }.bind(this));\n  }.bind(this));\n};\n\n\n/**\n * @param {!shaka.hls.Tag} tag\n * @param {!shaka.hls.Playlist} playlist\n * @return {!Promise.<!Array.<!shaka.extern.Variant>>}\n * @private\n */\nshaka.hls.HlsParser.prototype.createVariantsForTag_ = function(tag, playlist) {\n  goog.asserts.assert(tag.name == 'EXT-X-STREAM-INF',\n                      'Should only be called on variant tags!');\n  const ContentType = shaka.util.ManifestParserUtils.ContentType;\n  const HlsParser = shaka.hls.HlsParser;\n  const Utils = shaka.hls.Utils;\n\n  // These are the default codecs to assume if none are specified.\n  //\n  // The video codec is H.264, with baseline profile and level 3.0.\n  // http://blog.pearce.org.nz/2013/11/what-does-h264avc1-codecs-parameters.html\n  //\n  // The audio codec is \"low-complexity\" AAC.\n  const defaultCodecs = 'avc1.42E01E,mp4a.40.2';\n\n  /** @type {!Array.<string>} */\n  let codecs = tag.getAttributeValue('CODECS', defaultCodecs).split(',');\n  let resolutionAttr = tag.getAttribute('RESOLUTION');\n  let width = null;\n  let height = null;\n  let frameRate = tag.getAttributeValue('FRAME-RATE');\n  let bandwidth =\n      Number(HlsParser.getRequiredAttributeValue_(tag, 'BANDWIDTH'));\n\n  // TODO: Add parsing for closed captions. Note that the value may be 'NONE'.\n  // let closedCaptions = tag.getAttributeValue('CLOSED-CAPTIONS');\n\n  if (resolutionAttr) {\n    let resBlocks = resolutionAttr.value.split('x');\n    width = resBlocks[0];\n    height = resBlocks[1];\n  }\n\n  // After filtering, this is a list of the media tags we will process to\n  // combine with the variant tag (EXT-X-STREAM-INF) we are working on.\n  let mediaTags = Utils.filterTagsByName(playlist.tags, 'EXT-X-MEDIA');\n\n  let audioGroupId = tag.getAttributeValue('AUDIO');\n  let videoGroupId = tag.getAttributeValue('VIDEO');\n  goog.asserts.assert(audioGroupId == null || videoGroupId == null,\n      'Unexpected: both video and audio described by media tags!');\n\n  // Find any associated audio or video groups and create streams for them.\n  if (audioGroupId) {\n    mediaTags = Utils.findMediaTags(mediaTags, 'AUDIO', audioGroupId);\n  } else if (videoGroupId) {\n    mediaTags = Utils.findMediaTags(mediaTags, 'VIDEO', videoGroupId);\n  }\n\n  // There may be a codec string for the text stream.  We should identify it,\n  // add it to the appropriate stream, then strip it out of the variant to\n  // avoid confusing our multiplex detection below.\n  let textCodecs = this.guessCodecsSafe_(ContentType.TEXT, codecs);\n  if (textCodecs) {\n    // We found a text codec in the list, so look for an associated text stream.\n    let subGroupId = tag.getAttributeValue('SUBTITLES');\n    if (subGroupId) {\n      let textTags = Utils.findMediaTags(mediaTags, 'SUBTITLES', subGroupId);\n      goog.asserts.assert(textTags.length == 1,\n                          'Exactly one text tag expected!');\n      if (textTags.length) {\n        // We found a text codec and text stream, so make sure the codec is\n        // attached to the stream.\n        let textStreamInfo = this.mediaTagsToStreamInfosMap_[textTags[0].id];\n        textStreamInfo.stream.codecs = textCodecs;\n      }\n    }\n\n    // Remove this entry from the list of codecs that belong to audio/video.\n    codecs.splice(codecs.indexOf(textCodecs), 1);\n  }\n\n  let promises = mediaTags.map(function(tag) {\n    return this.createStreamInfoFromMediaTag_(tag, codecs);\n  }.bind(this));\n\n  let audioStreamInfos = [];\n  let videoStreamInfos = [];\n\n  return Promise.all(promises).then(function(data) {\n    if (audioGroupId) {\n      audioStreamInfos = data;\n    } else if (videoGroupId) {\n      videoStreamInfos = data;\n    }\n\n    // Make an educated guess about the stream type.\n    shaka.log.debug('Guessing stream type for', tag.toString());\n    let type;\n    let ignoreStream = false;\n    if (!audioStreamInfos.length && !videoStreamInfos.length) {\n      // There are no associated streams.  This is either an audio-only stream,\n      // a video-only stream, or a multiplexed stream.\n\n      if (codecs.length == 1) {\n        // There is only one codec, so it shouldn't be multiplexed.\n\n        let videoCodecs = this.guessCodecsSafe_(ContentType.VIDEO, codecs);\n        if (resolutionAttr || frameRate || videoCodecs) {\n          // Assume video-only.\n          shaka.log.debug('Guessing video-only.');\n          type = ContentType.VIDEO;\n        } else {\n          // Assume audio-only.\n          shaka.log.debug('Guessing audio-only.');\n          type = ContentType.AUDIO;\n        }\n      } else {\n        // There are multiple codecs, so assume multiplexed content.\n        // Note that the default used when CODECS is missing assumes multiple\n        // (and therefore multiplexed).\n        // Recombine the codec strings into one so that MediaSource isn't\n        // lied to later.  (That would trigger an error in Chrome.)\n        shaka.log.debug('Guessing multiplexed audio+video.');\n        type = ContentType.VIDEO;\n        codecs = [codecs.join(',')];\n      }\n    } else if (audioStreamInfos.length) {\n      let streamURI = HlsParser.getRequiredAttributeValue_(tag, 'URI');\n      let firstAudioStreamURI = audioStreamInfos[0].relativeUri;\n      if (streamURI == firstAudioStreamURI) {\n        // The Microsoft HLS manifest generators will make audio-only variants\n        // that link to their URI both directly and through an audio tag.\n        // In that case, ignore the local URI and use the version in the\n        // AUDIO tag, so you inherit its language.\n        // As an example, see the manifest linked in issue #860.\n        shaka.log.debug('Guessing audio-only.');\n        type = ContentType.AUDIO;\n        ignoreStream = true;\n      } else {\n        // There are associated audio streams.  Assume this is video.\n        shaka.log.debug('Guessing video.');\n        type = ContentType.VIDEO;\n      }\n    } else {\n      // There are associated video streams.  Assume this is audio.\n      goog.asserts.assert(videoStreamInfos.length,\n          'No video streams!  This should have been handled already!');\n      shaka.log.debug('Guessing audio.');\n      type = ContentType.AUDIO;\n    }\n\n    goog.asserts.assert(type, 'Type should have been set by now!');\n    if (ignoreStream) {\n      return Promise.resolve();\n    }\n    return this.createStreamInfoFromVariantTag_(tag, codecs, type);\n  }.bind(this)).then(function(streamInfo) {\n    if (streamInfo) {\n      if (streamInfo.stream.type == ContentType.AUDIO) {\n        audioStreamInfos = [streamInfo];\n      } else {\n        videoStreamInfos = [streamInfo];\n      }\n    }\n    goog.asserts.assert(videoStreamInfos || audioStreamInfos,\n        'We should have created a stream!');\n\n    if (videoStreamInfos) {\n      this.filterLegacyCodecs_(videoStreamInfos);\n    }\n    if (audioStreamInfos) {\n      this.filterLegacyCodecs_(audioStreamInfos);\n    }\n\n    return this.createVariants_(\n        audioStreamInfos,\n        videoStreamInfos,\n        bandwidth,\n        width,\n        height,\n        frameRate);\n  }.bind(this));\n};\n\n\n/**\n * Filters out unsupported codec strings from an array of stream infos.\n * @param {!Array.<shaka.hls.HlsParser.StreamInfo>} streamInfos\n * @private\n */\nshaka.hls.HlsParser.prototype.filterLegacyCodecs_ = function(streamInfos) {\n  streamInfos.forEach(function(streamInfo) {\n    let codecs = streamInfo.stream.codecs.split(',');\n    codecs = codecs.filter(function(codec) {\n      // mp4a.40.34 is a nonstandard codec string that is sometimes used in HLS\n      // for legacy reasons.  It is not recognized by non-Apple MSE.\n      // See https://bugs.chromium.org/p/chromium/issues/detail?id=489520\n      // Therefore, ignore this codec string.\n      return codec != 'mp4a.40.34';\n    });\n    streamInfo.stream.codecs = codecs.join(',');\n  });\n};\n\n\n/**\n * @param {!Array.<!shaka.hls.HlsParser.StreamInfo>} audioInfos\n * @param {!Array.<!shaka.hls.HlsParser.StreamInfo>} videoInfos\n * @param {number} bandwidth\n * @param {?string} width\n * @param {?string} height\n * @param {?string} frameRate\n * @return {!Array.<!shaka.extern.Variant>}\n * @private\n */\nshaka.hls.HlsParser.prototype.createVariants_ =\n    function(audioInfos, videoInfos, bandwidth, width, height, frameRate) {\n  const DrmEngine = shaka.media.DrmEngine;\n\n  videoInfos.forEach(function(info) {\n    this.addVideoAttributes_(info.stream, width, height, frameRate);\n  }.bind(this));\n\n  // In case of audio-only or video-only content, we create an array of\n  // one item containing a null.  This way, the double-loop works for all\n  // kinds of content.\n  // NOTE: we currently don't have support for audio-only content.\n  if (!audioInfos.length) {\n    audioInfos = [null];\n  }\n  if (!videoInfos.length) {\n    videoInfos = [null];\n  }\n\n  let variants = [];\n  for (let i = 0; i < audioInfos.length; i++) {\n    for (let j = 0; j < videoInfos.length; j++) {\n      let audioStream = audioInfos[i] ? audioInfos[i].stream : null;\n      let videoStream = videoInfos[j] ? videoInfos[j].stream : null;\n      let audioDrmInfos = audioInfos[i] ? audioInfos[i].drmInfos : null;\n      let videoDrmInfos = videoInfos[j] ? videoInfos[j].drmInfos : null;\n\n      let drmInfos;\n      if (audioStream && videoStream) {\n        if (DrmEngine.areDrmCompatible(audioDrmInfos, videoDrmInfos)) {\n          drmInfos = DrmEngine.getCommonDrmInfos(audioDrmInfos, videoDrmInfos);\n        } else {\n          shaka.log.warning('Incompatible DRM info in HLS variant.  Skipping.');\n          continue;\n        }\n      } else if (audioStream) {\n        drmInfos = audioDrmInfos;\n      } else if (videoStream) {\n        drmInfos = videoDrmInfos;\n      }\n\n      let videoStreamUri = videoInfos[i] ? videoInfos[i].relativeUri : '';\n      let audioStreamUri = audioInfos[i] ? audioInfos[i].relativeUri : '';\n      let variantMapKey = videoStreamUri + ' - ' + audioStreamUri;\n      if (this.urisToVariantsMap_[variantMapKey]) {\n        // This happens when two variants only differ in their text streams.\n        shaka.log.debug('Skipping variant which only differs in text streams.');\n        continue;\n      }\n\n      let variant = this.createVariant_(\n          audioStream, videoStream, bandwidth, drmInfos);\n      variants.push(variant);\n      this.urisToVariantsMap_[variantMapKey] = variant;\n    }\n  }\n  return variants;\n};\n\n\n/**\n * @param {shaka.extern.Stream} audio\n * @param {shaka.extern.Stream} video\n * @param {number} bandwidth\n * @param {!Array.<shaka.extern.DrmInfo>} drmInfos\n * @return {!shaka.extern.Variant}\n * @private\n */\nshaka.hls.HlsParser.prototype.createVariant_ =\n    function(audio, video, bandwidth, drmInfos) {\n  const ContentType = shaka.util.ManifestParserUtils.ContentType;\n\n  // Since both audio and video are of the same type, this assertion will catch\n  // certain mistakes at runtime that the compiler would miss.\n  goog.asserts.assert(!audio || audio.type == ContentType.AUDIO,\n                      'Audio parameter mismatch!');\n  goog.asserts.assert(!video || video.type == ContentType.VIDEO,\n                      'Video parameter mismatch!');\n\n  return {\n    id: this.globalId_++,\n    language: audio ? audio.language : 'und',\n    primary: (!!audio && audio.primary) || (!!video && video.primary),\n    audio: audio,\n    video: video,\n    bandwidth: bandwidth,\n    drmInfos: drmInfos,\n    allowedByApplication: true,\n    allowedByKeySystem: true,\n  };\n};\n\n\n/**\n * Parses an EXT-X-MEDIA tag with TYPE=\"SUBTITLES\" into a text stream.\n *\n * @param {!shaka.hls.Tag} tag\n * @param {!shaka.hls.Playlist} playlist\n * @return {!Promise.<?shaka.extern.Stream>}\n * @private\n */\nshaka.hls.HlsParser.prototype.createTextStream_ = function(tag, playlist) {\n  goog.asserts.assert(tag.name == 'EXT-X-MEDIA',\n                      'Should only be called on media tags!');\n\n  let type = shaka.hls.HlsParser.getRequiredAttributeValue_(tag, 'TYPE');\n  goog.asserts.assert(type == 'SUBTITLES',\n                      'Should only be called on tags with TYPE=\"SUBTITLES\"!');\n\n  return this.createStreamInfoFromMediaTag_(tag, [])\n    .then(function(streamInfo) {\n        return streamInfo.stream;\n      });\n};\n\n\n/**\n * Parse EXT-X-MEDIA media tag into a Stream object.\n *\n * @param {shaka.hls.Tag} tag\n * @param {!Array.<string>} allCodecs\n * @return {!Promise.<shaka.hls.HlsParser.StreamInfo>}\n * @private\n */\nshaka.hls.HlsParser.prototype.createStreamInfoFromMediaTag_ =\n    function(tag, allCodecs) {\n  goog.asserts.assert(tag.name == 'EXT-X-MEDIA',\n                      'Should only be called on media tags!');\n\n  const HlsParser = shaka.hls.HlsParser;\n  let uri = HlsParser.getRequiredAttributeValue_(tag, 'URI');\n  uri = shaka.hls.Utils.constructAbsoluteUri(this.manifestUri_, uri);\n\n  // Check if the stream has already been created as part of another Variant\n  // and return it if it has.\n  if (this.uriToStreamInfosMap_[uri]) {\n    return Promise.resolve(this.uriToStreamInfosMap_[uri]);\n  }\n\n  let type = HlsParser.getRequiredAttributeValue_(tag, 'TYPE').toLowerCase();\n  // Shaka recognizes the content types 'audio', 'video' and 'text'.\n  // The HLS 'subtitles' type needs to be mapped to 'text'.\n  const ContentType = shaka.util.ManifestParserUtils.ContentType;\n  if (type == 'subtitles') type = ContentType.TEXT;\n\n  const LanguageUtils = shaka.util.LanguageUtils;\n  let language = LanguageUtils.normalize(/** @type {string} */(\n      tag.getAttributeValue('LANGUAGE', 'und')));\n  const name = tag.getAttributeValue('NAME');\n\n  let defaultAttr = tag.getAttribute('DEFAULT');\n  let autoselectAttr = tag.getAttribute('AUTOSELECT');\n  // TODO: Should we take into account some of the currently ignored attributes:\n  // FORCED, INSTREAM-ID, CHARACTERISTICS, CHANNELS?\n  // Attribute descriptions: https://bit.ly/2lpjOhj\n  let channelsAttribute = tag.getAttributeValue('CHANNELS');\n  let channelsCount = type == 'audio' ?\n      this.getChannelCount_(channelsAttribute) : null;\n  let primary = !!defaultAttr || !!autoselectAttr;\n  return this.createStreamInfo_(uri, allCodecs, type, language, primary,\n      name, channelsCount).then(function(streamInfo) {\n    // TODO: This check is necessary because of the possibility of multiple\n    // calls to createStreamInfoFromMediaTag_ before either has resolved.\n    if (this.uriToStreamInfosMap_[uri]) {\n      return this.uriToStreamInfosMap_[uri];\n    }\n\n    this.mediaTagsToStreamInfosMap_[tag.id] = streamInfo;\n    this.uriToStreamInfosMap_[uri] = streamInfo;\n    return streamInfo;\n  }.bind(this));\n};\n\n\n/**\n * Get the channel count information for an HLS audio track.\n *\n * @param {?string} channels A string that specifies an ordered, \"/\" separated\n *   list of parameters.  If the type is audio, the first parameter will be a\n *   decimal integer specifying the number of independent, simultaneous audio\n *   channels.\n *   No other channels parameters are currently defined.\n * @return {?number} channelcount\n * @private\n */\nshaka.hls.HlsParser.prototype.getChannelCount_ = function(channels) {\n  if (!channels) return null;\n  let channelcountstring = channels.split('/')[0];\n  let count = parseInt(channelcountstring, 10);\n  return count;\n};\n\n\n/**\n * Parse an EXT-X-STREAM-INF media tag into a Stream object.\n *\n * @param {!shaka.hls.Tag} tag\n * @param {!Array.<string>} allCodecs\n * @param {string} type\n * @return {!Promise.<shaka.hls.HlsParser.StreamInfo>}\n * @private\n */\nshaka.hls.HlsParser.prototype.createStreamInfoFromVariantTag_ =\n    function(tag, allCodecs, type) {\n  goog.asserts.assert(tag.name == 'EXT-X-STREAM-INF',\n                      'Should only be called on media tags!');\n\n  let uri = shaka.hls.HlsParser.getRequiredAttributeValue_(tag, 'URI');\n  uri = shaka.hls.Utils.constructAbsoluteUri(this.manifestUri_, uri);\n\n  if (this.uriToStreamInfosMap_[uri]) {\n    return Promise.resolve(this.uriToStreamInfosMap_[uri]);\n  }\n  // TODO: Add parsing for closed captions. Note that the value may be 'NONE'.\n  // let closedCaptions = tag.getAttributeValue('CLOSED-CAPTIONS');\n\n  return this.createStreamInfo_(uri, allCodecs, type,\n                                /* language */ 'und', /* primary */ false,\n                                /* name */ null, /* channelcount */ null).then(\n      function(streamInfo) {\n        // TODO: This check is necessary because of the possibility of multiple\n        // calls to createStreamInfoFromVariantTag_ before either has resolved.\n        if (this.uriToStreamInfosMap_[uri]) {\n          return this.uriToStreamInfosMap_[uri];\n        }\n\n        this.uriToStreamInfosMap_[uri] = streamInfo;\n        return streamInfo;\n      }.bind(this));\n};\n\n\n/**\n * @param {string} uri\n * @param {!Array.<string>} allCodecs\n * @param {string} type\n * @param {string} language\n * @param {boolean} primary\n * @param {?string} name\n * @param {?number} channelsCount\n * @return {!Promise.<shaka.hls.HlsParser.StreamInfo>}\n * @throws shaka.util.Error\n * @private\n */\nshaka.hls.HlsParser.prototype.createStreamInfo_ = function(uri, allCodecs,\n    type, language, primary, name, channelsCount) {\n  const Utils = shaka.hls.Utils;\n  const HlsParser = shaka.hls.HlsParser;\n\n  let relativeUri = uri;\n  uri = Utils.constructAbsoluteUri(this.manifestUri_, uri);\n\n  /** @type {!shaka.hls.Playlist} */\n  let playlist;\n  /** @type {string} */\n  let codecs = '';\n  /** @type {string} */\n  let mimeType;\n\n  return this.requestManifest_(uri).then(function(response) {\n    playlist = this.manifestTextParser_.parsePlaylist(response.data, uri);\n    if (playlist.type != shaka.hls.PlaylistType.MEDIA) {\n      // EXT-X-MEDIA tags should point to media playlists.\n      throw new shaka.util.Error(\n          shaka.util.Error.Severity.CRITICAL,\n          shaka.util.Error.Category.MANIFEST,\n          shaka.util.Error.Code.HLS_INVALID_PLAYLIST_HIERARCHY);\n    }\n\n    goog.asserts.assert(playlist.segments != null,\n                        'Media playlist should have segments!');\n\n    this.determinePresentationType_(playlist);\n\n    codecs = this.guessCodecs_(type, allCodecs);\n    return this.guessMimeType_(type, codecs, playlist);\n  }.bind(this)).then(function(mimeTypeArg) {\n    mimeType = mimeTypeArg;\n\n    let mediaSequenceTag = Utils.getFirstTagWithName(playlist.tags,\n                                                     'EXT-X-MEDIA-SEQUENCE');\n\n    let startPosition = mediaSequenceTag ? Number(mediaSequenceTag.value) : 0;\n\n    return this.createSegments_(playlist, startPosition, mimeType, codecs);\n  }.bind(this)).then(function(segments) {\n    let minTimestamp = segments[0].startTime;\n    let lastEndTime = segments[segments.length - 1].endTime;\n    let duration = lastEndTime - minTimestamp;\n    let segmentIndex = new shaka.media.SegmentIndex(segments);\n\n    const initSegmentReference = this.createInitSegmentReference_(playlist);\n\n    let kind = undefined;\n    const ManifestParserUtils = shaka.util.ManifestParserUtils;\n    if (type == ManifestParserUtils.ContentType.TEXT) {\n      kind = ManifestParserUtils.TextStreamKind.SUBTITLE;\n    }\n    // TODO: CLOSED-CAPTIONS requires the parsing of CEA-608 from the video.\n\n    let drmTags = [];\n    playlist.segments.forEach(function(segment) {\n      let segmentKeyTags = Utils.filterTagsByName(segment.tags,\n                                                  'EXT-X-KEY');\n      drmTags.push.apply(drmTags, segmentKeyTags);\n    });\n\n    let encrypted = false;\n    let drmInfos = [];\n    let keyId = null;\n\n    // TODO: May still need changes to support key rotation.\n    drmTags.forEach(function(drmTag) {\n      let method = HlsParser.getRequiredAttributeValue_(drmTag, 'METHOD');\n      if (method != 'NONE') {\n        encrypted = true;\n\n        let keyFormat =\n            HlsParser.getRequiredAttributeValue_(drmTag, 'KEYFORMAT');\n        let drmParser =\n            shaka.hls.HlsParser.KEYFORMATS_TO_DRM_PARSERS_[keyFormat];\n\n        let drmInfo = drmParser ? drmParser(drmTag) : null;\n        if (drmInfo) {\n          if (drmInfo.keyIds.length) {\n            keyId = drmInfo.keyIds[0];\n          }\n          drmInfos.push(drmInfo);\n        } else {\n          shaka.log.warning('Unsupported HLS KEYFORMAT', keyFormat);\n        }\n      }\n    });\n\n    if (encrypted && !drmInfos.length) {\n      throw new shaka.util.Error(\n          shaka.util.Error.Severity.CRITICAL,\n          shaka.util.Error.Category.MANIFEST,\n          shaka.util.Error.Code.HLS_KEYFORMATS_NOT_SUPPORTED);\n    }\n\n    /** @type {shaka.extern.Stream} */\n    let stream = {\n      id: this.globalId_++,\n      originalId: name,\n      createSegmentIndex: Promise.resolve.bind(Promise),\n      findSegmentPosition: segmentIndex.find.bind(segmentIndex),\n      getSegmentReference: segmentIndex.get.bind(segmentIndex),\n      initSegmentReference: initSegmentReference,\n      presentationTimeOffset: 0,\n      mimeType: mimeType,\n      codecs: codecs,\n      kind: kind,\n      encrypted: encrypted,\n      keyId: keyId,\n      language: language,\n      label: name,  // For historical reasons, since before \"originalId\".\n      type: type,\n      primary: primary,\n      // TODO: trick mode\n      trickModeVideo: null,\n      emsgSchemeIdUris: null,\n      frameRate: undefined,\n      width: undefined,\n      height: undefined,\n      bandwidth: undefined,\n      roles: [],\n      channelsCount: channelsCount,\n      closedCaptions: {},\n    };\n\n    this.streamsToIndexMap_[stream.id] = segmentIndex;\n\n    return {\n      stream: stream,\n      segmentIndex: segmentIndex,\n      drmInfos: drmInfos,\n      relativeUri: relativeUri,\n      minTimestamp: minTimestamp,\n      maxTimestamp: lastEndTime,\n      duration: duration,\n    };\n  }.bind(this));\n};\n\n\n/**\n * @param {!shaka.hls.Playlist} playlist\n * @private\n */\nshaka.hls.HlsParser.prototype.determinePresentationType_ = function(playlist) {\n  const Utils = shaka.hls.Utils;\n  const PresentationType = shaka.hls.HlsParser.PresentationType_;\n  let presentationTypeTag = Utils.getFirstTagWithName(playlist.tags,\n                                                      'EXT-X-PLAYLIST-TYPE');\n  let endListTag = Utils.getFirstTagWithName(playlist.tags, 'EXT-X-ENDLIST');\n\n  let isVod = (presentationTypeTag && presentationTypeTag.value == 'VOD') ||\n      endListTag;\n  let isEvent = presentationTypeTag && presentationTypeTag.value == 'EVENT' &&\n      !isVod;\n  let isLive = !isVod && !isEvent;\n\n  if (isVod) {\n    this.setPresentationType_(PresentationType.VOD);\n  } else {\n    // If it's not VOD, it must be presentation type LIVE or an ongoing EVENT.\n    if (isLive) {\n      this.setPresentationType_(PresentationType.LIVE);\n    } else {\n      this.setPresentationType_(PresentationType.EVENT);\n    }\n\n    let targetDurationTag = this.getRequiredTag_(playlist.tags,\n                                                 'EXT-X-TARGETDURATION');\n    let targetDuration = Number(targetDurationTag.value);\n\n    // According to the HLS spec, updates should not happen more often than\n    // once in targetDuration.  It also requires us to only update the active\n    // variant.  We might implement that later, but for now every variant\n    // will be updated.  To get the update period, choose the smallest\n    // targetDuration value across all playlists.\n\n    // Update the longest target duration if need be to use as a presentation\n    // delay later.\n    this.maxTargetDuration_ = Math.max(targetDuration, this.maxTargetDuration_);\n    // Update the shortest one to use as update period and segment availability\n    // time (for LIVE).\n    this.minTargetDuration_ = Math.min(targetDuration, this.minTargetDuration_);\n  }\n};\n\n\n/**\n * @param {number} lastTimestamp\n * @throws shaka.util.Error\n * @private\n */\nshaka.hls.HlsParser.prototype.createPresentationTimeline_ =\n    function(lastTimestamp) {\n  if (this.isLive_()) {\n    // The live edge will be calculated from segments, so we don't need to set\n    // a presentation start time.  We will assert later that this is working as\n    // expected.\n\n    // The HLS spec (RFC 8216) states in 6.3.3:\n    //\n    // \"The client SHALL choose which Media Segment to play first ... the\n    // client SHOULD NOT choose a segment that starts less than three target\n    // durations from the end of the Playlist file.  Doing so can trigger\n    // playback stalls.\"\n    //\n    // We accomplish this in our DASH-y model by setting a presentation delay\n    // of 3 segments.  This will be the \"live edge\" of the presentation.\n    this.presentationTimeline_ = new shaka.media.PresentationTimeline(\n        /* presentationStartTime */ 0, /* delay */ this.maxTargetDuration_ * 3);\n    this.presentationTimeline_.setStatic(false);\n  } else {\n    this.presentationTimeline_ = new shaka.media.PresentationTimeline(\n        /* presentationStartTime */ null, /* delay */ 0);\n    this.presentationTimeline_.setStatic(true);\n  }\n\n  this.notifySegments_();\n\n  // This asserts that the live edge is being calculated from segment times.\n  // For VOD and event streams, this check should still pass.\n  goog.asserts.assert(\n      !this.presentationTimeline_.usingPresentationStartTime(),\n      'We should not be using the presentation start time in HLS!');\n};\n\n\n/**\n * @param {!shaka.hls.Playlist} playlist\n * @return {shaka.media.InitSegmentReference}\n * @private\n * @throws {shaka.util.Error}\n */\nshaka.hls.HlsParser.prototype.createInitSegmentReference_ = function(playlist) {\n  const Utils = shaka.hls.Utils;\n  let mapTags = Utils.filterTagsByName(playlist.tags, 'EXT-X-MAP');\n  // TODO: Support multiple map tags?\n  // For now, we don't support multiple map tags and will throw an error.\n  if (!mapTags.length) {\n    return null;\n  } else if (mapTags.length > 1) {\n    throw new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.MANIFEST,\n        shaka.util.Error.Code.HLS_MULTIPLE_MEDIA_INIT_SECTIONS_FOUND);\n  }\n\n  // Map tag example: #EXT-X-MAP:URI=\"main.mp4\",BYTERANGE=\"720@0\"\n  let mapTag = mapTags[0];\n  let initUri = shaka.hls.HlsParser.getRequiredAttributeValue_(mapTag, 'URI');\n  let uri = Utils.constructAbsoluteUri(playlist.uri, initUri);\n  let startByte = 0;\n  let endByte = null;\n  let byterange = mapTag.getAttributeValue('BYTERANGE');\n  // If a BYTERANGE attribute is not specified, the segment consists\n  // of the entire resource.\n  if (byterange) {\n    let blocks = byterange.split('@');\n    let byteLength = Number(blocks[0]);\n    startByte = Number(blocks[1]);\n    endByte = startByte + byteLength - 1;\n  }\n\n  return new shaka.media.InitSegmentReference(function() { return [uri]; },\n                                              startByte,\n                                              endByte);\n};\n\n\n/**\n * Parses one shaka.hls.Segment object into a shaka.media.SegmentReference.\n *\n * @param {!shaka.hls.Playlist} playlist\n * @param {shaka.media.SegmentReference} previousReference\n * @param {!shaka.hls.Segment} hlsSegment\n * @param {number} position\n * @param {number} startTime\n * @return {!shaka.media.SegmentReference}\n * @private\n */\nshaka.hls.HlsParser.prototype.createSegmentReference_ =\n    function(playlist, previousReference, hlsSegment, position, startTime) {\n  const Utils = shaka.hls.Utils;\n  let tags = hlsSegment.tags;\n  let uri = Utils.constructAbsoluteUri(playlist.uri, hlsSegment.uri);\n\n  let extinfTag = this.getRequiredTag_(tags, 'EXTINF');\n  // The EXTINF tag format is '#EXTINF:<duration>,[<title>]'.\n  // We're interested in the duration part.\n  let extinfValues = extinfTag.value.split(',');\n  let duration = Number(extinfValues[0]);\n  let endTime = startTime + duration;\n\n  let startByte = 0;\n  let endByte = null;\n  let byterange = Utils.getFirstTagWithName(tags, 'EXT-X-BYTERANGE');\n\n  // If BYTERANGE is not specified, the segment consists of the entire resource.\n  if (byterange) {\n    let blocks = byterange.value.split('@');\n    let byteLength = Number(blocks[0]);\n    if (blocks[1]) {\n      startByte = Number(blocks[1]);\n    } else {\n      goog.asserts.assert(previousReference,\n                          'Cannot refer back to previous HLS segment!');\n      startByte = previousReference.endByte + 1;\n    }\n    endByte = startByte + byteLength - 1;\n  }\n\n  return new shaka.media.SegmentReference(\n      position,\n      startTime,\n      endTime,\n      function() { return [uri]; },\n      startByte,\n      endByte);\n};\n\n\n/** @private */\nshaka.hls.HlsParser.prototype.notifySegments_ = function() {\n  // The presentation timeline may or may not be set yet.\n  // If it does not yet exist, hold onto the segments until it does.\n  if (!this.presentationTimeline_) {\n    return;\n  }\n  this.segmentsToNotifyByStream_.forEach((segments) => {\n    // HLS doesn't have separate periods.\n    this.presentationTimeline_.notifySegments(segments, /* periodStart */ 0);\n  });\n  this.segmentsToNotifyByStream_ = [];\n};\n\n\n/**\n * Parses shaka.hls.Segment objects into shaka.media.SegmentReferences.\n *\n * @param {!shaka.hls.Playlist} playlist\n * @param {number} startPosition\n * @param {string} mimeType\n * @param {string} codecs\n * @return {!Promise<!Array.<!shaka.media.SegmentReference>>}\n * @private\n */\nshaka.hls.HlsParser.prototype.createSegments_ =\n    function(playlist, startPosition, mimeType, codecs) {\n  const Utils = shaka.hls.Utils;\n  let hlsSegments = playlist.segments;\n  let references = [];\n\n  goog.asserts.assert(hlsSegments.length, 'Playlist should have segments!');\n  // We may need to look at the media itself to determine a segment start time.\n  let firstSegmentUri = Utils.constructAbsoluteUri(playlist.uri,\n                                                   hlsSegments[0].uri);\n  let firstSegmentRef =\n      this.createSegmentReference_(\n          playlist,\n          null /* previousReference */,\n          hlsSegments[0],\n          startPosition,\n          0 /* startTime, irrelevant */);\n\n  let initSegmentRef = this.createInitSegmentReference_(playlist);\n\n  return this.getStartTime_(\n      playlist.uri, initSegmentRef, firstSegmentRef, mimeType, codecs)\n      .then(function(firstStartTime) {\n        shaka.log.debug('First segment', firstSegmentUri.split('/').pop(),\n                        'starts at', firstStartTime);\n        for (let i = 0; i < hlsSegments.length; ++i) {\n          let hlsSegment = hlsSegments[i];\n          let previousReference = references[references.length - 1];\n          let startTime = (i == 0) ? firstStartTime : previousReference.endTime;\n          let position = startPosition + i;\n\n          let reference = this.createSegmentReference_(\n              playlist,\n              previousReference,\n              hlsSegment,\n              position,\n              startTime);\n          references.push(reference);\n        }\n\n        this.segmentsToNotifyByStream_.push(references);\n        this.notifySegments_();\n\n        return references;\n      }.bind(this));\n};\n\n\n/**\n * Try to fetch a partial segment, and fall back to a full segment if we have\n * to.\n *\n * @param {!shaka.media.AnySegmentReference} segmentRef\n * @return {!Promise.<shaka.extern.Response>}\n * @throws {shaka.util.Error}\n * @private\n */\nshaka.hls.HlsParser.prototype.fetchPartialSegment_ = function(segmentRef) {\n  let networkingEngine = this.playerInterface_.networkingEngine;\n  const requestType = shaka.net.NetworkingEngine.RequestType.SEGMENT;\n  let request = shaka.net.NetworkingEngine.makeRequest(\n      segmentRef.getUris(), this.config_.retryParameters);\n\n  // Try to avoid fetching the entire segment, which can be quite large.\n  let partialSegmentHeaders = {};\n  let startByte = segmentRef.startByte;\n  let partialEndByte =\n      startByte + shaka.hls.HlsParser.PARTIAL_SEGMENT_SIZE_ - 1;\n  partialSegmentHeaders['Range'] = 'bytes=' + startByte + '-' + partialEndByte;\n\n  // Prepare a fallback to the entire segment.\n  let fullSegmentHeaders = {};\n  if ((startByte != 0) || (segmentRef.endByte != null)) {\n    let range = 'bytes=' + startByte + '-';\n    if (segmentRef.endByte != null) range += segmentRef.endByte;\n\n    fullSegmentHeaders['Range'] = range;\n  }\n\n  // Try a partial request first.\n  request.headers = partialSegmentHeaders;\n  let operation = networkingEngine.request(requestType, request);\n  this.operationManager_.manage(operation);\n  return operation.promise.catch((error) => {\n    // The partial request may fail for a number of reasons.\n    // Some servers do not support Range requests, and others do not support\n    // the OPTIONS request which must be made before any cross-origin Range\n    // request.  Since this fallback is expensive, warn the app developer.\n    shaka.log.alwaysWarn('Unable to fetch a partial HLS segment! ' +\n                         'Falling back to a full segment request, ' +\n                         'which is expensive!  Your server should ' +\n                         'support Range requests and CORS preflights.',\n                         request.uris[0]);\n    request.headers = fullSegmentHeaders;\n    let operation = networkingEngine.request(requestType, request);\n    this.operationManager_.manage(operation);\n    return operation.promise;\n  });\n};\n\n\n/**\n * Gets the start time of a segment from the existing manifest (if possible) or\n * by downloading it and parsing it otherwise.\n *\n * @param {string} playlistUri\n * @param {shaka.media.InitSegmentReference} initSegmentRef\n * @param {!shaka.media.SegmentReference} segmentRef\n * @param {string} mimeType\n * @param {string} codecs\n * @return {!Promise.<number>}\n * @throws {shaka.util.Error}\n * @private\n */\nshaka.hls.HlsParser.prototype.getStartTime_ =\n    function(playlistUri, initSegmentRef, segmentRef, mimeType, codecs) {\n  // If we are updating the manifest, we can usually skip fetching the segment\n  // by examining the references we already have.  This won't be possible if\n  // there was some kind of lag or delay updating the manifest on the server,\n  // in which extreme case we would fall back to fetching a segment.  This\n  // allows us to both avoid fetching segments when possible, and recover from\n  // certain server-side issues gracefully.\n  if (this.manifest_) {\n    let streamInfo = this.uriToStreamInfosMap_[playlistUri];\n    let segmentIndex = streamInfo.segmentIndex;\n    let reference = segmentIndex.get(segmentRef.position);\n    if (reference) {\n      // We found it!  Avoid fetching and parsing the segment.\n      shaka.log.v1('Found segment start time in previous manifest');\n      return Promise.resolve(reference.startTime);\n    }\n\n    shaka.log.debug('Unable to find segment start time in previous manifest!');\n  }\n\n  // TODO: Introduce a new tag to extend HLS and provide the first segment's\n  // start time.  This will avoid the need for these fetches in content packaged\n  // with Shaka Packager.  This web-friendly extension to HLS can then be\n  // proposed to Apple for inclusion in a future version of HLS.\n  // See https://github.com/google/shaka-packager/issues/294\n\n  shaka.log.v1('Fetching segment to find start time');\n  let fetches = [this.fetchPartialSegment_(segmentRef)];\n\n  if (mimeType == 'video/mp4' || mimeType == 'audio/mp4') {\n    // We also need the init segment to get the correct timescale.\n    if (initSegmentRef) {\n      fetches.push(this.fetchPartialSegment_(initSegmentRef));\n    } else {\n      // If the stream is self-initializing, use the same response for both.\n      fetches.push(fetches[0]);\n    }\n  }\n\n  return Promise.all(fetches).then(function(responses) {\n    if (mimeType == 'video/mp4' || mimeType == 'audio/mp4') {\n      return this.getStartTimeFromMp4Segment_(\n          responses[0].data, responses[1].data);\n    } else if (mimeType == 'audio/mpeg') {\n      // There is no standard way to embed a timestamp in an mp3 file, so the\n      // start time is presumably 0.\n      return 0;\n    } else if (mimeType == 'video/mp2t') {\n      return this.getStartTimeFromTsSegment_(responses[0].data);\n    } else if (mimeType == 'application/mp4' ||\n               mimeType.indexOf('text/') == 0) {\n      return this.getStartTimeFromTextSegment_(\n          mimeType, codecs, responses[0].data);\n    } else {\n      // TODO: Parse WebM?\n      // TODO: Parse raw AAC?\n      throw new shaka.util.Error(\n          shaka.util.Error.Severity.CRITICAL,\n          shaka.util.Error.Category.MANIFEST,\n          shaka.util.Error.Code.HLS_COULD_NOT_PARSE_SEGMENT_START_TIME);\n    }\n  }.bind(this));\n};\n\n\n/**\n * Parses an mp4 segment to get its start time.\n *\n * @param {!ArrayBuffer} mediaData\n * @param {!ArrayBuffer} initData\n * @return {number}\n * @throws {shaka.util.Error}\n * @private\n */\nshaka.hls.HlsParser.prototype.getStartTimeFromMp4Segment_ =\n    function(mediaData, initData) {\n  const Mp4Parser = shaka.util.Mp4Parser;\n\n  let timescale = 0;\n  new Mp4Parser()\n      .box('moov', Mp4Parser.children)\n      .box('trak', Mp4Parser.children)\n      .box('mdia', Mp4Parser.children)\n      .fullBox('mdhd', function(box) {\n        goog.asserts.assert(\n            box.version == 0 || box.version == 1,\n            'MDHD version can only be 0 or 1');\n\n        // Skip \"creation_time\" and \"modification_time\".\n        // They are 4 bytes each if the mdhd box is version 0, 8 bytes each if\n        // it is version 1.\n        box.reader.skip(box.version == 0 ? 8 : 16);\n\n        timescale = box.reader.readUint32();\n        box.parser.stop();\n      }).parse(initData, true /* partialOkay */);\n\n  if (!timescale) {\n    shaka.log.error('Unable to find timescale in init segment!');\n    throw new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.MANIFEST,\n        shaka.util.Error.Code.HLS_COULD_NOT_PARSE_SEGMENT_START_TIME);\n  }\n\n  let startTime = 0;\n  let parsedMedia = false;\n  new Mp4Parser()\n      .box('moof', Mp4Parser.children)\n      .box('traf', Mp4Parser.children)\n      .fullBox('tfdt', function(box) {\n        goog.asserts.assert(\n            box.version == 0 || box.version == 1,\n            'TFDT version can only be 0 or 1');\n        let baseTime = (box.version == 0) ?\n            box.reader.readUint32() :\n            box.reader.readUint64();\n        startTime = baseTime / timescale;\n        parsedMedia = true;\n        box.parser.stop();\n      }).parse(mediaData, true /* partialOkay */);\n\n  if (!parsedMedia) {\n    throw new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.MANIFEST,\n        shaka.util.Error.Code.HLS_COULD_NOT_PARSE_SEGMENT_START_TIME);\n  }\n  return startTime;\n};\n\n\n/**\n * Parses a TS segment to get its start time.\n *\n * @param {!ArrayBuffer} data\n * @return {number}\n * @throws {shaka.util.Error}\n * @private\n */\nshaka.hls.HlsParser.prototype.getStartTimeFromTsSegment_ = function(data) {\n  let reader = new shaka.util.DataViewReader(\n      new DataView(data), shaka.util.DataViewReader.Endianness.BIG_ENDIAN);\n\n  const fail = function() {\n    throw new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.MANIFEST,\n        shaka.util.Error.Code.HLS_COULD_NOT_PARSE_SEGMENT_START_TIME);\n  };\n\n  let packetStart = 0;\n  let syncByte = 0;\n\n  const skipPacket = function() {\n    // 188-byte packets are standard, so assume that.\n    reader.seek(packetStart + 188);\n    syncByte = reader.readUint8();\n    if (syncByte != 0x47) {\n      // We haven't found the sync byte, so try it as a 192-byte packet.\n      reader.seek(packetStart + 192);\n      syncByte = reader.readUint8();\n    }\n    if (syncByte != 0x47) {\n      // We still haven't found the sync byte, so try as a 204-byte packet.\n      reader.seek(packetStart + 204);\n      syncByte = reader.readUint8();\n    }\n    if (syncByte != 0x47) {\n      // We still haven't found the sync byte, so the packet was of a\n      // non-standard size.\n      fail();\n    }\n    // Put the sync byte back so we can read it in the next loop.\n    reader.rewind(1);\n  };\n\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    // Format reference: https://bit.ly/TsPacket\n    packetStart = reader.getPosition();\n\n    syncByte = reader.readUint8();\n    if (syncByte != 0x47) fail();\n\n    let flagsAndPacketId = reader.readUint16();\n    let hasPesPacket = flagsAndPacketId & 0x4000;\n    if (!hasPesPacket) fail();\n\n    let flags = reader.readUint8();\n    let adaptationFieldControl = (flags & 0x30) >> 4;\n    if (adaptationFieldControl == 0 /* reserved */ ||\n        adaptationFieldControl == 2 /* adaptation field, no payload */) {\n      fail();\n    }\n\n    if (adaptationFieldControl == 3) {\n      // Skip over adaptation field.\n      let length = reader.readUint8();\n      reader.skip(length);\n    }\n\n    // Now we come to the PES header (hopefully).\n    // Format reference: https://bit.ly/TsPES\n    let startCode = reader.readUint32();\n    let startCodePrefix = startCode >> 8;\n    if (startCodePrefix != 1) {\n      // Not a PES packet yet.  Skip this TS packet and try again.\n      skipPacket();\n      continue;\n    }\n\n    // Skip the 16-bit PES length and the first 8 bits of the optional header.\n    reader.skip(3);\n    // The next 8 bits contain flags about DTS & PTS.\n    let ptsDtsIndicator = reader.readUint8() >> 6;\n    if (ptsDtsIndicator == 0 /* no timestamp */ ||\n        ptsDtsIndicator == 1 /* forbidden */) {\n      fail();\n    }\n\n    let pesHeaderLengthRemaining = reader.readUint8();\n    if (pesHeaderLengthRemaining == 0) {\n      fail();\n    }\n\n    if (ptsDtsIndicator == 2 /* PTS only */) {\n      goog.asserts.assert(pesHeaderLengthRemaining == 5, 'Bad PES header?');\n    } else if (ptsDtsIndicator == 3 /* PTS and DTS */) {\n      goog.asserts.assert(pesHeaderLengthRemaining == 10, 'Bad PES header?');\n    }\n\n    let pts0 = reader.readUint8();\n    let pts1 = reader.readUint16();\n    let pts2 = reader.readUint16();\n    // Reconstruct 33-bit PTS from the 5-byte, padded structure.\n    let ptsHigh3 = (pts0 & 0x0e) >> 1;\n    let ptsLow30 = ((pts1 & 0xfffe) << 14) | ((pts2 & 0xfffe) >> 1);\n    // Reconstruct the PTS as a float.  Avoid bitwise operations to combine\n    // because bitwise ops treat the values as 32-bit ints.\n    let pts = ptsHigh3 * (1 << 30) + ptsLow30;\n    return pts / shaka.hls.HlsParser.TS_TIMESCALE_;\n  }\n};\n\n\n/**\n * Parses a text segment to get its start time.\n *\n * @param {string} mimeType\n * @param {string} codecs\n * @param {!ArrayBuffer} data\n * @return {number}\n * @throws {shaka.util.Error}\n * @private\n */\nshaka.hls.HlsParser.prototype.getStartTimeFromTextSegment_ =\n    function(mimeType, codecs, data) {\n  let fullMimeType = shaka.util.MimeUtils.getFullType(mimeType, codecs);\n  if (!shaka.text.TextEngine.isTypeSupported(fullMimeType)) {\n    // We won't be able to parse this, but it will be filtered out anyway.\n    // So we don't have to care about the start time.\n    return 0;\n  }\n\n  let textEngine = new shaka.text.TextEngine(/* displayer */ null);\n  textEngine.initParser(fullMimeType);\n  return textEngine.getStartTime(data);\n};\n\n\n/**\n * Attempts to guess which codecs from the codecs list belong to a given content\n * type.  Does not assume a single codec is anything special, and does not throw\n * if it fails to match.\n *\n * @param {string} contentType\n * @param {!Array.<string>} codecs\n * @return {?string} or null if no match is found\n * @private\n */\nshaka.hls.HlsParser.prototype.guessCodecsSafe_ = function(contentType, codecs) {\n  const ContentType = shaka.util.ManifestParserUtils.ContentType;\n  const HlsParser = shaka.hls.HlsParser;\n  let formats = HlsParser.CODEC_REGEXPS_BY_CONTENT_TYPE_[contentType];\n\n  for (let i = 0; i < formats.length; i++) {\n    for (let j = 0; j < codecs.length; j++) {\n      if (formats[i].test(codecs[j].trim())) {\n        return codecs[j].trim();\n      }\n    }\n  }\n\n  // Text does not require a codec string.\n  if (contentType == ContentType.TEXT) {\n    return '';\n  }\n\n  return null;\n};\n\n\n/**\n * Attempts to guess which codecs from the codecs list belong to a given content\n * type.  Assumes that at least one codec is correct, and throws if none are.\n *\n * @param {string} contentType\n * @param {!Array.<string>} codecs\n * @return {string}\n * @private\n * @throws {shaka.util.Error}\n */\nshaka.hls.HlsParser.prototype.guessCodecs_ = function(contentType, codecs) {\n  if (codecs.length == 1) {\n    return codecs[0];\n  }\n\n  let match = this.guessCodecsSafe_(contentType, codecs);\n  // A failure is specifically denoted by null; an empty string represents a\n  // valid match of no codec.\n  if (match != null) {\n    return match;\n  }\n\n  // Unable to guess codecs.\n  throw new shaka.util.Error(\n      shaka.util.Error.Severity.CRITICAL,\n      shaka.util.Error.Category.MANIFEST,\n      shaka.util.Error.Code.HLS_COULD_NOT_GUESS_CODECS,\n      codecs);\n};\n\n\n/**\n * Attempts to guess stream's mime type based on content type and uri.\n *\n * @param {string} contentType\n * @param {string} codecs\n * @param {!shaka.hls.Playlist} playlist\n * @return {!Promise.<string>}\n * @private\n * @throws {shaka.util.Error}\n */\nshaka.hls.HlsParser.prototype.guessMimeType_ =\n    function(contentType, codecs, playlist) {\n  const ContentType = shaka.util.ManifestParserUtils.ContentType;\n  const HlsParser = shaka.hls.HlsParser;\n  const Utils = shaka.hls.Utils;\n\n  goog.asserts.assert(playlist.segments.length,\n                      'Playlist should have segments!');\n  let firstSegmentUri = Utils.constructAbsoluteUri(playlist.uri,\n                                                   playlist.segments[0].uri);\n\n  let parsedUri = new goog.Uri(firstSegmentUri);\n  let extension = parsedUri.getPath().split('.').pop();\n  let map = HlsParser.EXTENSION_MAP_BY_CONTENT_TYPE_[contentType];\n\n  let mimeType = map[extension];\n  if (mimeType) {\n    return Promise.resolve(mimeType);\n  }\n\n  if (contentType == ContentType.TEXT) {\n    // The extension map didn't work.\n    if (!codecs || codecs == 'vtt') {\n      // If codecs is 'vtt', it's WebVTT.\n      // If there was no codecs string, assume HLS text streams are WebVTT.\n      return Promise.resolve('text/vtt');\n    } else {\n      // Otherwise, assume MP4-embedded text, since text-based formats tend not\n      // to have a codecs string at all.\n      return Promise.resolve('application/mp4');\n    }\n  }\n\n  // If unable to guess mime type, request a segment and try getting it\n  // from the response.\n  let headRequest = shaka.net.NetworkingEngine.makeRequest(\n      [firstSegmentUri], this.config_.retryParameters);\n  headRequest.method = 'HEAD';\n  const requestType = shaka.net.NetworkingEngine.RequestType.SEGMENT;\n  let networkingEngine = this.playerInterface_.networkingEngine;\n  let operation = networkingEngine.request(requestType, headRequest);\n  this.operationManager_.manage(operation);\n\n  return operation.promise.then((response) => {\n    let mimeType = response.headers['content-type'];\n    if (!mimeType) {\n      throw new shaka.util.Error(\n          shaka.util.Error.Severity.CRITICAL,\n          shaka.util.Error.Category.MANIFEST,\n          shaka.util.Error.Code.HLS_COULD_NOT_GUESS_MIME_TYPE,\n          extension);\n    }\n\n    // Split the MIME type in case the server sent additional parameters.\n    return mimeType.split(';')[0];\n  });\n};\n\n\n/**\n * Find the attribute and returns its value.\n * Throws an error if attribute was not found.\n *\n * @param {shaka.hls.Tag} tag\n * @param {string} attributeName\n * @return {string}\n * @private\n * @throws {shaka.util.Error}\n */\nshaka.hls.HlsParser.getRequiredAttributeValue_ = function(tag, attributeName) {\n  let attribute = tag.getAttribute(attributeName);\n  if (!attribute) {\n    throw new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.MANIFEST,\n        shaka.util.Error.Code.HLS_REQUIRED_ATTRIBUTE_MISSING,\n        attributeName);\n  }\n\n  return attribute.value;\n};\n\n\n/**\n * Returns a tag with a given name.\n * Throws an error if tag was not found.\n *\n * @param {!Array.<shaka.hls.Tag>} tags\n * @param {string} tagName\n * @return {!shaka.hls.Tag}\n * @private\n * @throws {shaka.util.Error}\n */\nshaka.hls.HlsParser.prototype.getRequiredTag_ = function(tags, tagName) {\n  const Utils = shaka.hls.Utils;\n  let tag = Utils.getFirstTagWithName(tags, tagName);\n  if (!tag) {\n    throw new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.MANIFEST,\n        shaka.util.Error.Code.HLS_REQUIRED_TAG_MISSING, tagName);\n  }\n\n  return tag;\n};\n\n\n/**\n * @param {shaka.extern.Stream} stream\n * @param {?string} width\n * @param {?string} height\n * @param {?string} frameRate\n * @private\n */\nshaka.hls.HlsParser.prototype.addVideoAttributes_ =\n    function(stream, width, height, frameRate) {\n  if (stream) {\n    stream.width = Number(width) || undefined;\n    stream.height = Number(height) || undefined;\n    stream.frameRate = Number(frameRate) || undefined;\n  }\n};\n\n\n/**\n * Makes a network request for the manifest and returns a Promise\n * with the resulting data.\n *\n * @param {string} uri\n * @return {!Promise.<!shaka.extern.Response>}\n * @private\n */\nshaka.hls.HlsParser.prototype.requestManifest_ = function(uri) {\n  const requestType = shaka.net.NetworkingEngine.RequestType.MANIFEST;\n  let request = shaka.net.NetworkingEngine.makeRequest(\n      [uri], this.config_.retryParameters);\n  let networkingEngine = this.playerInterface_.networkingEngine;\n  let operation = networkingEngine.request(requestType, request);\n  this.operationManager_.manage(operation);\n  return operation.promise;\n};\n\n\n/**\n * A list of regexps to detect well-known video codecs.\n *\n * @const {!Array.<!RegExp>}\n * @private\n */\nshaka.hls.HlsParser.VIDEO_CODEC_REGEXPS_ = [\n  /^avc/,\n  /^hev/,\n  /^hvc/,\n  /^vp0?[89]/,\n  /^av1$/,\n];\n\n\n/**\n * A list of regexps to detect well-known audio codecs.\n *\n * @const {!Array.<!RegExp>}\n * @private\n */\nshaka.hls.HlsParser.AUDIO_CODEC_REGEXPS_ = [\n  /^vorbis$/,\n  /^opus$/,\n  /^flac$/,\n  /^mp4a/,\n  /^[ae]c-3$/,\n];\n\n\n/**\n * A list of regexps to detect well-known text codecs.\n *\n * @const {!Array.<!RegExp>}\n * @private\n */\nshaka.hls.HlsParser.TEXT_CODEC_REGEXPS_ = [\n  /^vtt$/,\n  /^wvtt/,\n  /^stpp/,\n];\n\n\n/**\n * @const {!Object.<string, !Array.<!RegExp>>}\n * @private\n */\nshaka.hls.HlsParser.CODEC_REGEXPS_BY_CONTENT_TYPE_ = {\n  'audio': shaka.hls.HlsParser.AUDIO_CODEC_REGEXPS_,\n  'video': shaka.hls.HlsParser.VIDEO_CODEC_REGEXPS_,\n  'text': shaka.hls.HlsParser.TEXT_CODEC_REGEXPS_,\n};\n\n\n/**\n * @const {!Object.<string, string>}\n * @private\n */\nshaka.hls.HlsParser.AUDIO_EXTENSIONS_TO_MIME_TYPES_ = {\n  'mp4': 'audio/mp4',\n  'm4s': 'audio/mp4',\n  'm4i': 'audio/mp4',\n  'm4a': 'audio/mp4',\n  // MPEG2-TS also uses video/ for audio: https://bit.ly/TsMse\n  'ts': 'video/mp2t',\n};\n\n\n/**\n * @const {!Object.<string, string>}\n * @private\n */\nshaka.hls.HlsParser.VIDEO_EXTENSIONS_TO_MIME_TYPES_ = {\n  'mp4': 'video/mp4',\n  'm4s': 'video/mp4',\n  'm4i': 'video/mp4',\n  'm4v': 'video/mp4',\n  'ts': 'video/mp2t',\n};\n\n\n/**\n * @const {!Object.<string, string>}\n * @private\n */\nshaka.hls.HlsParser.TEXT_EXTENSIONS_TO_MIME_TYPES_ = {\n  'mp4': 'application/mp4',\n  'm4s': 'application/mp4',\n  'm4i': 'application/mp4',\n  'vtt': 'text/vtt',\n  'ttml': 'application/ttml+xml',\n};\n\n\n/**\n * @const {!Object.<string, !Object.<string, string>>}\n * @private\n */\nshaka.hls.HlsParser.EXTENSION_MAP_BY_CONTENT_TYPE_ = {\n  'audio': shaka.hls.HlsParser.AUDIO_EXTENSIONS_TO_MIME_TYPES_,\n  'video': shaka.hls.HlsParser.VIDEO_EXTENSIONS_TO_MIME_TYPES_,\n  'text': shaka.hls.HlsParser.TEXT_EXTENSIONS_TO_MIME_TYPES_,\n};\n\n\n/**\n * @typedef {function(!shaka.hls.Tag):?shaka.extern.DrmInfo}\n * @private\n */\nshaka.hls.HlsParser.DrmParser_;\n\n\n/**\n * @param {!shaka.hls.Tag} drmTag\n * @return {?shaka.extern.DrmInfo}\n * @private\n */\nshaka.hls.HlsParser.widevineDrmParser_ = function(drmTag) {\n  const HlsParser = shaka.hls.HlsParser;\n  let method = HlsParser.getRequiredAttributeValue_(drmTag, 'METHOD');\n  // TODO: https://github.com/google/shaka-player/issues/1227\n  // Keep 'SAMPLE-AES-CENC' for backward compatibility.  Deprecate it in a\n  // future release.\n  const VALID_METHODS = ['SAMPLE-AES', 'SAMPLE-AES-CTR', 'SAMPLE-AES-CENC'];\n  if (VALID_METHODS.indexOf(method) < 0) {\n    shaka.log.error('Widevine in HLS is only supported with [',\n                    VALID_METHODS.join(', '), '], not', method);\n    return null;\n  }\n\n  let uri = HlsParser.getRequiredAttributeValue_(drmTag, 'URI');\n  let parsedData = shaka.net.DataUriPlugin.parse(uri);\n\n  // The data encoded in the URI is a PSSH box to be used as init data.\n  let pssh = new Uint8Array(parsedData.data);\n  let drmInfo = shaka.util.ManifestParserUtils.createDrmInfo(\n      'com.widevine.alpha', [\n        {initDataType: 'cenc', initData: pssh},\n      ]);\n\n  let keyId = drmTag.getAttributeValue('KEYID');\n  if (keyId) {\n    // This value should begin with '0x':\n    goog.asserts.assert(keyId.substr(0, 2) == '0x', 'Incorrect KEYID format!');\n    // But the output should not contain the '0x':\n    drmInfo.keyIds = [keyId.substr(2).toLowerCase()];\n  }\n  return drmInfo;\n};\n\n\n/**\n * Called when the update timer ticks.\n *\n * @private\n */\nshaka.hls.HlsParser.prototype.onUpdate_ = function() {\n  goog.asserts.assert(this.updateTimer_, 'Should only be called by timer');\n  goog.asserts.assert(this.updatePeriod_ != null,\n                      'There should be an update period');\n\n  shaka.log.info('Updating manifest...');\n\n  // Detect a call to stop()\n  if (!this.playerInterface_) {\n    return;\n  }\n\n  this.updateTimer_ = null;\n  this.update().then(function() {\n    this.setUpdateTimer_(this.updatePeriod_);\n  }.bind(this)).catch(function(error) {\n    goog.asserts.assert(error instanceof shaka.util.Error,\n                        'Should only receive a Shaka error');\n\n    // Try updating again, but ensure we haven't been destroyed.\n    if (this.playerInterface_) {\n      // We will retry updating, so override the severity of the error.\n      error.severity = shaka.util.Error.Severity.RECOVERABLE;\n      this.playerInterface_.onError(error);\n\n      this.setUpdateTimer_(0);\n    }\n  }.bind(this));\n};\n\n\n/**\n * Sets the update timer.\n *\n * @param {?number} time in seconds\n * @private\n */\nshaka.hls.HlsParser.prototype.setUpdateTimer_ = function(time) {\n  if (this.updatePeriod_ == null || time == null) {\n    return;\n  }\n  goog.asserts.assert(this.updateTimer_ == null,\n                      'Timer should not be already set');\n\n  let callback = this.onUpdate_.bind(this);\n  this.updateTimer_ = window.setTimeout(callback, time * 1000);\n};\n\n\n/**\n * @return {boolean}\n * @private\n */\nshaka.hls.HlsParser.prototype.isLive_ = function() {\n  const PresentationType = shaka.hls.HlsParser.PresentationType_;\n  return this.presentationType_ != PresentationType.VOD;\n};\n\n\n/**\n * @param {shaka.hls.HlsParser.PresentationType_} type\n * @private\n */\nshaka.hls.HlsParser.prototype.setPresentationType_ = function(type) {\n  this.presentationType_ = type;\n\n  if (this.presentationTimeline_) {\n    this.presentationTimeline_.setStatic(!this.isLive_());\n  }\n\n  if (!this.isLive_()) {\n    if (this.updateTimer_ != null) {\n      window.clearTimeout(this.updateTimer_);\n      this.updateTimer_ = null;\n      this.updatePeriod_ = null;\n    }\n  }\n};\n\n\n/**\n * @const {!Object.<string, shaka.hls.HlsParser.DrmParser_>}\n * @private\n */\nshaka.hls.HlsParser.KEYFORMATS_TO_DRM_PARSERS_ = {\n  /* TODO: https://github.com/google/shaka-player/issues/382\n  'com.apple.streamingkeydelivery':\n      shaka.hls.HlsParser.fairplayDrmParser_,\n  */\n  'urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed':\n      shaka.hls.HlsParser.widevineDrmParser_,\n};\n\n\n/**\n * @enum {string}\n * @private\n */\nshaka.hls.HlsParser.PresentationType_ = {\n  VOD: 'VOD',\n  EVENT: 'EVENT',\n  LIVE: 'LIVE',\n};\n\n\n/**\n * @const {number}\n * @private\n */\nshaka.hls.HlsParser.TS_TIMESCALE_ = 90000;\n\n\n/**\n * At this value, timestamps roll over in TS content.\n * @const {number}\n * @private\n */\nshaka.hls.HlsParser.TS_ROLLOVER_ = 0x200000000;\n\n\n/**\n * The amount of data from the start of a segment we will try to fetch when we\n * need to know the segment start time.  This allows us to avoid fetching the\n * entire segment in many cases.\n *\n * @const {number}\n * @private\n */\nshaka.hls.HlsParser.PARTIAL_SEGMENT_SIZE_ = 2048;\n\n\nshaka.media.ManifestParser.registerParserByExtension(\n    'm3u8', shaka.hls.HlsParser);\nshaka.media.ManifestParser.registerParserByMime(\n    'application/x-mpegurl', shaka.hls.HlsParser);\nshaka.media.ManifestParser.registerParserByMime(\n    'application/vnd.apple.mpegurl', shaka.hls.HlsParser);\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.media.ActiveStreamMap');\n\n\n/**\n * A structure used to track which streams were last used in any given period.\n *\n * @final\n */\nshaka.media.ActiveStreamMap = class {\n  constructor() {\n    /**\n     * A map of Period number to a map of content type to stream id.\n     * @private {!Object.<number, !shaka.media.ActiveStreamMap.Frame>}\n     */\n    this.history_ = {};\n  }\n\n  /**\n   * Check if a period has been played or has started playing.\n   *\n   * @param {number} periodIndex\n   * @return {boolean}\n   */\n  hasPeriod(periodIndex) {\n    return this.history_[periodIndex] != null;\n  }\n\n  /**\n   * Update the records to show that |stream| was the last stream of\n   * |type| playing in |period|.\n   *\n   * @param {number} periodIndex\n   * @param {shaka.media.ActiveStreamMap.StreamType} type\n   * @param {shaka.media.ActiveStreamMap.StreamId} streamId\n   */\n  update(periodIndex, type, streamId) {\n    this.history_[periodIndex] = this.history_[periodIndex] ||\n                            new shaka.media.ActiveStreamMap.Frame();\n    this.history_[periodIndex].update(type, streamId);\n  }\n\n  /**\n   * Get the id for the stream with the given type that was playing last in the\n   * given period. If the period had not started playing or there is no stream\n   * of type |type|, then |null| will be returned.\n   *\n   * @param {number} periodIndex\n   * @param {shaka.media.ActiveStreamMap.StreamType} type\n   * @return {?shaka.media.ActiveStreamMap.StreamId}\n   */\n  get(periodIndex, type) {\n    const record = this.history_[periodIndex];\n    return record ? record.get(type) : null;\n  }\n};\n\n\n/**\n * A structure used to track which streams were played during a specific\n * time frame.\n *\n * @final\n */\nshaka.media.ActiveStreamMap.Frame = class {\n  constructor() {\n    /**\n     * A mapping of stream type to stream id.\n     *\n     * @private {!Object<shaka.media.ActiveStreamMap.StreamType,\n     *                   shaka.media.ActiveStreamMap.StreamId>}\n     */\n    this.record_ = {};\n  }\n\n  /**\n   * @param {shaka.media.ActiveStreamMap.StreamType} type\n   * @param {shaka.media.ActiveStreamMap.StreamId} streamId\n   */\n  update(type, streamId) {\n    this.record_[type] = streamId;\n  }\n\n  /**\n   * Get the stream id for the stream type |type| played during this time\n   * frame. If there was no stream of type |type|, |null| will be returned.\n   *\n   * @param {shaka.media.ActiveStreamMap.StreamType} type\n   * @return {?shaka.media.ActiveStreamMap.StreamId}\n   */\n  get(type) {\n    return this.record_[type];\n  }\n};\n\n\n/**\n * A type definition for a stream's id.\n * @typedef {number}\n */\nshaka.media.ActiveStreamMap.StreamId;\n\n\n/**\n * A type definitions for a stream's type.\n * @typedef {string}\n */\nshaka.media.ActiveStreamMap.StreamType;\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.media.GapJumpingController');\n\ngoog.require('shaka.log');\ngoog.require('shaka.media.TimeRangesUtils');\ngoog.require('shaka.util.EventManager');\ngoog.require('shaka.util.FakeEvent');\ngoog.require('shaka.util.IDestroyable');\ngoog.require('shaka.util.Timer');\n\n\n/**\n * Creates a new GapJumpingController that handles jumping gaps that appear\n * within the content.  This will only jump gaps between two buffered ranges,\n * so we should not have to worry about the availability window.\n *\n * @param {!HTMLMediaElement} video\n * @param {!shaka.media.PresentationTimeline} timeline\n * @param {shaka.extern.StreamingConfiguration} config\n * @param {function(!Event)} onEvent Called when an event is raised to be sent\n *   to the application.\n *\n * @constructor\n * @struct\n * @implements {shaka.util.IDestroyable}\n */\nshaka.media.GapJumpingController = function(video, timeline, config, onEvent) {\n  /** @private {HTMLMediaElement} */\n  this.video_ = video;\n\n  /** @private {?shaka.media.PresentationTimeline} */\n  this.timeline_ = timeline;\n\n  /** @private {?shaka.extern.StreamingConfiguration} */\n  this.config_ = config;\n\n  /** @private {?function(!Event)} */\n  this.onEvent_ = onEvent;\n\n  /** @private {shaka.util.EventManager} */\n  this.eventManager_ = new shaka.util.EventManager();\n\n  /** @private {?shaka.util.Timer} */\n  this.gapJumpTimer_ = null;\n\n  /** @private {boolean} */\n  this.seekingEventReceived_ = false;\n\n  /** @private {number} */\n  this.prevReadyState_ = video.readyState;\n\n  /** @private {boolean} */\n  this.didFireLargeGap_ = false;\n\n  /**\n   * The wall-clock time (in milliseconds) that the stall occurred.  This is\n   * used to ensure we don't flush the pipeline too often.\n   * @private {number}\n   */\n  this.stallWallTime_ = -1;\n\n  /**\n   * The playhead time where we think a stall occurred.  When the ready state\n   * says we don't have enough data and the playhead stops too long, we assume\n   * we have stalled.\n   * @private {number}\n   */\n  this.stallPlayheadTime_ = -1;\n\n  /**\n   * True if we have already flushed the pipeline at stallPlayheadTime_.\n   * Allows us to avoid flushing multiple times for the same stall.\n   * @private {boolean}\n   */\n  this.stallCorrected_ = false;\n\n  /** @private {boolean} */\n  this.hadSegmentAppended_ = false;\n\n\n  let pollGap = this.onPollGapJump_.bind(this);\n  this.eventManager_.listen(video, 'waiting', pollGap);\n\n  // We can't trust readyState or 'waiting' events on all platforms.  So poll\n  // the current time and if we are in a gap, jump it.\n  // See: https://bit.ly/2McuXxm and https://bit.ly/2K5xmJO\n  this.gapJumpTimer_ = new shaka.util.Timer(pollGap);\n  this.gapJumpTimer_.scheduleRepeated(0.25);\n};\n\n\n/**\n * The limit, in seconds, for the gap size that we will assume the browser will\n * handle for us.\n * @const\n */\nshaka.media.GapJumpingController.BROWSER_GAP_TOLERANCE = 0.001;\n\n\n/** @override */\nshaka.media.GapJumpingController.prototype.destroy = function() {\n  let p = this.eventManager_.destroy();\n  this.eventManager_ = null;\n  this.video_ = null;\n  this.timeline_ = null;\n  this.onEvent_ = null;\n\n  if (this.gapJumpTimer_ != null) {\n    this.gapJumpTimer_.cancel();\n    this.gapJumpTimer_ = null;\n  }\n\n  return p;\n};\n\n\n/**\n * Called when a segment is appended by StreamingEngine, but not when a clear is\n * pending.  This means StreamingEngine will continue buffering forward from\n * what is buffered.  So we know about any gaps before the start.\n */\nshaka.media.GapJumpingController.prototype.onSegmentAppended = function() {\n  this.hadSegmentAppended_ = true;\n  this.onPollGapJump_();\n};\n\n\n/** Called when a seek has started. */\nshaka.media.GapJumpingController.prototype.onSeeking = function() {\n  this.seekingEventReceived_ = true;\n  this.hadSegmentAppended_ = false;\n  this.didFireLargeGap_ = false;\n};\n\n\n/**\n * Called on a recurring timer to check for gaps in the media.  This is also\n * called in a 'waiting' event.\n *\n * @private\n */\nshaka.media.GapJumpingController.prototype.onPollGapJump_ = function() {\n  // Don't gap jump before the video is ready to play.\n  if (this.video_.readyState == 0) return;\n  // Do not gap jump if seeking has begun, but the seeking event has not\n  // yet fired for this particular seek.\n  if (this.video_.seeking) {\n    if (!this.seekingEventReceived_) {\n      return;\n    }\n  } else {\n    this.seekingEventReceived_ = false;\n  }\n  // Don't gap jump while paused, so that you don't constantly jump ahead while\n  // paused on a livestream.\n  if (this.video_.paused) return;\n\n\n  // When the ready state changes, we have moved on, so we should fire the large\n  // gap event if we see one.\n  if (this.video_.readyState != this.prevReadyState_) {\n    this.didFireLargeGap_ = false;\n    this.prevReadyState_ = this.video_.readyState;\n  }\n\n  const smallGapLimit = this.config_.smallGapLimit;\n  let currentTime = this.video_.currentTime;\n  let buffered = this.video_.buffered;\n\n  let gapIndex = shaka.media.TimeRangesUtils.getGapIndex(buffered, currentTime);\n\n  // The current time is unbuffered or is too far from a gap.\n  if (gapIndex == null) {\n    this.handleStall_();\n    return;\n  }\n  // If we are before the first buffered range, this could be an unbuffered\n  // seek.  So wait until a segment is appended so we are sure it is a gap.\n  if (gapIndex == 0 && !this.hadSegmentAppended_) {\n    return;\n  }\n\n  // StreamingEngine can buffer past the seek end, but still don't allow seeking\n  // past it.\n  let jumpTo = buffered.start(gapIndex);\n  let seekEnd = this.timeline_.getSeekRangeEnd();\n  if (jumpTo >= seekEnd) {\n    return;\n  }\n\n  let jumpSize = jumpTo - currentTime;\n  let isGapSmall = jumpSize <= smallGapLimit;\n  let jumpLargeGap = false;\n\n  // If we jump to exactly the gap start, we may detect a small gap due to\n  // rounding errors or browser bugs.  We can ignore these extremely small gaps\n  // since the browser should play through them for us.\n  if (jumpSize < shaka.media.GapJumpingController.BROWSER_GAP_TOLERANCE) {\n    return;\n  }\n\n  if (!isGapSmall && !this.didFireLargeGap_) {\n    this.didFireLargeGap_ = true;\n\n    // Event firing is synchronous.\n    let event = new shaka.util.FakeEvent(\n        'largegap', {'currentTime': currentTime, 'gapSize': jumpSize});\n    event.cancelable = true;\n    this.onEvent_(event);\n\n    if (this.config_.jumpLargeGaps && !event.defaultPrevented) {\n      jumpLargeGap = true;\n    } else {\n      shaka.log.info('Ignoring large gap at', currentTime);\n    }\n  }\n\n  if (isGapSmall || jumpLargeGap) {\n    if (gapIndex == 0) {\n      shaka.log.info(\n          'Jumping forward', jumpSize,\n          'seconds because of gap before start time of', jumpTo);\n    } else {\n      shaka.log.info(\n          'Jumping forward', jumpSize, 'seconds because of gap starting at',\n          buffered.end(gapIndex - 1), 'and ending at', jumpTo);\n    }\n\n    this.video_.currentTime = jumpTo;\n  }\n};\n\n\n/**\n * This determines if we are stalled inside a buffered range and corrects it if\n * possible.\n * @private\n */\nshaka.media.GapJumpingController.prototype.handleStall_ = function() {\n  let currentTime = this.video_.currentTime;\n  let buffered = this.video_.buffered;\n\n  if (this.video_.readyState < 3 && this.video_.playbackRate > 0) {\n    // Some platforms/browsers can get stuck in the middle of a buffered range\n    // (e.g. when seeking in a background tab).  Flush the media pipeline to\n    // help. Flush once we have stopped for more than 1 second inside a buffered\n    // range.\n    if (this.stallPlayheadTime_ != currentTime) {\n      this.stallPlayheadTime_ = currentTime;\n      this.stallWallTime_ = Date.now();\n      this.stallCorrected_ = false;\n    } else if (!this.stallCorrected_ &&\n               this.stallWallTime_ < Date.now() - 1000) {\n      for (let i = 0; i < buffered.length; i++) {\n        // Ignore the end of the buffered range since it may not play any more\n        // on all platforms.\n        if (currentTime >= buffered.start(i) &&\n            currentTime < buffered.end(i) - 0.5) {\n          shaka.log.debug(\n              'Flushing media pipeline due to stall inside buffered range');\n          this.video_.currentTime += 0.1;\n          this.stallPlayheadTime_ = this.video_.currentTime;\n          this.stallCorrected_ = true;\n          break;\n        }\n      }\n    }\n  }\n};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.media.VideoWrapper');\n\ngoog.require('goog.asserts');\ngoog.require('shaka.log');\ngoog.require('shaka.util.EventManager');\ngoog.require('shaka.util.IDestroyable');\ngoog.require('shaka.util.Timer');\n\n\n/**\n * Creates a new VideoWrapper that manages setting current time and playback\n * rate.  This handles seeks before content is loaded and ensuring the video\n * time is set properly.  This doesn't handle repositioning within the\n * presentation window.\n *\n * @param {!HTMLMediaElement} video\n * @param {function()} onSeek Called when the video seeks.\n * @param {number} startTime The time to start at.\n *\n * @constructor\n * @struct\n * @implements {shaka.util.IDestroyable}\n */\nshaka.media.VideoWrapper = function(video, onSeek, startTime) {\n  /** @private {HTMLMediaElement} */\n  this.video_ = video;\n\n  /** @private {?function()} */\n  this.onSeek_ = onSeek;\n\n  /** @private {number} */\n  this.startTime_ = startTime;\n\n  /** @private {shaka.util.EventManager} */\n  this.eventManager_ = new shaka.util.EventManager();\n\n  /** @private {number} */\n  this.playbackRate_ = 1;\n\n  /** @private {boolean} */\n  this.buffering_ = false;\n\n  /** @private {shaka.util.Timer} */\n  this.trickPlayTimer_ = null;\n\n  // Check if the video has already loaded some metadata.\n  if (video.readyState > 0) {\n    this.onLoadedMetadata_();\n  } else {\n    this.eventManager_.listenOnce(\n        video, 'loadedmetadata', this.onLoadedMetadata_.bind(this));\n  }\n\n  this.eventManager_.listen(video, 'ratechange', this.onRateChange_.bind(this));\n};\n\n\n/** @override */\nshaka.media.VideoWrapper.prototype.destroy = function() {\n  let p = this.eventManager_.destroy();\n  this.eventManager_ = null;\n\n  if (this.trickPlayTimer_ != null) {\n    this.trickPlayTimer_.cancel();\n    this.trickPlayTimer_ = null;\n  }\n\n  this.video_ = null;\n  this.onSeek_ = null;\n\n  return p;\n};\n\n\n/**\n * Gets the video's current (logical) position.\n *\n * @return {number}\n */\nshaka.media.VideoWrapper.prototype.getTime = function() {\n  if (this.video_.readyState > 0) {\n    return this.video_.currentTime;\n  } else {\n    return this.startTime_;\n  }\n};\n\n\n/**\n * Sets the current time of the video.\n *\n * @param {number} time\n */\nshaka.media.VideoWrapper.prototype.setTime = function(time) {\n  if (this.video_.readyState > 0) {\n    this.movePlayhead_(this.video_.currentTime, time);\n  } else {\n    this.startTime_ = time;\n    setTimeout(this.onSeek_, 0);\n  }\n};\n\n\n/**\n * Gets the current effective playback rate.  This may be negative even if the\n * browser does not directly support rewinding.\n * @return {number}\n */\nshaka.media.VideoWrapper.prototype.getPlaybackRate = function() {\n  return this.playbackRate_;\n};\n\n\n/**\n * Sets the playback rate.\n * @param {number} rate\n */\nshaka.media.VideoWrapper.prototype.setPlaybackRate = function(rate) {\n  if (this.trickPlayTimer_ != null) {\n    this.trickPlayTimer_.cancel();\n    this.trickPlayTimer_ = null;\n  }\n\n  this.playbackRate_ = rate;\n  // All major browsers support playback rates above zero.  Only need fake\n  // trick play for negative rates.\n  this.video_.playbackRate = (this.buffering_ || rate < 0) ? 0 : rate;\n\n  if (!this.buffering_ && rate < 0) {\n    // Defer creating the timer until we stop buffering.  This function will be\n    // called again from setBuffering().\n    let trickPlay = () => { this.video_.currentTime += rate / 4; };\n    this.trickPlayTimer_ = new shaka.util.Timer(trickPlay);\n    this.trickPlayTimer_.scheduleRepeated(0.25);\n  }\n};\n\n\n/**\n * Stops the playhead for buffering, or resumes the playhead after buffering.\n *\n * @param {boolean} buffering True to stop the playhead; false to allow it to\n *   continue.\n */\nshaka.media.VideoWrapper.prototype.setBuffering = function(buffering) {\n  if (buffering != this.buffering_) {\n    this.buffering_ = buffering;\n    this.setPlaybackRate(this.playbackRate_);\n  }\n};\n\n\n/**\n * Handles a 'ratechange' event.\n *\n * @private\n */\nshaka.media.VideoWrapper.prototype.onRateChange_ = function() {\n  // NOTE: This will not allow explicitly setting the playback rate to 0 while\n  // the playback rate is negative.  Pause will still work.\n  let expectedRate =\n      this.buffering_ || this.playbackRate_ < 0 ? 0 : this.playbackRate_;\n\n  // Native controls in Edge trigger a change to playbackRate and set it to 0\n  // when seeking.  If we don't exclude 0 from this check, we will force the\n  // rate to stay at 0 after a seek with Edge native controls.\n  // https://github.com/google/shaka-player/issues/951\n  if (this.video_.playbackRate && this.video_.playbackRate != expectedRate) {\n    shaka.log.debug('Video playback rate changed to', this.video_.playbackRate);\n    this.setPlaybackRate(this.video_.playbackRate);\n  }\n};\n\n\n/**\n * Handles a 'loadedmetadata' event.\n *\n * @private\n */\nshaka.media.VideoWrapper.prototype.onLoadedMetadata_ = function() {\n  if (Math.abs(this.video_.currentTime - this.startTime_) < 0.001) {\n    this.onSeekingToStartTime_();\n  } else {\n    this.eventManager_.listenOnce(\n        this.video_, 'seeking', this.onSeekingToStartTime_.bind(this));\n    // If the currentTime != 0, it indicates that the user has seeked after\n    // calling load(), so it is intended to start from a specific timestamp\n    // when playback, and should not be overriden by the startTime.\n    if (this.video_.currentTime == 0) {\n      this.video_.currentTime = this.startTime_;\n    } else {\n      // This is a workaround solution. If the currentTime is not set again, the\n      // video is stuck and could not be played.\n      // TODO: Need further investigation why it happens. Before and after\n      // setting the current time, video.readyState is 1, video.paused is true,\n      // and video.buffered's TimeRanges length is 0.\n      // See: https://github.com/google/shaka-player/issues/1298\n      this.video_.currentTime = this.video_.currentTime;\n    }\n  }\n};\n\n\n/**\n * Handles the 'seeking' event from the initial jump to the start time (if\n * there is one).\n *\n * @private\n */\nshaka.media.VideoWrapper.prototype.onSeekingToStartTime_ = function() {\n  goog.asserts.assert(this.video_.readyState > 0,\n                      'readyState should be greater than 0');\n  this.eventManager_.listen(this.video_, 'seeking', () => this.onSeek_());\n};\n\n\n/**\n * Moves the playhead to the target time, triggering a call to onSeeking_().\n *\n * @param {number} currentTime\n * @param {number} targetTime\n * @private\n */\nshaka.media.VideoWrapper.prototype.movePlayhead_ = function(\n    currentTime, targetTime) {\n  shaka.log.debug('Moving playhead...',\n                  'currentTime=' + currentTime,\n                  'targetTime=' + targetTime);\n  this.video_.currentTime = targetTime;\n\n  // Sometimes, IE and Edge ignore re-seeks.  Check every 100ms and try\n  // again if need be, up to 10 tries.\n  // Delay stats over 100 runs of a re-seeking integration test:\n  // IE     -   0ms -  47%\n  // IE     - 100ms -  63%\n  // Edge   -   0ms -   2%\n  // Edge   - 100ms -  40%\n  // Edge   - 200ms -  32%\n  // Edge   - 300ms -  24%\n  // Edge   - 400ms -   2%\n  // Chrome -   0ms - 100%\n  // TODO: File a bug on IE/Edge about this.\n  let tries = 0;\n  let recheck = () => {\n    if (!this.video_) return;\n    if (tries++ >= 10) return;\n\n    if (this.video_.currentTime == currentTime) {\n      // Sigh.  Try again.\n      this.video_.currentTime = targetTime;\n      setTimeout(recheck, 100);\n    }\n  };\n  setTimeout(recheck, 100);\n};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.media.Playhead');\n\ngoog.require('goog.asserts');\ngoog.require('shaka.log');\ngoog.require('shaka.media.GapJumpingController');\ngoog.require('shaka.media.TimeRangesUtils');\ngoog.require('shaka.media.VideoWrapper');\ngoog.require('shaka.util.IDestroyable');\ngoog.require('shaka.util.Timer');\n\n\n/**\n * Creates a Playhead, which manages the video's current time.\n *\n * The Playhead provides mechanisms for setting the presentation's start time,\n * restricting seeking to valid time ranges, and stopping playback for startup\n * and re-buffering.\n *\n * @param {!HTMLMediaElement} video\n * @param {!shaka.media.PresentationTimeline} timeline\n * @param {number} minBufferTime\n * @param {shaka.extern.StreamingConfiguration} config\n * @param {?number} startTime The playhead's initial position in seconds. If\n *   null, defaults to the start of the presentation for VOD and the live-edge\n *   for live.\n * @param {function()} onSeek Called when the user agent seeks to a time within\n *   the presentation timeline.\n * @param {function(!Event)} onEvent Called when an event is raised to be sent\n *   to the application.\n *\n * @constructor\n * @struct\n * @implements {shaka.util.IDestroyable}\n */\nshaka.media.Playhead = function(\n    video, timeline, minBufferTime, config, startTime, onSeek, onEvent) {\n  /** @private {HTMLMediaElement} */\n  this.video_ = video;\n\n  /** @private {?shaka.media.PresentationTimeline} */\n  this.timeline_ = timeline;\n\n  /** @private {number} */\n  this.minBufferTime_ = minBufferTime;\n\n  /** @private {?shaka.extern.StreamingConfiguration} */\n  this.config_ = config;\n\n  /** @private {?function()} */\n  this.onSeek_ = onSeek;\n\n  /** @private {?shaka.util.Timer} */\n  this.checkWindowTimer_ = null;\n\n  /** @private {?number} */\n  this.lastCorrectiveSeek_;\n\n  /** @private {shaka.media.GapJumpingController} */\n  this.gapController_ = new shaka.media.GapJumpingController(\n      video, timeline, config, onEvent);\n\n  /** @private {shaka.media.VideoWrapper} */\n  this.videoWrapper_ = new shaka.media.VideoWrapper(\n      video, this.onSeeking_.bind(this), this.getStartTime_(startTime));\n\n\n  let poll = this.onPollWindow_ .bind(this);\n  this.checkWindowTimer_ = new shaka.util.Timer(poll);\n  this.checkWindowTimer_.scheduleRepeated(0.25);\n};\n\n\n/**\n * This is the minimum size (in seconds) that the seek range can be.  If it is\n * smaller than this, change it to be this big so we don't repeatedly seek to\n * keep within a zero-width window.\n * This has been increased to 3s long, to account for the weaker hardware on\n * Chromecasts.\n * @private {number}\n * @const\n */\nshaka.media.Playhead.MIN_SEEK_RANGE_ = 3.0;\n\n\n/** @override */\nshaka.media.Playhead.prototype.destroy = function() {\n  let p = Promise.all([\n    this.videoWrapper_.destroy(),\n    this.gapController_.destroy(),\n  ]);\n  this.videoWrapper_ = null;\n  this.gapController_ = null;\n\n  if (this.checkWindowTimer_ != null) {\n    this.checkWindowTimer_.cancel();\n    this.checkWindowTimer_ = null;\n  }\n\n  this.video_ = null;\n  this.timeline_ = null;\n  this.config_ = null;\n  this.onSeek_ = null;\n\n  return p;\n};\n\n\n/**\n * Adjust the start time.  Used by Player to implement the\n * streaming.startAtSegmentBoundary configuration.\n *\n * @param {number} startTime\n */\nshaka.media.Playhead.prototype.setStartTime = function(startTime) {\n  this.videoWrapper_.setTime(startTime);\n};\n\n\n/**\n * Gets the playhead's current (logical) position.\n *\n * @return {number}\n */\nshaka.media.Playhead.prototype.getTime = function() {\n  let time = this.videoWrapper_.getTime();\n  if (this.video_.readyState > 0) {\n    // Although we restrict the video's currentTime elsewhere, clamp it here to\n    // ensure timing issues don't cause us to return a time outside the segment\n    // availability window.  E.g., the user agent seeks and calls this function\n    // before we receive the 'seeking' event.\n    //\n    // We don't buffer when the livestream video is paused and the playhead time\n    // is out of the seek range; thus, we do not clamp the current time when the\n    // video is paused.\n    // https://github.com/google/shaka-player/issues/1121\n    if (!this.video_.paused) {\n      time = this.clampTime_(time);\n    }\n  }\n\n  return time;\n};\n\n\n/**\n * Gets the playhead's initial position in seconds.\n *\n * @param {?number} startTime\n * @return {number}\n * @private\n */\nshaka.media.Playhead.prototype.getStartTime_ = function(startTime) {\n  if (startTime == null) {\n    if (this.timeline_.getDuration() < Infinity) {\n      // If the presentation is VOD, or if the presentation is live but has\n      // finished broadcasting, then start from the beginning.\n      startTime = this.timeline_.getSeekRangeStart();\n    } else {\n      // Otherwise, start near the live-edge.\n      startTime = this.timeline_.getSeekRangeEnd();\n    }\n  } else if (startTime < 0) {\n    // For live streams, if the startTime is negative, start from a certain\n    // offset time from the live edge.  If the offset from the live edge is not\n    // available, start from the current available segment start point instead,\n    // handled by clampTime_().\n    startTime = this.timeline_.getSeekRangeEnd() + startTime;\n  }\n  return this.clampSeekToDuration_(this.clampTime_(startTime));\n};\n\n\n/**\n * Stops the playhead for buffering, or resumes the playhead after buffering.\n *\n * @param {boolean} buffering True to stop the playhead; false to allow it to\n *   continue.\n */\nshaka.media.Playhead.prototype.setBuffering = function(buffering) {\n  this.videoWrapper_.setBuffering(buffering);\n};\n\n\n/**\n * Gets the current effective playback rate.  This may be negative even if the\n * browser does not directly support rewinding.\n * @return {number}\n */\nshaka.media.Playhead.prototype.getPlaybackRate = function() {\n  return this.videoWrapper_.getPlaybackRate();\n};\n\n\n/**\n * Sets the playback rate.\n * @param {number} rate\n */\nshaka.media.Playhead.prototype.setPlaybackRate = function(rate) {\n  this.videoWrapper_.setPlaybackRate(rate);\n};\n\n\n/**\n * Called when a segment is appended by StreamingEngine, but not when a clear is\n * pending.  This means StreamingEngine will continue buffering forward from\n * what is buffered, so that we know about any gaps before the start.\n */\nshaka.media.Playhead.prototype.onSegmentAppended = function() {\n  this.gapController_.onSegmentAppended();\n};\n\n\n/**\n * Called on a recurring timer to keep the playhead from falling outside the\n * availability window.\n *\n * @private\n */\nshaka.media.Playhead.prototype.onPollWindow_ = function() {\n  // Don't catch up to the seek range when we are paused or empty.\n  // The definition of \"seeking\" says that we are seeking until the buffered\n  // data intersects with the playhead.  If we fall outside of the seek range,\n  // it doesn't matter if we are in a \"seeking\" state.  We can and should go\n  // ahead and catch up while seeking.\n  if (this.video_.readyState == 0 || this.video_.paused) {\n    return;\n  }\n\n  let currentTime = this.video_.currentTime;\n  let seekStart = this.timeline_.getSeekRangeStart();\n  let seekEnd = this.timeline_.getSeekRangeEnd();\n\n  const minRange = shaka.media.Playhead.MIN_SEEK_RANGE_;\n  if (seekEnd - seekStart < minRange) {\n    seekStart = seekEnd - minRange;\n  }\n\n  if (currentTime < seekStart) {\n    // The seek range has moved past the playhead.  Move ahead to catch up.\n    let targetTime = this.reposition_(currentTime);\n    shaka.log.info('Jumping forward ' + (targetTime - currentTime) +\n                   ' seconds to catch up with the seek range.');\n    this.video_.currentTime = targetTime;\n  }\n};\n\n\n/**\n * Handles when a seek happens on the video.\n *\n * @private\n */\nshaka.media.Playhead.prototype.onSeeking_ = function() {\n  this.gapController_.onSeeking();\n  let currentTime = this.videoWrapper_.getTime();\n  let targetTime = this.reposition_(currentTime);\n\n  const gapLimit = shaka.media.GapJumpingController.BROWSER_GAP_TOLERANCE;\n  if (Math.abs(targetTime - currentTime) > gapLimit) {\n    // You can only seek like this every so often. This is to prevent an\n    // infinite loop on systems where changing currentTime takes a significant\n    // amount of time (e.g. Chromecast).\n    let time = new Date().getTime() / 1000;\n    if (!this.lastCorrectiveSeek_ || this.lastCorrectiveSeek_ < time - 1) {\n      this.lastCorrectiveSeek_ = time;\n      this.videoWrapper_.setTime(targetTime);\n      return;\n    }\n  }\n\n  shaka.log.v1('Seek to ' + currentTime);\n  this.onSeek_();\n};\n\n\n/**\n * Clamp seek times and playback start times so that we never seek to the\n * presentation duration.  Seeking to or starting at duration does not work\n * consistently across browsers.\n *\n * TODO: Clean up and simplify Playhead.  There are too many layers of, methods\n * for, and conditions on timestamp adjustment.\n *\n * @see https://github.com/google/shaka-player/issues/979\n * @param {number} time\n * @return {number} The adjusted seek time.\n * @private\n */\nshaka.media.Playhead.prototype.clampSeekToDuration_ = function(time) {\n  let duration = this.timeline_.getDuration();\n  if (time >= duration) {\n    goog.asserts.assert(this.config_.durationBackoff >= 0,\n                        'Duration backoff must be non-negative!');\n    return duration - this.config_.durationBackoff;\n  }\n  return time;\n};\n\n\n/**\n * Computes a new playhead position that's within the presentation timeline.\n *\n * @param {number} currentTime\n * @return {number} The time to reposition the playhead to.\n * @private\n */\nshaka.media.Playhead.prototype.reposition_ = function(currentTime) {\n  goog.asserts.assert(\n      this.config_,\n      'Cannot reposition playhead when it has beeen destroyed');\n\n  /** @type {function(number)} */\n  let isBuffered =\n      shaka.media.TimeRangesUtils.isBuffered.bind(null, this.video_.buffered);\n\n  let rebufferingGoal = Math.max(\n      this.minBufferTime_,\n      this.config_.rebufferingGoal);\n\n  let start = this.timeline_.getSeekRangeStart();\n  let end = this.timeline_.getSeekRangeEnd();\n  let duration = this.timeline_.getDuration();\n\n  const minRange = shaka.media.Playhead.MIN_SEEK_RANGE_;\n  if (end - start < minRange) {\n    start = end - minRange;\n  }\n\n  // With live content, the beginning of the availability window is moving\n  // forward.  This means we cannot seek to it since we will \"fall\" outside the\n  // window while we buffer.  So we define a \"safe\" region that is far enough\n  // away.  For VOD, |safe == start|.\n  let safe = this.timeline_.getSafeSeekRangeStart(rebufferingGoal);\n\n  // These are the times to seek to rather than the exact destinations.  When\n  // we seek, we will get another event (after a slight delay) and these steps\n  // will run again.  So if we seeked directly to |start|, |start| would move\n  // on the next call and we would loop forever.\n  //\n  // Offset by 5 seconds since Chromecast takes a few seconds to start playing\n  // after a seek, even when buffered.\n  let seekStart = this.timeline_.getSafeSeekRangeStart(5);\n  let seekSafe = this.timeline_.getSafeSeekRangeStart(rebufferingGoal + 5);\n\n\n  if (currentTime >= duration) {\n    shaka.log.v1('Playhead past duration.');\n    return this.clampSeekToDuration_(currentTime);\n  }\n\n  if (currentTime > end) {\n    shaka.log.v1('Playhead past end.');\n    return end;\n  }\n\n  if (currentTime < start) {\n    if (isBuffered(seekStart)) {\n      shaka.log.v1('Playhead before start & start is buffered');\n      return seekStart;\n    } else {\n      shaka.log.v1('Playhead before start & start is unbuffered');\n      return seekSafe;\n    }\n  }\n\n  if (currentTime >= safe || isBuffered(currentTime)) {\n    shaka.log.v1('Playhead in safe region or in buffered region.');\n    return currentTime;\n  } else {\n    shaka.log.v1('Playhead outside safe region & in unbuffered region.');\n    return seekSafe;\n  }\n};\n\n\n/**\n * Clamps the given time to the seek range.\n *\n * @param {number} time The time in seconds.\n * @return {number} The clamped time in seconds.\n * @private\n */\nshaka.media.Playhead.prototype.clampTime_ = function(time) {\n  let start = this.timeline_.getSeekRangeStart();\n  if (time < start) return start;\n\n  let end = this.timeline_.getSeekRangeEnd();\n  if (time > end) return end;\n\n  return time;\n};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.util.Destroyer');\n\ngoog.require('shaka.util.IDestroyable');\ngoog.require('shaka.util.PublicPromise');\n\n\n/**\n * A utility class to help work with |shaka.util.IDestroyable| objects.\n *\n * @final\n */\nshaka.util.Destroyer = class {\n  /**\n   * @param {function():!Promise} callback\n   *    A callback to destroy an object. This callback will only be called once\n   *    regardless of how many times |destroy| is called.\n   */\n  constructor(callback) {\n    /** @private {boolean} */\n    this.destroyed_ = false;\n\n    /** @private {!shaka.util.PublicPromise} */\n    this.waitOnDestroy_ = new shaka.util.PublicPromise();\n\n    /** @private {function():!Promise} */\n    this.onDestroy_ = callback;\n  }\n\n  /**\n   * Check if |destroy| has been called. This returning |true| does not mean\n   * that the promise returned by |destroy| has resolved yet.\n   *\n   * @return {boolean}\n   * @final\n   */\n  destroyed() {\n    return this.destroyed_;\n  }\n\n  /**\n   * Request that the destroy callback be called. Will return a promise that\n   * will resolve once the callback terminates. The promise will never be\n   * rejected.\n   *\n   * @return {!Promise}\n   * @final\n   */\n  destroy() {\n    if (this.destroyed_) {\n      return this.waitOnDestroy_;\n    }\n\n    // We have started destroying this object, so we should never get here\n    // again.\n    this.destroyed_ = true;\n\n    return this.onDestroy_().then(\n        () => { this.waitOnDestroy_.resolve(); },\n        () => { this.waitOnDestroy_.resolve(); });\n  }\n\n  /**\n   * A helper function to call |destroy| on |shaka.util.IDestroyable| objects\n   * in |objs| after |callback| terminates. All objects in |objs| will have\n   * |destroy| called regardless if |callback| is resolved or is rejected.\n   *\n   * @param {!Array.<!shaka.util.IDestroyable>} objs\n   *    A list of destroyable objects that should be destroyed after the\n   *    callback completes.\n   * @param {function():!Promise<T>|function():T} callback\n   *    A callback that should perform actions on the objects in |objs|. When\n   *    the promise returned by this callback is resolved or is rejected, all\n   *    objects in |objs| will have |destroy| called.\n   * @return {!Promise.<T>}\n   * @template T\n   */\n  static async with(objs, callback) {\n    try {\n      return await Promise.resolve(callback());\n    } finally {\n      await Promise.all(objs.map((obj) => obj.destroy()));\n    }\n  }\n};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.media.MediaSourcePlayheadObserver');\ngoog.provide('shaka.media.PlayheadObserver');\ngoog.provide('shaka.media.VideoPlayheadObserver');\n\ngoog.require('goog.asserts');\ngoog.require('shaka.media.TimeRangesUtils');\ngoog.require('shaka.util.Destroyer');\ngoog.require('shaka.util.EventManager');\ngoog.require('shaka.util.FakeEvent');\ngoog.require('shaka.util.IDestroyable');\ngoog.require('shaka.util.ObjectUtils');\ngoog.require('shaka.util.StreamUtils');\n\n\n/**\n * This observes the current playhead position to raise events.  This will only\n * observe the playhead, {@link shaka.media.Playhead} will modify it. This will:\n * <ul>\n *   <li>Track buffering state and call |onBuffering|.</li>\n *   <li>Track current Period and call |onChangePeriod|.</li>\n *   <li>Track timeline regions and raise respective events.</li>\n * </ul>\n *\n * @param {HTMLMediaElement} video\n * @param {number} minBufferTime\n * @param {shaka.extern.StreamingConfiguration} config\n * @param {function(boolean)} onBuffering Called and passed true when stopped\n *   for buffering; called and passed false when proceeding after buffering.\n *   If passed true, the callback should not set the video's playback rate.\n * @param {function(!Event)} onEvent Called when an event is raised to be sent\n *   to the application.\n * @param {function()} onChangePeriod Called when the playhead moves to a\n *   different Period.\n * @param {!shaka.media.PlayheadObserver.Implementation} impl Some functions\n *   need to be implemented differently depending on if we are using media\n *   media source or \"video.src=\".\n *\n * @constructor\n * @struct\n * @implements {shaka.util.IDestroyable}\n */\nshaka.media.PlayheadObserver = function(\n    video, minBufferTime, config, onBuffering, onEvent, onChangePeriod, impl) {\n  /** @private {HTMLMediaElement} */\n  this.video_ = video;\n\n  /** @private {number} */\n  this.minBufferTime_ = minBufferTime;\n\n  /** @private {?shaka.extern.StreamingConfiguration} */\n  this.config_ = config;\n\n  /** @private {?function(boolean)} */\n  this.onBuffering_ = onBuffering;\n\n  /** @private {?function(!Event)} */\n  this.onEvent_ = onEvent;\n\n  /** @private {?function()} */\n  this.onChangePeriod_ = onChangePeriod;\n\n  /** @private {!Array.<shaka.media.PlayheadObserver.TimelineRegion>} */\n  this.timelineRegions_ = [];\n\n  /** @private {shaka.util.EventManager} */\n  this.eventManager_ = new shaka.util.EventManager();\n\n  /** @private {boolean} */\n  this.buffering_ = false;\n\n  /** @private {number} */\n  this.curPeriodIndex_ = -1;\n\n  /** @private {?number} */\n  this.watchdogTimer_ = null;\n\n  /** @private {?shaka.media.PlayheadObserver.Implementation} */\n  this.impl_ = impl;\n\n  /** @private {!shaka.util.Destroyer} */\n  this.destroyer_ = new shaka.util.Destroyer(() => {\n    let p = Promise.all([\n      this.eventManager_ ? this.eventManager_.destroy() : null,\n      this.impl_ ? this.impl_.destroy() : null,\n    ]);\n\n    this.eventManager_ = null;\n    this.cancelWatchdogTimer_();\n\n    // Break all the links to other objects.\n    this.video_ = null;\n    this.config_ = null;\n    this.onBuffering_ = null;\n    this.onEvent_ = null;\n    this.onChangePeriod_ = null;\n    this.timelineRegions_ = [];\n    this.impl_ = null;\n\n    return p;\n  });\n\n  this.startWatchdogTimer_();\n};\n\n\n/**\n * The threshold for underflow, in seconds.  If there is less than this amount\n * of data buffered, we will consider the player to be out of data.\n *\n * @private {number}\n * @const\n */\nshaka.media.PlayheadObserver.UNDERFLOW_THRESHOLD_ = 0.5;\n\n\n/**\n * @enum {number}\n * @private\n */\nshaka.media.PlayheadObserver.RegionLocation_ = {\n  FUTURE_REGION: 1,\n  INSIDE: 2,\n  PAST_REGION: 3,\n};\n\n\n/**\n * @extends {shaka.util.IDestroyable}\n * @interface\n */\nshaka.media.PlayheadObserver.Implementation = class {\n  /**\n   * Get the period for the given time.\n   *\n   * @param {number} time\n   * @return {number}\n   */\n  getPeriodIndex(time) {}\n\n  /**\n   * Check if we have buffered to the end of the content given the current end\n   * of the buffered range.\n   *\n   * @param {number} bufferedEnd\n   * @return {boolean}\n   */\n  isBufferedToEnd(bufferedEnd) {}\n};\n\n\n/**\n * @typedef {{\n *   info: shaka.extern.TimelineRegionInfo,\n *   status: shaka.media.PlayheadObserver.RegionLocation_\n * }}\n *\n * @property {shaka.extern.TimelineRegionInfo} info\n *   The info for this timeline region.\n * @property {shaka.media.PlayheadObserver.RegionLocation_} status\n *   This tracks where the region is relative to the playhead.  This tracks\n *   whether we are before or after the region so we can raise events if we pass\n *   it.\n */\nshaka.media.PlayheadObserver.TimelineRegion;\n\n\n/** @override */\nshaka.media.PlayheadObserver.prototype.destroy = function() {\n  return this.destroyer_.destroy();\n};\n\n\n/** Called when a seek completes. */\nshaka.media.PlayheadObserver.prototype.seeked = function() {\n  this.timelineRegions_.forEach(\n      this.updateTimelineRegion_.bind(this, /* isSeek */ true));\n};\n\n\n/**\n * Adds a new timeline region.  Events will be raised whenever the playhead\n * enters or exits the given region.  This method will raise a\n * 'timelineregionadded' event.\n * @param {shaka.extern.TimelineRegionInfo} regionInfo\n */\nshaka.media.PlayheadObserver.prototype.addTimelineRegion = function(\n    regionInfo) {\n  // Check there isn't an existing event with the same scheme ID and time range.\n  // This ensures that the manifest parser doesn't need to also track which\n  // events have already been added.\n  let hasExistingRegion = this.timelineRegions_.some(function(existing) {\n    return existing.info.schemeIdUri == regionInfo.schemeIdUri &&\n        existing.info.startTime == regionInfo.startTime &&\n        existing.info.endTime == regionInfo.endTime;\n  });\n  if (hasExistingRegion) return;\n\n  let region = {\n    info: regionInfo,\n    status: shaka.media.PlayheadObserver.RegionLocation_.FUTURE_REGION,\n  };\n  this.timelineRegions_.push(region);\n\n  let cloneTimelineInfo_ = shaka.media.PlayheadObserver.cloneTimelineInfo_;\n  let event = new shaka.util.FakeEvent(\n      'timelineregionadded', {detail: cloneTimelineInfo_(regionInfo)});\n  this.onEvent_(event);\n\n  // Pretend this is a seek so it will ignore if it should be PAST_REGION but\n  // still fire an event if it should be INSIDE.\n  this.updateTimelineRegion_(/* isSeek */ true, region);\n};\n\n\n/**\n * Clones the given TimelineRegionInfo so the app can modify it without\n * modifying our internal objects.\n * @param {shaka.extern.TimelineRegionInfo} source\n * @return {shaka.extern.TimelineRegionInfo}\n * @private\n */\nshaka.media.PlayheadObserver.cloneTimelineInfo_ = function(source) {\n  // cloneObject will ignore non-simple objects like the DOM element.\n  let copy = shaka.util.ObjectUtils.cloneObject(source);\n  copy.eventElement = source.eventElement;\n  return copy;\n};\n\n\n/**\n * Updates the status of a timeline region and fires any enter/exit events.\n * @param {boolean} isSeek\n * @param {shaka.media.PlayheadObserver.TimelineRegion} region\n * @private\n */\nshaka.media.PlayheadObserver.prototype.updateTimelineRegion_ = function(\n    isSeek, region) {\n  let RegionLocation = shaka.media.PlayheadObserver.RegionLocation_;\n  let cloneTimelineInfo_ = shaka.media.PlayheadObserver.cloneTimelineInfo_;\n\n  // The events are fired when the playhead enters a region.  We fire both\n  // events when passing over a region and not seeking since the playhead was\n  // in the region but left before we saw it.  We don't fire both when seeking\n  // since the playhead was never in the region.\n  //\n  // |--------------------------------------|\n  // | From \\ To |  FUTURE | INSIDE | PAST  |\n  // |   FUTURE  |         |  enter | both* |\n  // |   INSIDE  |   exit  |        | exit  |\n  // |    PAST   |   both* |  enter |       |\n  // |--------------------------------------|\n  // * Only when not seeking.\n  let newStatus = region.info.startTime > this.video_.currentTime ?\n      RegionLocation.FUTURE_REGION :\n      (region.info.endTime < this.video_.currentTime ?\n           RegionLocation.PAST_REGION :\n           RegionLocation.INSIDE);\n  const wasInside = region.status == RegionLocation.INSIDE;\n  const isInside = newStatus == RegionLocation.INSIDE;\n\n  if (newStatus != region.status) {\n    let passedRegion = !wasInside && !isInside;\n    if (!(isSeek && passedRegion)) {\n      if (!wasInside) {\n        this.onEvent_(new shaka.util.FakeEvent(\n            'timelineregionenter',\n            {'detail': cloneTimelineInfo_(region.info)}));\n      }\n      if (!isInside) {\n        this.onEvent_(new shaka.util.FakeEvent(\n            'timelineregionexit', {'detail': cloneTimelineInfo_(region.info)}));\n      }\n    }\n    region.status = newStatus;\n  }\n};\n\n\n/**\n * Starts the watchdog timer.\n * @private\n */\nshaka.media.PlayheadObserver.prototype.startWatchdogTimer_ = function() {\n  this.cancelWatchdogTimer_();\n  this.watchdogTimer_ =\n      window.setTimeout(this.onWatchdogTimer_.bind(this), 250);\n};\n\n\n/**\n * Cancels the watchdog timer, if any.\n * @private\n */\nshaka.media.PlayheadObserver.prototype.cancelWatchdogTimer_ = function() {\n  if (this.watchdogTimer_) {\n    window.clearTimeout(this.watchdogTimer_);\n    this.watchdogTimer_ = null;\n  }\n};\n\n\n/**\n * Called on a recurring timer to detect buffering events and Period changes.\n * @private\n */\nshaka.media.PlayheadObserver.prototype.onWatchdogTimer_ = function() {\n  goog.asserts.assert(\n      this.config_,\n      'Cannot update time when playhead observer has been destroyed');\n\n  this.watchdogTimer_ = null;\n  this.startWatchdogTimer_();\n\n  let newPeriod = this.impl_.getPeriodIndex(this.video_.currentTime);\n\n  if (newPeriod != this.curPeriodIndex_) {\n    // Ignore seek to start time; the first 'trackschanged' event is handled\n    // during player.load().\n    if (this.curPeriodIndex_ != -1) {\n      this.onChangePeriod_();\n    }\n    this.curPeriodIndex_ = newPeriod;\n  }\n\n  // This uses an intersection of buffered ranges for both audio and video, so\n  // it's an accurate way to determine if we are buffering or not.\n  let bufferedAhead = shaka.media.TimeRangesUtils.bufferedAheadOf(\n      this.video_.buffered, this.video_.currentTime);\n  let bufferEnd = shaka.media.TimeRangesUtils.bufferEnd(this.video_.buffered);\n  let bufferedToEnd = this.impl_.isBufferedToEnd(bufferEnd || 0);\n\n  if (!this.buffering_) {\n    // If there are no buffered ranges but the playhead is at the end of\n    // the video then we shouldn't enter a buffering state.\n    const threshold = shaka.media.PlayheadObserver.UNDERFLOW_THRESHOLD_;\n    if (!bufferedToEnd && bufferedAhead < threshold) {\n      this.setBuffering_(true);\n    }\n  } else {\n    let rebufferingGoal = Math.max(\n        this.minBufferTime_,\n        this.config_.rebufferingGoal);\n    if (bufferedToEnd || bufferedAhead >= rebufferingGoal) {\n      this.setBuffering_(false);\n    }\n  }\n\n  this.timelineRegions_.forEach(\n      this.updateTimelineRegion_.bind(this, /* isSeek */ false));\n};\n\n\n/**\n * Stops the playhead for buffering, or resumes the playhead after buffering.\n *\n * @param {boolean} buffering True to stop the playhead; false to allow it to\n *   continue.\n * @private\n */\nshaka.media.PlayheadObserver.prototype.setBuffering_ = function(buffering) {\n  if (buffering != this.buffering_) {\n    this.buffering_ = buffering;\n    this.onBuffering_(buffering);\n  }\n};\n\n\n/**\n * @implements {shaka.media.PlayheadObserver.Implementation}\n */\nshaka.media.VideoPlayheadObserver = class {\n  /**\n   * @param {!HTMLMediaElement} video\n   */\n  constructor(video) {\n    /** @private {HTMLMediaElement} */\n    this.video_ = video;\n  }\n\n  /** @override */\n  destroy() {\n    this.video_ = null;\n    return Promise.resolve();\n  }\n\n  /** @override */\n  getPeriodIndex(time) {\n    // There is really just one period, so always return the first period\n    // index.\n    return 0;\n  }\n\n  /** @override */\n  isBufferedToEnd(bufferEnd) {\n    // video.ended is only true when the playhead reaches the end. With src=, we\n    // don't get to fetch and append, so we can (at best) compare buffered range\n    // end to duration and fall back to video.ended, since the duration might\n    // not be precise.\n\n    return bufferEnd >= this.video_.duration || this.video_.ended;\n  }\n};\n\n\n/**\n * @implements {shaka.media.PlayheadObserver.Implementation}\n */\nshaka.media.MediaSourcePlayheadObserver = class {\n  /**\n   * @param {!HTMLMediaElement} video\n   * @param {!shaka.media.MediaSourceEngine} mediaSourceEngine\n   * @param {shaka.extern.Manifest} manifest\n   */\n  constructor(video, mediaSourceEngine, manifest) {\n    /** @private {HTMLMediaElement} */\n    this.video_ = video;\n\n    /** @private {shaka.media.MediaSourceEngine} */\n    this.mediaSourceEngine_ = mediaSourceEngine;\n\n    /** @private {?shaka.extern.Manifest} */\n    this.manifest_ = manifest;\n  }\n\n  /** @override */\n  destroy() {\n    this.video_ = null;\n    this.mediaSourceEngine_= null;\n    this.manifest_ = null;\n\n    return Promise.resolve();\n  }\n\n  /** @override */\n  getPeriodIndex(time) {\n    goog.asserts.assert(\n        this.manifest_,\n        'Cannot call getPeriodIndex after calling destroy');\n\n    return shaka.util.StreamUtils.findPeriodContainingTime(\n        this.manifest_, time);\n  }\n\n  /** @override */\n  isBufferedToEnd(bufferEnd) {\n    goog.asserts.assert(\n        this.manifest_,\n        'Cannot call atEnd after calling destroy');\n\n    let timeline = this.manifest_.presentationTimeline;\n\n    let liveEdge = timeline.getSegmentAvailabilityEnd();\n    let bufferedToLiveEdge = timeline.isLive() && bufferEnd >= liveEdge;\n    let noMoreSegments = this.mediaSourceEngine_.ended();\n\n    return bufferedToLiveEdge || noMoreSegments || this.video_.ended;\n  }\n};\n","/* eslint-disable */\ngoog.provide('lin.VstubSegmentList');\ngoog.provide('lin.VstubSegmentList.InitSegmentReference');\ngoog.provide('lin.VstubSegmentList.SegmentReference');\n\n//goog.require('goog.asserts');\ngoog.require('shaka.log');\n\n/**\n * @namespace lin.VstubSegmentList\n * @summary A set of functions for parsing SegmentList elements.\n */\n\n\n/**\n * @typedef {{\n *   from: number,\n *   to: number\n * }}\n *\n * @property {from} start\n *   The start byte of the range.\n * @property {to} end\n *   The end byte of the range\n */\nlin.VstubSegmentList.Range;\n\n\n/**\n * Creates an InitSegmentReference, which provides the location to an\n * initialization segment.\n *\n * @param {!Array.<string>} uris\n *   A function that creates the URIs of the resource containing the segment.\n * @param {number} startByte The offset from the start of the resource to the\n *   start of the segment.\n * @param {?number} endByte The offset from the start of the resource to the\n *   end of the segment, inclusive. null indicates that the segment extends\n *   to the end of the resource.\n *\n *   @param {function():!ArrayBuffer} initFunc init function\n *\n * @constructor\n * @struct\n * @export\n */\nlin.VstubSegmentList.InitSegmentReference = function (uris, startByte, endByte, initFunc) {\n  /** @type {function():!Array.<string>} */\n  this.getUris = function () { return uris; };\n\n  /** @const {number} */\n  this.startByte = startByte;\n\n  /** @const {?number} */\n  this.endByte = endByte;\n\n  /** @type {function():!ArrayBuffer} */\n  this.initSegmentBytesFunc = initFunc;\n};\n\n/**\n *\n * @typedef {{\n *   index: number,\n *   position: number,\n *   startTime: number,\n *   endTime: number,\n *   startByte: number,\n *   endByte: ?number,\n *   getUris: function():!Array.<string>,\n *   mdatSize: number,\n *   byteRanges: !Array.<lin.VstubSegmentList.Range>,\n *   sixdmoofBytes: Uint8Array\n * }}\n *\n * @property {number} position The segment's position within a particular Period.\n *   The following should hold true between any two SegmentReferences from the\n *   same Period, r1 and r2:\n *   IF r2.position > r1.position THEN\n *     [ (r2.startTime > r1.startTime) OR\n *       (r2.startTime == r1.startTime AND r2.endTime >= r1.endTime) ]\n * @property {number} startTime The segment's start time in seconds, relative to\n *   the start of a particular Period.\n * @property {number} endTime The segment's end time in seconds, relative to\n *   the start of a particular Period. The segment ends the instant before\n *   this time, so |endTime| must be strictly greater than |startTime|.\n * @property {function():!Array.<string>} uris\n *   A function that creates the URIs of the resource containing the segment.\n * @property {number} startByte The offset from the start of the resource to the\n *   start of the segment.\n * @property {?number} endByte The offset from the start of the resource to the\n *   end of the segment, inclusive. null indicates that the segment extends\n *   to the end of the resource.\n * @property {number} mdatSize mdat Size\n *\n * @property {!Uint8Array} sixdmoofBytes\n *\n */\nlin.VstubSegmentList.SegmentReference;\n\n\n/**\n * Creates a new Stream object or updates the Stream in the manifest.\n *\n * @param {shakaExtern.Period} period\n * @param {!lin.VstubParser.Vstub} vstub\n *\n * @return {lin.VstubParser.StreamInfo}\n */\nlin.VstubSegmentList.createStream = function (period, vstub) {\n\n  var initFunc = lin.VstubSegmentList.getInitVstubBytes.bind(this, vstub);\n  var initBytes = vstub.initSegment;\n  //var init = {getUris: [vstub.assetUrl], startByte: 0, endByte: initBytes.length - 1, initSegmentBytesFunc: initFunc};\n  var init = new lin.VstubSegmentList.InitSegmentReference([vstub.assetUrl], 0, initBytes.length - 1, initFunc);\n\n  var segmentsArray = [];\n  var index = 0;\n  var getUris = (function (uris) {\n    return [uris];\n  }.bind(null, vstub.assetUrl));\n\n  var startNumber = 0;//can be supplied as external parameter but 0 is fine for now\n\n  vstub.segments.forEach(function (seg) {\n\n    var from = Math.min.apply(null, seg.mdatRanges.map(function (rg) {\n      return rg.from;\n    }));\n    var to = Math.max.apply(null, seg.mdatRanges.map(function (rg) {\n      return rg.to;\n    }));\n\n    var mediaSegment = {};//lin.VstubSegmentList.MediaSegment\n    mediaSegment.index = index++;\n    mediaSegment.position = startNumber + mediaSegment.index;\n    mediaSegment.mediaUri = vstub.assetUrl;\n    mediaSegment.getUris = getUris;\n    mediaSegment.startByte = from;\n    mediaSegment.endByte = to;\n    mediaSegment.startTime = seg.startTime;\n    mediaSegment.endTime = Math.min(vstub.duration, seg.endTime);\n    mediaSegment.sixdmoofBytes = seg.sixdmoof;\n    mediaSegment.byteRanges = seg.mdatRanges;\n    mediaSegment.mdatSize = seg.mdatSize;\n\n    if (mediaSegment.startTime < mediaSegment.endTime) {\n      segmentsArray.push(mediaSegment);\n      shaka.log.info(\"pushing: \" + mediaSegment.startTime + \"   -  \" + mediaSegment.endTime);\n    }\n  });\n\n  //var findSegmentPositionFunc = lin.VstubSegmentList.findByTime.bind(this,segmentsArray);\n  //var getSegmentByIndexFunc =lin.VstubSegmentList.findByIndex.bind(this,segmentsArray);\n\n  /** @type {lin.VstubParser.StreamInfo} */\n  var streamInfo = {\n    createSegmentIndex: Promise.resolve.bind(Promise),\n    findSegmentPosition: lin.VstubSegmentList.findByTime.bind(this, segmentsArray),\n    getSegmentReference: lin.VstubSegmentList.findByIndex.bind(this, segmentsArray),\n    initSegmentReference: init,\n    presentationTimeOffset: 0\n  };\n\n  return streamInfo;\n};\n\n\n\n/**\n * Return init segment from the provided VSTUB as ArrayBuffer\n *\n * @param {!lin.VstubParser.Vstub} vstub\n * * @return {!ArrayBuffer}\n *\n * @private\n */\nlin.VstubSegmentList.getInitVstubBytes = function (vstub) {\n  var buffer = new ArrayBuffer(vstub.initSegment.length);\n  var byteArray = new Uint8Array(buffer);\n  byteArray.set(vstub.initSegment, 0);\n  return buffer;\n};\n\n/**\n * Find video segment by time\n *\n * @param  {Array} segments\n * @param  {number} time\n *\n * @return {lin.VstubSegmentList.SegmentReference}\n */\nlin.VstubSegmentList.findByTime = function (segments, time) {\n\n  for (var i = 0; i < segments.length; i++) {\n    var seg = segments[i];\n\n    if ((time >= seg.startTime) && (time < seg.endTime)) {\n      shaka.log.v2('findByTime [successful]: ', time, ' seg=' + i);\n      return seg.index;\n    }\n  }\n\n  shaka.log.v2('findByTime [failed]: ', time);\n};\n\n/**\n * Find video segment by time\n *\n * @param  {Array} segments\n * @param  {number} index\n *\n * @return {!lin.VstubSegmentList.SegmentReference}\n */\nlin.VstubSegmentList.findByIndex = function (segments, index) {\n  shaka.log.v2('findByIndex: ', index, ' (of ' + segments.length + ')');\n  return segments[index];\n};\n\n/**\n * build binary header for the mdat box\n *\n * @param  {number} mdatSize\n *\n * @return {!Uint8Array}\n */\nlin.VstubSegmentList.buildMdatHeader = function (mdatSize) {\n  var arr = new ArrayBuffer(8); // an Int32 takes 4 bytes\n  var view = new DataView(arr);\n  view.setUint32(0, mdatSize, false);\n  view.setUint32(4, 0x6d646174, false);\n  return new Uint8Array(arr);\n};\n\n\n\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.media.StreamingEngine');\n\ngoog.require('goog.asserts');\ngoog.require('lin.VstubSegmentList');\ngoog.require('shaka.log');\ngoog.require('shaka.media.MediaSourceEngine');\ngoog.require('shaka.media.Playhead');\ngoog.require('shaka.net.Backoff');\ngoog.require('shaka.net.NetworkingEngine');\ngoog.require('shaka.util.Error');\ngoog.require('shaka.util.FakeEvent');\ngoog.require('shaka.util.Functional');\ngoog.require('shaka.util.IDestroyable');\ngoog.require('shaka.util.ManifestParserUtils');\ngoog.require('shaka.util.MapUtils');\ngoog.require('shaka.util.MimeUtils');\ngoog.require('shaka.util.Mp4Parser');\ngoog.require('shaka.util.PublicPromise');\ngoog.require('shaka.util.StreamUtils');\n\n\n/**\n * Creates a StreamingEngine.\n *\n * The StreamingEngine is responsible for setting up the Manifest's Streams\n * (i.e., for calling each Stream's createSegmentIndex() function), for\n * downloading segments, for co-ordinating audio, video, and text buffering,\n * and for handling Period transitions. The StreamingEngine provides an\n * interface to switch between Streams, but it does not choose which Streams to\n * switch to.\n *\n * The StreamingEngine notifies its owner when it needs to buffer a new Period,\n * so its owner can choose which Streams within that Period to initially\n * buffer. Moreover, the StreamingEngine also notifies its owner when any\n * Stream within the current Period may be switched to, so its owner can switch\n * bitrates, resolutions, or languages.\n *\n * The StreamingEngine does not need to be notified about changes to the\n * Manifest's SegmentIndexes; however, it does need to be notified when new\n * Periods are added to the Manifest, so it can set up that Period's Streams.\n *\n * To start the StreamingEngine the owner must first call configure() followed\n * by init(). The StreamingEngine will then call onChooseStreams(p) when it\n * needs to buffer Period p; it will then switch to the Streams returned from\n * that function. The StreamingEngine will call onCanSwitch() when any\n * Stream within the current Period may be switched to.\n *\n * The owner must call seeked() each time the playhead moves to a new location\n * within the presentation timeline; however, the owner may forego calling\n * seeked() when the playhead moves outside the presentation timeline.\n *\n * @param {shaka.extern.Manifest} manifest\n * @param {shaka.media.StreamingEngine.PlayerInterface} playerInterface\n *\n * @constructor\n * @struct\n * @implements {shaka.util.IDestroyable}\n */\nshaka.media.StreamingEngine = function(manifest, playerInterface) {\n  /** @private {?shaka.media.StreamingEngine.PlayerInterface} */\n  this.playerInterface_ = playerInterface;\n\n  /** @private {?shaka.extern.Manifest} */\n  this.manifest_ = manifest;\n\n  /** @private {?shaka.extern.StreamingConfiguration} */\n  this.config_ = null;\n\n  /** @private {number} */\n  this.bufferingGoalScale_ = 1;\n\n  /** @private {Promise} */\n  this.setupPeriodPromise_ = Promise.resolve();\n\n  /**\n   * Maps a Period's index to an object that indicates that either\n   *   1. the Period has not been set up (undefined).\n   *   2. the Period is being set up ([a PublicPromise, false]).\n   *   3. the Period is set up (i.e., all Streams within the Period are set up)\n   *      and can be switched to ([a PublicPromise, true]).\n   *\n   * @private {Array.<?{promise: shaka.util.PublicPromise, resolved: boolean}>}\n   */\n  this.canSwitchPeriod_ = [];\n\n  /**\n   * Maps a Stream's ID to an object that indicates that either\n   *   1. the Stream has not been set up (undefined).\n   *   2. the Stream is being set up ([a Promise instance, false]).\n   *   3. the Stream is set up and can be switched to\n   *      ([a Promise instance, true]).\n   *\n   * @private {Object.<number,\n   *                   ?{promise: shaka.util.PublicPromise, resolved: boolean}>}\n   */\n  this.canSwitchStream_ = {};\n\n  /**\n   * Maps a content type, e.g., 'audio', 'video', or 'text', to a MediaState.\n   *\n   * @private {Object.<shaka.util.ManifestParserUtils.ContentType,\n                       !shaka.media.StreamingEngine.MediaState_>}\n   */\n  this.mediaStates_ = {};\n\n  /**\n   * Set to true once one segment of each content type has been buffered.\n   *\n   * @private {boolean}\n   */\n  this.startupComplete_ = false;\n\n  /**\n   * Used for delay and backoff of failure callbacks, so that apps do not retry\n   * instantly.\n   *\n   * @private {shaka.net.Backoff}\n   */\n  this.failureCallbackBackoff_ = null;\n\n  /**\n   * Set to true on fatal error.  Interrupts fetchAndAppend_().\n   *\n   * @private {boolean}\n   */\n  this.fatalError_ = false;\n\n  /** @private {boolean} */\n  this.destroyed_ = false;\n\n  /**\n   * Set to true when a request to unload text stream comes in. This is used\n   * since loading new text stream is async, the request of unloading text\n   * stream might come in before setting up new text stream is finished.\n   * @private {boolean}\n   */\n  this.unloadingTextStream_ = false;\n\n  /** @private {number} */\n  this.textStreamSequenceId_ = 0;\n};\n\n\n/**\n * @typedef {{\n *   variant: (?shaka.extern.Variant|undefined),\n *   text: ?shaka.extern.Stream\n * }}\n *\n * @property {(?shaka.extern.Variant|undefined)} variant\n *   The chosen variant.  May be omitted for text re-init.\n * @property {?shaka.extern.Stream} text\n *   The chosen text stream.\n */\nshaka.media.StreamingEngine.ChosenStreams;\n\n\n/**\n * @typedef {{\n *   playhead: !shaka.media.Playhead,\n *   mediaSourceEngine: !shaka.media.MediaSourceEngine,\n *   netEngine: shaka.net.NetworkingEngine,\n *   onChooseStreams: function(!shaka.extern.Period):\n *                        shaka.media.StreamingEngine.ChosenStreams,\n *   onCanSwitch: function(),\n *   onError: function(!shaka.util.Error),\n *   onEvent: function(!Event),\n *   onManifestUpdate: function(),\n *   onSegmentAppended: function(),\n *   onInitialStreamsSetup: (function()|undefined),\n *   onStartupComplete: (function()|undefined)\n * }}\n *\n * @property {!shaka.media.Playhead} playhead\n *   The Playhead. The caller retains ownership.\n * @property {!shaka.media.MediaSourceEngine} mediaSourceEngine\n *   The MediaSourceEngine. The caller retains ownership.\n * @property {shaka.net.NetworkingEngine} netEngine\n *   The NetworkingEngine instance to use. The caller retains ownership.\n * @property {function(!shaka.extern.Period):\n *                shaka.media.StreamingEngine.ChosenStreams} onChooseStreams\n *   Called by StreamingEngine when the given Period needs to be buffered.\n *   StreamingEngine will switch to the variant and text stream returned from\n *   this function.\n *   The owner cannot call switch() directly until the StreamingEngine calls\n *   onCanSwitch().\n * @property {function()} onCanSwitch\n *   Called by StreamingEngine when the Period is set up and switching is\n *   permitted.\n * @property {function(!shaka.util.Error)} onError\n *   Called when an error occurs. If the error is recoverable (see\n *   {@link shaka.util.Error}) then the caller may invoke either\n *   StreamingEngine.switch*() or StreamingEngine.seeked() to attempt recovery.\n * @property {function(!Event)} onEvent\n *   Called when an event occurs that should be sent to the app.\n * @property {function()} onManifestUpdate\n *   Called when an embedded 'emsg' box should trigger a manifest update.\n * @property {function()} onSegmentAppended\n *   Called after a segment is successfully appended to a MediaSource.\n * @property {(function()|undefined)} onInitialStreamsSetup\n *   Optional callback which is called when the initial set of Streams have been\n *   setup. Intended to be used by tests.\n * @property {(function()|undefined)} onStartupComplete\n *   Optional callback which is called when startup has completed. Intended to\n *   be used by tests.\n */\nshaka.media.StreamingEngine.PlayerInterface;\n\n\n/**\n * @typedef {{\n *   type: shaka.util.ManifestParserUtils.ContentType,\n *   stream: shaka.extern.Stream,\n *   lastStream: ?shaka.extern.Stream,\n *   lastSegmentReference: shaka.media.SegmentReference,\n *   restoreStreamAfterTrickPlay: ?shaka.extern.Stream,\n *   needInitSegment: boolean,\n *   needPeriodIndex: number,\n *   endOfStream: boolean,\n *   performingUpdate: boolean,\n *   updateTimer: ?number,\n *   waitingToClearBuffer: boolean,\n *   waitingToFlushBuffer: boolean,\n *   clearBufferSafeMargin: number,\n *   clearingBuffer: boolean,\n *   recovering: boolean,\n *   hasError: boolean,\n *   resumeAt: number\n * }}\n *\n * @description\n * Contains the state of a logical stream, i.e., a sequence of segmented data\n * for a particular content type. At any given time there is a Stream object\n * associated with the state of the logical stream.\n *\n * @property {shaka.util.ManifestParserUtils.ContentType} type\n *   The stream's content type, e.g., 'audio', 'video', or 'text'.\n * @property {shaka.extern.Stream} stream\n *   The current Stream.\n * @property {?shaka.extern.Stream} lastStream\n *   The Stream of the last segment that was appended.\n * @property {shaka.media.SegmentReference} lastSegmentReference\n *   The SegmentReference of the last segment that was appended.\n * @property {?shaka.extern.Stream} restoreStreamAfterTrickPlay\n *   The Stream to restore after trick play mode is turned off.\n * @property {boolean} needInitSegment\n *   True indicates that |stream|'s init segment must be inserted before the\n *   next media segment is appended.\n * @property {boolean} endOfStream\n *   True indicates that the end of the buffer has hit the end of the\n *   presentation.\n * @property {number} needPeriodIndex\n *   The index of the Period which needs to be buffered.\n * @property {boolean} performingUpdate\n *   True indicates that an update is in progress.\n * @property {?number} updateTimer\n *   A non-null value indicates that an update is scheduled.\n * @property {boolean} waitingToClearBuffer\n *   True indicates that the buffer must be cleared after the current update\n *   finishes.\n * @property {boolean} waitingToFlushBuffer\n *   True indicates that the buffer must be flushed after it is cleared.\n * @property {number} clearBufferSafeMargin\n *   The amount of buffer to retain when clearing the buffer after the update.\n * @property {boolean} clearingBuffer\n *   True indicates that the buffer is being cleared.\n * @property {boolean} recovering\n *   True indicates that the last segment was not appended because it could not\n *   fit in the buffer.\n * @property {boolean} hasError\n *   True indicates that the stream has encountered an error and has stopped\n *   updating.\n * @property {number} resumeAt\n *   An override for the time to start performing updates at.  If the playhead\n *   is behind this time, update_() will still start fetching segments from\n *   this time.  If the playhead is ahead of the time, this field is ignored.\n */\nshaka.media.StreamingEngine.MediaState_;\n\n\n/**\n * The fudge factor for the appendWindowStart.  By adjusting the window\n * backward, we avoid rounding errors that could cause us to remove the keyframe\n * at the start of the Period.\n *\n * NOTE: This was increased as part of the solution to\n * https://github.com/google/shaka-player/issues/1281\n *\n * @const {number}\n * @private\n */\nshaka.media.StreamingEngine.APPEND_WINDOW_START_FUDGE_ = 0.1;\n\n\n/**\n * The maximum number of segments by which a stream can get ahead of other\n * streams.\n *\n * Introduced to keep StreamingEngine from letting one media type get too far\n * ahead of another.  For example, audio segments are typically much smaller\n * than video segments, so in the time it takes to fetch one video segment, we\n * could fetch many audio segments.  This doesn't help with buffering, though,\n * since the intersection of the two buffered ranges is what counts.\n *\n * @const {number}\n * @private\n */\nshaka.media.StreamingEngine.MAX_RUN_AHEAD_SEGMENTS_ = 1;\n\n\n/** @override */\nshaka.media.StreamingEngine.prototype.destroy = function() {\n  for (let type in this.mediaStates_) {\n    this.cancelUpdate_(this.mediaStates_[type]);\n  }\n\n  this.playerInterface_ = null;\n  this.manifest_ = null;\n  this.setupPeriodPromise_ = null;\n  this.canSwitchPeriod_ = null;\n  this.canSwitchStream_ = null;\n  this.mediaStates_ = null;\n  this.config_ = null;\n\n  this.destroyed_ = true;\n\n  return Promise.resolve();\n};\n\n\n/**\n * Called by the Player to provide an updated configuration any time it changes.\n * Must be called at least once before init().\n *\n * @param {shaka.extern.StreamingConfiguration} config\n */\nshaka.media.StreamingEngine.prototype.configure = function(config) {\n  this.config_ = config;\n\n  // Create separate parameters for backoff during streaming failure.\n\n  /** @type {shaka.extern.RetryParameters} */\n  let failureRetryParams = {\n    // The term \"attempts\" includes the initial attempt, plus all retries.\n    // In order to see a delay, there would have to be at least 2 attempts.\n    maxAttempts: Math.max(config.retryParameters.maxAttempts, 2),\n    baseDelay: config.retryParameters.baseDelay,\n    backoffFactor: config.retryParameters.backoffFactor,\n    fuzzFactor: config.retryParameters.fuzzFactor,\n    timeout: 0,  // irrelevant\n  };\n\n  // We don't want to ever run out of attempts.  The application should be\n  // allowed to retry streaming infinitely if it wishes.\n  let autoReset = true;\n  this.failureCallbackBackoff_ =\n      new shaka.net.Backoff(failureRetryParams, autoReset);\n};\n\n\n/**\n * Initializes the StreamingEngine.\n *\n * After this function is called the StreamingEngine will call\n * onChooseStreams(p) when it needs to buffer Period p and onCanSwitch() when\n * any Stream within that Period may be switched to.\n *\n * After the StreamingEngine calls onChooseStreams(p) for the first time, it\n * will begin setting up the Streams returned from that function and\n * subsequently switch to them. However, the StreamingEngine will not begin\n * setting up any other Streams until at least one segment from each of the\n * initial set of Streams has been buffered (this reduces startup latency).\n * After the StreamingEngine completes this startup phase it will begin setting\n * up each Period's Streams (while buffering in parrallel).\n *\n * When the StreamingEngine needs to buffer the next Period it will have\n * already set up that Period's Streams. So, when the StreamingEngine calls\n * onChooseStreams(p) after the first time, the StreamingEngine will\n * immediately switch to the Streams returned from that function.\n *\n * @return {!Promise}\n */\nshaka.media.StreamingEngine.prototype.init = function() {\n  goog.asserts.assert(this.config_,\n      'StreamingEngine configure() must be called before init()!');\n\n  // Determine which Period we must buffer.\n  let playheadTime = this.playerInterface_.playhead.getTime();\n  let needPeriodIndex = this.findPeriodContainingTime_(playheadTime);\n\n  // Get the initial set of Streams.\n  let initialStreams = this.playerInterface_.onChooseStreams(\n      this.manifest_.periods[needPeriodIndex]);\n  if (!initialStreams.variant && !initialStreams.text) {\n    shaka.log.error('init: no Streams chosen');\n    return Promise.reject(new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.STREAMING,\n        shaka.util.Error.Code.INVALID_STREAMS_CHOSEN));\n  }\n\n  // Setup the initial set of Streams and then begin each update cycle. After\n  // startup completes onUpdate_() will set up the remaining Periods.\n  return this.initStreams_(initialStreams).then(function() {\n    if (this.destroyed_) {\n      return;\n    }\n\n    shaka.log.debug('init: completed initial Stream setup');\n\n    // Subtlety: onInitialStreamsSetup() may call switch() or seeked(), so we\n    // must schedule an update beforehand so |updateTimer| is set.\n    if (this.playerInterface_ && this.playerInterface_.onInitialStreamsSetup) {\n      shaka.log.v1('init: calling onInitialStreamsSetup()...');\n      this.playerInterface_.onInitialStreamsSetup();\n    }\n  }.bind(this));\n};\n\n\n/**\n * Gets the current Period the stream is in.  This Period might not be\n * initialized yet if canSwitch(period) has not been called yet.\n * @return {shaka.extern.Period}\n */\nshaka.media.StreamingEngine.prototype.getCurrentPeriod = function() {\n  let playheadTime = this.playerInterface_.playhead.getTime();\n  let needPeriodIndex = this.findPeriodContainingTime_(playheadTime);\n  return this.manifest_.periods[needPeriodIndex];\n};\n\n\n/**\n * Gets the Period in which we are currently buffering.  This might be different\n * from the Period which contains the Playhead.\n * @return {?shaka.extern.Period}\n */\nshaka.media.StreamingEngine.prototype.getActivePeriod = function() {\n  goog.asserts.assert(this.mediaStates_, 'Must be initialized');\n  const ContentType = shaka.util.ManifestParserUtils.ContentType;\n  let anyMediaState = this.mediaStates_[ContentType.VIDEO] ||\n                      this.mediaStates_[ContentType.AUDIO];\n  return anyMediaState ?\n         this.manifest_.periods[anyMediaState.needPeriodIndex] : null;\n};\n\n\n/**\n * Get the active audio stream. Returns null if there is no audio streaming.\n * @return {?shaka.extern.Stream}\n */\nshaka.media.StreamingEngine.prototype.getActiveAudio = function() {\n  const ContentType = shaka.util.ManifestParserUtils.ContentType;\n  return this.getStream_(ContentType.AUDIO);\n};\n\n\n/**\n * Get the active video stream. Returns null if there is no video streaming.\n * @return {?shaka.extern.Stream}\n */\nshaka.media.StreamingEngine.prototype.getActiveVideo = function() {\n  const ContentType = shaka.util.ManifestParserUtils.ContentType;\n  return this.getStream_(ContentType.VIDEO);\n};\n\n\n/**\n * Get the active text stream. Returns null if there is no text streaming.\n * @return {?shaka.extern.Stream}\n */\nshaka.media.StreamingEngine.prototype.getActiveText = function() {\n  const ContentType = shaka.util.ManifestParserUtils.ContentType;\n  return this.getStream_(ContentType.TEXT);\n};\n\n\n/**\n * Get the active stream for the given type. Returns null if there is no stream\n * for the given type.\n * @param {shaka.util.ManifestParserUtils.ContentType} type\n * @return {?shaka.extern.Stream}\n * @private\n*/\nshaka.media.StreamingEngine.prototype.getStream_ = function(type) {\n  goog.asserts.assert(this.mediaStates_, 'Must be initialized');\n  let state = this.mediaStates_[type];\n\n  if (state) {\n    // Don't tell the caller about trick play streams.  If we're in trick\n    // play, return the stream we will go back to after we exit trick play.\n    return state.restoreStreamAfterTrickPlay || state.stream;\n  } else {\n    return null;\n  }\n};\n\n\n/**\n * Notifies StreamingEngine that a new text stream was added to the manifest.\n * This initializes the given stream. This returns a Promise that resolves when\n * the stream has been set up, and a media state has been created.\n *\n * @param {shaka.extern.Stream} stream\n * @param {boolean} createMediaState\n * @return {!Promise}\n */\nshaka.media.StreamingEngine.prototype.loadNewTextStream = function(\n    stream, createMediaState) {\n  const ContentType = shaka.util.ManifestParserUtils.ContentType;\n\n  // Clear MediaSource's buffered text, so that the new text stream will\n  // properly replace the old buffered text.\n  this.playerInterface_.mediaSourceEngine.clear(ContentType.TEXT);\n\n  // Since setupStreams_() is async, if the user hides/shows captions quickly,\n  // there would be a race condition that a new text media state is created\n  // but the old media state is not yet deleted.\n  // The Sequence Id is to avoid that risk condition.\n  this.textStreamSequenceId_++;\n  this.unloadingTextStream_ = false;\n  let currentSequenceId = this.textStreamSequenceId_;\n\n  let mediaSourceEngine = this.playerInterface_.mediaSourceEngine;\n\n  return mediaSourceEngine.init({text: stream}, /** forceTansmuxTS */ false)\n      .then(() => {\n    return this.setupStreams_([stream]);\n  }).then(() => {\n    if (this.destroyed_) {\n      return;\n    }\n\n    if (createMediaState &&\n        (this.textStreamSequenceId_ == currentSequenceId) &&\n        !this.mediaStates_[ContentType.TEXT] && !this.unloadingTextStream_) {\n      let playheadTime = this.playerInterface_.playhead.getTime();\n      let needPeriodIndex = this.findPeriodContainingTime_(playheadTime);\n      this.mediaStates_[ContentType.TEXT] =\n          this.createMediaState_(stream, needPeriodIndex);\n      this.scheduleUpdate_(this.mediaStates_[ContentType.TEXT], 0);\n    }\n  });\n};\n\n\n/**\n * Stop fetching text stream when the user chooses to hide the captions.\n */\nshaka.media.StreamingEngine.prototype.unloadTextStream = function() {\n  const ContentType = shaka.util.ManifestParserUtils.ContentType;\n  this.unloadingTextStream_ = true;\n  if (this.mediaStates_[ContentType.TEXT]) {\n    this.cancelUpdate_(this.mediaStates_[ContentType.TEXT]);\n    delete this.mediaStates_[ContentType.TEXT];\n  }\n};\n\n\n/**\n * Set trick play on or off.\n * If trick play is on, related trick play streams will be used when possible.\n * @param {boolean} on\n */\nshaka.media.StreamingEngine.prototype.setTrickPlay = function(on) {\n  const ContentType = shaka.util.ManifestParserUtils.ContentType;\n\n  let mediaState = this.mediaStates_[ContentType.VIDEO];\n  if (!mediaState) return;\n\n  let stream = mediaState.stream;\n  if (!stream) return;\n\n  shaka.log.debug('setTrickPlay', on);\n  if (on) {\n    let trickModeVideo = stream.trickModeVideo;\n    if (!trickModeVideo) return;  // Can't engage trick play.\n\n    let normalVideo = mediaState.restoreStreamAfterTrickPlay;\n    if (normalVideo) return;  // Already in trick play.\n\n    shaka.log.debug('Engaging trick mode stream', trickModeVideo);\n    this.switchInternal_(trickModeVideo, false, 0);\n    mediaState.restoreStreamAfterTrickPlay = stream;\n  } else {\n    let normalVideo = mediaState.restoreStreamAfterTrickPlay;\n    if (!normalVideo) return;\n\n    shaka.log.debug('Restoring non-trick-mode stream', normalVideo);\n    mediaState.restoreStreamAfterTrickPlay = null;\n    this.switchInternal_(normalVideo, true, 0);\n  }\n};\n\n\n/**\n * @param {shaka.extern.Variant} variant\n * @param {boolean} clearBuffer\n * @param {number} safeMargin\n */\nshaka.media.StreamingEngine.prototype.switchVariant =\n    function(variant, clearBuffer, safeMargin) {\n  if (variant.video) {\n    this.switchInternal_(variant.video, clearBuffer, safeMargin);\n  }\n  if (variant.audio) {\n    this.switchInternal_(variant.audio, clearBuffer, safeMargin);\n  }\n};\n\n\n/**\n * @param {shaka.extern.Stream} textStream\n */\nshaka.media.StreamingEngine.prototype.switchTextStream = function(textStream) {\n  goog.asserts.assert(textStream && textStream.type == 'text',\n                      'Wrong stream type passed to switchTextStream!');\n  this.switchInternal_(textStream, /* clearBuffer */ true, /* safeMargin */ 0);\n};\n\n\n/**\n * Switches to the given Stream. |stream| may be from any Variant or any Period.\n *\n * @param {shaka.extern.Stream} stream\n * @param {boolean} clearBuffer\n * @param {number} safeMargin\n * @private\n */\nshaka.media.StreamingEngine.prototype.switchInternal_ = function(\n    stream, clearBuffer, safeMargin) {\n  const ContentType = shaka.util.ManifestParserUtils.ContentType;\n  let mediaState = this.mediaStates_[/** @type {!ContentType} */(stream.type)];\n\n  if (!mediaState && stream.type == ContentType.TEXT &&\n      this.config_.ignoreTextStreamFailures) {\n    this.loadNewTextStream(stream, /* createMediaState */ true);\n    return;\n  }\n  goog.asserts.assert(mediaState, 'switch: expected mediaState to exist');\n  if (!mediaState) return;\n\n  // If we are selecting a stream from a different Period, then we need to\n  // handle a Period transition.  Simply ignore the given stream, assuming that\n  // Player will select the same track in onChooseStreams.\n  let periodIndex = this.findPeriodContainingStream_(stream);\n  if (clearBuffer && periodIndex != mediaState.needPeriodIndex) {\n    shaka.log.debug('switch: switching to stream in another Period; clearing ' +\n                    'buffer and changing Periods');\n    // handlePeriodTransition_ will be called on the next update because the\n    // current Period won't match the playhead Period.\n    this.clearAllBuffers_();\n    return;\n  }\n\n  if (mediaState.restoreStreamAfterTrickPlay) {\n    shaka.log.debug('switch during trick play mode', stream);\n\n    // Already in trick play mode, so stick with trick mode tracks if possible.\n    if (stream.trickModeVideo) {\n      // Use the trick mode stream, but revert to the new selection later.\n      mediaState.restoreStreamAfterTrickPlay = stream;\n      stream = stream.trickModeVideo;\n      shaka.log.debug('switch found trick play stream', stream);\n    } else {\n      // There is no special trick mode video for this stream!\n      mediaState.restoreStreamAfterTrickPlay = null;\n      shaka.log.debug('switch found no special trick play stream');\n    }\n  }\n\n  // Ensure the Period is ready.\n  let canSwitchRecord = this.canSwitchPeriod_[periodIndex];\n  goog.asserts.assert(\n      canSwitchRecord && canSwitchRecord.resolved,\n      'switch: expected Period ' + periodIndex + ' to be ready');\n  if (!canSwitchRecord || !canSwitchRecord.resolved) return;\n\n  // Sanity check. If the Period is ready then the Stream should be ready too.\n  canSwitchRecord = this.canSwitchStream_[stream.id];\n  goog.asserts.assert(canSwitchRecord && canSwitchRecord.resolved,\n                      'switch: expected Stream ' + stream.id + ' to be ready');\n  if (!canSwitchRecord || !canSwitchRecord.resolved) return;\n\n  if (mediaState.stream == stream) {\n    let streamTag = shaka.media.StreamingEngine.logPrefix_(mediaState);\n    shaka.log.debug('switch: Stream ' + streamTag + ' already active');\n    return;\n  }\n\n  if (stream.type == ContentType.TEXT) {\n    // Mime types are allowed to change for text streams.\n    // Reinitialize the text parser, but only if we are going to fetch the init\n    // segment again.\n    let fullMimeType = shaka.util.MimeUtils.getFullType(\n        stream.mimeType, stream.codecs);\n    this.playerInterface_.mediaSourceEngine.reinitText(fullMimeType);\n  }\n\n  mediaState.stream = stream;\n  mediaState.needInitSegment = true;\n\n  let streamTag = shaka.media.StreamingEngine.logPrefix_(mediaState);\n  shaka.log.debug('switch: switching to Stream ' + streamTag);\n\n  if (clearBuffer) {\n    if (mediaState.clearingBuffer) {\n      // We are already going to clear the buffer, but make sure it is also\n      // flushed.\n      mediaState.waitingToFlushBuffer = true;\n    } else if (mediaState.performingUpdate) {\n      // We are performing an update, so we have to wait until it's finished.\n      // onUpdate_() will call clearBuffer_() when the update has finished.\n      // We need to save the safe margin because its value will be needed when\n      // clearing the buffer after the update.\n      mediaState.waitingToClearBuffer = true;\n      mediaState.clearBufferSafeMargin = safeMargin;\n      mediaState.waitingToFlushBuffer = true;\n    } else {\n      // Cancel the update timer, if any.\n      this.cancelUpdate_(mediaState);\n      // Clear right away.\n      this.clearBuffer_(mediaState, /* flush */ true, safeMargin);\n    }\n  }\n};\n\n\n/**\n * Notifies the StreamingEngine that the playhead has moved to a valid time\n * within the presentation timeline.\n */\nshaka.media.StreamingEngine.prototype.seeked = function() {\n  goog.asserts.assert(this.mediaStates_, 'Must not be destroyed');\n\n  let playheadTime = this.playerInterface_.playhead.getTime();\n  const smallGapLimit = this.config_.smallGapLimit;\n  let isAllBuffered = Object.keys(this.mediaStates_).every(function(type) {\n    return this.playerInterface_.mediaSourceEngine.isBuffered(\n        type, playheadTime, smallGapLimit);\n  }.bind(this));\n\n  // Only treat this as a buffered seek if every media state has a buffer.  For\n  // example, if we have buffered text but not video, we should still clear\n  // every buffer so all media states need the same Period.\n  if (isAllBuffered) {\n    shaka.log.debug(\n        '(all): seeked: buffered seek: playheadTime=' + playheadTime);\n    return;\n  }\n\n  // This was an unbuffered seek for at least one stream, so clear all buffers.\n  // Don't clear only some of the buffers because we can become stalled since\n  // the media states are waiting for different Periods.\n  shaka.log.debug('(all): seeked: unbuffered seek: clearing all buffers');\n  this.clearAllBuffers_();\n};\n\n\n/**\n * Clears the buffer for every stream.  Unlike clearBuffer_, this will handle\n * cases where a MediaState is performing an update.  After this runs, every\n * MediaState will have a pending update.\n * @private\n */\nshaka.media.StreamingEngine.prototype.clearAllBuffers_ = function() {\n  for (let type in this.mediaStates_) {\n    let mediaState = this.mediaStates_[type];\n    let logPrefix = shaka.media.StreamingEngine.logPrefix_(mediaState);\n\n    if (mediaState.clearingBuffer) {\n      // We're already clearing the buffer, so we don't need to clear the\n      // buffer again.\n      shaka.log.debug(logPrefix, 'clear: already clearing the buffer');\n      continue;\n    }\n\n    if (mediaState.waitingToClearBuffer) {\n      // May not be performing an update, but an update will still happen.\n      // See: https://github.com/google/shaka-player/issues/334\n      shaka.log.debug(logPrefix, 'clear: already waiting');\n      continue;\n    }\n\n    if (mediaState.performingUpdate) {\n      // We are performing an update, so we have to wait until it's finished.\n      // onUpdate_() will call clearBuffer_() when the update has finished.\n      shaka.log.debug(logPrefix, 'clear: currently updating');\n      mediaState.waitingToClearBuffer = true;\n      // We can set the offset to zero to remember that this was a call to\n      // clearAllBuffers.\n      mediaState.clearBufferSafeMargin = 0;\n      continue;\n    }\n\n    if (this.playerInterface_.mediaSourceEngine.bufferStart(type) == null) {\n      // Nothing buffered.\n      shaka.log.debug(logPrefix, 'clear: nothing buffered');\n      if (mediaState.updateTimer == null) {\n        // Note: an update cycle stops when we buffer to the end of the\n        // presentation or Period, or when we raise an error.\n        this.scheduleUpdate_(mediaState, 0);\n      }\n      continue;\n    }\n\n    // An update may be scheduled, but we can just cancel it and clear the\n    // buffer right away. Note: clearBuffer_() will schedule the next update.\n    shaka.log.debug(logPrefix, 'clear: handling right now');\n    this.cancelUpdate_(mediaState);\n    this.clearBuffer_(mediaState, /* flush */ false, 0);\n  }\n};\n\n\n/**\n * Initializes the given streams and media states if required.  This will\n * schedule updates for the given types.\n *\n * @param {shaka.media.StreamingEngine.ChosenStreams} chosenStreams\n * @param {number=} resumeAt\n * @return {!Promise}\n * @private\n */\nshaka.media.StreamingEngine.prototype.initStreams_ = function(\n    chosenStreams, resumeAt) {\n  goog.asserts.assert(this.config_,\n      'StreamingEngine configure() must be called before init()!');\n\n  // Determine which Period we must buffer.\n  let playheadTime = this.playerInterface_.playhead.getTime();\n  let needPeriodIndex = this.findPeriodContainingTime_(playheadTime);\n\n  // Init/re-init MediaSourceEngine. Note that a re-init is only valid for text.\n  const ContentType = shaka.util.ManifestParserUtils.ContentType;\n\n  /** @type {!Object.<!ContentType, shaka.extern.Stream>} */\n  let streamsByType = {};\n  /** @type {!Array.<shaka.extern.Stream>} */\n  let streams = [];\n\n  if (chosenStreams.variant && chosenStreams.variant.audio) {\n    streamsByType[ContentType.AUDIO] = chosenStreams.variant.audio;\n    streams.push(chosenStreams.variant.audio);\n  }\n  if (chosenStreams.variant && chosenStreams.variant.video) {\n    streamsByType[ContentType.VIDEO] = chosenStreams.variant.video;\n    streams.push(chosenStreams.variant.video);\n  }\n  if (chosenStreams.text) {\n    streamsByType[ContentType.TEXT] = chosenStreams.text;\n    streams.push(chosenStreams.text);\n  }\n\n  // Init MediaSourceEngine.\n  let mediaSourceEngine = this.playerInterface_.mediaSourceEngine;\n  let forceTransmuxTS = this.config_.forceTransmuxTS;\n  return mediaSourceEngine.init(streamsByType, forceTransmuxTS).then(() => {\n    if (this.destroyed_) {\n      return;\n    }\n\n    this.setDuration_();\n\n    // Setup the initial set of Streams and then begin each update cycle. After\n    // startup completes onUpdate_() will set up the remaining Periods.\n    return this.setupStreams_(streams);\n  }).then(() => {\n    if (this.destroyed_) {\n      return;\n    }\n\n    for (let type in streamsByType) {\n      let stream = streamsByType[type];\n      if (!this.mediaStates_[type]) {\n        this.mediaStates_[type] =\n            this.createMediaState_(stream, needPeriodIndex, resumeAt);\n        this.scheduleUpdate_(this.mediaStates_[type], 0);\n      }\n    }\n  });\n};\n\n\n/**\n * Creates a media state.\n *\n * @param {shaka.extern.Stream} stream\n * @param {number} needPeriodIndex\n * @param {number=} resumeAt\n * @return {shaka.media.StreamingEngine.MediaState_}\n * @private\n */\nshaka.media.StreamingEngine.prototype.createMediaState_ = function(\n    stream, needPeriodIndex, resumeAt) {\n  return /** @type {shaka.media.StreamingEngine.MediaState_} */ ({\n    stream: stream,\n    type: stream.type,\n    lastStream: null,\n    lastSegmentReference: null,\n    restoreStreamAfterTrickPlay: null,\n    needInitSegment: true,\n    needPeriodIndex: needPeriodIndex,\n    endOfStream: false,\n    performingUpdate: false,\n    updateTimer: null,\n    waitingToClearBuffer: false,\n    clearBufferSafeMargin: 0,\n    waitingToFlushBuffer: false,\n    clearingBuffer: false,\n    recovering: false,\n    hasError: false,\n    resumeAt: resumeAt || 0,\n  });\n};\n\n\n/**\n * Sets up the given Period if necessary. Calls onError() if an error occurs.\n *\n * @param {number} periodIndex The Period's index.\n * @return {!Promise} A Promise which resolves when the given Period is set up.\n * @private\n */\nshaka.media.StreamingEngine.prototype.setupPeriod_ = function(periodIndex) {\n  const Functional = shaka.util.Functional;\n  let canSwitchRecord = this.canSwitchPeriod_[periodIndex];\n  if (canSwitchRecord) {\n    shaka.log.debug(\n        '(all) Period ' + periodIndex + ' is being or has been set up');\n    goog.asserts.assert(canSwitchRecord.promise, 'promise must not be null');\n    return canSwitchRecord.promise;\n  }\n\n  shaka.log.debug('(all) setting up Period ' + periodIndex);\n  canSwitchRecord = {\n    promise: new shaka.util.PublicPromise(),\n    resolved: false,\n  };\n  this.canSwitchPeriod_[periodIndex] = canSwitchRecord;\n\n  let streams = this.manifest_.periods[periodIndex].variants\n      .map(function(variant) {\n        const result = shaka.util.StreamUtils.getVariantStreams(variant);\n        if (variant.video && variant.video.trickModeVideo) {\n          result.push(variant.video.trickModeVideo);\n        }\n        return result;\n      })\n      .reduce(Functional.collapseArrays, [])\n      .filter(Functional.isNotDuplicate);\n\n  // Add text streams\n  streams.push.apply(streams, this.manifest_.periods[periodIndex].textStreams);\n\n  // Serialize Period set up.\n  this.setupPeriodPromise_ = this.setupPeriodPromise_.then(function() {\n    if (this.destroyed_) return;\n    return this.setupStreams_(streams);\n  }.bind(this)).then(function() {\n    if (this.destroyed_) return;\n    this.canSwitchPeriod_[periodIndex].promise.resolve();\n    this.canSwitchPeriod_[periodIndex].resolved = true;\n    shaka.log.v1('(all) setup Period ' + periodIndex);\n  }.bind(this)).catch(function(error) {\n    if (this.destroyed_) return;\n    this.canSwitchPeriod_[periodIndex].promise.catch(() => {});\n    this.canSwitchPeriod_[periodIndex].promise.reject();\n    delete this.canSwitchPeriod_[periodIndex];\n    shaka.log.warning('(all) failed to setup Period ' + periodIndex);\n    this.playerInterface_.onError(error);\n    // Don't stop other Periods from being set up.\n  }.bind(this));\n\n  return canSwitchRecord.promise;\n};\n\n\n/**\n * Sets up the given Streams if necessary. Does NOT call onError() if an\n * error occurs.\n *\n * @param {!Array.<!shaka.extern.Stream>} streams\n * @return {!Promise}\n * @private\n */\nshaka.media.StreamingEngine.prototype.setupStreams_ = function(streams) {\n  // Make sure that all the streams have unique ids.\n  // (Duplicate ids will cause the player to hang).\n  let uniqueStreamIds = streams.map(function(s) { return s.id; })\n                               .filter(shaka.util.Functional.isNotDuplicate);\n\n  goog.asserts.assert(uniqueStreamIds.length == streams.length,\n                      'streams should have unique ids');\n  // Parallelize Stream set up.\n  let async = [];\n\n  for (let i = 0; i < streams.length; ++i) {\n    let stream = streams[i];\n    let canSwitchRecord = this.canSwitchStream_[stream.id];\n\n    if (canSwitchRecord) {\n      shaka.log.debug(\n          '(all) Stream ' + stream.id + ' is being or has been set up');\n      async.push(canSwitchRecord.promise);\n    } else {\n      shaka.log.v1('(all) setting up Stream ' + stream.id);\n      this.canSwitchStream_[stream.id] = {\n        promise: new shaka.util.PublicPromise(),\n        resolved: false,\n      };\n      async.push(stream.createSegmentIndex());\n    }\n  }\n\n  return Promise.all(async).then(function() {\n    if (this.destroyed_) return;\n\n    for (let i = 0; i < streams.length; ++i) {\n      let stream = streams[i];\n      let canSwitchRecord = this.canSwitchStream_[stream.id];\n      if (!canSwitchRecord.resolved) {\n        canSwitchRecord.promise.resolve();\n        canSwitchRecord.resolved = true;\n        shaka.log.v1('(all) setup Stream ' + stream.id);\n      }\n    }\n  }.bind(this)).catch(function(error) {\n    if (this.destroyed_) return;\n    for (let i = 0; i < streams.length; i++) {\n      this.canSwitchStream_[streams[i].id].promise.catch(() => {});\n      this.canSwitchStream_[streams[i].id].promise.reject();\n      delete this.canSwitchStream_[streams[i].id];\n    }\n    return Promise.reject(error);\n  }.bind(this));\n};\n\n\n/**\n * Sets the MediaSource's duration.\n * @private\n */\nshaka.media.StreamingEngine.prototype.setDuration_ = function() {\n  let duration = this.manifest_.presentationTimeline.getDuration();\n  if (duration < Infinity) {\n    this.playerInterface_.mediaSourceEngine.setDuration(duration);\n  } else {\n    // Not all platforms support infinite durations, so set a finite duration\n    // so we can append segments and so the user agent can seek.\n    this.playerInterface_.mediaSourceEngine.setDuration(Math.pow(2, 32));\n  }\n};\n\n\n/**\n * Called when |mediaState|'s update timer has expired.\n *\n * @param {!shaka.media.StreamingEngine.MediaState_} mediaState\n * @private\n */\nshaka.media.StreamingEngine.prototype.onUpdate_ = function(mediaState) {\n  const MapUtils = shaka.util.MapUtils;\n  if (this.destroyed_) return;\n\n  let logPrefix = shaka.media.StreamingEngine.logPrefix_(mediaState);\n\n  // Sanity check.\n  goog.asserts.assert(\n      !mediaState.performingUpdate && (mediaState.updateTimer != null),\n      logPrefix + ' unexpected call to onUpdate_()');\n  if (mediaState.performingUpdate || (mediaState.updateTimer == null)) return;\n\n  goog.asserts.assert(\n      !mediaState.clearingBuffer,\n      logPrefix + ' onUpdate_() should not be called when clearing the buffer');\n  if (mediaState.clearingBuffer) return;\n\n  mediaState.updateTimer = null;\n\n  // Handle pending buffer clears.\n  if (mediaState.waitingToClearBuffer) {\n    // Note: clearBuffer_() will schedule the next update.\n    shaka.log.debug(logPrefix, 'skipping update and clearing the buffer');\n    this.clearBuffer_(\n        mediaState, mediaState.waitingToFlushBuffer,\n        mediaState.clearBufferSafeMargin);\n    return;\n  }\n\n  // Update the MediaState.\n  try {\n    let delay = this.update_(mediaState);\n    if (delay != null) {\n      this.scheduleUpdate_(mediaState, delay);\n      mediaState.hasError = false;\n    }\n  } catch (error) {\n    this.handleStreamingError_(error);\n    return;\n  }\n\n  goog.asserts.assert(this.mediaStates_, 'must not be destroyed');\n\n  let mediaStates = MapUtils.values(this.mediaStates_);\n\n  // Check if we've buffered to the end of the Period.\n  this.handlePeriodTransition_(mediaState);\n\n  // Check if we've buffered to the end of the presentation.\n  if (mediaStates.every(function(ms) { return ms.endOfStream; })) {\n    shaka.log.v1(logPrefix, 'calling endOfStream()...');\n    this.playerInterface_.mediaSourceEngine.endOfStream().then(function() {\n      if (this.destroyed_) {\n        return;\n      }\n\n      // If the media segments don't reach the end, then we need to update the\n      // timeline duration to match the final media duration to avoid buffering\n      // forever at the end.  We should only do this if the duration needs to\n      // shrink.  Growing it by less than 1ms can actually cause buffering on\n      // replay, as in https://github.com/google/shaka-player/issues/979\n      let duration = this.playerInterface_.mediaSourceEngine.getDuration();\n      if (duration < this.manifest_.presentationTimeline.getDuration()) {\n        this.manifest_.presentationTimeline.setDuration(duration);\n      }\n    }.bind(this));\n  }\n};\n\n\n/**\n * Updates the given MediaState.\n *\n * @param {shaka.media.StreamingEngine.MediaState_} mediaState\n * @return {?number} The number of seconds to wait until updating again or\n *   null if another update does not need to be scheduled.\n * @throws {!shaka.util.Error} if an error occurs.\n * @private\n */\nshaka.media.StreamingEngine.prototype.update_ = function(mediaState) {\n  goog.asserts.assert(this.manifest_, 'manifest_ should not be null');\n  goog.asserts.assert(this.config_, 'config_ should not be null');\n\n  const MapUtils = shaka.util.MapUtils;\n\n  let logPrefix = shaka.media.StreamingEngine.logPrefix_(mediaState);\n\n  // Compute how far we've buffered ahead of the playhead.\n  let playheadTime = this.playerInterface_.playhead.getTime();\n\n  // Get the next timestamp we need.\n  let timeNeeded = this.getTimeNeeded_(mediaState, playheadTime);\n  shaka.log.v2(logPrefix, 'timeNeeded=' + timeNeeded);\n\n  let currentPeriodIndex = this.findPeriodContainingStream_(mediaState.stream);\n  let needPeriodIndex = this.findPeriodContainingTime_(timeNeeded);\n\n  // Get the amount of content we have buffered, accounting for drift.  This\n  // is only used to determine if we have meet the buffering goal.  This should\n  // be the same method that PlayheadObserver uses.\n  let bufferedAhead = this.playerInterface_.mediaSourceEngine.bufferedAheadOf(\n      mediaState.type, playheadTime);\n\n  shaka.log.v2(logPrefix,\n               'update_:',\n               'playheadTime=' + playheadTime,\n               'bufferedAhead=' + bufferedAhead);\n\n  let unscaledBufferingGoal = Math.max(\n      this.manifest_.minBufferTime || 0,\n      this.config_.rebufferingGoal,\n      this.config_.bufferingGoal);\n\n  let scaledBufferingGoal = unscaledBufferingGoal * this.bufferingGoalScale_;\n\n  // Check if we've buffered to the end of the presentation.\n  if (timeNeeded >= this.manifest_.presentationTimeline.getDuration()) {\n    // We shouldn't rebuffer if the playhead is close to the end of the\n    // presentation.\n    shaka.log.debug(logPrefix, 'buffered to end of presentation');\n    mediaState.endOfStream = true;\n    return null;\n  }\n  mediaState.endOfStream = false;\n\n  // Check if we've buffered to the end of the Period. This should be done\n  // before checking segment availability because the new Period may become\n  // available once it's switched to. Note that we don't use the non-existence\n  // of SegmentReferences as an indicator to determine Period boundaries\n  // because a SegmentIndex can provide SegmentReferences outside its Period.\n  mediaState.needPeriodIndex = needPeriodIndex;\n  if (needPeriodIndex != currentPeriodIndex) {\n    shaka.log.debug(logPrefix,\n                    'need Period ' + needPeriodIndex,\n                    'playheadTime=' + playheadTime,\n                    'timeNeeded=' + timeNeeded,\n                    'currentPeriodIndex=' + currentPeriodIndex);\n    return null;\n  }\n\n  // If we've buffered to the buffering goal then schedule an update.\n  if (bufferedAhead >= scaledBufferingGoal) {\n    shaka.log.v2(logPrefix, 'buffering goal met');\n\n    // Do not try to predict the next update.  Just poll twice every second.\n    // The playback rate can change at any time, so any prediction we make now\n    // could be terribly invalid soon.\n    return 0.5;\n  }\n\n  let bufferEnd =\n      this.playerInterface_.mediaSourceEngine.bufferEnd(mediaState.type);\n  let reference = this.getSegmentReferenceNeeded_(\n      mediaState, playheadTime, bufferEnd, currentPeriodIndex);\n  if (!reference) {\n    // The segment could not be found, does not exist, or is not available.  In\n    // any case just try again... if the manifest is incomplete or is not being\n    // updated then we'll idle forever; otherwise, we'll end up getting a\n    // SegmentReference eventually.\n    return 1;\n  }\n\n  // Do not let any one stream get far ahead of any other.\n  let minTimeNeeded = Infinity;\n  goog.asserts.assert(this.mediaStates_, 'must not be destroyed');\n  const mediaStates = MapUtils.values(this.mediaStates_);\n  mediaStates.forEach((otherState) => {\n    const timeNeeded = this.getTimeNeeded_(otherState, playheadTime);\n    minTimeNeeded = Math.min(minTimeNeeded, timeNeeded);\n  });\n\n  const maxSegmentDuration =\n      this.manifest_.presentationTimeline.getMaxSegmentDuration();\n  const maxRunAhead =\n      maxSegmentDuration * shaka.media.StreamingEngine.MAX_RUN_AHEAD_SEGMENTS_;\n  if (timeNeeded >= minTimeNeeded + maxRunAhead) {\n    // Wait and give other media types time to catch up to this one.\n    // For example, let video buffering catch up to audio buffering before\n    // fetching another audio segment.\n    return 1;\n  }\n\n  mediaState.resumeAt = 0;\n  this.fetchAndAppend_(mediaState, playheadTime, currentPeriodIndex, reference);\n  return null;\n};\n\n\n/**\n * Gets the next timestamp needed. Returns the playhead's position if the\n * buffer is empty; otherwise, returns the time at which the last segment\n * appended ends.\n *\n * @param {shaka.media.StreamingEngine.MediaState_} mediaState\n * @param {number} playheadTime\n * @return {number} The next timestamp needed.\n * @throws {!shaka.util.Error} if the buffer is inconsistent with our\n *   expectations.\n * @private\n */\nshaka.media.StreamingEngine.prototype.getTimeNeeded_ = function(\n    mediaState, playheadTime) {\n  // Get the next timestamp we need. We must use |lastSegmentReference|\n  // to determine this and not the actual buffer for two reasons:\n  //   1. Actual segments end slightly before their advertised end times, so\n  //      the next timestamp we need is actually larger than |bufferEnd|.\n  //   2. There may be drift (the timestamps in the segments are ahead/behind\n  //      of the timestamps in the manifest), but we need drift-free times when\n  //      comparing times against presentation and Period boundaries.\n  if (!mediaState.lastStream || !mediaState.lastSegmentReference) {\n    return Math.max(playheadTime, mediaState.resumeAt);\n  }\n\n  let lastPeriodIndex =\n      this.findPeriodContainingStream_(mediaState.lastStream);\n  let lastPeriod = this.manifest_.periods[lastPeriodIndex];\n  return lastPeriod.startTime + mediaState.lastSegmentReference.endTime;\n};\n\n\n/**\n * Gets the SegmentReference of the next segment needed.\n *\n * @param {shaka.media.StreamingEngine.MediaState_} mediaState\n * @param {number} playheadTime\n * @param {?number} bufferEnd\n * @param {number} currentPeriodIndex\n * @return {shaka.media.SegmentReference} The SegmentReference of the\n *   next segment needed. Returns null if a segment could not be found, does not\n *   exist, or is not available.\n * @private\n */\nshaka.media.StreamingEngine.prototype.getSegmentReferenceNeeded_ = function(\n    mediaState, playheadTime, bufferEnd, currentPeriodIndex) {\n  let logPrefix = shaka.media.StreamingEngine.logPrefix_(mediaState);\n\n  if (mediaState.lastSegmentReference &&\n      mediaState.stream == mediaState.lastStream) {\n    // Something is buffered from the same Stream.\n    let position = mediaState.lastSegmentReference.position + 1;\n    shaka.log.v2(logPrefix, 'next position known:', 'position=' + position);\n\n    return this.getSegmentReferenceIfAvailable_(\n        mediaState, currentPeriodIndex, position);\n  }\n\n  let position;\n\n  if (mediaState.lastSegmentReference) {\n    // Something is buffered from another Stream.\n    goog.asserts.assert(mediaState.lastStream, 'lastStream should not be null');\n    shaka.log.v1(logPrefix, 'next position unknown: another Stream buffered');\n    let lastPeriodIndex =\n        this.findPeriodContainingStream_(mediaState.lastStream);\n    let lastPeriod = this.manifest_.periods[lastPeriodIndex];\n    position = this.lookupSegmentPosition_(\n        mediaState,\n        lastPeriod.startTime + mediaState.lastSegmentReference.endTime,\n        currentPeriodIndex);\n  } else {\n    // Either nothing is buffered, or we have cleared part of the buffer.  If\n    // we still have some buffered, use that time to find the segment, otherwise\n    // start at the playhead time.\n    goog.asserts.assert(!mediaState.lastStream, 'lastStream should be null');\n    shaka.log.v1(logPrefix, 'next position unknown: nothing buffered');\n    position = this.lookupSegmentPosition_(\n        mediaState, bufferEnd || playheadTime, currentPeriodIndex);\n  }\n\n  if (position == null) {\n    return null;\n  }\n\n  let reference = null;\n  if (bufferEnd == null) {\n    // If there's positive drift then we need to get the previous segment;\n    // however, we don't actually know how much drift there is, so we must\n    // unconditionally get the previous segment. If it turns out that there's\n    // non-positive drift then we'll just end up buffering beind the playhead a\n    // little more than we needed.\n    let optimalPosition = Math.max(0, position - 1);\n    reference = this.getSegmentReferenceIfAvailable_(\n        mediaState, currentPeriodIndex, optimalPosition);\n  }\n  return reference ||\n      this.getSegmentReferenceIfAvailable_(\n          mediaState, currentPeriodIndex, position);\n};\n\n\n/**\n * Looks up the position of the segment containing the given timestamp.\n *\n * @param {shaka.media.StreamingEngine.MediaState_} mediaState\n * @param {number} presentationTime The timestamp needed, relative to the\n *   start of the presentation.\n * @param {number} currentPeriodIndex\n * @return {?number} A segment position, or null if a segment was not be found.\n * @private\n */\nshaka.media.StreamingEngine.prototype.lookupSegmentPosition_ = function(\n    mediaState, presentationTime, currentPeriodIndex) {\n  let logPrefix = shaka.media.StreamingEngine.logPrefix_(mediaState);\n  let currentPeriod = this.manifest_.periods[currentPeriodIndex];\n\n  shaka.log.debug(logPrefix,\n                  'looking up segment:',\n                  'presentationTime=' + presentationTime,\n                  'currentPeriod.startTime=' + currentPeriod.startTime);\n\n  let lookupTime = Math.max(0, presentationTime - currentPeriod.startTime);\n  let position = mediaState.stream.findSegmentPosition(lookupTime);\n\n  if (position == null) {\n    shaka.log.warning(logPrefix,\n                      'cannot find segment:',\n                      'currentPeriod.startTime=' + currentPeriod.startTime,\n                      'lookupTime=' + lookupTime);\n  }\n\n  return position;\n};\n\n\n/**\n * Gets the SegmentReference at the given position if it's available.\n *\n * @param {shaka.media.StreamingEngine.MediaState_} mediaState\n * @param {number} currentPeriodIndex\n * @param {number} position\n * @return {shaka.media.SegmentReference}\n *\n * @private\n */\nshaka.media.StreamingEngine.prototype.getSegmentReferenceIfAvailable_ =\n    function(mediaState, currentPeriodIndex, position) {\n  let logPrefix = shaka.media.StreamingEngine.logPrefix_(mediaState);\n  let currentPeriod = this.manifest_.periods[currentPeriodIndex];\n\n  let reference = mediaState.stream.getSegmentReference(position);\n  if (!reference) {\n    shaka.log.v1(logPrefix,\n                 'segment does not exist:',\n                 'currentPeriod.startTime=' + currentPeriod.startTime,\n                 'position=' + position);\n    return null;\n  }\n\n  let timeline = this.manifest_.presentationTimeline;\n  let availabilityStart = timeline.getSegmentAvailabilityStart();\n  let availabilityEnd = timeline.getSegmentAvailabilityEnd();\n\n  if ((currentPeriod.startTime + reference.endTime < availabilityStart) ||\n      (currentPeriod.startTime + reference.startTime > availabilityEnd)) {\n    shaka.log.v2(logPrefix,\n                 'segment is not available:',\n                 'currentPeriod.startTime=' + currentPeriod.startTime,\n                 'reference.startTime=' + reference.startTime,\n                 'reference.endTime=' + reference.endTime,\n                 'availabilityStart=' + availabilityStart,\n                 'availabilityEnd=' + availabilityEnd);\n    return null;\n  }\n\n  return reference;\n};\n\n\n/**\n * Fetches and appends the given segment. Sets up the given MediaState's\n * associated SourceBuffer and evicts segments if either are required\n * beforehand. Schedules another update after completing successfully.\n *\n * @param {!shaka.media.StreamingEngine.MediaState_} mediaState\n * @param {number} playheadTime\n * @param {number} currentPeriodIndex The index of the current Period.\n * @param {!shaka.media.SegmentReference} reference\n * @private\n */\nshaka.media.StreamingEngine.prototype.fetchAndAppend_ = function(\n    mediaState, playheadTime, currentPeriodIndex, reference) {\n  let logPrefix = shaka.media.StreamingEngine.logPrefix_(mediaState);\n  const ContentType = shaka.util.ManifestParserUtils.ContentType;\n  let currentPeriod = this.manifest_.periods[currentPeriodIndex];\n\n  shaka.log.v1(logPrefix,\n               'fetchAndAppend_:',\n               'playheadTime=' + playheadTime,\n               'currentPeriod.startTime=' + currentPeriod.startTime,\n               'reference.position=' + reference.position,\n               'reference.startTime=' + reference.startTime,\n               'reference.endTime=' + reference.endTime);\n\n  // Subtlety: The playhead may move while asynchronous update operations are\n  // in progress, so we should avoid calling playhead.getTime() in any\n  // callbacks. Furthermore, switch() may be called at any time, so we should\n  // also avoid using mediaState.stream or mediaState.needInitSegment in any\n  // callbacks.\n  let stream = mediaState.stream;\n\n  // Compute the append window.\n  let duration = this.manifest_.presentationTimeline.getDuration();\n  let followingPeriod = this.manifest_.periods[currentPeriodIndex + 1];\n  // Rounding issues can cause us to remove the first frame of the Period, so\n  // reduce the start time slightly.\n  let windowFudge = shaka.media.StreamingEngine.APPEND_WINDOW_START_FUDGE_;\n  let appendWindowStart = Math.max(0, currentPeriod.startTime - windowFudge);\n  let appendWindowEnd = followingPeriod ? followingPeriod.startTime : duration;\n  goog.asserts.assert(\n      reference.startTime <= appendWindowEnd,\n      logPrefix + ' segment should start before append window end');\n\n  let initSourceBuffer = this.initSourceBuffer_(\n      mediaState, currentPeriodIndex, appendWindowStart, appendWindowEnd);\n\n  mediaState.performingUpdate = true;\n\n  // We may set |needInitSegment| to true in switch(), so set it to false here,\n  // since we want it to remain true if switch() is called.\n  mediaState.needInitSegment = false;\n\n  shaka.log.v2(logPrefix, 'fetching segment');\n  let fetchSegment = this.fetch_(reference);\n\n  Promise.all([initSourceBuffer, fetchSegment]).then(function(results) {\n    if (this.destroyed_ || this.fatalError_) return;\n    return this.append_(mediaState,\n                        playheadTime,\n                        currentPeriod,\n                        stream,\n                        reference,\n                        results[1]);\n  }.bind(this)).then(function() {\n    if (this.destroyed_ || this.fatalError_) return;\n\n    mediaState.performingUpdate = false;\n    mediaState.recovering = false;\n\n    if (!mediaState.waitingToClearBuffer) {\n      this.playerInterface_.onSegmentAppended();\n    }\n\n    // Update right away.\n    this.scheduleUpdate_(mediaState, 0);\n\n    // Subtlety: handleStartup_() calls onStartupComplete() which may call\n    // switch() or seeked(), so we must schedule an update beforehand so\n    // |updateTimer| is set.\n    this.handleStartup_(mediaState, stream);\n\n    shaka.log.v1(logPrefix, 'finished fetch and append');\n  }.bind(this)).catch(function(error) {\n    if (this.destroyed_ || this.fatalError_) return;\n    goog.asserts.assert(error instanceof shaka.util.Error,\n                        'Should only receive a Shaka error');\n\n    mediaState.performingUpdate = false;\n\n    if (mediaState.type == ContentType.TEXT &&\n        this.config_.ignoreTextStreamFailures) {\n      if (error.code == shaka.util.Error.Code.BAD_HTTP_STATUS) {\n        shaka.log.warning(logPrefix,\n            'Text stream failed to download. Proceeding without it.');\n      } else {\n        shaka.log.warning(logPrefix,\n            'Text stream failed to parse. Proceeding without it.');\n      }\n\n      delete this.mediaStates_[ContentType.TEXT];\n    } else if (error.code == shaka.util.Error.Code.QUOTA_EXCEEDED_ERROR) {\n      this.handleQuotaExceeded_(mediaState, error);\n    } else {\n      shaka.log.error(logPrefix, 'failed fetch and append: code=' + error.code);\n      mediaState.hasError = true;\n\n      error.severity = shaka.util.Error.Severity.CRITICAL;\n      this.handleStreamingError_(error);\n    }\n  }.bind(this));\n};\n\n\n/**\n * Clear per-stream error states and retry any failed streams.\n * @return {boolean} False if unable to retry.\n */\nshaka.media.StreamingEngine.prototype.retry = function() {\n  if (this.destroyed_) {\n    shaka.log.error('Unable to retry after StreamingEngine is destroyed!');\n    return false;\n  }\n\n  if (this.fatalError_) {\n    shaka.log.error('Unable to retry after StreamingEngine encountered a ' +\n                    'fatal error!');\n    return false;\n  }\n\n  for (let type in this.mediaStates_) {\n    let mediaState = this.mediaStates_[type];\n    let logPrefix = shaka.media.StreamingEngine.logPrefix_(mediaState);\n    if (mediaState.hasError) {\n      shaka.log.info(logPrefix, 'Retrying after failure...');\n      mediaState.hasError = false;\n      this.scheduleUpdate_(mediaState, 0.1);\n    }\n  }\n\n  return true;\n};\n\n\n/**\n * Handles a QUOTA_EXCEEDED_ERROR.\n *\n * @param {shaka.media.StreamingEngine.MediaState_} mediaState\n * @param {!shaka.util.Error} error\n * @private\n */\nshaka.media.StreamingEngine.prototype.handleQuotaExceeded_ = function(\n    mediaState, error) {\n  let logPrefix = shaka.media.StreamingEngine.logPrefix_(mediaState);\n\n  // The segment cannot fit into the SourceBuffer. Ideally, MediaSource would\n  // have evicted old data to accommodate the segment; however, it may have\n  // failed to do this if the segment is very large, or if it could not find\n  // a suitable time range to remove.\n  //\n  // We can overcome the latter by trying to append the segment again;\n  // however, to avoid continuous QuotaExceededErrors we must reduce the size\n  // of the buffer going forward.\n  //\n  // If we've recently reduced the buffering goals, wait until the stream\n  // which caused the first QuotaExceededError recovers. Doing this ensures\n  // we don't reduce the buffering goals too quickly.\n\n  goog.asserts.assert(this.mediaStates_, 'must not be destroyed');\n  let mediaStates = shaka.util.MapUtils.values(this.mediaStates_);\n  let waitingForAnotherStreamToRecover = mediaStates.some(function(ms) {\n    return ms != mediaState && ms.recovering;\n  });\n\n  if (!waitingForAnotherStreamToRecover) {\n    // Reduction schedule: 80%, 60%, 40%, 20%, 16%, 12%, 8%, 4%, fail.\n    // Note: percentages are used for comparisons to avoid rounding errors.\n    let percentBefore = Math.round(100 * this.bufferingGoalScale_);\n    if (percentBefore > 20) {\n      this.bufferingGoalScale_ -= 0.2;\n    } else if (percentBefore > 4) {\n      this.bufferingGoalScale_ -= 0.04;\n    } else {\n      shaka.log.error(\n          logPrefix, 'MediaSource threw QuotaExceededError too many times');\n      mediaState.hasError = true;\n      this.fatalError_ = true;\n      this.playerInterface_.onError(error);\n      return;\n    }\n    let percentAfter = Math.round(100 * this.bufferingGoalScale_);\n    shaka.log.warning(\n        logPrefix,\n        'MediaSource threw QuotaExceededError:',\n        'reducing buffering goals by ' + (100 - percentAfter) + '%');\n    mediaState.recovering = true;\n  } else {\n    shaka.log.debug(\n        logPrefix,\n        'MediaSource threw QuotaExceededError:',\n        'waiting for another stream to recover...');\n  }\n\n  // QuotaExceededError gets thrown if evication didn't help to make room\n  // for a segment. We want to wait for a while (4 seconds is just an\n  // arbitrary number) before updating to give the playhead a chance to\n  // advance, so we don't immidiately throw again.\n  this.scheduleUpdate_(mediaState, 4);\n};\n\n\n/**\n * Sets the given MediaState's associated SourceBuffer's timestamp offset and\n * init segment if either are required. If an error occurs then neither the\n * timestamp offset or init segment are unset, since another call to switch()\n * will end up superseding them.\n *\n * @param {shaka.media.StreamingEngine.MediaState_} mediaState\n * @param {number} currentPeriodIndex\n * @param {number} appendWindowStart\n * @param {number} appendWindowEnd\n * @return {!Promise}\n * @private\n */\nshaka.media.StreamingEngine.prototype.initSourceBuffer_ = function(\n    mediaState, currentPeriodIndex, appendWindowStart, appendWindowEnd) {\n  if (!mediaState.needInitSegment) {\n    return Promise.resolve();\n  }\n\n  let logPrefix = shaka.media.StreamingEngine.logPrefix_(mediaState);\n  let currentPeriod = this.manifest_.periods[currentPeriodIndex];\n\n  // If we need an init segment then the Stream switched, so we've either\n  // changed bitrates, Periods, or both. If we've changed Periods then we must\n  // set a new timestamp offset and append window end. Note that by setting\n  // these values here, we avoid having to co-ordinate ongoing updates, which\n  // we would have to do if we instead set them in switch().\n  let timestampOffset =\n      currentPeriod.startTime - mediaState.stream.presentationTimeOffset;\n  shaka.log.v1(logPrefix, 'setting timestamp offset to ' + timestampOffset);\n  shaka.log.v1(logPrefix,\n               'setting appstart window start to ' + appendWindowStart);\n  shaka.log.v1(logPrefix, 'setting append window end to ' + appendWindowEnd);\n  let setStreamProperties =\n      this.playerInterface_.mediaSourceEngine.setStreamProperties(\n          mediaState.type, timestampOffset, appendWindowStart, appendWindowEnd);\n\n  if (!mediaState.stream.initSegmentReference) {\n    // The Stream is self initializing.\n    return setStreamProperties;\n  }\n\n  shaka.log.v1(logPrefix, 'fetching init segment');\n  let fetchInit = this.fetch_(mediaState.stream.initSegmentReference);\n  let appendInit = fetchInit.then(function(initSegment) {\n    if (this.destroyed_) return;\n    shaka.log.v1(logPrefix, 'appending init segment');\n\n    return this.playerInterface_.mediaSourceEngine.appendBuffer(\n        mediaState.type, initSegment, null /* startTime */, null /* endTime */);\n  }.bind(this)).catch(function(error) {\n    mediaState.needInitSegment = true;\n    return Promise.reject(error);\n  });\n\n  return Promise.all([setStreamProperties, appendInit]);\n};\n\n\n/**\n * Appends the given segment and evicts content if required to append.\n *\n * @param {!shaka.media.StreamingEngine.MediaState_} mediaState\n * @param {number} playheadTime\n * @param {shaka.extern.Period} period\n * @param {shaka.extern.Stream} stream\n * @param {!shaka.media.SegmentReference} reference\n * @param {!ArrayBuffer} segment\n * @return {!Promise}\n * @private\n */\nshaka.media.StreamingEngine.prototype.append_ = function(\n    mediaState, playheadTime, period, stream, reference, segment) {\n  let logPrefix = shaka.media.StreamingEngine.logPrefix_(mediaState);\n\n  if (stream.emsgSchemeIdUris != null && stream.emsgSchemeIdUris.length > 0) {\n    new shaka.util.Mp4Parser()\n        .fullBox(\n            'emsg',\n            this.parseEMSG_.bind(\n                this, period, reference, stream.emsgSchemeIdUris))\n        .parse(segment);\n  }\n\n  return this.evict_(mediaState, playheadTime).then(function() {\n    if (this.destroyed_) return;\n    shaka.log.v1(logPrefix, 'appending media segment');\n\n    return this.playerInterface_.mediaSourceEngine.appendBuffer(\n        mediaState.type, segment, reference.startTime, reference.endTime);\n  }.bind(this)).then(function() {\n    if (this.destroyed_) return;\n    shaka.log.v2(logPrefix, 'appended media segment');\n\n    // We must use |stream| because switch() may have been called.\n    mediaState.lastStream = stream;\n    mediaState.lastSegmentReference = reference;\n\n    return Promise.resolve();\n  }.bind(this));\n};\n\n\n/**\n * Parse the EMSG box from a MP4 container.\n *\n * @param {!shaka.extern.Period} period\n * @param {!shaka.media.SegmentReference} reference\n * @param {?Array.<string>} emsgSchemeIdUris Array of emsg\n *     scheme_id_uri for which emsg boxes should be parsed.\n * @param {!shaka.extern.ParsedBox} box\n * @private\n */\nshaka.media.StreamingEngine.prototype.parseEMSG_ = function(\n    period, reference, emsgSchemeIdUris, box) {\n  let schemeId = box.reader.readTerminatedString();\n  // Read the rest of the data.\n  let value = box.reader.readTerminatedString();\n  let timescale = box.reader.readUint32();\n  let presentationTimeDelta = box.reader.readUint32();\n  let eventDuration = box.reader.readUint32();\n  let id = box.reader.readUint32();\n  let messageData = box.reader.readBytes(\n      box.reader.getLength() - box.reader.getPosition());\n\n  let startTime = period.startTime + reference.startTime +\n      (presentationTimeDelta / timescale);\n\n  // See DASH sec. 5.10.3.3.1\n  // If a DASH client detects an event message box with a scheme that is not\n  // defined in MPD, the client is expected to ignore it.\n  if (emsgSchemeIdUris.indexOf(schemeId) != -1) {\n    // See DASH sec. 5.10.4.1\n    // A special scheme in DASH used to signal manifest updates.\n    if (schemeId == 'urn:mpeg:dash:event:2012') {\n      this.playerInterface_.onManifestUpdate();\n    } else {\n      /** @type {shaka.extern.EmsgInfo} */\n      let emsg = {\n        startTime: startTime,\n        endTime: startTime + (eventDuration / timescale),\n        schemeIdUri: schemeId,\n        value: value,\n        timescale: timescale,\n        presentationTimeDelta: presentationTimeDelta,\n        eventDuration: eventDuration,\n        id: id,\n        messageData: messageData,\n      };\n\n      // Dispatch an event to notify the application about the emsg box.\n      let event = new shaka.util.FakeEvent('emsg', {'detail': emsg});\n      this.playerInterface_.onEvent(event);\n    }\n  }\n};\n\n\n/**\n * Evicts media to meet the max buffer behind limit.\n *\n * @param {shaka.media.StreamingEngine.MediaState_} mediaState\n * @param {number} playheadTime\n * @return {!Promise}\n * @private\n */\nshaka.media.StreamingEngine.prototype.evict_ = function(\n    mediaState, playheadTime) {\n  let logPrefix = shaka.media.StreamingEngine.logPrefix_(mediaState);\n  shaka.log.v2(logPrefix, 'checking buffer length');\n\n  // Use the max segment duration, if it is longer than the bufferBehind, to\n  // avoid accidentally clearing too much data when dealing with a manifest\n  // with a long keyframe interval.\n  let bufferBehind = Math.max(this.config_.bufferBehind,\n      this.manifest_.presentationTimeline.getMaxSegmentDuration());\n\n  let startTime =\n      this.playerInterface_.mediaSourceEngine.bufferStart(mediaState.type);\n  if (startTime == null) {\n    shaka.log.v2(logPrefix,\n                 'buffer behind okay because nothing buffered:',\n                 'playheadTime=' + playheadTime,\n                 'bufferBehind=' + bufferBehind);\n    return Promise.resolve();\n  }\n  let bufferedBehind = playheadTime - startTime;\n\n  let overflow = bufferedBehind - bufferBehind;\n  if (overflow <= 0) {\n    shaka.log.v2(logPrefix,\n                 'buffer behind okay:',\n                 'playheadTime=' + playheadTime,\n                 'bufferedBehind=' + bufferedBehind,\n                 'bufferBehind=' + bufferBehind,\n                 'underflow=' + (-overflow));\n    return Promise.resolve();\n  }\n\n  shaka.log.v1(logPrefix,\n               'buffer behind too large:',\n               'playheadTime=' + playheadTime,\n               'bufferedBehind=' + bufferedBehind,\n               'bufferBehind=' + bufferBehind,\n               'overflow=' + overflow);\n\n  return this.playerInterface_.mediaSourceEngine.remove(\n      mediaState.type, startTime, startTime + overflow).then(function() {\n    if (this.destroyed_) return;\n    shaka.log.v1(logPrefix, 'evicted ' + overflow + ' seconds');\n  }.bind(this));\n};\n\n\n/**\n * Sets up all known Periods when startup completes; otherwise, does nothing.\n *\n * @param {shaka.media.StreamingEngine.MediaState_} mediaState The last\n *   MediaState updated.\n * @param {shaka.extern.Stream} stream\n * @private\n */\nshaka.media.StreamingEngine.prototype.handleStartup_ = function(\n    mediaState, stream) {\n  const Functional = shaka.util.Functional;\n  const MapUtils = shaka.util.MapUtils;\n  const ContentType = shaka.util.ManifestParserUtils.ContentType;\n  if (this.startupComplete_) {\n    return;\n  }\n\n  let logPrefix = shaka.media.StreamingEngine.logPrefix_(mediaState);\n\n  goog.asserts.assert(this.mediaStates_, 'must not be destroyed');\n  let mediaStates = MapUtils.values(this.mediaStates_);\n  this.startupComplete_ = mediaStates.every(function(ms) {\n    // Startup completes once we have buffered at least one segment from each\n    // MediaState, not counting text.\n    if (ms.type == ContentType.TEXT) return true;\n    return !ms.waitingToClearBuffer &&\n           !ms.clearingBuffer &&\n           ms.lastSegmentReference;\n  });\n\n  if (!this.startupComplete_) {\n    return;\n  }\n\n  shaka.log.debug(logPrefix, 'startup complete');\n\n  // We must use |stream| because switch() may have been called.\n  let currentPeriodIndex = this.findPeriodContainingStream_(stream);\n\n  goog.asserts.assert(\n      mediaStates.every(function(ms) {\n        // It is possible for one stream (usually text) to buffer the whole\n        // Period and need the next one.\n        return ms.needPeriodIndex == currentPeriodIndex ||\n            ms.needPeriodIndex == currentPeriodIndex + 1;\n      }),\n      logPrefix + ' expected all MediaStates to need same Period');\n\n  // Setup the current Period if necessary, which is likely since the current\n  // Period is probably the initial one.\n  if (!this.canSwitchPeriod_[currentPeriodIndex]) {\n    this.setupPeriod_(currentPeriodIndex).then(function() {\n      if (this.destroyed_) {\n        return;\n      }\n\n      shaka.log.v1(logPrefix, 'calling onCanSwitch()...');\n      this.playerInterface_.onCanSwitch();\n    }.bind(this)).catch(Functional.noop);\n  }\n\n  // Now setup all known Periods.\n  for (let i = 0; i < this.manifest_.periods.length; ++i) {\n    this.setupPeriod_(i).catch(Functional.noop);\n  }\n\n  if (this.playerInterface_.onStartupComplete) {\n    shaka.log.v1(logPrefix, 'calling onStartupComplete()...');\n    this.playerInterface_.onStartupComplete();\n  }\n};\n\n\n/**\n * Calls onChooseStreams() when necessary.\n *\n * @param {shaka.media.StreamingEngine.MediaState_} mediaState The last\n *   MediaState updated.\n * @private\n */\nshaka.media.StreamingEngine.prototype.handlePeriodTransition_ = function(\n    mediaState) {\n  const Functional = shaka.util.Functional;\n  const MapUtils = shaka.util.MapUtils;\n  let logPrefix = shaka.media.StreamingEngine.logPrefix_(mediaState);\n  const ContentType = shaka.util.ManifestParserUtils.ContentType;\n\n  let currentPeriodIndex = this.findPeriodContainingStream_(mediaState.stream);\n  if (mediaState.needPeriodIndex == currentPeriodIndex) {\n    return;\n  }\n\n  let needPeriodIndex = mediaState.needPeriodIndex;\n\n  goog.asserts.assert(this.mediaStates_, 'must not be destroyed');\n  let mediaStates = MapUtils.values(this.mediaStates_);\n\n  // For a Period transition to work, all media states must need the same\n  // Period.  If a stream needs a different Period than the one it currently\n  // has, it will try to transition or stop updates assuming that another stream\n  // will handle it.  This only works when all streams either need the same\n  // Period or are still performing updates.\n  goog.asserts.assert(\n      mediaStates.every(function(ms) {\n        return ms.needPeriodIndex == needPeriodIndex || ms.hasError ||\n            !shaka.media.StreamingEngine.isIdle_(ms);\n      }),\n      'All MediaStates should need the same Period or be performing updates.');\n\n  // Only call onChooseStreams() when all MediaStates need the same Period.\n  let needSamePeriod = mediaStates.every(function(ms) {\n    return ms.needPeriodIndex == needPeriodIndex;\n  });\n  if (!needSamePeriod) {\n    shaka.log.debug(\n        logPrefix, 'not all MediaStates need Period ' + needPeriodIndex);\n    return;\n  }\n\n  // Only call onChooseStreams() once per Period transition.\n  let allAreIdle = mediaStates.every(shaka.media.StreamingEngine.isIdle_);\n  if (!allAreIdle) {\n    shaka.log.debug(\n        logPrefix,\n        'all MediaStates need Period ' + needPeriodIndex + ', ' +\n        'but not all MediaStates are idle');\n    return;\n  }\n\n  shaka.log.debug(logPrefix, 'all need Period ' + needPeriodIndex);\n\n  // Ensure the Period which we need to buffer is set up and then call\n  // onChooseStreams().\n  this.setupPeriod_(needPeriodIndex).then(function() {\n    if (this.destroyed_) return;\n\n    // If we seek during a Period transition, we can start another transition.\n    // So we need to verify that:\n    //  1. We are still in need of the same Period.\n    //  2. All streams are still idle.\n    //  3. The current stream is not in the needed Period (another transition\n    //     handled it).\n    let allReady = mediaStates.every(function(ms) {\n      let isIdle = shaka.media.StreamingEngine.isIdle_(ms);\n      let currentPeriodIndex = this.findPeriodContainingStream_(ms.stream);\n      return isIdle && ms.needPeriodIndex == needPeriodIndex &&\n          currentPeriodIndex != needPeriodIndex;\n    }.bind(this));\n    if (!allReady) {\n      // TODO: Write unit tests for this case.\n      shaka.log.debug(logPrefix, 'ignoring transition to Period',\n                      needPeriodIndex, 'since another is happening');\n      return;\n    }\n\n    let needPeriod = this.manifest_.periods[needPeriodIndex];\n\n    shaka.log.v1(logPrefix, 'calling onChooseStreams()...');\n    let chosenStreams = this.playerInterface_.onChooseStreams(needPeriod);\n    let streamsByType = {};\n    if (chosenStreams.variant && chosenStreams.variant.video) {\n      streamsByType[ContentType.VIDEO] = chosenStreams.variant.video;\n    }\n    if (chosenStreams.variant && chosenStreams.variant.audio) {\n      streamsByType[ContentType.AUDIO] = chosenStreams.variant.audio;\n    }\n    if (chosenStreams.text) {\n      streamsByType[ContentType.TEXT] = chosenStreams.text;\n    }\n\n    // Vet |streamsByType| before switching.\n    for (let type in this.mediaStates_) {\n      if (streamsByType[type] || type == ContentType.TEXT) continue;\n\n      shaka.log.error(logPrefix,\n                      'invalid Streams chosen: missing ' + type + ' Stream');\n      this.playerInterface_.onError(new shaka.util.Error(\n          shaka.util.Error.Severity.CRITICAL,\n          shaka.util.Error.Category.STREAMING,\n          shaka.util.Error.Code.INVALID_STREAMS_CHOSEN));\n      return;\n    }\n\n    for (let type in streamsByType) {\n      if (this.mediaStates_[/** @type {!ContentType} */(type)]) continue;\n\n      if (type == ContentType.TEXT) {\n        // initStreams_ will switch streams and schedule an update.\n        this.initStreams_(\n            {text: streamsByType[ContentType.TEXT]}, needPeriod.startTime);\n        delete streamsByType[type];\n        continue;\n      }\n\n      shaka.log.error(logPrefix,\n                      'invalid Streams chosen: unusable ' + type + ' Stream');\n      this.playerInterface_.onError(new shaka.util.Error(\n          shaka.util.Error.Severity.CRITICAL,\n          shaka.util.Error.Category.STREAMING,\n          shaka.util.Error.Code.INVALID_STREAMS_CHOSEN));\n      return;\n    }\n\n    for (let type in this.mediaStates_) {\n      let stream = streamsByType[type];\n      if (stream) {\n        this.switchInternal_(stream, /* clearBuffer */ false, 0);\n        this.scheduleUpdate_(this.mediaStates_[type], 0);\n      } else {\n        goog.asserts.assert(type == ContentType.TEXT, 'Invalid streams chosen');\n        delete this.mediaStates_[type];\n      }\n    }\n\n    // We've already set up the Period so call onCanSwitch() right now.\n    shaka.log.v1(logPrefix, 'calling onCanSwitch()...');\n    this.playerInterface_.onCanSwitch();\n  }.bind(this)).catch(Functional.noop);\n};\n\n\n/**\n * @param {shaka.media.StreamingEngine.MediaState_} mediaState\n * @return {boolean} True if the given MediaState is idle; otherwise, return\n *   false.\n * @private\n */\nshaka.media.StreamingEngine.isIdle_ = function(mediaState) {\n  return !mediaState.performingUpdate &&\n         (mediaState.updateTimer == null) &&\n         !mediaState.waitingToClearBuffer &&\n         !mediaState.clearingBuffer;\n};\n\n\n/**\n * @param {number} time The time, in seconds, relative to the start of the\n *   presentation.\n * @return {number} The index of the Period which starts after |time|\n * @private\n */\nshaka.media.StreamingEngine.prototype.findPeriodContainingTime_ = function(\n    time) {\n  goog.asserts.assert(this.manifest_, 'Must not be destroyed');\n  return shaka.util.StreamUtils.findPeriodContainingTime(this.manifest_, time);\n};\n\n\n/**\n * @param {!shaka.extern.Stream} stream\n * @return {number} The index of the Period which contains |stream|, or -1 if\n *   no Period contains |stream|.\n * @private\n */\nshaka.media.StreamingEngine.prototype.findPeriodContainingStream_ = function(\n    stream) {\n  goog.asserts.assert(this.manifest_, 'Must not be destroyed');\n  return shaka.util.StreamUtils.findPeriodContainingStream(\n      this.manifest_, stream);\n};\n\n\n/**\n * Fetches the given segment.\n *\n * @param {(!shaka.media.InitSegmentReference|!shaka.media.SegmentReference)}\n *   reference\n *\n * @return {!Promise.<!ArrayBuffer>}\n * @private\n */\nshaka.media.StreamingEngine.prototype.fetch_ = function(reference) {\n    if (reference.initSegmentBytesFunc) {\n        let initSegmentBytes = reference.initSegmentBytesFunc();\n        shaka.log.v1(\n            'found vstub bytes: returning protovstub bytes directly (bytes): ' +\n            initSegmentBytes.byteLength);\n        return Promise.resolve(initSegmentBytes);\n    }\n\n  const requestType = shaka.net.NetworkingEngine.RequestType.SEGMENT;\n  let request = shaka.net.NetworkingEngine.makeRequest(\n      reference.getUris(), this.config_.retryParameters);\n\n  // Set the Range header. Note that some web servers don't accept Range\n  // headers, so don't set one if it's not strictly required.\n  if ((reference.startByte != 0) || (reference.endByte != null)) {\n    let range = 'bytes=' + reference.startByte + '-';\n    if (reference.endByte != null) range += reference.endByte;\n    request.headers['Range'] = range;\n  }\n\n  shaka.log.v2('fetching: reference=' + reference);\n  let op = this.playerInterface_.netEngine.request(requestType, request);\n\n    if (reference.byteRanges) {\n        return op.then(function (response) {\n            shaka.log.v1(\"restoring linius vstub segment: \" + reference.startByte + \" - \" + reference.endByte);\n\n            let segmentSize = reference.sixdmoofBytes.length + reference.mdatSize;\n            let buffer = new ArrayBuffer(segmentSize);\n            let segmentArray = new Uint8Array(buffer);\n            segmentArray.set(reference.sixdmoofBytes, 0);\n            let offset = reference.sixdmoofBytes.length;\n\n            let mdatHeader = lin.VstubSegmentList.buildMdatHeader(reference.mdatSize);\n            segmentArray.set(mdatHeader, offset);\n            offset = offset + mdatHeader.length;\n            let responseArray = new Uint8Array(response.data);\n\n            reference.byteRanges.forEach(function (range) {\n                let lo = range.from - reference.startByte;\n                let hi = range.to - reference.startByte;\n                let samplesData = responseArray.slice(lo, hi + 1);\n                segmentArray.set(samplesData, offset);\n                offset = offset + samplesData.length;\n            });\n            return buffer;\n        });\n\n    } else {\n        return op.promise.then(function (response) {\n            return response.data;\n        });\n    }\n};\n\n\n/**\n * Clears the buffer and schedules another update.\n * The optional parameter safeMargin allows to retain a certain amount\n * of buffer, which can help avoiding rebuffering events.\n * The value of the safe margin should be provided by the ABR manager.\n *\n * @param {!shaka.media.StreamingEngine.MediaState_} mediaState\n * @param {boolean} flush\n * @param {number} safeMargin\n * @private\n */\nshaka.media.StreamingEngine.prototype.clearBuffer_ =\n    function(mediaState, flush, safeMargin) {\n  let logPrefix = shaka.media.StreamingEngine.logPrefix_(mediaState);\n\n  goog.asserts.assert(\n      !mediaState.performingUpdate && (mediaState.updateTimer == null),\n      logPrefix + ' unexpected call to clearBuffer_()');\n\n  mediaState.waitingToClearBuffer = false;\n  mediaState.waitingToFlushBuffer = false;\n  mediaState.clearBufferSafeMargin = 0;\n  mediaState.clearingBuffer = true;\n\n  shaka.log.debug(logPrefix, 'clearing buffer');\n  let p;\n  if (safeMargin) {\n    let playheadTime = this.playerInterface_.playhead.getTime();\n    let duration = this.playerInterface_.mediaSourceEngine.getDuration();\n    p = this.playerInterface_.mediaSourceEngine.remove(\n        mediaState.type, playheadTime + safeMargin, duration);\n  } else {\n    p = this.playerInterface_.mediaSourceEngine.clear(mediaState.type).then(\n        function() {\n          if (!this.destroyed_ && flush) {\n            return this.playerInterface_.mediaSourceEngine.flush(\n                mediaState.type);\n          }\n        }.bind(this));\n  }\n  p.then(function() {\n    if (this.destroyed_) return;\n    shaka.log.debug(logPrefix, 'cleared buffer');\n    mediaState.lastStream = null;\n    mediaState.lastSegmentReference = null;\n    mediaState.clearingBuffer = false;\n    mediaState.endOfStream = false;\n    this.scheduleUpdate_(mediaState, 0);\n  }.bind(this));\n};\n\n\n/**\n * Schedules |mediaState|'s next update.\n *\n * @param {!shaka.media.StreamingEngine.MediaState_} mediaState\n * @param {number} delay The delay in seconds.\n * @private\n */\nshaka.media.StreamingEngine.prototype.scheduleUpdate_ = function(\n    mediaState, delay) {\n  let logPrefix = shaka.media.StreamingEngine.logPrefix_(mediaState);\n  shaka.log.v2(logPrefix, 'updating in ' + delay + ' seconds');\n  goog.asserts.assert(mediaState.updateTimer == null,\n                      logPrefix + ' did not expect update to be scheduled');\n  mediaState.updateTimer = window.setTimeout(\n      this.onUpdate_.bind(this, mediaState), delay * 1000);\n};\n\n\n/**\n * Cancels |mediaState|'s next update if one exists.\n *\n * @param {!shaka.media.StreamingEngine.MediaState_} mediaState\n * @private\n */\nshaka.media.StreamingEngine.prototype.cancelUpdate_ = function(mediaState) {\n  if (mediaState.updateTimer != null) {\n    window.clearTimeout(mediaState.updateTimer);\n    mediaState.updateTimer = null;\n  }\n};\n\n\n/**\n * Handle streaming errors by delaying, then notifying the application by error\n * callback and by streaming failure callback.\n *\n * @param {!shaka.util.Error} error\n * @private\n */\nshaka.media.StreamingEngine.prototype.handleStreamingError_ = function(error) {\n  // If we invoke the callback right away, the application could trigger a\n  // rapid retry cycle that could be very unkind to the server.  Instead,\n  // use the backoff system to delay and backoff the error handling.\n  this.failureCallbackBackoff_.attempt().then(function() {\n    if (this.destroyed_) {\n      return;\n    }\n\n    // First fire an error event.\n    this.playerInterface_.onError(error);\n\n    // If the error was not handled by the application, call the failure\n    // callback.\n    if (!error.handled) {\n      this.config_.failureCallback(error);\n    }\n  }.bind(this));\n};\n\n\n/**\n * @param {shaka.media.StreamingEngine.MediaState_} mediaState\n * @return {string} A log prefix of the form ($CONTENT_TYPE:$STREAM_ID), e.g.,\n *   \"(audio:5)\" or \"(video:hd)\".\n * @private\n */\nshaka.media.StreamingEngine.logPrefix_ = function(mediaState) {\n  return '(' + mediaState.type + ':' + mediaState.stream.id + ')';\n};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.net.HttpPluginUtils');\n\ngoog.require('shaka.log');\ngoog.require('shaka.util.Error');\ngoog.require('shaka.util.StringUtils');\n\n\n/**\n * @namespace shaka.net.HttpPluginUtils\n * @summary A set of http networking utility functions.\n * @exportDoc\n */\n\n\n/**\n * @param {!Object.<string,string>} headers\n * @param {?ArrayBuffer} data\n * @param {number} status\n * @param {string} uri\n * @param {string} responseURL\n * @param {shaka.net.NetworkingEngine.RequestType} requestType\n * @return {!shaka.extern.Response}\n */\nshaka.net.HttpPluginUtils.makeResponse =\n    function(headers, data, status, uri, responseURL, requestType) {\n  if (status >= 200 && status <= 299 && status != 202) {\n    // Most 2xx HTTP codes are success cases.\n    if (responseURL) {\n      uri = responseURL;\n    }\n    /** @type {shaka.extern.Response} */\n    let response = {\n      uri: uri,\n      data: data,\n      headers: headers,\n      fromCache: !!headers['x-shaka-from-cache'],\n    };\n    return response;\n  } else {\n    let responseText = null;\n    try {\n      responseText = shaka.util.StringUtils.fromBytesAutoDetect(data);\n    } catch (exception) {}\n    shaka.log.debug('HTTP error text:', responseText);\n\n    let severity = status == 401 || status == 403 ?\n        shaka.util.Error.Severity.CRITICAL :\n        shaka.util.Error.Severity.RECOVERABLE;\n    throw new shaka.util.Error(\n        severity,\n        shaka.util.Error.Category.NETWORK,\n        shaka.util.Error.Code.BAD_HTTP_STATUS,\n        uri,\n        status,\n        responseText,\n        headers,\n        requestType);\n  }\n};\n\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.net.HttpFetchPlugin');\n\ngoog.require('shaka.net.HttpPluginUtils');\ngoog.require('shaka.net.NetworkingEngine');\ngoog.require('shaka.util.AbortableOperation');\ngoog.require('shaka.util.Error');\ngoog.require('shaka.util.MapUtils');\n\n\n/**\n * @namespace\n * @summary A networking plugin to handle http and https URIs via the Fetch API.\n * @param {string} uri\n * @param {shaka.extern.Request} request\n * @param {shaka.net.NetworkingEngine.RequestType} requestType\n * @return {!shaka.extern.IAbortableOperation.<shaka.extern.Response>}\n * @export\n */\nshaka.net.HttpFetchPlugin = function(uri, request, requestType) {\n  const headers = new shaka.net.HttpFetchPlugin.Headers_();\n  shaka.util.MapUtils.forEach(request.headers, function(key, value) {\n    headers.append(key, value);\n  });\n\n  const controller = new shaka.net.HttpFetchPlugin.AbortController_();\n\n  /** @type {!RequestInit} */\n  const init = {\n    // Edge does not treat null as undefined for body; https://bit.ly/2luyE6x\n    body: request.body || undefined,\n    headers: headers,\n    method: request.method,\n    signal: controller.signal,\n    credentials: request.allowCrossSiteCredentials ? 'include' : undefined,\n  };\n\n  /** @type {shaka.net.HttpFetchPlugin.AbortStatus} */\n  const abortStatus = {\n    canceled: false,\n    timedOut: false,\n  };\n\n  // The fetch API does not timeout natively, so do a timeout manually using the\n  // AbortController.\n  let timeout;\n  if (request.retryParameters.timeout) {\n    let onTimeout = function() {\n      abortStatus.timedOut = true;\n      controller.abort();\n    };\n    timeout = setTimeout(onTimeout, request.retryParameters.timeout);\n  }\n\n  const promise = shaka.net.HttpFetchPlugin.request_(uri, requestType, init,\n      abortStatus, timeout);\n\n  return new shaka.util.AbortableOperation(\n    promise,\n    () => {\n      abortStatus.canceled = true;\n      controller.abort();\n      return Promise.resolve();\n    });\n};\n\n/**\n * @param {string} uri\n * @param {shaka.net.NetworkingEngine.RequestType} requestType\n * @param {!RequestInit} init\n * @param {shaka.net.HttpFetchPlugin.AbortStatus} abortStatus\n * @param {number|undefined} timeoutId\n * @return {!Promise<!shaka.extern.Response>}\n * @private\n */\nshaka.net.HttpFetchPlugin.request_ = async function(uri, requestType, init,\n    abortStatus, timeoutId) {\n  const fetch = shaka.net.HttpFetchPlugin.fetch_;\n  let response;\n  let arrayBuffer;\n\n  try {\n    response = await fetch(uri, init);\n    arrayBuffer = await response.arrayBuffer();\n  } catch (error) {\n    if (abortStatus.canceled) {\n      throw new shaka.util.Error(\n          shaka.util.Error.Severity.RECOVERABLE,\n          shaka.util.Error.Category.NETWORK,\n          shaka.util.Error.Code.OPERATION_ABORTED,\n          uri, requestType);\n    } else if (abortStatus.timedOut) {\n      throw new shaka.util.Error(\n          shaka.util.Error.Severity.RECOVERABLE,\n          shaka.util.Error.Category.NETWORK,\n          shaka.util.Error.Code.TIMEOUT,\n          uri, requestType);\n    } else {\n      throw new shaka.util.Error(\n          shaka.util.Error.Severity.RECOVERABLE,\n          shaka.util.Error.Category.NETWORK,\n          shaka.util.Error.Code.HTTP_ERROR,\n          uri, error, requestType);\n    }\n  } finally {\n    clearTimeout(timeoutId);\n  }\n\n  const headers = {};\n  /** @type {Headers} */\n  const responseHeaders = response.headers;\n  responseHeaders.forEach(function(value, key) {\n    // Since IE/Edge incorrectly return the header with a leading new line\n    // character ('\\n'), we trim the header here.\n    headers[key.trim()] = value;\n  });\n\n  return shaka.net.HttpPluginUtils.makeResponse(headers,\n      arrayBuffer, response.status, uri, response.url, requestType);\n};\n\n/**\n * @typedef {{\n *   canceled: boolean,\n *   timedOut: boolean\n * }}\n * @property {boolean} canceled\n *   Indicates if the request was canceled.\n * @property {boolean} timedOut\n *   Indicates if the request timed out.\n */\nshaka.net.HttpFetchPlugin.AbortStatus;\n\n\n/**\n * Determine if the Fetch API is supported in the browser. Note: this is\n * deliberately exposed as a method to allow the client app to use the same\n * logic as Shaka when determining support.\n * @return {boolean}\n * @export\n */\nshaka.net.HttpFetchPlugin.isSupported = function() {\n  return !!(window.fetch && window.AbortController);\n};\n\n\n/**\n * Overridden in unit tests, but compiled out in production.\n *\n * @const {function(string, !RequestInit)}\n * @private\n */\nshaka.net.HttpFetchPlugin.fetch_ = window.fetch;\n\n\n/**\n * Overridden in unit tests, but compiled out in production.\n *\n * @const {function(new: AbortController)}\n * @private\n */\nshaka.net.HttpFetchPlugin.AbortController_ = window.AbortController;\n\n\n/**\n * Overridden in unit tests, but compiled out in production.\n *\n * @const {function(new: Headers)}\n * @private\n */\nshaka.net.HttpFetchPlugin.Headers_ = window.Headers;\n\n\nif (shaka.net.HttpFetchPlugin.isSupported()) {\n  shaka.net.NetworkingEngine.registerScheme('http', shaka.net.HttpFetchPlugin,\n      shaka.net.NetworkingEngine.PluginPriority.PREFERRED);\n  shaka.net.NetworkingEngine.registerScheme('https', shaka.net.HttpFetchPlugin,\n      shaka.net.NetworkingEngine.PluginPriority.PREFERRED);\n}\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.net.HttpXHRPlugin');\n\ngoog.require('goog.asserts');\ngoog.require('shaka.net.HttpPluginUtils');\ngoog.require('shaka.net.NetworkingEngine');\ngoog.require('shaka.util.AbortableOperation');\ngoog.require('shaka.util.Error');\n\n\n/**\n * @namespace\n * @summary A networking plugin to handle http and https URIs via XHR.\n * @param {string} uri\n * @param {shaka.extern.Request} request\n * @param {shaka.net.NetworkingEngine.RequestType} requestType\n * @return {!shaka.extern.IAbortableOperation.<shaka.extern.Response>}\n * @export\n */\nshaka.net.HttpXHRPlugin = function(uri, request, requestType) {\n  let xhr = new shaka.net.HttpXHRPlugin.Xhr_();\n\n  let promise = new Promise(function(resolve, reject) {\n    xhr.open(request.method, uri, true);\n    xhr.responseType = 'arraybuffer';\n    xhr.timeout = request.retryParameters.timeout;\n    xhr.withCredentials = request.allowCrossSiteCredentials;\n\n    xhr.onabort = function() {\n      reject(new shaka.util.Error(\n          shaka.util.Error.Severity.RECOVERABLE,\n          shaka.util.Error.Category.NETWORK,\n          shaka.util.Error.Code.OPERATION_ABORTED,\n          uri, requestType));\n    };\n    xhr.onload = function(event) {\n      let target = event.target;\n      goog.asserts.assert(target, 'XHR onload has no target!');\n      // Since IE and Edge incorrectly return the header with a leading new line\n      // character ('\\n'), we trim the header here.\n      const headerLines = target.getAllResponseHeaders().trim().split('\\r\\n');\n      const headers = {};\n      for (const header of headerLines) {\n        /** @type {!Array.<string>} */\n        const parts = header.split(': ');\n        headers[parts[0].toLowerCase()] = parts.slice(1).join(': ');\n      }\n\n      try {\n        let response = shaka.net.HttpPluginUtils.makeResponse(headers,\n          target.response, target.status, uri, target.responseURL,\n          requestType);\n        resolve(response);\n      } catch (error) {\n        goog.asserts.assert(error instanceof shaka.util.Error,\n            'Wrong error type!');\n        reject(error);\n      }\n    };\n    xhr.onerror = function(event) {\n      reject(new shaka.util.Error(\n          shaka.util.Error.Severity.RECOVERABLE,\n          shaka.util.Error.Category.NETWORK,\n          shaka.util.Error.Code.HTTP_ERROR,\n          uri, event, requestType));\n    };\n    xhr.ontimeout = function(event) {\n      reject(new shaka.util.Error(\n          shaka.util.Error.Severity.RECOVERABLE,\n          shaka.util.Error.Category.NETWORK,\n          shaka.util.Error.Code.TIMEOUT,\n          uri, requestType));\n    };\n\n    for (let key in request.headers) {\n      // The Fetch API automatically normalizes outgoing header keys to\n      // lowercase. For consistency's sake, do it here too.\n      let lowercasedKey = key.toLowerCase();\n      xhr.setRequestHeader(lowercasedKey, request.headers[key]);\n    }\n    xhr.send(request.body);\n  });\n\n  return new shaka.util.AbortableOperation(\n    promise,\n    () => {\n      xhr.abort();\n      return Promise.resolve();\n    });\n};\n\n\n/**\n * Overridden in unit tests, but compiled out in production.\n *\n * @const {function(new: XMLHttpRequest)}\n * @private\n */\nshaka.net.HttpXHRPlugin.Xhr_ = window.XMLHttpRequest;\n\n\nshaka.net.NetworkingEngine.registerScheme('http', shaka.net.HttpXHRPlugin,\n    shaka.net.NetworkingEngine.PluginPriority.FALLBACK);\nshaka.net.NetworkingEngine.registerScheme('https', shaka.net.HttpXHRPlugin,\n    shaka.net.NetworkingEngine.PluginPriority.FALLBACK);\n\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.offline.DownloadManager');\n\ngoog.require('shaka.net.NetworkingEngine');\ngoog.require('shaka.util.Error');\ngoog.require('shaka.util.IDestroyable');\ngoog.require('shaka.util.MapUtils');\n\n/**\n * @typedef {{\n *   request: shaka.extern.Request,\n *   estimatedByteLength: number,\n *   onDownloaded: function(!ArrayBuffer):!Promise\n * }}\n *\n * @property {shaka.extern.Request}\n *   The network request that will give us the bytes we want to download.\n * @property {number} estimatedByteLength\n *   The size of the segment as estimated by the bandwidth and segment duration.\n * @property {function(!ArrayBuffer):!Promise} onDownloaded\n *   A callback for when a request has been downloaded and can be used by\n *   the caller. Callback should return a promise so that downloading will\n *   not continue until we are done with the current response.\n */\nshaka.offline.DownloadRequest;\n\n\n/**\n * This manages downloading segments.\n *\n * @param {function(number, number)} onProgress\n *\n * @constructor\n * @implements {shaka.util.IDestroyable}\n */\nshaka.offline.DownloadManager = function(onProgress) {\n  /**\n   * We sill store download requests in groups. The groups will be downloaded in\n   * parallel but the segments in each group will be done serially.\n   *\n   * @private {!Object.<number, !Array.<shaka.offline.DownloadRequest>>}\n   */\n  this.groups_ = {};\n\n  /** @private {!Promise} */\n  this.promise_ = Promise.resolve();\n\n  /** @private {boolean} */\n  this.destroyed_ = false;\n\n  /**\n   * Callback for after a segment has been downloaded. The first parameter\n   * will be the progress of the download. It will be a number between 0.0\n   * (0% complete) and 1.0 (100% complete). The second parameter will be the\n   * the total number of bytes that have been downloaded.\n   *\n   * @private {function(number, number)}\n   */\n  this.onProgress_ = onProgress;\n\n  /**\n   * When a segment is downloaded, the estimated size of that segment will be\n   * added to this value. It will allow us to track how much progress we have\n   * made in downloading all segments.\n   *\n   * @private {number}\n   */\n  this.downloadedEstimatedBytes_ = 0;\n\n  /**\n   * When we queue a segment to be downloaded, the estimated size of that\n   * segment will be added to this value. This will allow us to estimate\n   * how many bytes of content we plan to download.\n   *\n   * @private {number}\n   */\n  this.expectedEstimatedBytes_ = 0;\n\n  /**\n   * When a segment is downloaded, the actual size of the segment will be added\n   * to this value so that we know exactly how many bytes we have downloaded.\n   *\n   * @private {number}\n   */\n  this.downloadedBytes_ = 0;\n};\n\n\n/** @override */\nshaka.offline.DownloadManager.prototype.destroy = function() {\n  this.destroyed_ = true;\n\n  const noop = () => {};\n  let wait = this.promise_.catch(noop);\n\n  this.promise_ = Promise.resolve();\n  this.requests_ = [];\n\n  return wait;\n};\n\n\n/**\n * Add a request to be downloaded as part of a group.\n *\n * @param {number} group The group to add this segment to. If the group does\n *                       not exists, a new group will be created.\n * @param {shaka.extern.Request} request\n * @param {number} estimatedByteLength\n * @param {function(!ArrayBuffer):!Promise} onDownloaded\n *   A callback for when a request has been downloaded and can be used by\n *   the caller. Callback should return a promise so that downloading will\n *   not continue until we are done with the current response.\n */\nshaka.offline.DownloadManager.prototype.queue = function(\n    group, request, estimatedByteLength, onDownloaded) {\n  this.groups_[group] = this.groups_[group] || [];\n  this.groups_[group].push({\n    request: request,\n    estimatedByteLength: estimatedByteLength,\n    onDownloaded: onDownloaded,\n  });\n};\n\n\n/**\n * @param {!shaka.net.NetworkingEngine} net\n * @return {!Promise}\n */\nshaka.offline.DownloadManager.prototype.download = function(net) {\n  let groups = shaka.util.MapUtils.values(this.groups_);\n  this.groups_ = {};  // Clear the map to create a clean slate.\n\n  groups.forEach((segments) => {\n    segments.forEach((segment) => {\n      this.expectedEstimatedBytes_ += segment.estimatedByteLength;\n    });\n  });\n\n  /** @type {!Promise.<number>} */\n  let p = Promise.resolve().then(() => {\n    this.checkDestroyed_();\n    return Promise.all(groups.map((group) => this.downloadGroup_(net, group)));\n  });\n\n  // Amend our new promise chain to our internal promise so that when we destroy\n  // the download manger we will wait for all the downloads to stop.\n  this.promise_ = this.promise_.then(() => p);\n\n  return p;\n};\n\n\n/**\n * @param {!shaka.net.NetworkingEngine} net\n * @param {!Array.<shaka.offline.DownloadRequest>} group\n * @return {!Promise}\n * @private\n */\nshaka.offline.DownloadManager.prototype.downloadGroup_ = function(net, group) {\n  let p = Promise.resolve();\n\n  group.forEach((segment) => {\n    p = p.then(() => {\n      this.checkDestroyed_();\n      return this.downloadSegment_(net, segment);\n    });\n  });\n\n  return p;\n};\n\n\n/**\n * @param {!shaka.net.NetworkingEngine} net\n * @param {shaka.offline.DownloadRequest} segment\n * @return {!Promise}\n * @private\n */\nshaka.offline.DownloadManager.prototype.downloadSegment_ = function(\n    net, segment) {\n  return Promise.resolve().then(() => {\n    this.checkDestroyed_();\n\n    let type = shaka.net.NetworkingEngine.RequestType.SEGMENT;\n    return net.request(type, segment.request).promise;\n  }).then((response) => {\n    this.checkDestroyed_();\n\n    // Update all our internal stats.\n    this.downloadedEstimatedBytes_ += segment.estimatedByteLength;\n    this.downloadedBytes_ += response.data.byteLength;\n\n    let progress =\n        this.expectedEstimatedBytes_ ?\n        this.downloadedEstimatedBytes_ / this.expectedEstimatedBytes_ :\n        0;\n\n    this.onProgress_(progress, this.downloadedBytes_);\n\n    return segment.onDownloaded(response.data);\n  });\n};\n\n\n/**\n * Check if the download manager has been destroyed. If so, throw an error to\n * kill the promise chain.\n * @private\n */\nshaka.offline.DownloadManager.prototype.checkDestroyed_ = function() {\n  if (this.destroyed_) {\n    throw new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.STORAGE,\n        shaka.util.Error.Code.OPERATION_ABORTED);\n  }\n};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.offline.indexeddb.DBOperation');\n\n\ngoog.require('shaka.util.PublicPromise');\n\n\n/**\n * A DBOperation wraps an IndexedDB transaction in a promise.\n */\nshaka.offline.indexeddb.DBOperation = class {\n  /**\n   * @param {IDBTransaction} transaction\n   * @param {string} storeName\n   */\n  constructor(transaction, storeName) {\n    /** @private {IDBTransaction} */\n    this.transaction_ = transaction;\n    /** @private {IDBObjectStore} */\n    this.store_ = transaction.objectStore(storeName);\n    /** @private {!shaka.util.PublicPromise} */\n    this.promise_ = new shaka.util.PublicPromise();\n\n    // Connect the transaction and the promise together.\n    // |event.preventDefault()| is used on all non-successful callbacks to\n    // prevent Firefox from surfacing the error on the main thread.\n    transaction.onabort = (event) => {\n      event.preventDefault();\n      this.promise_.reject();\n    };\n    transaction.onerror = (event) => {\n      event.preventDefault();\n      this.promise_.reject();\n    };\n    transaction.oncomplete = (event) => {\n      this.promise_.resolve();\n    };\n  }\n\n  /**\n   * @return {!Promise}\n   */\n  abort() {\n    try {\n      this.transaction_.abort();\n    } catch (e) {\n      // Ignore any exceptions that may be thrown as a result of aborting\n      // the transaction.\n    }\n\n    // Wait for the promise to be rejected, but ignore the rejection error.\n    return this.promise_.catch(() => {});\n  }\n\n  /**\n   * Get the store that the operation can interact with. Requests can be made\n   * on the store. All requests made on the store will complete successfully\n   * before the operation's promise will resolve. If any request fails, the\n   * operation's promise will be rejected.\n   *\n   * @return {IDBObjectStore}\n   */\n  store() { return this.store_; }\n\n  /**\n   * Get the promise that wraps the transaction. This promise will resolve when\n   * all requests on the object store complete successfully and the transaction\n   * completes. If any request fails or the operation is aborted, the promise\n   * will be rejected.\n   *\n   * @return {!Promise}\n   */\n  promise() { return this.promise_; }\n};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.offline.indexeddb.DBConnection');\n\ngoog.require('shaka.offline.indexeddb.DBOperation');\ngoog.require('shaka.util.ArrayUtils');\n\n\n/**\n * DBConnection is used to manage an IndexedDB connection. It can create new\n * operations. If the connection is killed (via |destroy|) all pending\n * operations will be cancelled.\n */\nshaka.offline.indexeddb.DBConnection = class {\n  /**\n   * @param {IDBDatabase} connection A connection to an IndexedDB instance.\n   */\n  constructor(connection) {\n    /** @private {IDBDatabase} */\n    this.connection_ = connection;\n    /** @private {!Array.<shaka.offline.indexeddb.DBOperation>} */\n    this.pending_ = [];\n  }\n\n  /**\n   * @return {!Promise}\n   */\n  destroy() {\n    return Promise.all(this.pending_.map((op) => {\n      return op.abort();\n    }));\n  }\n\n  /**\n   * @param {string} store The name of the store that the operation should\n   *                       occur on.\n   * @return {!shaka.offline.indexeddb.DBOperation}\n   */\n  startReadOnlyOperation(store) {\n    return this.startOperation_(store, 'readonly');\n  }\n\n  /**\n   * @param {string} store The name of the store that the operation should\n   *                       occur on.\n   * @return {!shaka.offline.indexeddb.DBOperation}\n   */\n  startReadWriteOperation(store) {\n    return this.startOperation_(store, 'readwrite');\n  }\n\n  /**\n   * @param {string} store The name of the store that the operation should\n   *                       occur on.\n   * @param {string} type The type of operation being performed on the store.\n   *                      This determines what commands may be performed. This\n   *                      can either be \"readonly\" or \"readwrite\".\n   * @return {!shaka.offline.indexeddb.DBOperation}\n   * @private\n   */\n  startOperation_(store, type) {\n    let transaction = this.connection_.transaction([store], type);\n    let operation = new shaka.offline.indexeddb.DBOperation(transaction, store);\n\n    this.pending_.push(operation);\n\n    // Once the operation is done (regardless of outcome) stop tracking it.\n    operation.promise().then(\n        () => this.stopTracking_(operation),\n        () => this.stopTracking_(operation)\n    );\n\n    return operation;\n  }\n\n  /**\n   * @param {!shaka.offline.indexeddb.DBOperation} operation\n   * @private\n   */\n  stopTracking_(operation) {\n    shaka.util.ArrayUtils.remove(this.pending_, operation);\n  }\n};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.offline.StorageCellHandle');\ngoog.provide('shaka.offline.StorageCellPath');\ngoog.provide('shaka.offline.StorageMuxer');\n\ngoog.require('shaka.log');\ngoog.require('shaka.util.Error');\ngoog.require('shaka.util.IDestroyable');\ngoog.require('shaka.util.MapUtils');\n\n/**\n * @typedef {{\n *  mechanism: string,\n *  cell: string\n * }}\n *\n * @property {string} mechanism\n *  The name of the mechanism that holds the cell.\n * @property {string} cell\n *  The name of the cell in the mechanism.\n */\nshaka.offline.StorageCellPath;\n\n\n/**\n * @typedef {{\n *   path: shaka.offline.StorageCellPath,\n *   cell: !shaka.extern.StorageCell\n * }}\n *\n * @property {shaka.offline.StorageCellPath} path\n *   The path that maps to the cell.\n * @property {shaka.extern.StorageCell} cell\n *   The storage cell that the path points to within the storage muxer.\n */\nshaka.offline.StorageCellHandle;\n\n\n/**\n * StorageMuxer is responsible for managing StorageMechanisms and addressing\n * cells. The primary purpose of the muxer is to give the caller the correct\n * cell for the operations they want to perform.\n *\n * |findActive| will be used when the caller wants a cell that supports\n * add-operations. This will be used when saving new content to storage.\n *\n * |findAll| will be used when the caller want to look at all the content\n * in storage.\n *\n * |resolvePath| will be used to convert a path (from |findActive| and\n * |findAll|) into a cell, which it then returns.\n *\n * @implements {shaka.util.IDestroyable}\n */\nshaka.offline.StorageMuxer = class {\n  constructor() {\n    /**\n     * A key in this map is the name given when registering a StorageMechanism.\n     *\n     * @private {!Object.<string, !shaka.extern.StorageMechanism>}\n     */\n    this.mechanisms_ = {};\n  }\n\n  /**\n   * Free all resources used by the muxer, mechanisms, and cells. This should\n   * not affect the stored content.\n   *\n   * @override\n   */\n  destroy() {\n    /** @type {!Array.<!shaka.extern.StorageMechanism>} */\n    let destroys = shaka.util.MapUtils\n        .values(this.mechanisms_)\n        .map((mechanism) => mechanism.destroy());\n\n    // Empty each map so that subsequent calls will be no-ops.\n    this.mechanisms_ = {};\n\n    return Promise.all(destroys);\n  }\n\n  /**\n   * Initialize the storage muxer. This must be called before any other calls.\n   * This will initialize the muxer to use all mechanisms that have been\n   * registered with |StorageMuxer.register|.\n   *\n   * @return {!Promise}\n   */\n  init() {\n    const MapUtils = shaka.util.MapUtils;\n\n    // Add the new instance of each mechanism to the muxer.\n    let registry = shaka.offline.StorageMuxer.getRegistry_();\n    MapUtils.forEach(registry, (name, factory) => {\n      let mech = factory();\n      if (mech) {\n        this.mechanisms_[name] = mech;\n      } else {\n        shaka.log.info(\n            'Skipping ' + name + ' as it is not supported on this platform');\n      }\n    });\n\n    let initPromises = MapUtils\n        .values(this.mechanisms_)\n        .map((mechanism) => mechanism.init());\n\n    return Promise.all(initPromises);\n  }\n\n  /**\n   * Get a promise that will resolve with a storage cell that supports\n   * add-operations. If no cell can be found, the promise will be rejected.\n   *\n   * @return {shaka.offline.StorageCellHandle}\n   */\n  getActive() {\n    /** @type {?shaka.offline.StorageCellHandle} */\n    let handle = null;\n\n    const MapUtils = shaka.util.MapUtils;\n    MapUtils.forEach(this.mechanisms_, (mechanismName, mechanism) => {\n      MapUtils.forEach(mechanism.getCells(), (cellName, cell) => {\n        // If this cell is not useful to us or we already have a handle, then\n        // we don't need to make a new handle.\n        if (cell.hasFixedKeySpace() || handle) { return; }\n\n        let path = {\n          mechanism: mechanismName,\n          cell: cellName,\n        };\n\n        handle = {\n          path: path,\n          cell: cell,\n        };\n      });\n    });\n\n    if (handle) {\n      return /** @type {shaka.offline.StorageCellHandle} */(handle);\n    }\n\n    throw new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.STORAGE,\n        shaka.util.Error.Code.MISSING_STORAGE_CELL,\n        'Could not find a cell that supports add-operations');\n  }\n\n  /**\n   * @param {function(!shaka.offline.StorageCellPath,\n   *                  !shaka.extern.StorageCell)} callback\n   */\n  forEachCell(callback) {\n    const MapUtils = shaka.util.MapUtils;\n    MapUtils.forEach(this.mechanisms_, (mechanismName, mechanism) => {\n      MapUtils.forEach(mechanism.getCells(), (cellName, cell) => {\n        let path = {\n          mechanism: mechanismName,\n          cell: cellName,\n        };\n\n        callback(path, cell);\n      });\n    });\n  }\n\n  /**\n   * Get a specific storage cell. The promise will resolve with the storage\n   * cell if it is found. If the storage cell is not found, the promise will\n   * be rejected.\n   *\n   * @param {string} mechanismName\n   * @param {string} cellName\n   * @return {!shaka.extern.StorageCell}\n   */\n  getCell(mechanismName, cellName) {\n    let mechanism = this.mechanisms_[mechanismName];\n    if (!mechanism) {\n      throw new shaka.util.Error(\n          shaka.util.Error.Severity.CRITICAL,\n          shaka.util.Error.Category.STORAGE,\n          shaka.util.Error.Code.MISSING_STORAGE_CELL,\n          'Could not find mechanism with name ' + mechanismName);\n    }\n\n    let cell = mechanism.getCells()[cellName];\n    if (!cell) {\n      throw new shaka.util.Error(\n          shaka.util.Error.Severity.CRITICAL,\n          shaka.util.Error.Category.STORAGE,\n          shaka.util.Error.Code.MISSING_STORAGE_CELL,\n          'Could not find cell with name ' + cellName);\n    }\n\n    return cell;\n  }\n\n  /**\n   * Find the cell that the path points to. A path is made up of a mount point\n   * and a cell id. If a cell can be found, the cell will be returned. If no\n   * cell is found, null will be returned.\n   *\n   * @param {shaka.offline.StorageCellPath} path\n   * @return {shaka.extern.StorageCell}\n   */\n  resolvePath(path) {\n    let mechanism = this.mechanisms_[path.mechanism];\n\n    if (!mechanism) { return null; }\n\n    return mechanism.getCells()[path.cell];\n  }\n\n  /**\n   * This will erase all previous content from storage. Using paths obtained\n   * before calling |erase| is discouraged, as cells may have changed during a\n   * erase.\n   *\n   * @return {!Promise}\n   */\n  erase() {\n    const MapUtils = shaka.util.MapUtils;\n\n    let erases = MapUtils.values(this.mechanisms_).map((mechanism) => {\n      return mechanism.erase();\n    });\n\n    // We do not need to re-init, as mechanisms are supposed to self-initialize\n    // after an erase.\n    return Promise.all(erases);\n  }\n\n  /**\n   * Register a storage mechanism for use with the default storage muxer. This\n   * will have no effect on any storage muxer already in main memory.\n   *\n   * @param {string} name\n   * @param {function():shaka.extern.StorageMechanism} factory\n   * @export\n   */\n  static register(name, factory) {\n    shaka.offline.StorageMuxer.registry_[name] = factory;\n  }\n\n\n  /**\n   * Unregister a storage mechanism for use with the default storage muxer. This\n   * will have no effect on any storage muxer already in main memory.\n   *\n   * @param {string} name The name that the storage mechanism was registered\n   *                      under.\n   * @export\n   */\n  static unregister(name) {\n    delete shaka.offline.StorageMuxer.registry_[name];\n  }\n\n  /**\n   * Check if there is support for storage on this platform. It is assumed that\n   * if there are any mechanisms registered, it means that storage is supported\n   * on this platform. We do not check if the mechanisms have any cells.\n   *\n   * @return {boolean}\n   */\n  static support() {\n    const registry = shaka.offline.StorageMuxer.getRegistry_();\n    // Make sure that we will have SOME mechanisms created by creating a\n    // mechanism and immediately destroying it.\n    return shaka.util.MapUtils.values(registry).some((create) => {\n      let instance = create();\n\n      if (instance) {\n        instance.destroy();\n        return true;\n      }\n\n      return false;\n    });\n  }\n\n  /**\n   * Replace the mechanism map used by the muxer. This should only be used\n   * in testing.\n   *\n   * @param {Object.<string, function():!shaka.extern.StorageMechanism>} map\n   */\n  static overrideSupport(map) {\n    shaka.offline.StorageMuxer.override_ = map;\n  }\n\n  /**\n   * Undo a previous call to |overrideSupport|.\n   */\n  static clearOverride() {\n    shaka.offline.StorageMuxer.override_ = null;\n  }\n\n  /**\n   * Get the registry. If the support has been disabled, this will always\n   * an empty registry. Reading should always be done via |getRegistry_|.\n   *\n   * @return {!Object.<string, function():shaka.extern.StorageMechanism>}\n   * @private\n   */\n  static getRegistry_() {\n    const override = shaka.offline.StorageMuxer.override_;\n    const registry = shaka.offline.StorageMuxer.registry_;\n\n    if (COMPILED) {\n      return registry;\n    } else {\n      return override || registry;\n    }\n  }\n};\n\n\n/**\n * @private {Object.<string, function():shaka.extern.StorageMechanism>}\n */\nshaka.offline.StorageMuxer.override_ = null;\n\n\n/**\n * @private {!Object.<string, function():shaka.extern.StorageMechanism>}\n */\nshaka.offline.StorageMuxer.registry_ = {};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.offline.indexeddb.V1StorageCell');\n\ngoog.require('goog.asserts');\ngoog.require('shaka.log');\ngoog.require('shaka.offline.indexeddb.DBConnection');\ngoog.require('shaka.util.Error');\ngoog.require('shaka.util.ManifestParserUtils');\ngoog.require('shaka.util.PublicPromise');\n\n\n/**\n * The V1StorageCell is for all stores that follow the shaka.externs V2 offline\n * types. This storage cell will only work for version 1 indexed db database\n * schemes.\n *\n * @implements {shaka.extern.StorageCell}\n */\nshaka.offline.indexeddb.V1StorageCell = class {\n  /**\n   * @param {IDBDatabase} connection\n   * @param {string} segmentStore\n   * @param {string} manifestStore\n   */\n  constructor(connection, segmentStore, manifestStore) {\n    /** @private {!shaka.offline.indexeddb.DBConnection} */\n    this.connection_ = new shaka.offline.indexeddb.DBConnection(connection);\n\n    /** @private {string} */\n    this.segmentStore_ = segmentStore;\n    /** @private {string} */\n    this.manifestStore_ = manifestStore;\n  }\n\n  /**\n   * @override\n   */\n  destroy() { return this.connection_.destroy(); }\n\n  /**\n   * @override\n   */\n  hasFixedKeySpace() {\n    // We do not allow adding new values to V1 databases.\n    return true;\n  }\n\n  /**\n   * @override\n   */\n  addSegments(segments) { return this.rejectAdd_(this.segmentStore_); }\n\n  /**\n   * @override\n   */\n  removeSegments(keys, onRemove) {\n    return this.remove_(this.segmentStore_, keys, onRemove);\n  }\n\n  /**\n   * @override\n   */\n  getSegments(keys) {\n    const convertSegmentData =\n        shaka.offline.indexeddb.V1StorageCell.convertSegmentData_;\n\n    return this.get_(this.segmentStore_, keys).then((segments) => {\n      return segments.map(convertSegmentData);\n    });\n  }\n\n  /**\n   * @override\n   */\n  addManifests(manifests) { return this.rejectAdd_(this.manifestStore_); }\n\n  /**\n   * @override\n   */\n  updateManifestExpiration(key, newExpiration) {\n    let op = this.connection_.startReadWriteOperation(this.manifestStore_);\n    let store = op.store();\n\n    let p = new shaka.util.PublicPromise();\n\n    store.get(key).onsuccess = (event) => {\n      // Make sure a defined value was found. Indexeddb treats \"no value found\"\n      // as a success with an undefined result.\n      let manifest = event.target.result;\n\n      // Indexeddb does not fail when you get a value that is not in the\n      // database. It will return an undefined value. However, we expect\n      // the value to never be null, so something is wrong if we get a\n      // falsey value.\n      if (manifest) {\n        // Since this store's scheme uses in-line keys, we don't need to specify\n        // the key with |put|.\n        goog.asserts.assert(\n            manifest.key == key,\n            'With in-line keys, the keys should match');\n\n        manifest.expiration = newExpiration;\n        store.put(manifest);\n\n        p.resolve();\n      } else {\n        p.reject(new shaka.util.Error(\n            shaka.util.Error.Severity.CRITICAL,\n            shaka.util.Error.Category.STORAGE,\n            shaka.util.Error.Code.KEY_NOT_FOUND,\n            'Could not find values for ' + key));\n      }\n    };\n\n    // Only return our promise after the operation completes.\n    return op.promise().then(() => p);\n  }\n\n  /**\n   * @override\n   */\n  removeManifests(keys, onRemove) {\n    return this.remove_(this.manifestStore_, keys, onRemove);\n  }\n\n  /**\n   * @override\n   */\n  getManifests(keys) {\n    const convertManifest =\n        shaka.offline.indexeddb.V1StorageCell.convertManifest_;\n\n    return this.get_(this.manifestStore_, keys).then((manifests) => {\n      return manifests.map(convertManifest);\n    });\n  }\n\n  /**\n   * @override\n   */\n  getAllManifests() {\n    const convertManifest =\n        shaka.offline.indexeddb.V1StorageCell.convertManifest_;\n\n    let op = this.connection_.startReadOnlyOperation(this.manifestStore_);\n    let store = op.store();\n\n    let values = {};\n\n    store.openCursor().onsuccess = (event) => {\n      // When we reach the end of the data that the cursor is iterating\n      // over, |event.target.result| will be null to signal the end of the\n      // iteration.\n      // https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor/continue\n      let cursor = event.target.result;\n      if (!cursor) {\n        return;\n      }\n\n      values[cursor.key] = convertManifest(cursor.value);\n\n      // Go to the next item in the store, which will cause |onsuccess| to be\n      // called again.\n      cursor.continue();\n    };\n\n    // Wait until the operation completes or else values may be missing from\n    // |values|.\n    return op.promise().then(() => values);\n  }\n\n  /**\n   * @param {string} storeName\n   * @return {!Promise}\n   * @private\n   */\n  rejectAdd_(storeName) {\n    return Promise.reject(new shaka.util.Error(\n      shaka.util.Error.Severity.CRITICAL,\n      shaka.util.Error.Category.STORAGE,\n      shaka.util.Error.Code.NEW_KEY_OPERATION_NOT_SUPPORTED,\n      'Cannot add new value to ' + storeName));\n  }\n\n  /**\n   * @param {string} storeName\n   * @param {!Array.<number>} keys\n   * @param {function(number)} onRemove\n   * @return {!Promise}\n   * @private\n   */\n  remove_(storeName, keys, onRemove) {\n    let op = this.connection_.startReadWriteOperation(storeName);\n    let store = op.store();\n\n    keys.forEach((key) => {\n      store.delete(key).onsuccess = () => onRemove(key);\n    });\n\n    return op.promise();\n  }\n\n  /**\n   * @param {string} storeName\n   * @param {!Array.<number>} keys\n   * @return {!Promise.<!Array.<T>>}\n   * @template T\n   * @private\n   */\n  get_(storeName, keys) {\n    let op = this.connection_.startReadOnlyOperation(storeName);\n    let store = op.store();\n\n    let values = {};\n    let missing = [];\n\n    // Use a map to store the objects so that we can reorder the results to\n    // match the order of |keys|.\n    keys.forEach((key) => {\n      store.get(key).onsuccess = (event) => {\n        let value = event.target.result;\n        // Make sure a defined value was found. Indexeddb treats no-value found\n        // as a success with an undefined result.\n        if (value == undefined) {\n          missing.push(key);\n        }\n\n        values[key] = value;\n      };\n    });\n\n    // Wait until the operation completes or else values may be missing from\n    // |values|. Use the original key list to convert the map to a list so that\n    // the order will match.\n    return op.promise().then(() => {\n      if (missing.length) {\n        return Promise.reject(new shaka.util.Error(\n            shaka.util.Error.Severity.CRITICAL,\n            shaka.util.Error.Category.STORAGE,\n            shaka.util.Error.Code.KEY_NOT_FOUND,\n            'Could not find values for ' + missing\n        ));\n      }\n\n      return keys.map((key) => values[key]);\n    });\n  }\n\n  /**\n   * @param {!Object} old\n   * @return {shaka.extern.ManifestDB}\n   * @private\n   */\n  static convertManifest_(old) {\n    // Old Manifest Format:\n    // {\n    //   key: number,\n    //   originalManifestUri: string,\n    //   duration: number,\n    //   size: number,\n    //   expiration: number,\n    //   periods: !Array.<shaka.extern.PeriodDB>,\n    //   sessionIds: !Array.<string>,\n    //   drmInfo: ?shaka.extern.DrmInfo,\n    //   appMetadata: Object\n    //  }\n\n    goog.asserts.assert(\n        old.originalManifestUri != null,\n        'Old manifest format should have an originalManifestUri field');\n    goog.asserts.assert(\n        old.duration != null,\n        'Old manifest format should have a duration field');\n    goog.asserts.assert(\n        old.size != null,\n        'Old manifest format should have a size field');\n    goog.asserts.assert(\n        old.periods != null,\n        'Old manifest format should have a periods field');\n    goog.asserts.assert(\n        old.sessionIds != null,\n        'Old manifest format should have a session ids field');\n    goog.asserts.assert(\n        old.appMetadata != null,\n        'Old manifest format should have an app metadata field');\n\n    const convertPeriod = shaka.offline.indexeddb.V1StorageCell.convertPeriod_;\n\n    return {\n      originalManifestUri: old.originalManifestUri,\n      duration: old.duration,\n      size: old.size,\n      expiration: old.expiration == null ? Infinity : old.expiration,\n      periods: old.periods.map(convertPeriod),\n      sessionIds: old.sessionIds,\n      drmInfo: old.drmInfo,\n      appMetadata: old.appMetadata,\n    };\n  }\n\n  /**\n   * @param {!Object} old\n   * @return {shaka.extern.PeriodDB}\n   * @private\n   */\n  static convertPeriod_(old) {\n    // Old Period Format:\n    // {\n    //   startTime: number,\n    //   streams: !Array.<shaka.extern.StreamDB>\n    // }\n\n    goog.asserts.assert(\n      old.startTime != null,\n      'Old period format should have a start time field');\n    goog.asserts.assert(\n      old.streams != null,\n      'Old period format should have a streams field');\n\n    const convertStream = shaka.offline.indexeddb.V1StorageCell.convertStream_;\n    const fillMissingVariants =\n        shaka.offline.indexeddb.V1StorageCell.fillMissingVariants_;\n\n    // In the case that this is really old (like really old, like dinosaurs\n    // roaming the Earth old) there may be no variants, so we need to add those.\n    fillMissingVariants(old);\n\n    old.streams.forEach((stream) => {\n      const message = 'After filling in missing variants, ' +\n                      'each stream should have variant ids';\n      goog.asserts.assert(stream.variantIds, message);\n    });\n\n    return {\n      startTime: old.startTime,\n      streams: old.streams.map(convertStream),\n    };\n  }\n\n  /**\n   * @param {!Object} old\n   * @return {shaka.extern.StreamDB}\n   * @private\n   */\n  static convertStream_(old) {\n    // Old Stream Format\n    // {\n    //   id: number,\n    //   primary: boolean,\n    //   presentationTimeOffset: number,\n    //   contentType: string,\n    //   mimeType: string,\n    //   codecs: string,\n    //   frameRate: (number|undefined),\n    //   kind: (string|undefined),\n    //   language: string,\n    //   label: ?string,\n    //   width: ?number,\n    //   height: ?number,\n    //   initSegmentUri: ?string,\n    //   encrypted: boolean,\n    //   keyId: ?string,\n    //   segments: !Array.<shaka.extern.SegmentDB>,\n    //   variantIds: ?Array.<number>\n    // }\n\n    goog.asserts.assert(\n        old.id != null,\n        'Old stream format should have an id field');\n    goog.asserts.assert(\n        old.primary != null,\n        'Old stream format should have a primary field');\n    goog.asserts.assert(\n        old.presentationTimeOffset != null,\n        'Old stream format should have a presentation time offset field');\n    goog.asserts.assert(\n        old.contentType != null,\n        'Old stream format should have a content type field');\n    goog.asserts.assert(\n        old.mimeType != null,\n        'Old stream format should have a mime type field');\n    goog.asserts.assert(\n        old.codecs != null,\n        'Old stream format should have a codecs field');\n    goog.asserts.assert(\n        old.language != null,\n        'Old stream format should have a language field');\n    goog.asserts.assert(\n        old.encrypted != null,\n        'Old stream format should have an encrypted field');\n    goog.asserts.assert(\n        old.segments != null,\n        'Old stream format should have a segments field');\n\n\n    const getKeyFromUri =\n        shaka.offline.indexeddb.V1StorageCell.getKeyFromSegmentUri_;\n    const convertSegment =\n        shaka.offline.indexeddb.V1StorageCell.convertSegment_;\n\n    let initSegmentKey = old.initSegmentUri ?\n                      getKeyFromUri(old.initSegmentUri) :\n                      null;\n\n    return {\n      id: old.id,\n      originalId: null,\n      primary: old.primary,\n      presentationTimeOffset: old.presentationTimeOffset,\n      contentType: old.contentType,\n      mimeType: old.mimeType,\n      codecs: old.codecs,\n      frameRate: old.frameRate,\n      kind: old.kind,\n      language: old.language,\n      label: old.label,\n      width: old.width,\n      height: old.height,\n      initSegmentKey: initSegmentKey,\n      encrypted: old.encrypted,\n      keyId: old.keyId,\n      segments: old.segments.map(convertSegment),\n      variantIds: old.variantIds,\n    };\n  }\n\n  /**\n   * @param {!Object} old\n   * @return {shaka.extern.SegmentDB}\n   * @private\n   */\n  static convertSegment_(old) {\n    // Old Segment Format\n    // {\n    //   startTime: number,\n    //   endTime: number,\n    //   uri: string\n    // }\n\n    goog.asserts.assert(\n        old.startTime != null,\n        'The old segment format should have a start time field');\n    goog.asserts.assert(\n        old.endTime != null,\n        'The old segment format should have an end time field');\n    goog.asserts.assert(\n        old.uri != null,\n        'The old segment format should have a uri field');\n\n    const V1StorageCell = shaka.offline.indexeddb.V1StorageCell;\n    const getKeyFromUri = V1StorageCell.getKeyFromSegmentUri_;\n\n    // Since we don't want to use the uri anymore, we need to parse the key\n    // from it.\n    let dataKey = getKeyFromUri(old.uri);\n\n    return {\n      startTime: old.startTime,\n      endTime: old.endTime,\n      dataKey: dataKey,\n    };\n  }\n\n  /**\n   * @param {!Object} old\n   * @return {shaka.extern.SegmentDataDB}\n   * @private\n   */\n  static convertSegmentData_(old) {\n    // Old Segment Format:\n    // {\n    //   key: number,\n    //   data: ArrayBuffer\n    // }\n\n    goog.asserts.assert(\n        old.key != null,\n        'The old segment data format should have a key field');\n    goog.asserts.assert(\n        old.data != null,\n        'The old segment data format should have a data field');\n\n    return {data: old.data};\n  }\n\n  /**\n   * @param {string} uri\n   * @return {number}\n   * @private\n   */\n  static getKeyFromSegmentUri_(uri) {\n    let parts = null;\n\n    // Try parsing the uri as the original Shaka Player 2.0 uri.\n    parts = /^offline:[0-9]+\\/[0-9]+\\/([0-9]+)$/.exec(uri);\n    if (parts) {\n      return Number(parts[1]);\n    }\n\n    // Just before Shaka Player 2.3 the uri format was changed to remove some\n    // of the un-used information from the uri and make the segment uri and\n    // manifest uri follow a similar format. However the old storage system\n    // was still in place, so it is possible for Storage V1 Cells to have\n    // Storage V2 uris.\n    parts = /^offline:segment\\/([0-9]+)$/.exec(uri);\n    if (parts) {\n      return Number(parts[1]);\n    }\n\n    throw new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.STORAGE,\n        shaka.util.Error.Code.MALFORMED_OFFLINE_URI,\n        'Could not parse uri ' + uri);\n  }\n\n  /**\n   * Take a period and check if the streams need to have variants generated.\n   * Before Shaka Player moved to its variants model, there were no variants.\n   * This will fill missing variants into the given object.\n   *\n   * @param {!Object} period\n   * @private\n   */\n  static fillMissingVariants_(period) {\n    const AUDIO = shaka.util.ManifestParserUtils.ContentType.AUDIO;\n    const VIDEO = shaka.util.ManifestParserUtils.ContentType.VIDEO;\n\n    // There are three cases:\n    //  1. All streams' variant ids are null\n    //  2. All streams' variant ids are non-null\n    //  3. Some streams' variant ids are null and other are non-null\n    // Case 3 is invalid and should never happen in production.\n\n    let audio = period.streams.filter((s) => s.contentType == AUDIO);\n    let video = period.streams.filter((s) => s.contentType == VIDEO);\n\n    // Case 2 - There is nothing we need to do, so let's just get out of here.\n    if (audio.every((s) => s.variantIds) && video.every((s) => s.variantIds)) {\n      return;\n    }\n\n    // Case 3... We don't want to be in case three.\n    goog.asserts.assert(\n        audio.every((s) => !s.variantIds),\n        'Some audio streams have variant ids and some do not.');\n    goog.asserts.assert(\n        video.every((s) => !s.variantIds),\n        'Some video streams have variant ids and some do not.');\n\n    // Case 1 - Populate all the variant ids (putting us back to case 2).\n    // Since all the variant ids are null, we need to first make them into\n    // valid arrays.\n    audio.forEach((s) => { s.variantIds = []; });\n    video.forEach((s) => { s.variantIds = []; });\n\n    let nextId = 0;\n\n    // It is not possible in Shaka Player's pre-variant world to have audio-only\n    // and video-only content mixed in with audio-video content. So we can\n    // assume that there is only audio-only or video-only if one group is empty.\n\n    // Everything is video-only content - so each video stream gets to be its\n    // own variant.\n    if (video.length && !audio.length) {\n      shaka.log.debug('Found video-only content. Creating variants for video.');\n      let variantId = nextId++;\n      video.forEach((s) => { s.variantIds.push(variantId); });\n    }\n\n    // Everything is audio-only content - so each audio stream gets to be its\n    // own variant.\n    if (!video.length && audio.length) {\n      shaka.log.debug('Found audio-only content. Creating variants for audio.');\n      let variantId = nextId++;\n      audio.forEach((s) => { s.variantIds.push(variantId); });\n    }\n\n    // Everything is audio-video content.\n    if (video.length && audio.length) {\n      shaka.log.debug('Found audio-video content. Creating variants.');\n      audio.forEach((a) => {\n        video.forEach((v) => {\n          let variantId = nextId++;\n          a.variantIds.push(variantId);\n          v.variantIds.push(variantId);\n        });\n      });\n    }\n  }\n};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.offline.indexeddb.V2StorageCell');\n\ngoog.require('shaka.offline.indexeddb.DBConnection');\ngoog.require('shaka.util.Error');\n\n\n/**\n * The V2StorageCell is for all stores that follow the shaka.externs V2 offline\n * types. This storage cell will work for both IndexedDB version 2 and 3 as\n * both used the shaka.externs V2 offline types.\n *\n * @implements {shaka.extern.StorageCell}\n */\nshaka.offline.indexeddb.V2StorageCell = class {\n  /**\n   * @param {IDBDatabase} connection\n   * @param {string} segmentStore\n   * @param {string} manifestStore\n   * @param {boolean} isFixedKey\n   */\n  constructor(connection,\n              segmentStore,\n              manifestStore,\n              isFixedKey) {\n    /** @private {!shaka.offline.indexeddb.DBConnection} */\n    this.connection_ = new shaka.offline.indexeddb.DBConnection(connection);\n\n    /** @private {string} */\n    this.segmentStore_ = segmentStore;\n    /** @private {string} */\n    this.manifestStore_ = manifestStore;\n\n    /** @private {boolean} */\n    this.isFixedKey_ = isFixedKey;\n  }\n\n  /**\n   * @override\n   */\n  destroy() { return this.connection_.destroy(); }\n\n  /**\n   * @override\n   */\n  hasFixedKeySpace() { return this.isFixedKey_; }\n\n  /**\n   * @override\n   */\n  addSegments(segments) { return this.add_(this.segmentStore_, segments); }\n\n  /**\n   * @override\n   */\n  removeSegments(keys, onRemove) {\n    return this.remove_(this.segmentStore_, keys, onRemove);\n  }\n\n  /**\n   * @override\n   */\n  getSegments(keys) { return this.get_(this.segmentStore_, keys); }\n\n  /**\n   * @override\n   */\n  addManifests(manifests) { return this.add_(this.manifestStore_, manifests); }\n\n  /**\n   * @override\n   */\n  updateManifestExpiration(key, newExpiration) {\n    let op = this.connection_.startReadWriteOperation(this.manifestStore_);\n    let store = op.store();\n    store.get(key).onsuccess = (e) => {\n      let found = e.target.result;\n      // If we can't find the value, then there is nothing for us to update.\n      if (found) {\n        found.expiration = newExpiration;\n        store.put(found, key);\n      }\n    };\n\n    return op.promise();\n  }\n\n  /**\n   * @override\n   */\n  removeManifests(keys, onRemove) {\n    return this.remove_(this.manifestStore_, keys, onRemove);\n  }\n\n  /**\n   * @override\n   */\n  getManifests(keys) { return this.get_(this.manifestStore_, keys); }\n\n  /**\n   * @override\n   */\n  getAllManifests() {\n    let op = this.connection_.startReadOnlyOperation(this.manifestStore_);\n    let store = op.store();\n\n    let values = {};\n\n    store.openCursor().onsuccess = (event) => {\n      // When we reach the end of the data that the cursor is iterating\n      // over, |event.target.result| will be null to signal the end of the\n      // iteration.\n      // https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor/continue\n      let cursor = event.target.result;\n      if (!cursor) {\n        return;\n      }\n\n      values[cursor.key] = cursor.value;\n\n      // Go to the next item in the store, which will cause |onsuccess| to be\n      // called again.\n      cursor.continue();\n    };\n\n    // Wait until the operation completes or else values may be missing from\n    // |values|.\n    return op.promise().then(() => values);\n  }\n\n  /**\n   * @param {string} storeName\n   * @param {!Array.<T>} values\n   * @return {!Promise.<!Array.<number>>}\n   * @template T\n   * @private\n   */\n  add_(storeName, values) {\n    // In the case that this storage cell does not support add-operations, just\n    // reject the request immediately instead of allowing it to try.\n    if (this.isFixedKey_) {\n      return Promise.reject(new shaka.util.Error(\n        shaka.util.Error.Severity.RECOVERABLE,\n        shaka.util.Error.Category.STORAGE,\n        shaka.util.Error.Code.NEW_KEY_OPERATION_NOT_SUPPORTED,\n        'Cannot add new value to ' + storeName));\n    }\n\n    let op = this.connection_.startReadWriteOperation(storeName);\n    let store = op.store();\n\n    /** @type {!Array.<number>} */\n    let keys = [];\n\n    // Write each segment out. When each request completes, the key will\n    // be in |event.target.result| as can be seen in\n    // https://w3c.github.io/IndexedDB/#key-generator-construct.\n    values.forEach((value) => {\n      let request = store.add(value);\n      request.onsuccess = (event) => {\n        let key = event.target.result;\n        keys.push(key);\n      };\n    });\n\n    // Wait until the operation completes or else |keys| will not be fully\n    // populated.\n    return op.promise().then(() => keys);\n  }\n\n  /**\n   * @param {string} storeName\n   * @param {!Array.<number>} keys\n   * @param {function(number)} onRemove\n   * @return {!Promise}\n   * @private\n   */\n  remove_(storeName, keys, onRemove) {\n    let op = this.connection_.startReadWriteOperation(storeName);\n    let store = op.store();\n\n    keys.forEach((key) => {\n      store.delete(key).onsuccess = () => onRemove(key);\n    });\n\n    return op.promise();\n  }\n\n  /**\n   * @param {string} storeName\n   * @param {!Array.<number>} keys\n   * @return {!Promise.<!Array.<T>>}\n   * @template T\n   * @private\n   */\n  get_(storeName, keys) {\n    let op = this.connection_.startReadOnlyOperation(storeName);\n    let store = op.store();\n\n    let values = {};\n    let missing = [];\n\n    // Use a map to store the objects so that we can reorder the results to\n    // match the order of |keys|.\n    keys.forEach((key) => {\n      let request = store.get(key);\n      request.onsuccess = () => {\n        // Make sure a defined value was found. Indexeddb treats no-value found\n        // as a success with an undefined result.\n        if (request.result == undefined) {\n          missing.push(key);\n        }\n\n        values[key] = request.result;\n      };\n    });\n\n    // Wait until the operation completes or else values may be missing from\n    // |values|. Use the original key list to convert the map to a list so that\n    // the order will match.\n    return op.promise().then(() => {\n      if (missing.length) {\n        return Promise.reject(new shaka.util.Error(\n            shaka.util.Error.Severity.RECOVERABLE,\n            shaka.util.Error.Category.STORAGE,\n            shaka.util.Error.Code.KEY_NOT_FOUND,\n            'Could not find values for ' + missing\n        ));\n      }\n\n      return keys.map((key) => values[key]);\n    });\n  }\n};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.offline.indexeddb.StorageMechanism');\n\ngoog.require('shaka.log');\ngoog.require('shaka.offline.StorageMuxer');\ngoog.require('shaka.offline.indexeddb.V1StorageCell');\ngoog.require('shaka.offline.indexeddb.V2StorageCell');\ngoog.require('shaka.util.Error');\ngoog.require('shaka.util.PublicPromise');\n\n\n/**\n * A storage mechanism to manage storage cells for an indexed db instance.\n * The cells are just for interacting with the stores that are found in the\n * database instance. The mechanism is responsible for creating new stores\n * when opening the database. If the database is too old of a version, a\n * cell will be added for the old stores but the cell won't support add\n * operations. The mechanism will create the new versions of the stores and\n * will allow add operations for those stores.\n *\n * @implements {shaka.extern.StorageMechanism}\n */\nshaka.offline.indexeddb.StorageMechanism = class {\n  constructor() {\n    /** @private {IDBDatabase} */\n    this.db_ = null;\n\n    /** @private {shaka.extern.StorageCell} */\n    this.v1_ = null;\n    /** @private {shaka.extern.StorageCell} */\n    this.v2_ = null;\n    /** @private {shaka.extern.StorageCell} */\n    this.v3_ = null;\n  }\n\n  /**\n   * @override\n   */\n  init() {\n    const name = shaka.offline.indexeddb.StorageMechanism.DB_NAME;\n    const version = shaka.offline.indexeddb.StorageMechanism.VERSION;\n\n    let p = new shaka.util.PublicPromise();\n    let open = window.indexedDB.open(name, version);\n    open.onsuccess = (event) => {\n      let db = event.target.result;\n      this.db_ = db;\n      this.v1_ = shaka.offline.indexeddb.StorageMechanism.createV1_(db);\n      this.v2_ = shaka.offline.indexeddb.StorageMechanism.createV2_(db);\n      this.v3_ = shaka.offline.indexeddb.StorageMechanism.createV3_(db);\n      p.resolve();\n    };\n    open.onupgradeneeded = (event) => {\n      // Add object stores for the latest version only.\n      this.createStores_(event.target.result);\n    };\n    open.onerror = (event) => {\n      p.reject(new shaka.util.Error(\n          shaka.util.Error.Severity.CRITICAL,\n          shaka.util.Error.Category.STORAGE,\n          shaka.util.Error.Code.INDEXED_DB_ERROR,\n          open.error));\n\n      // Firefox will raise an error on the main thread unless we stop it here.\n      event.preventDefault();\n    };\n\n    return p;\n  }\n\n  /**\n   * @override\n   */\n  async destroy() {\n    if (this.v1_) { await this.v1_.destroy(); }\n    if (this.v2_) { await this.v2_.destroy(); }\n    if (this.v3_) { await this.v3_.destroy(); }\n\n    // If we were never initialized, then |db_| will still be null.\n    if (this.db_) { this.db_.close(); }\n  }\n\n  /**\n   * @override\n   */\n  getCells() {\n    let map = {};\n\n    if (this.v1_) { map['v1'] = this.v1_; }\n    if (this.v2_) { map['v2'] = this.v2_; }\n    if (this.v3_) { map['v3'] = this.v3_; }\n\n    return map;\n  }\n\n  /**\n   * @override\n   */\n  async erase() {\n    // Not all cells may have been created, so only destroy the ones that\n    // were created.\n    if (this.v1_) { await this.v1_.destroy(); }\n    if (this.v2_) { await this.v2_.destroy(); }\n    if (this.v3_) { await this.v3_.destroy(); }\n\n    // |db_| will only be null if the muxer was not initialized. We need to\n    // close the connection in order delete the database without it being\n    // blocked.\n    if (this.db_) { this.db_.close(); }\n\n    await shaka.offline.indexeddb.StorageMechanism.deleteAll_();\n\n    // Reset before initializing.\n    this.db_ = null;\n    this.v1_ = null;\n    this.v2_ = null;\n    this.v3_ = null;\n\n    await this.init();\n  }\n\n  /**\n   * @param {!IDBDatabase} db\n   * @return {shaka.extern.StorageCell}\n   * @private\n   */\n  static createV1_(db) {\n    const StorageMechanism = shaka.offline.indexeddb.StorageMechanism;\n    const segmentStore = StorageMechanism.V1_SEGMENT_STORE;\n    const manifestStore = StorageMechanism.V1_MANIFEST_STORE;\n    const stores = db.objectStoreNames;\n    if (stores.contains(manifestStore) && stores.contains(segmentStore)) {\n      shaka.log.debug('Mounting v1 idb storage cell');\n\n      return new shaka.offline.indexeddb.V1StorageCell(\n          db,\n          segmentStore,\n          manifestStore);\n    }\n    return null;\n  }\n\n  /**\n   * @param {!IDBDatabase} db\n   * @return {shaka.extern.StorageCell}\n   * @private\n   */\n  static createV2_(db) {\n    const StorageMechanism = shaka.offline.indexeddb.StorageMechanism;\n    const segmentStore = StorageMechanism.V2_SEGMENT_STORE;\n    const manifestStore = StorageMechanism.V2_MANIFEST_STORE;\n    const stores = db.objectStoreNames;\n    if (stores.contains(manifestStore) && stores.contains(segmentStore)) {\n      shaka.log.debug('Mounting v2 idb storage cell');\n\n      return new shaka.offline.indexeddb.V2StorageCell(\n          db,\n          segmentStore,\n          manifestStore,\n          true);  // Are keys locked? Yes, this means no new additions.\n    }\n    return null;\n  }\n\n  /**\n   * @param {!IDBDatabase} db\n   * @return {shaka.extern.StorageCell}\n   * @private\n   */\n  static createV3_(db) {\n    const StorageMechanism = shaka.offline.indexeddb.StorageMechanism;\n    const segmentStore = StorageMechanism.V3_SEGMENT_STORE;\n    const manifestStore = StorageMechanism.V3_MANIFEST_STORE;\n    const stores = db.objectStoreNames;\n    if (stores.contains(manifestStore) && stores.contains(segmentStore)) {\n      shaka.log.debug('Mounting v3 idb storage cell');\n\n      // Version 3 uses the same structure as version 2, so we can use the same\n      // cells but it can support new entries.\n      return new shaka.offline.indexeddb.V2StorageCell(\n          db,\n          segmentStore,\n          manifestStore,\n          false); // Are keys locked? No, this means we can add new entries.\n    }\n    return null;\n  }\n\n  /**\n   * @param {!IDBDatabase} db\n   * @private\n   */\n  createStores_(db) {\n    const segmentStore =\n        shaka.offline.indexeddb.StorageMechanism.V3_SEGMENT_STORE;\n    const manifestStore =\n        shaka.offline.indexeddb.StorageMechanism.V3_MANIFEST_STORE;\n\n    const storeSettings = {autoIncrement: true};\n\n    db.createObjectStore(manifestStore, storeSettings);\n    db.createObjectStore(segmentStore, storeSettings);\n  }\n\n  /**\n   * Delete the indexed db instance so that all stores are deleted and cleared.\n   * This will force the database to a like-new state next time it opens.\n   *\n   * @return {!Promise}\n   * @private\n   */\n  static deleteAll_() {\n    const name = shaka.offline.indexeddb.StorageMechanism.DB_NAME;\n\n    let p = new shaka.util.PublicPromise();\n\n    let del = window.indexedDB.deleteDatabase(name);\n    del.onblocked = (event) => {\n      shaka.log.warning('Deleting', name, 'is being blocked');\n    };\n    del.onsuccess = (event) => {\n      p.resolve();\n    };\n    del.onerror = (event) => {\n      p.reject(new shaka.util.Error(\n          shaka.util.Error.Severity.CRITICAL,\n          shaka.util.Error.Category.STORAGE,\n          shaka.util.Error.Code.INDEXED_DB_ERROR,\n          del.error));\n\n      // Firefox will raise an error on the main thread unless we stop it here.\n      event.preventDefault();\n    };\n\n    return p;\n  }\n};\n\n/** @const {string} */\nshaka.offline.indexeddb.StorageMechanism.DB_NAME = 'shaka_offline_db';\n/** @const {number} */\nshaka.offline.indexeddb.StorageMechanism.VERSION = 3;\n/** @const {string} */\nshaka.offline.indexeddb.StorageMechanism.V1_SEGMENT_STORE = 'segment';\n/** @const {string} */\nshaka.offline.indexeddb.StorageMechanism.V2_SEGMENT_STORE = 'segment-v2';\n/** @const {string} */\nshaka.offline.indexeddb.StorageMechanism.V3_SEGMENT_STORE = 'segment-v3';\n/** @const {string} */\nshaka.offline.indexeddb.StorageMechanism.V1_MANIFEST_STORE = 'manifest';\n/** @const {string} */\nshaka.offline.indexeddb.StorageMechanism.V2_MANIFEST_STORE = 'manifest-v2';\n/** @const {string} */\nshaka.offline.indexeddb.StorageMechanism.V3_MANIFEST_STORE = 'manifest-v3';\n\n\n// Since this may be called before the polyfills remove indexeddb support from\n// some platforms (looking at you Chromecast), we need to check for support\n// when we create the mechanism.\n//\n// Thankfully the storage muxer api allows us to return a null mechanism\n// to indicate that the mechanism is not supported on this platform.\nshaka.offline.StorageMuxer.register(\n    'idb',\n    () => {\n      return window.indexedDB ?\n              new shaka.offline.indexeddb.StorageMechanism() :\n              null;\n    });\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.offline.OfflineUri');\n\n\n/**\n * The OfflineUri class contains all the components that make up the offline\n * uri. The components are:\n *    TYPE: Used to know what type of data the uri points to. It can either\n *          be \"manifest\" or \"segment\".\n *    MECHANISM: The name of the mechanism that manages the storage cell that\n *               holds the data.\n *    CELL: The name of the cell that holds the data.\n *    KEY: The key that the data is stored under in the cell.\n */\nshaka.offline.OfflineUri = class {\n  /**\n   * @param {string} type\n   * @param {string} mechanism\n   * @param {string} cell\n   * @param {number} key\n   */\n  constructor(type, mechanism, cell, key) {\n    /**\n     * @private {string}\n     * @const\n     */\n    this.type_ = type;\n    /**\n     * @private {string}\n     * @const\n     */\n    this.mechanism_ = mechanism;\n    /**\n     * @private {string}\n     * @const\n     */\n    this.cell_ = cell;\n    /**\n     * @private {number}\n     * @const\n     */\n    this.key_ = key;\n\n    /**\n     * @private {string}\n     * @const\n     */\n    this.asString_ = [\n      'offline:', type, '/', mechanism, '/', cell, '/', key,\n    ].join('');\n  }\n\n  /** @return {boolean} */\n  isManifest() { return this.type_ == 'manifest'; }\n\n  /** @return {boolean} */\n  isSegment() { return this.type_ == 'segment'; }\n\n  /** @return {string} */\n  mechanism() { return this.mechanism_; }\n\n  /** @return {string} */\n  cell() { return this.cell_; }\n\n  /** @return {number} */\n  key() { return this.key_; }\n\n  /** @override */\n  toString() { return this.asString_; }\n\n  /**\n   * @param {string} uri\n   * @return {?shaka.offline.OfflineUri}\n   */\n  static parse(uri) {\n    let parts = /^offline:([a-z]+)\\/([^/]+)\\/([^/]+)\\/([0-9]+)$/.exec(uri);\n    if (parts == null) { return null; }\n\n    let type = parts[1];\n    if (type != 'manifest' && type != 'segment') { return null; }\n\n    let mechanism = parts[2];\n    if (!mechanism) { return null; }\n\n    let cell = parts[3];\n    if (!cell) { return null; }\n\n    let key = Number(parts[4]);\n    if (type == null) { return null; }\n\n    return new shaka.offline.OfflineUri(type, mechanism, cell, key);\n  }\n\n  /**\n   * @param {string} mechanism\n   * @param {string} cell\n   * @param {number} key\n   * @return {!shaka.offline.OfflineUri}\n   */\n  static manifest(mechanism, cell, key) {\n    return new shaka.offline.OfflineUri('manifest', mechanism, cell, key);\n  }\n\n  /**\n   * @param {string} mechanism\n   * @param {string} cell\n   * @param {number} key\n   * @return {!shaka.offline.OfflineUri}\n   */\n  static segment(mechanism, cell, key) {\n    return new shaka.offline.OfflineUri('segment', mechanism, cell, key);\n  }\n};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.offline.ManifestConverter');\n\ngoog.require('goog.asserts');\ngoog.require('shaka.media.InitSegmentReference');\ngoog.require('shaka.media.PresentationTimeline');\ngoog.require('shaka.media.SegmentIndex');\ngoog.require('shaka.media.SegmentReference');\ngoog.require('shaka.offline.OfflineUri');\ngoog.require('shaka.util.ManifestParserUtils');\ngoog.require('shaka.util.MapUtils');\n\n\n/**\n * Utility class for converting database manifest objects back to normal\n * player-ready objects. Used by the offline system to convert on-disk\n * objects back to the in-memory objects.\n */\nshaka.offline.ManifestConverter = class {\n  /**\n   * Create a new manifest converter. Need to know the mechanism and cell that\n   * the manifest is from so that all segments paths can be created.\n   *\n   * @param {string} mechanism\n   * @param {string} cell\n   */\n  constructor(mechanism, cell) {\n    /** @private {string} */\n    this.mechanism_ = mechanism;\n    /** @private {string} */\n    this.cell_ = cell;\n  }\n\n  /**\n   * Convert a |shaka.extern.ManifestDB| object to a |shaka.extern.Manifest|\n   * object.\n   *\n   * @param {shaka.extern.ManifestDB} manifestDB\n   * @return {shaka.extern.Manifest}\n   */\n  fromManifestDB(manifestDB) {\n    let timeline = new shaka.media.PresentationTimeline(null, 0);\n    timeline.setDuration(manifestDB.duration);\n\n    let periods = manifestDB.periods.map((period) =>\n        this.fromPeriodDB(period, timeline));\n\n    let drmInfos = manifestDB.drmInfo ? [manifestDB.drmInfo] : [];\n    if (manifestDB.drmInfo) {\n      periods.forEach((period) => {\n        period.variants.forEach((variant) => { variant.drmInfos = drmInfos; });\n      });\n    }\n\n    return {\n      presentationTimeline: timeline,\n      minBufferTime: 2,\n      offlineSessionIds: manifestDB.sessionIds,\n      periods: periods,\n    };\n  }\n\n  /**\n   * Create a period object from a database period.\n   *\n   * @param {shaka.extern.PeriodDB} period\n   * @param {shaka.media.PresentationTimeline} timeline\n   * @return {shaka.extern.Period}\n   */\n  fromPeriodDB(period, timeline) {\n    /** @type {!Array.<shaka.extern.StreamDB>} */\n    let audioStreams = period.streams.filter((stream) => this.isAudio_(stream));\n    /** @type {!Array.<shaka.extern.StreamDB>} */\n    let videoStreams = period.streams.filter((stream) => this.isVideo_(stream));\n\n    /** @type {!Array.<shaka.extern.Variant>} */\n    let variants = this.createVariants(audioStreams, videoStreams);\n\n    /** @type {!Array.<shaka.extern.Stream>} */\n    let textStreams = period.streams\n        .filter((stream) => this.isText_(stream))\n        .map((stream) => this.fromStreamDB_(stream));\n\n    period.streams.forEach((stream, i) => {\n      /** @type {!Array.<!shaka.media.SegmentReference>} */\n      let refs = stream.segments.map((segment, index) => {\n        return this.fromSegmentDB_(index, segment);\n      });\n\n      timeline.notifySegments(refs, period.startTime);\n    });\n\n    return {\n      startTime: period.startTime,\n      variants: variants,\n      textStreams: textStreams,\n    };\n  }\n\n  /**\n   * Recreates Variants from audio and video StreamDB collections.\n   *\n   * @param {!Array.<!shaka.extern.StreamDB>} audios\n   * @param {!Array.<!shaka.extern.StreamDB>} videos\n   * @return {!Array.<!shaka.extern.Variant>}\n   */\n  createVariants(audios, videos) {\n    const MapUtils = shaka.util.MapUtils;\n\n    // Create a variant for each variant id.\n    /** @type {!Object.<number, shaka.extern.Variant>} */\n    let variantMap = {};\n\n    let allStreams = [];\n    allStreams.push.apply(allStreams, audios);\n    allStreams.push.apply(allStreams, videos);\n\n    // Create a variant for each variant id across all the streams.\n    allStreams.forEach((stream) => {\n      stream.variantIds.forEach((id) => {\n        variantMap[id] = variantMap[id] || this.createEmptyVariant_(id);\n      });\n    });\n\n    // Assign each audio stream to its variants.\n    audios.forEach((audio) => {\n      /** @type {shaka.extern.Stream} */\n      let stream = this.fromStreamDB_(audio);\n\n      audio.variantIds.forEach((id) => {\n        let variant = variantMap[id];\n\n        goog.asserts.assert(\n            !variant.audio, 'A variant should only have one audio stream');\n\n        variant.language = stream.language;\n        variant.primary = variant.primary || stream.primary;\n        variant.audio = stream;\n      });\n    });\n\n    // Assign each video stream to its variants.\n    videos.forEach((video) => {\n      /** @type {shaka.extern.Stream} */\n      let stream = this.fromStreamDB_(video);\n\n      video.variantIds.forEach((id) => {\n        let variant = variantMap[id];\n\n        goog.asserts.assert(\n            !variant.video, 'A variant should only have one video stream');\n\n        variant.primary = variant.primary || stream.primary;\n        variant.video = stream;\n      });\n    });\n\n    return MapUtils.values(variantMap);\n  }\n\n  /**\n   * @param {shaka.extern.StreamDB} streamDB\n   * @return {shaka.extern.Stream}\n   * @private\n   */\n  fromStreamDB_(streamDB) {\n    /** @type {!Array.<!shaka.media.SegmentReference>} */\n    let segments = streamDB.segments.map((segment, index) =>\n        this.fromSegmentDB_(index, segment));\n\n    /** @type {!shaka.media.SegmentIndex} */\n    let segmentIndex = new shaka.media.SegmentIndex(segments);\n\n    /** @type {shaka.extern.Stream} */\n    let stream = {\n      id: streamDB.id,\n      originalId: streamDB.originalId,\n      createSegmentIndex: () => Promise.resolve(),\n      findSegmentPosition: (index) => segmentIndex.find(index),\n      getSegmentReference: (index) => segmentIndex.get(index),\n      initSegmentReference: null,\n      presentationTimeOffset: streamDB.presentationTimeOffset,\n      mimeType: streamDB.mimeType,\n      codecs: streamDB.codecs,\n      width: streamDB.width || undefined,\n      height: streamDB.height || undefined,\n      frameRate: streamDB.frameRate || undefined,\n      kind: streamDB.kind,\n      encrypted: streamDB.encrypted,\n      keyId: streamDB.keyId,\n      language: streamDB.language,\n      label: streamDB.label || null,\n      type: streamDB.contentType,\n      primary: streamDB.primary,\n      trickModeVideo: null,\n      // TODO(modmaker): Store offline?\n      emsgSchemeIdUris: null,\n      roles: [],\n      channelsCount: null,\n      closedCaptions: {},\n    };\n\n    if (streamDB.initSegmentKey != null) {\n      stream.initSegmentReference =\n          this.fromInitSegmentDB_(streamDB.initSegmentKey);\n    }\n\n    return stream;\n  }\n\n  /**\n   * @param {number} index\n   * @param {shaka.extern.SegmentDB} segmentDB\n   * @return {!shaka.media.SegmentReference}\n   * @private\n   */\n  fromSegmentDB_(index, segmentDB) {\n    /** @type {!shaka.offline.OfflineUri} */\n    let uri = shaka.offline.OfflineUri.segment(\n        this.mechanism_, this.cell_, segmentDB.dataKey);\n\n    return new shaka.media.SegmentReference(\n        index,\n        segmentDB.startTime,\n        segmentDB.endTime,\n        () => [uri.toString()],\n        0 /* startByte */,\n        null /*  endByte */);\n  }\n\n  /**\n   * @param {number} key\n   * @return {!shaka.media.InitSegmentReference}\n   * @private\n   */\n  fromInitSegmentDB_(key) {\n    /** @type {!shaka.offline.OfflineUri} */\n    let uri = shaka.offline.OfflineUri.segment(\n        this.mechanism_, this.cell_, key);\n\n    return new shaka.media.InitSegmentReference(\n        () => [uri.toString()],\n        0 /* startBytes*/,\n        null /* endBytes */);\n  }\n\n  /**\n   * @param {shaka.extern.StreamDB} stream\n   * @return {boolean}\n   * @private\n   */\n  isAudio_(stream) {\n    const ContentType = shaka.util.ManifestParserUtils.ContentType;\n    return stream.contentType == ContentType.AUDIO;\n  }\n\n  /**\n   * @param {shaka.extern.StreamDB} stream\n   * @return {boolean}\n   * @private\n   */\n  isVideo_(stream) {\n    const ContentType = shaka.util.ManifestParserUtils.ContentType;\n    return stream.contentType == ContentType.VIDEO;\n  }\n\n  /**\n   * @param {shaka.extern.StreamDB} stream\n   * @return {boolean}\n   * @private\n   */\n  isText_(stream) {\n    const ContentType = shaka.util.ManifestParserUtils.ContentType;\n    return stream.contentType == ContentType.TEXT;\n  }\n\n  /**\n   * Creates an empty Variant.\n   *\n   * @param {number} id\n   * @return {!shaka.extern.Variant}\n   * @private\n   */\n  createEmptyVariant_(id) {\n    return {\n      id: id,\n      language: '',\n      primary: false,\n      audio: null,\n      video: null,\n      bandwidth: 0,\n      drmInfos: [],\n      allowedByApplication: true,\n      allowedByKeySystem: true,\n    };\n  }\n};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.offline.OfflineManifestParser');\n\ngoog.require('goog.asserts');\ngoog.require('shaka.log');\ngoog.require('shaka.media.ManifestParser');\ngoog.require('shaka.offline.ManifestConverter');\ngoog.require('shaka.offline.OfflineUri');\ngoog.require('shaka.offline.StorageMuxer');\ngoog.require('shaka.util.Destroyer');\ngoog.require('shaka.util.Error');\n\n\n/**\n * Creates a new offline manifest parser.\n * @struct\n * @constructor\n * @implements {shaka.extern.ManifestParser}\n */\nshaka.offline.OfflineManifestParser = function() {\n  /** @private {shaka.offline.OfflineUri} */\n  this.uri_ = null;\n};\n\n\n/** @override */\nshaka.offline.OfflineManifestParser.prototype.configure = function(config) {\n  // No-op\n};\n\n\n/** @override */\nshaka.offline.OfflineManifestParser.prototype.start =\n    function(uriString, playerInterface) {\n  let uri = shaka.offline.OfflineUri.parse(uriString);\n  this.uri_ = uri;\n\n  if (uri == null || !uri.isManifest()) {\n    return Promise.reject(new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.NETWORK,\n        shaka.util.Error.Code.MALFORMED_OFFLINE_URI,\n        uri));\n  }\n\n  let muxer = new shaka.offline.StorageMuxer();\n  return shaka.util.Destroyer.with([muxer], async () => {\n    await muxer.init();\n\n    let cell = await muxer.getCell(uri.mechanism(), uri.cell());\n\n    let manifests = await cell.getManifests([uri.key()]);\n    let manifest = manifests[0];\n\n    let converter = new shaka.offline.ManifestConverter(\n      uri.mechanism(), uri.cell());\n\n    return converter.fromManifestDB(manifest);\n  });\n};\n\n\n/** @override */\nshaka.offline.OfflineManifestParser.prototype.stop = function() {\n  return Promise.resolve();\n};\n\n\n/** @override */\nshaka.offline.OfflineManifestParser.prototype.update = function() {\n  // No-op\n};\n\n\n/** @override */\nshaka.offline.OfflineManifestParser.prototype.onExpirationUpdated = function(\n    sessionId, expiration) {\n  let uri = this.uri_;\n\n  goog.asserts.assert(\n      uri, 'Should not get update event before start has been called');\n\n  let muxer = new shaka.offline.StorageMuxer();\n  return shaka.util.Destroyer.with([muxer], async () => {\n    await muxer.init();\n\n    let cell = await muxer.getCell(uri.mechanism(), uri.cell());\n\n    let manifests = await cell.getManifests([uri.key()]);\n    let manifest = manifests[0];\n\n    let foundSession = manifest.sessionIds.indexOf(sessionId) >= 0;\n    let newExpiration = manifest.expiration == undefined ||\n                        manifest.expiration > expiration;\n\n    if (foundSession && newExpiration) {\n      shaka.log.debug('Updating expiration for stored content');\n      await cell.updateManifestExpiration(uri.key(), expiration);\n    }\n  }).catch((e) => {\n    // Ignore errors with update.\n    shaka.log.error('There was an error updating', uri, e);\n  });\n};\n\n\nshaka.media.ManifestParser.registerParserByMime(\n    'application/x-offline-manifest', shaka.offline.OfflineManifestParser);\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.offline.OfflineScheme');\n\ngoog.require('goog.asserts');\ngoog.require('shaka.net.NetworkingEngine');\ngoog.require('shaka.offline.OfflineUri');\ngoog.require('shaka.offline.StorageMuxer');\ngoog.require('shaka.util.AbortableOperation');\ngoog.require('shaka.util.Destroyer');\ngoog.require('shaka.util.Error');\n\n\n/**\n * @namespace\n * @summary A plugin that handles requests for offline content.\n * @param {string} uri\n * @param {shaka.extern.Request} request\n * @param {shaka.net.NetworkingEngine.RequestType=} requestType\n * @return {!shaka.extern.IAbortableOperation.<shaka.extern.Response>}\n * @export\n */\nshaka.offline.OfflineScheme = function(uri, request, requestType) {\n  let offlineUri = shaka.offline.OfflineUri.parse(uri);\n\n  if (offlineUri && offlineUri.isManifest()) {\n    return shaka.offline.OfflineScheme.getManifest_(uri);\n  }\n\n  if (offlineUri && offlineUri.isSegment()) {\n    return shaka.offline.OfflineScheme.getSegment_(\n        offlineUri.key(), offlineUri);\n  }\n\n  return shaka.util.AbortableOperation.failed(\n      new shaka.util.Error(\n          shaka.util.Error.Severity.CRITICAL,\n          shaka.util.Error.Category.NETWORK,\n          shaka.util.Error.Code.MALFORMED_OFFLINE_URI,\n          uri));\n};\n\n\n/**\n * @param {string} uri\n * @return {!shaka.extern.IAbortableOperation.<shaka.extern.Response>}\n * @private\n */\nshaka.offline.OfflineScheme.getManifest_ = function(uri) {\n  /** @type {shaka.extern.Response} */\n  let response = {\n    uri: uri,\n    data: new ArrayBuffer(0),\n    headers: {'content-type': 'application/x-offline-manifest'},\n  };\n\n  return shaka.util.AbortableOperation.completed(response);\n};\n\n\n/**\n * @param {number} id\n * @param {!shaka.offline.OfflineUri} uri\n * @return {!shaka.extern.IAbortableOperation.<shaka.extern.Response>}\n * @private\n */\nshaka.offline.OfflineScheme.getSegment_ = function(id, uri) {\n  goog.asserts.assert(\n      uri.isSegment(),\n      'Only segment uri\\'s should be given to getSegment');\n\n  let muxer = new shaka.offline.StorageMuxer();\n\n  let promise = shaka.util.Destroyer.with([muxer], async () => {\n    await muxer.init();\n    let cell = await muxer.getCell(uri.mechanism(), uri.cell());\n    let segments = await cell.getSegments([uri.key()]);\n    let segment = segments[0];\n    return {\n      uri: uri,\n      data: segment.data,\n      headers: {},\n    };\n  });\n\n  // TODO: Support abort() in OfflineScheme.\n  return shaka.util.AbortableOperation.notAbortable(promise);\n};\n\n\nshaka.net.NetworkingEngine.registerScheme(\n    'offline', shaka.offline.OfflineScheme);\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.text.SimpleTextDisplayer');\n\ngoog.require('goog.asserts');\ngoog.require('shaka.log');\ngoog.require('shaka.text.Cue');\ngoog.require('shaka.text.CueRegion');\ngoog.require('shaka.util.Functional');\n\n\n/**\n * <p>\n * This defines the default text displayer plugin. An instance of this\n * class is used when no custom displayer is given.\n * </p>\n * <p>\n * This class simply converts shaka.text.Cue objects to\n * TextTrackCues and feeds them to the browser.\n * </p>\n *\n * @param {HTMLMediaElement} video\n * @constructor\n * @struct\n * @implements {shaka.extern.TextDisplayer}\n * @export\n */\nshaka.text.SimpleTextDisplayer = function(video) {\n  /** @private {TextTrack} */\n  this.textTrack_ = null;\n\n  /** @private {HTMLMediaElement} */\n  this.video_ = video;\n\n  // TODO: Test that in all cases, the built-in CC controls in the video element\n  // are toggling our TextTrack.\n\n  // If the video element has TextTracks, disable them.  If we see one that\n  // was created by a previous instance of Shaka Player, reuse it.\n  for (let i = 0; i < video.textTracks.length; ++i) {\n    let track = video.textTracks[i];\n    track.mode = 'disabled';\n\n    if (track.label == shaka.text.SimpleTextDisplayer.TextTrackLabel_) {\n      this.textTrack_ = track;\n    }\n  }\n\n  if (!this.textTrack_) {\n    // As far as I can tell, there is no observable difference between setting\n    // kind to 'subtitles' or 'captions' when creating the TextTrack object.\n    // The individual text tracks from the manifest will still have their own\n    // kinds which can be displayed in the app's UI.\n    this.textTrack_ = video.addTextTrack(\n        'subtitles', shaka.text.SimpleTextDisplayer.TextTrackLabel_);\n  }\n  this.textTrack_.mode = 'hidden';\n};\n\n\n/**\n * @override\n * @export\n */\nshaka.text.SimpleTextDisplayer.prototype.remove = function(start, end) {\n  // Check that the displayer hasn't been destroyed.\n  if (!this.textTrack_) return false;\n\n  let removeInRange = (cue) => {\n    let outside = cue.startTime >= end || cue.endTime <= start;\n    let inside = !outside;\n\n    return inside;\n  };\n\n  shaka.text.SimpleTextDisplayer.removeWhere_(this.textTrack_, removeInRange);\n\n  return true;\n};\n\n\n/**\n * @override\n * @export\n */\nshaka.text.SimpleTextDisplayer.prototype.append = function(cues) {\n  const convertToVttRegion =\n      shaka.text.SimpleTextDisplayer.convertToVttRegion_;\n  const convertToTextTrackCue =\n      shaka.text.SimpleTextDisplayer.convertToTextTrackCue_;\n\n  // Convert regions.\n  let vttRegions = [];\n  if (window.VTTRegion) {\n    let regions = cues.map((cue) => cue.region);\n    regions = regions.filter(shaka.util.Functional.isNotDuplicate);\n\n    let videoWidth = this.video_.offsetWidth;\n    let videoHeight = this.video_.offsetHeight;\n\n    for (let i = 0; i < regions.length; i++) {\n      let region = convertToVttRegion(regions[i], videoWidth, videoHeight);\n      vttRegions.push(region);\n    }\n  }\n\n  // Convert cues.\n  let textTrackCues = [];\n  for (let i = 0; i < cues.length; i++) {\n    let cue = convertToTextTrackCue(cues[i], vttRegions);\n    if (cue) {\n      textTrackCues.push(cue);\n    }\n  }\n\n  // Sort the cues based on start/end times.  Make a copy of the array so\n  // we can get the index in the original ordering.  Out of order cues are\n  // rejected by IE/Edge.  See https://bit.ly/2K9VX3s\n  let sortedCues = textTrackCues.slice().sort(function(a, b) {\n    if (a.startTime != b.startTime) {\n      return a.startTime - b.startTime;\n    } else if (a.endTime != b.endTime) {\n      return a.endTime - b.startTime;\n    } else {\n      // The browser will display cues with identical time ranges from the\n      // bottom up.  Reversing the order of equal cues means the first one\n      // parsed will be at the top, as you would expect.\n      // See https://github.com/google/shaka-player/issues/848 for more info.\n      return textTrackCues.indexOf(b) - textTrackCues.indexOf(a);\n    }\n  });\n\n  sortedCues.forEach(function(cue) {\n    this.textTrack_.addCue(cue);\n  }.bind(this));\n};\n\n\n/**\n * @override\n * @export\n */\nshaka.text.SimpleTextDisplayer.prototype.destroy = function() {\n  if (this.textTrack_) {\n    let removeIt = (cue) => true;\n    shaka.text.SimpleTextDisplayer.removeWhere_(this.textTrack_, removeIt);\n  }\n\n  this.textTrack_ = null;\n  this.video_ = null;\n  return Promise.resolve();\n};\n\n\n/**\n * @override\n * @export\n */\nshaka.text.SimpleTextDisplayer.prototype.isTextVisible = function() {\n  return this.textTrack_.mode == 'showing';\n};\n\n\n/**\n * @override\n * @export\n */\nshaka.text.SimpleTextDisplayer.prototype.setTextVisibility = function(on) {\n  this.textTrack_.mode = on ? 'showing' : 'hidden';\n};\n\n\n/**\n * @param {!shaka.extern.Cue} shakaCue\n * @param {!Array.<!VTTRegion>} regions\n * @return {TextTrackCue}\n * @private\n */\nshaka.text.SimpleTextDisplayer.convertToTextTrackCue_ =\n    function(shakaCue, regions) {\n  if (shakaCue.startTime >= shakaCue.endTime) {\n    // IE/Edge will throw in this case.\n    // See issue #501\n    shaka.log.warning('Invalid cue times: ' + shakaCue.startTime +\n                      ' - ' + shakaCue.endTime);\n    return null;\n  }\n\n  const Cue = shaka.text.Cue;\n  /** @type {VTTCue} */\n  let vttCue = new VTTCue(shakaCue.startTime,\n                          shakaCue.endTime,\n                          shakaCue.payload);\n\n  // NOTE: positionAlign and lineAlign settings are not supported by Chrome\n  // at the moment, so setting them will have no effect.\n  // The bug on chromium to implement them:\n  // https://bugs.chromium.org/p/chromium/issues/detail?id=633690\n\n  vttCue.lineAlign = shakaCue.lineAlign;\n  vttCue.positionAlign = shakaCue.positionAlign;\n  vttCue.size = shakaCue.size;\n  try {\n    // Safari 10 seems to throw on align='center'.\n    vttCue.align = shakaCue.textAlign;\n  } catch (exception) {}\n\n  if (shakaCue.textAlign == 'center' && vttCue.align != 'center') {\n    // We want vttCue.position = 'auto'. By default, |position| is set to\n    // \"auto\". If we set it to \"auto\" safari will throw an exception, so we\n    // must rely on the default value.\n    vttCue.align = 'middle';\n  }\n\n  if (shakaCue.writingDirection ==\n          Cue.writingDirection.VERTICAL_LEFT_TO_RIGHT) {\n    vttCue.vertical = 'lr';\n  } else if (shakaCue.writingDirection ==\n           Cue.writingDirection.VERTICAL_RIGHT_TO_LEFT) {\n    vttCue.vertical = 'rl';\n  }\n\n  // snapToLines flag is true by default\n  if (shakaCue.lineInterpretation == Cue.lineInterpretation.PERCENTAGE) {\n    vttCue.snapToLines = false;\n  }\n\n  if (shakaCue.line != null) {\n    vttCue.line = shakaCue.line;\n  }\n\n  if (shakaCue.position != null) {\n    vttCue.position = shakaCue.position;\n  }\n\n  if (shakaCue.region.id.length) {\n    let regionsWithId =\n      regions.filter((reg) => reg.id == shakaCue.region.id);\n\n    if (regionsWithId.length) {\n      vttCue.region = regionsWithId[0];\n    }\n  }\n\n  return vttCue;\n};\n\n\n/**\n * @param {!shaka.extern.CueRegion} shakaRegion\n * @param {number} videoWidth\n * @param {number} videoHeight\n * @return {VTTRegion}\n * @private\n */\nshaka.text.SimpleTextDisplayer.convertToVttRegion_ =\n    function(shakaRegion, videoWidth, videoHeight) {\n  goog.asserts.assert(window.VTTRegion != null,\n                      'VTTRegions should be supported!');\n\n  let region = new VTTRegion();\n  const CueRegion = shaka.text.CueRegion;\n\n  region.id = shakaRegion.id;\n  region.regionAnchorX = shakaRegion.regionAnchorX;\n  region.regionAnchorY = shakaRegion.regionAnchorY;\n  region.scroll = shakaRegion.scroll;\n  if (shakaRegion.heightUnits == CueRegion.units.LINES) {\n    // VTTRegion only supports height in lines via the 'lines' property.\n    region.lines = shakaRegion.height;\n  }\n\n  goog.asserts.assert(shakaRegion.widthUnits != CueRegion.units.LINES,\n                      'Width should be set either in percentage or pixels!');\n\n  if (shakaRegion.widthUnits == CueRegion.units.PX) {\n    // VTTRegion expects the values to be given in percentage of the video\n    // height and width.\n    region.width = shakaRegion.width * 100 / videoWidth;\n  } else {\n    region.width = shakaRegion.width;\n  }\n\n  goog.asserts.assert(shakaRegion.viewportAnchorUnits != CueRegion.units.LINES,\n                      'Anchors should be set either in percentage or pixels!');\n  if (shakaRegion.viewportAnchorUnits == CueRegion.units.PX) {\n    // VTTRegion expects the values to be given in percentage of the video\n    // height and width.\n    region.viewportAnchorX =\n              shakaRegion.viewportAnchorX * 100 / videoWidth;\n    region.viewportAnchorY =\n              shakaRegion.viewportAnchorY * 100 / videoHeight;\n  } else {\n    region.viewportAnchorX = shakaRegion.viewportAnchorX;\n    region.viewportAnchorY = shakaRegion.viewportAnchorY;\n  }\n\n  return region;\n};\n\n\n/**\n * Iterate over all the cues in a text track and remove all those for which\n * |predicate(cue)| returns true.\n *\n * @param {!TextTrack} track\n * @param {function(!TextTrackCue):boolean} predicate\n * @private\n */\nshaka.text.SimpleTextDisplayer.removeWhere_ = function(track, predicate) {\n  // Since |track.cues| can be null if |track.mode| is \"disabled\", force it to\n  // something other than \"disabled\".\n  //\n  // If the track is already showing, then we should keep it as showing. But if\n  // it something else, we will use hidden so that we don't \"flash\" cues on the\n  // screen.\n  let oldState = track.mode;\n  let tempState = oldState == 'showing' ? 'showing' : 'hidden';\n\n  track.mode = tempState;\n\n  goog.asserts.assert(\n      track.cues,\n      'Cues should be accessible when mode is set to \"' + tempState + '\".');\n\n  // Go backward so that if a removal is done, it should not cause problems\n  // with future indexing. In the case that the underlying implementation\n  // returns a copy (and not a shared instance) cache a copy of the tracks.\n  let cues = track.cues;\n  for (let i = cues.length - 1; i >= 0; i--) {\n    let cue = cues[i];\n    if (cue && predicate(cue)) {\n      track.removeCue(cue);\n    }\n  }\n\n  track.mode = oldState;\n};\n\n\n/**\n * @const {string}\n * @private\n */\nshaka.text.SimpleTextDisplayer.TextTrackLabel_ = 'Shaka Player TextTrack';\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.util.ConfigUtils');\n\ngoog.require('goog.asserts');\ngoog.require('shaka.log');\n\n\n/**\n * @param {!Object} destination\n * @param {!Object} source\n * @param {!Object} template supplies default values\n * @param {!Object} overrides\n *   Supplies override type checking.  When the current path matches the key in\n *   this object, each sub-value must match the type in this object.  If this\n *   contains an Object, it is used as the template.\n * @param {string} path to this part of the config\n * @return {boolean}\n */\nshaka.util.ConfigUtils.mergeConfigObjects =\n    function(destination, source, template, overrides, path) {\n  goog.asserts.assert(destination, 'Destination config must not be null!');\n\n  /**\n   * @type {boolean}\n   * If true, don't validate the keys in the next level.\n   */\n  let ignoreKeys = path in overrides;\n\n  let isValid = true;\n\n  for (let k in source) {\n    let subPath = path + '.' + k;\n    let subTemplate = ignoreKeys ? overrides[path] : template[k];\n\n    // The order of these checks is important.\n    if (!ignoreKeys && !(k in destination)) {\n      shaka.log.error('Invalid config, unrecognized key ' + subPath);\n      isValid = false;\n    } else if (source[k] === undefined) {\n      // An explicit 'undefined' value causes the key to be deleted from the\n      // destination config and replaced with a default from the template if\n      // possible.\n      if (subTemplate === undefined || ignoreKeys) {\n        // There is nothing in the template, so delete.\n        delete destination[k];\n      } else {\n        // There is something in the template, so go back to that.\n        destination[k] = subTemplate;\n      }\n    } else if (subTemplate.constructor == Object &&\n               source[k] &&\n               source[k].constructor == Object) {\n      // These are plain Objects with no other constructor.\n\n      if (!destination[k]) {\n        // The only way we should see a null destination is when ignoreKeys is\n        // true, so assert that it is.\n        goog.asserts.assert(ignoreKeys, 'Null destination without ignoreKeys!');\n        // Initialize the destination with the template so that normal merging\n        // and type-checking can happen.\n        destination[k] = subTemplate;\n      }\n\n      let subMergeValid = shaka.util.ConfigUtils.mergeConfigObjects(\n          destination[k], source[k], subTemplate, overrides, subPath);\n      isValid = isValid && subMergeValid;\n    } else if (typeof source[k] != typeof subTemplate ||\n               source[k] == null ||\n               source[k].constructor != subTemplate.constructor) {\n      // The source is the wrong type.  This check allows objects to be nulled,\n      // but does not allow null for any non-object fields.\n      shaka.log.error('Invalid config, wrong type for ' + subPath);\n      isValid = false;\n    } else if (typeof destination[k] == 'function' &&\n               destination[k].length != source[k].length) {\n      shaka.log.warning(\n          'Invalid config, wrong number of arguments for ' + subPath);\n      destination[k] = source[k];\n    } else {\n      destination[k] = source[k];\n    }\n  }\n\n  return isValid;\n};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.util.PlayerConfiguration');\n\ngoog.require('shaka.abr.SimpleAbrManager');\n\n\n// TODO(vaage): Many times in our configs, we need to create an empty\n//  implementation of a method, but to avoid closure from removing unused\n//  parameters (and breaking our merge config code) we need to use each\n//  parameter. Is there a better solution to this problem than what we are\n//  doing now?\n//\n//  NOTE: Chrome App Content Security Policy prohibits usage of new Function()\n\n/**\n * @final\n */\nshaka.util.PlayerConfiguration = class {\n  /** @return {shaka.extern.PlayerConfiguration} */\n  static createDefault() {\n    // This is a relatively safe default, since 3G cell connections\n    // are faster than this.  For slower connections, such as 2G,\n    // the default estimate may be too high.\n    let bandwidthEstimate = 500e3; // 500kbps\n\n    let abrMaxHeight = Infinity;\n\n    // Some browsers implement the Network Information API, which allows\n    // retrieving information about a user's network connection.\n    //\n    // We are excluding connection.type == undefined to avoid getting bogus data\n    // on platforms where the implementation is incomplete.  Currently, desktop\n    // Chrome 64 returns connection type undefined and a bogus downlink value.\n    if (navigator.connection && navigator.connection.type) {\n      // If it's available, get the bandwidth estimate from the browser (in\n      // megabits per second) and use it as defaultBandwidthEstimate.\n      bandwidthEstimate = navigator.connection.downlink * 1e6;\n      // TODO: Move this into AbrManager, where changes to the estimate can be\n      // observed and absorbed.\n\n      // If the user has checked a box in the browser to ask it to use less\n      // data, the browser will expose this intent via connection.saveData.\n      // When that is true, we will default the max ABR height to 360p. Apps\n      // can override this if they wish.\n      //\n      // The decision to use 360p was somewhat arbitrary. We needed a default\n      // limit, and rather than restrict to a certain bandwidth, we decided to\n      // restrict resolution. This will implicitly restrict bandwidth and\n      // therefore save data. We (Shaka+Chrome) judged that:\n      //   - HD would be inappropriate\n      //   - If a user is asking their browser to save data, 360p it reasonable\n      //   - 360p would not look terrible on small mobile device screen\n      // We also found that:\n      //   - YouTube's website on mobile defaults to 360p (as of 2018)\n      //   - iPhone 6, in portrait mode, has a physical resolution big enough\n      //     for 360p widescreen, but a little smaller than 480p widescreen\n      //     (https://apple.co/2yze4es)\n      // If the content's lowest resolution is above 360p, AbrManager will use\n      // the lowest resolution.\n      if (navigator.connection.saveData) {\n        abrMaxHeight = 360;\n      }\n    }\n\n    const drm = {\n      retryParameters: shaka.net.NetworkingEngine.defaultRetryParameters(),\n      // These will all be verified by special cases in mergeConfigObjects_():\n      servers: {},    // key is arbitrary key system ID, value must be string\n      clearKeys: {},  // key is arbitrary key system ID, value must be string\n      advanced: {},    // key is arbitrary key system ID, value is a record type\n      delayLicenseRequestUntilPlayed: false,\n    };\n\n    const manifest = {\n      retryParameters: shaka.net.NetworkingEngine.defaultRetryParameters(),\n      availabilityWindowOverride: NaN,\n      dash: {\n        // Reference node to keep closure from removing it.\n        // If the argument is removed, it breaks our function length check\n        // in mergeConfigObjects_().\n        customScheme: (node) => {\n          if (node) return null;\n        },\n        clockSyncUri: '',\n        ignoreDrmInfo: false,\n        xlinkFailGracefully: false,\n        defaultPresentationDelay: 10,\n      },\n    };\n\n    const streaming = {\n      retryParameters: shaka.net.NetworkingEngine.defaultRetryParameters(),\n      // Need some operation in the callback or else closure may remove calls\n      // to the function as it would be a no-op.\n      failureCallback: (error) => {\n        shaka.log.error('Unhandled streaming error', error);\n      },\n      rebufferingGoal: 2,\n      bufferingGoal: 10,\n      bufferBehind: 30,\n      ignoreTextStreamFailures: false,\n      alwaysStreamText: false,\n      startAtSegmentBoundary: false,\n      smallGapLimit: 0.5,\n      jumpLargeGaps: false,\n      durationBackoff: 1,\n      forceTransmuxTS: false,\n    };\n\n    const offline = {\n      // We need to set this to a throw-away implementation for now as our\n      // default implementation will need to reference other fields in the\n      // config. We will set it to our intended implementation after we have\n      // the top-level object created.\n      trackSelectionCallback: (tracks) => tracks,\n\n      // Need some operation in the callback or else closure may remove calls\n      // to the function as it would be a no-op.\n      progressCallback: (content, progress) => {\n        shaka.log.v2('Offline operation on',\n                     content.originalManifestUri,\n                     'progress at',\n                     progress);\n      },\n\n      // By default we use persistent licenses as forces errors to surface if\n      // a platform does not support offline licenses rather than causing\n      // unexpected behaviours when someone tries to plays downloaded content\n      // without a persistent license.\n      usePersistentLicense: true,\n    };\n\n    const abr = {\n      enabled: true,\n      defaultBandwidthEstimate: bandwidthEstimate,\n      switchInterval: 8,\n      bandwidthUpgradeTarget: 0.85,\n      bandwidthDowngradeTarget: 0.95,\n      restrictions: {\n        minWidth: 0,\n        maxWidth: Infinity,\n        minHeight: 0,\n        maxHeight: abrMaxHeight,\n        minPixels: 0,\n        maxPixels: Infinity,\n        minBandwidth: 0,\n        maxBandwidth: Infinity,\n      },\n    };\n\n    /** @type {shaka.extern.PlayerConfiguration} */\n    const config = {\n      drm: drm,\n      manifest: manifest,\n      streaming: streaming,\n      offline: offline,\n      abrFactory: shaka.abr.SimpleAbrManager,\n      abr: abr,\n      preferredAudioLanguage: '',\n      preferredTextLanguage: '',\n      preferredVariantRole: '',\n      preferredTextRole: '',\n      preferredAudioChannelCount: 2,\n      restrictions: {\n        minWidth: 0,\n        maxWidth: Infinity,\n        minHeight: 0,\n        maxHeight: Infinity,\n        minPixels: 0,\n        maxPixels: Infinity,\n        minBandwidth: 0,\n        maxBandwidth: Infinity,\n      },\n      playRangeStart: 0,\n      playRangeEnd: Infinity,\n      textDisplayFactory: () => null,\n    };\n\n    // Add this callback so that we can reference the preferred audio language\n    // through the config object so that if it gets updated, we have the\n    // updated value.\n    offline.trackSelectionCallback = (tracks) => {\n      return shaka.util.PlayerConfiguration.defaultTrackSelect(\n          tracks, config.preferredAudioLanguage);\n    };\n\n    return config;\n  }\n\n  /**\n   * @param {!Array.<shaka.extern.Track>} tracks\n   * @param {string} preferredAudioLanguage\n   * @return {!Array.<shaka.extern.Track>}\n   */\n  static defaultTrackSelect(tracks, preferredAudioLanguage) {\n    const LanguageUtils = shaka.util.LanguageUtils;\n    const ContentType = shaka.util.ManifestParserUtils.ContentType;\n\n    let selectedTracks = [];\n\n    // Select variants with best language match.\n    let audioLangPref = LanguageUtils.normalize(preferredAudioLanguage);\n    let matchTypes = [\n      LanguageUtils.MatchType.EXACT,\n      LanguageUtils.MatchType.BASE_LANGUAGE_OKAY,\n      LanguageUtils.MatchType.OTHER_SUB_LANGUAGE_OKAY,\n    ];\n    let allVariantTracks =\n        tracks.filter(function(track) { return track.type == 'variant'; });\n    // For each match type, get the tracks that match the audio preference for\n    // that match type.\n    let tracksByMatchType = matchTypes.map(function(match) {\n      return allVariantTracks.filter(function(track) {\n        let lang = LanguageUtils.normalize(track.language);\n        return LanguageUtils.match(match, audioLangPref, lang);\n      });\n    });\n\n    // Find the best match type that has any matches.\n    let variantTracks;\n    for (let i = 0; i < tracksByMatchType.length; i++) {\n      if (tracksByMatchType[i].length) {\n        variantTracks = tracksByMatchType[i];\n        break;\n      }\n    }\n\n    // Fall back to \"primary\" audio tracks, if present.\n    if (!variantTracks) {\n      let primaryTracks = allVariantTracks.filter(function(track) {\n        return track.primary;\n      });\n      if (primaryTracks.length) {\n        variantTracks = primaryTracks;\n      }\n    }\n\n    // Otherwise, there is no good way to choose the language, so we don't\n    // choose a language at all.\n    if (!variantTracks) {\n      variantTracks = allVariantTracks;\n      // Issue a warning, but only if the content has multiple languages.\n      // Otherwise, this warning would just be noise.\n      let languages = allVariantTracks\n          .map(function(track) { return track.language; })\n          .filter(shaka.util.Functional.isNotDuplicate);\n      if (languages.length > 1) {\n        shaka.log.warning('Could not choose a good audio track based on ' +\n                          'language preferences or primary tracks.  An ' +\n                          'arbitrary language will be stored!');\n      }\n    }\n\n    // From previously selected variants, choose the SD ones (height <= 480).\n    let tracksByHeight = variantTracks.filter(function(track) {\n      return track.height && track.height <= 480;\n    });\n\n    // If variants don't have video or no video with height <= 480 was\n    // found, proceed with the previously selected tracks.\n    if (tracksByHeight.length) {\n      // Sort by resolution, then select all variants which match the height\n      // of the highest SD res.  There may be multiple audio bitrates for the\n      // same video resolution.\n      tracksByHeight.sort(function(a, b) { return b.height - a.height; });\n      variantTracks = tracksByHeight.filter(function(track) {\n        return track.height == tracksByHeight[0].height;\n      });\n    }\n\n    // Now sort by bandwidth.\n    variantTracks.sort(function(a, b) { return a.bandwidth - b.bandwidth; });\n\n    // If there are multiple matches at different audio bitrates, select the\n    // middle bandwidth one.\n    if (variantTracks.length) {\n      selectedTracks.push(variantTracks[Math.floor(variantTracks.length / 2)]);\n    }\n\n    // Since this default callback is used primarily by our own demo app and by\n    // app developers who haven't thought about which tracks they want, we\n    // should select all text tracks, regardless of language.  This makes for a\n    // better demo for us, and does not rely on user preferences for the\n    // unconfigured app.\n    selectedTracks.push.apply(selectedTracks, tracks.filter(function(track) {\n      return track.type == ContentType.TEXT;\n    }));\n\n    return selectedTracks;\n  }\n};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.Player');\n\ngoog.require('goog.asserts');\ngoog.require('shaka.log');\ngoog.require('shaka.media.ActiveStreamMap');\ngoog.require('shaka.media.DrmEngine');\ngoog.require('shaka.media.ManifestParser');\ngoog.require('shaka.media.MediaSourceEngine');\ngoog.require('shaka.media.MediaSourcePlayheadObserver');\ngoog.require('shaka.media.Playhead');\ngoog.require('shaka.media.PlayheadObserver');\ngoog.require('shaka.media.SegmentReference');\ngoog.require('shaka.media.StreamingEngine');\ngoog.require('shaka.net.NetworkingEngine');\ngoog.require('shaka.text.SimpleTextDisplayer');\ngoog.require('shaka.util.ArrayUtils');\ngoog.require('shaka.util.ConfigUtils');\ngoog.require('shaka.util.Destroyer');\ngoog.require('shaka.util.Error');\ngoog.require('shaka.util.EventManager');\ngoog.require('shaka.util.FakeEvent');\ngoog.require('shaka.util.FakeEventTarget');\ngoog.require('shaka.util.Functional');\ngoog.require('shaka.util.IDestroyable');\ngoog.require('shaka.util.ManifestParserUtils');\ngoog.require('shaka.util.MultiMap');\ngoog.require('shaka.util.ObjectUtils');\ngoog.require('shaka.util.PlayerConfiguration');\ngoog.require('shaka.util.PublicPromise');\ngoog.require('shaka.util.StreamUtils');\n\n\n/**\n * Construct a Player.\n *\n * @param {HTMLMediaElement=} video If provided, this is equivalent to calling\n *   attach(video, true) immediately after construction.\n * @param {function(shaka.Player)=} dependencyInjector Optional callback\n *   which is called to inject mocks into the Player.  Used for testing.\n *\n * @constructor\n * @struct\n * @implements {shaka.util.IDestroyable}\n * @extends {shaka.util.FakeEventTarget}\n * @export\n */\nshaka.Player = function(video, dependencyInjector) {\n  shaka.util.FakeEventTarget.call(this);\n\n  /** @private {HTMLMediaElement} */\n  this.video_ = null;\n\n  /**\n   * Only holds the visibility setting until a textDisplayer_ is created.\n   * @private {boolean}\n   */\n  this.textVisibility_ = false;\n\n  /** @private {shaka.extern.TextDisplayer} */\n  this.textDisplayer_ = null;\n\n  /** @private {shaka.util.EventManager} */\n  this.eventManager_ = new shaka.util.EventManager();\n\n  /** @private {shaka.net.NetworkingEngine} */\n  this.networkingEngine_ = null;\n\n  /** @private {shaka.media.DrmEngine} */\n  this.drmEngine_ = null;\n\n  /** @private {shaka.media.MediaSourceEngine} */\n  this.mediaSourceEngine_ = null;\n\n  /** @private {shaka.media.Playhead} */\n  this.playhead_ = null;\n\n  /** @private {shaka.media.PlayheadObserver} */\n  this.playheadObserver_ = null;\n\n  /** @private {shaka.media.StreamingEngine} */\n  this.streamingEngine_ = null;\n\n  /** @private {shaka.extern.ManifestParser} */\n  this.parser_ = null;\n\n  /** @private {?shaka.extern.Manifest} */\n  this.manifest_ = null;\n\n  /** @private {?string} */\n  this.assetUri_ = null;\n\n  /** @private {shaka.extern.AbrManager} */\n  this.abrManager_ = null;\n\n  /**\n   * Contains an ID for use with creating streams.  The manifest parser should\n   * start with small IDs, so this starts with a large one.\n   * @private {number}\n   */\n  this.nextExternalStreamId_ = 1e9;\n\n  /** @private {!Array.<number>} */\n  this.loadingTextStreamIds_ = [];\n\n  /** @private {boolean} */\n  this.buffering_ = false;\n\n  /** @private {boolean} */\n  this.switchingPeriods_ = true;\n\n  /** @private {?function()} */\n  this.onCancelLoad_ = null;\n\n  /** @private {Promise} */\n  this.unloadChain_ = null;\n\n  /** @private {?shaka.extern.Variant} */\n  this.deferredVariant_ = null;\n\n  /** @private {boolean} */\n  this.deferredVariantClearBuffer_ = false;\n\n  /** @private {number} */\n  this.deferredVariantClearBufferSafeMargin_ = 0;\n\n  /** @private {?shaka.extern.Stream} */\n  this.deferredTextStream_ = null;\n\n  /**\n   * If regions are added before we have a playhead observer, we need to cache\n   * them until the playhead observer has been created.\n   *\n   * @private {!Array.<shaka.extern.TimelineRegionInfo>}\n   */\n  this.pendingTimelineRegions_ = [];\n\n  /**\n   * A mapping of which streams are/were active in each period. Used when the\n   * current period (the one containing playhead) differs from the active\n   * period (the one being streamed in by streaming engine).\n   *\n   * @private {!shaka.media.ActiveStreamMap}\n   */\n  this.activeStreams_ = new shaka.media.ActiveStreamMap();\n\n  /** @private {?shaka.extern.PlayerConfiguration} */\n  this.config_ = this.defaultConfig_();\n\n  /** @private {{width: number, height: number}} */\n  this.maxHwRes_ = {width: Infinity, height: Infinity};\n\n  /** @private {shaka.extern.Stats} */\n  this.stats_ = this.getCleanStats_();\n\n  /** @private {number} */\n  this.lastTimeStatsUpdateTimestamp_ = 0;\n\n  /** @private {string} */\n  this.currentAudioLanguage_ = this.config_.preferredAudioLanguage;\n\n  /** @private {string} */\n  this.currentTextLanguage_ = this.config_.preferredTextLanguage;\n\n  /** @private {string} */\n  this.currentVariantRole_ = this.config_.preferredVariantRole;\n\n  /** @private {string} */\n  this.currentTextRole_ = this.config_.preferredTextRole;\n\n  /** @private {number} */\n  this.currentAudioChannelCount_ = this.config_.preferredAudioChannelCount;\n\n  if (dependencyInjector) {\n    dependencyInjector(this);\n  }\n\n  this.networkingEngine_ = this.createNetworkingEngine();\n\n  if (video) {\n    this.attach(video, true /* initializeMediaSource */);\n  }\n\n  /** @private {!shaka.util.Destroyer} */\n  this.destroyer_ = new shaka.util.Destroyer(async () => {\n    // Then, destroy other components and clear fields.\n    let p = Promise.all([\n      this.eventManager_ ? this.eventManager_.destroy() : null,\n      this.networkingEngine_ ? this.networkingEngine_.destroy() : null,\n    ]);\n\n    this.textVisibility_ = false;\n    this.eventManager_ = null;\n    this.abrManager_ = null;\n    this.networkingEngine_ = null;\n    this.config_ = null;\n\n    await p;\n  });\n};\n\ngoog.inherits(shaka.Player, shaka.util.FakeEventTarget);\n\n\n/**\n * @return {!Promise}\n * @private\n */\nshaka.Player.prototype.cancelLoad_ = function() {\n  if (!this.onCancelLoad_) {\n    return Promise.resolve();\n  }\n\n  let stopParser = Promise.resolve();\n  if (this.parser_) {\n    // Stop the parser manually, to ensure that any network calls it may be\n    // making are stopped in a timely fashion.\n    // This happens in parallel with cancelling the load chain.\n    // Otherwise, destroying will wait for any failing network calls to run\n    // out of retries.\n    stopParser = this.parser_.stop();\n    this.parser_ = null;\n  }\n  return Promise.all([stopParser, this.onCancelLoad_()]);\n};\n\n\n/**\n * After destruction, a Player object cannot be used again.\n *\n * @override\n * @export\n */\nshaka.Player.prototype.destroy = async function() {\n  // First, detach from the media element.  This implies unloading content\n  // and canceling pending loads.  This must be called before the destroyer\n  // as it will indirectly check if the player has already been destroyed and\n  // won't execute as expected.  Calling detach multiple times is safe, so it\n  // is okay to be outside the protection of the destroyer.\n  await this.detach();\n  await this.destroyer_.destroy();\n};\n\n\n/**\n * @define {string} A version number taken from git at compile time.\n * @export\n */\nshaka.Player.version = 'v2.4.3-master-uncompiled';\n\n\n/**\n * @event shaka.Player.ErrorEvent\n * @description Fired when a playback error occurs.\n * @property {string} type\n *   'error'\n * @property {!shaka.util.Error} detail\n *   An object which contains details on the error.  The error's 'category' and\n *   'code' properties will identify the specific error that occurred.  In an\n *   uncompiled build, you can also use the 'message' and 'stack' properties\n *   to debug.\n * @exportDoc\n */\n\n\n/**\n * @event shaka.Player.EmsgEvent\n * @description Fired when a non-typical emsg is found in a segment.\n * @property {string} type\n *   'emsg'\n * @property {shaka.extern.EmsgInfo} detail\n *   An object which contains the content of the emsg box.\n * @exportDoc\n */\n\n\n/**\n * @event shaka.Player.DrmSessionUpdateEvent\n * @description Fired when the CDM has accepted the license response.\n * @property {string} type\n *   'drmsessionupdate'\n * @exportDoc\n */\n\n\n/**\n * @event shaka.Player.TimelineRegionAddedEvent\n * @description Fired when a media timeline region is added.\n * @property {string} type\n *   'timelineregionadded'\n * @property {shaka.extern.TimelineRegionInfo} detail\n *   An object which contains a description of the region.\n * @exportDoc\n */\n\n\n/**\n * @event shaka.Player.TimelineRegionEnterEvent\n * @description Fired when the playhead enters a timeline region.\n * @property {string} type\n *   'timelineregionenter'\n * @property {shaka.extern.TimelineRegionInfo} detail\n *   An object which contains a description of the region.\n * @exportDoc\n */\n\n\n/**\n * @event shaka.Player.TimelineRegionExitEvent\n * @description Fired when the playhead exits a timeline region.\n * @property {string} type\n *   'timelineregionexit'\n * @property {shaka.extern.TimelineRegionInfo} detail\n *   An object which contains a description of the region.\n * @exportDoc\n */\n\n\n/**\n * @event shaka.Player.BufferingEvent\n * @description Fired when the player's buffering state changes.\n * @property {string} type\n *   'buffering'\n * @property {boolean} buffering\n *   True when the Player enters the buffering state.\n *   False when the Player leaves the buffering state.\n * @exportDoc\n */\n\n\n/**\n * @event shaka.Player.LoadingEvent\n * @description Fired when the player begins loading.\n *   Used by the Cast receiver to determine idle state.\n * @property {string} type\n *   'loading'\n * @exportDoc\n */\n\n\n/**\n * @event shaka.Player.UnloadingEvent\n * @description Fired when the player unloads or fails to load.\n *   Used by the Cast receiver to determine idle state.\n * @property {string} type\n *   'unloading'\n * @exportDoc\n */\n\n\n/**\n * @event shaka.Player.TextTrackVisibilityEvent\n * @description Fired when text track visibility changes.\n * @property {string} type\n *   'texttrackvisibility'\n * @exportDoc\n */\n\n\n/**\n * @event shaka.Player.TracksChangedEvent\n * @description Fired when the list of tracks changes.  For example, this will\n *   happen when changing periods or when track restrictions change.\n * @property {string} type\n *   'trackschanged'\n * @exportDoc\n */\n\n\n/**\n * @event shaka.Player.AdaptationEvent\n * @description Fired when an automatic adaptation causes the active tracks\n *   to change.  Does not fire when the application calls selectVariantTrack()\n *   selectTextTrack(), selectAudioLanguage() or selectTextLanguage().\n * @property {string} type\n *   'adaptation'\n * @exportDoc\n */\n\n\n/**\n * @event shaka.Player.ExpirationUpdatedEvent\n * @description Fired when there is a change in the expiration times of an\n *   EME session.\n * @property {string} type\n *   'expirationupdated'\n * @exportDoc\n */\n\n\n/**\n * @event shaka.Player.LargeGapEvent\n * @description Fired when the playhead enters a large gap.  If\n *   |config.streaming.jumpLargeGaps| is set, the default action of this event\n *   is to jump the gap; this can be prevented by calling preventDefault() on\n *   the event object.\n * @property {string} type\n *   'largegap'\n * @property {number} currentTime\n *   The current time of the playhead.\n * @property {number} gapSize\n *   The size of the gap, in seconds.\n * @exportDoc\n */\n\n\n/**\n * @event shaka.Player.StreamingEvent\n * @description Fired after the manifest has been parsed and track information\n *   is available, but before streams have been chosen and before any segments\n *   have been fetched.  You may use this event to configure the player based on\n *   information found in the manifest.\n * @property {string} type\n *   'streaming'\n * @exportDoc\n */\n\n\n/**\n * These are the EME key statuses that represent restricted playback.\n * 'usable', 'released', 'output-downscaled', 'status-pending' are statuses\n * of the usable keys.  'expired' status is being handled separately in\n * DrmEngine.\n *\n * @const {!Array.<string>}\n * @private\n */\nshaka.Player.restrictedStatuses_ = ['output-restricted', 'internal-error'];\n\n\n/** @private {!Object.<string, function():*>} */\nshaka.Player.supportPlugins_ = {};\n\n\n/**\n * Registers a plugin callback that will be called with support().  The\n * callback will return the value that will be stored in the return value from\n * support().\n *\n * @param {string} name\n * @param {function():*} callback\n * @export\n */\nshaka.Player.registerSupportPlugin = function(name, callback) {\n  shaka.Player.supportPlugins_[name] = callback;\n};\n\n\n/**\n * Return whether the browser provides basic support.  If this returns false,\n * Shaka Player cannot be used at all.  In this case, do not construct a Player\n * instance and do not use the library.\n *\n * @return {boolean}\n * @export\n */\nshaka.Player.isBrowserSupported = function() {\n  // Basic features needed for the library to be usable.\n  let basic = !!window.Promise && !!window.Uint8Array &&\n              !!Array.prototype.forEach;\n\n  return basic &&\n      shaka.media.MediaSourceEngine.isBrowserSupported() &&\n      shaka.media.DrmEngine.isBrowserSupported();\n};\n\n\n/**\n * Probes the browser to determine what features are supported.  This makes a\n * number of requests to EME/MSE/etc which may result in user prompts.  This\n * should only be used for diagnostics.\n *\n * NOTE: This may show a request to the user for permission.\n *\n * @see https://bit.ly/2ywccmH\n * @return {!Promise.<shaka.extern.SupportType>}\n * @export\n */\nshaka.Player.probeSupport = function() {\n  goog.asserts.assert(shaka.Player.isBrowserSupported(),\n                      'Must have basic support');\n  return shaka.media.DrmEngine.probeSupport().then(function(drm) {\n    let manifest = shaka.media.ManifestParser.probeSupport();\n    let media = shaka.media.MediaSourceEngine.probeSupport();\n    let ret = {\n      manifest: manifest,\n      media: media,\n      drm: drm,\n    };\n\n    let plugins = shaka.Player.supportPlugins_;\n    for (let name in plugins) {\n      ret[name] = plugins[name]();\n    }\n\n    return ret;\n  });\n};\n\n\n/**\n * Attach the Player to a media element (audio or video tag).\n *\n * If the Player is already attached to a media element, the previous element\n * will first be detached.\n *\n * After calling attach, the media element is owned by the Player and should not\n * be used for other purposes until detach or destroy() are called.\n *\n * @param {!HTMLMediaElement} video\n * @param {boolean=} initializeMediaSource If true, start initializing\n *   MediaSource right away.  This can improve load() latency for\n *   MediaSource-based playbacks.  Defaults to true.\n *\n * @return {!Promise} If initializeMediaSource is false, the Promise is resolved\n *   as soon as the Player has released any previous media element and taken\n *   ownership of the new one.  If initializeMediaSource is true, the Promise\n *   resolves after MediaSource has been subsequently initialized on the new\n *   media element.\n * @export\n */\nshaka.Player.prototype.attach = async function(video, initializeMediaSource) {\n  if (initializeMediaSource === undefined) {\n    initializeMediaSource = true;\n  }\n\n  if (this.video_) {\n    await this.detach();\n  }\n\n  this.video_ = video;\n  goog.asserts.assert(video, 'Cannot attach to a null media element!');\n\n  // Listen for video errors.\n  this.eventManager_.listen(this.video_, 'error',\n      this.onVideoError_.bind(this));\n\n  if (initializeMediaSource) {\n    // Start the (potentially slow) process of opening MediaSource now.\n    this.mediaSourceEngine_ = this.createMediaSourceEngine();\n    await this.mediaSourceEngine_.open();\n  }\n};\n\n\n/**\n * Detaches the Player from the media element (audio or video tag).\n *\n * After calling detach and waiting for the Promise to be resolved, the media\n * element is no longer owned by the Player and may be used for other purposes.\n *\n * @return {!Promise} Resolved when the Player has released any previous media\n *   element.\n * @export\n */\nshaka.Player.prototype.detach = async function() {\n  if (!this.video_) {\n    return;\n  }\n\n  // Unload any loaded content.\n  await this.unload(false /* reinitializeMediaSource */);\n\n  // Stop listening for video errors.\n  this.eventManager_.unlisten(this.video_, 'error');\n\n  this.video_ = null;\n};\n\n\n/**\n * Get a parser for the asset located at |assetUri|.\n *\n * @param {string} assetUri\n * @param {?string} mimeType\n *    When not null, the mimeType will be used to find the best manifest parser\n *    for the given asset.\n * @return {!Promise.<shaka.extern.ManifestParser>}\n * @private\n */\nshaka.Player.prototype.getParser_ = async function(assetUri, mimeType) {\n  goog.asserts.assert(\n      this.networkingEngine_,\n      'Cannot call |getParser_| after calling |destroy|.');\n  goog.asserts.assert(\n      this.config_,\n      'Cannot call |getParser_| after calling |destroy|');\n\n  const Factory = await shaka.media.ManifestParser.getFactory(\n      assetUri,\n      this.networkingEngine_,\n      this.config_.manifest.retryParameters,\n      mimeType);\n\n  return new Factory();\n};\n\n\n/**\n * Use the current state of the player and load the asset as a manifest. This\n * requires that |this.networkingEngine_|, |this.assetUri_|, and |this.parser_|\n * to have already been set.\n *\n * @return {!Promise.<shaka.extern.Manifest>} Resolves with the manifest.\n * @private\n */\nshaka.Player.prototype.loadManifest_ = function() {\n  goog.asserts.assert(\n      this.networkingEngine_,\n      'Cannot call |loadManifest_| after calling |destroy|.');\n  goog.asserts.assert(\n      this.assetUri_,\n      'Cannot call |loadManifest_| after calling |destroy|.');\n  goog.asserts.assert(\n      this.parser_,\n      'Cannot call |loadManifest_| after calling |destroy|.');\n\n  let playerInterface = {\n    networkingEngine: this.networkingEngine_,\n    filterNewPeriod: this.filterNewPeriod_.bind(this),\n    filterAllPeriods: this.filterAllPeriods_.bind(this),\n\n    // Called when the parser finds a timeline region. This can be called\n    // before we start playback or during playback (live/in-progress manifest).\n    onTimelineRegionAdded: (region) => {\n      if (this.playheadObserver_) {\n        this.playheadObserver_.addTimelineRegion(region);\n      } else {\n        // Since there is no playhead observer right now, cache the regions so\n        // that they can be added to the playhead observer when it is created.\n        this.pendingTimelineRegions_.push(region);\n      }\n    },\n\n    onEvent: this.onEvent_.bind(this),\n    onError: this.onError_.bind(this),\n  };\n\n  return this.parser_.start(this.assetUri_, playerInterface);\n};\n\n\n/**\n * When there is a variant with video and audio, filter out all variants which\n * lack one or the other.\n * This is to avoid problems where we choose audio-only variants because they\n * have lower bandwidth, when there are variants with video available.\n *\n * @private\n */\nshaka.Player.prototype.filterManifestForAVVariants_ = function() {\n  let hasAVVariant = this.manifest_.periods.some(function(period) {\n    return period.variants.some(function(variant) {\n      return variant.video && variant.audio;\n    });\n  });\n  if (hasAVVariant) {\n    shaka.log.debug('Found variant with audio and video content, ' +\n        'so filtering all periods.');\n    this.manifest_.periods.forEach(function(period) {\n      period.variants = period.variants.filter(function(variant) {\n        return variant.video && variant.audio;\n      });\n    });\n  }\n\n  if (this.manifest_.periods.length == 0) {\n    throw new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.MANIFEST,\n        shaka.util.Error.Code.NO_PERIODS);\n  }\n};\n\n\n/**\n * Load a manifest.\n *\n * @param {string} assetUri\n * @param {?number=} startTime Optional start time, in seconds, to begin\n *   playback.\n *   Defaults to 0 for VOD and to the live edge for live.\n *   Set a positive number to start with a certain offset the beginning.\n *   Set a negative number to start with a certain offset from the end.  This is\n *   intended for use with live streams, to start at a fixed offset from the\n *   live edge.\n * @param {string|shaka.extern.ManifestParser.Factory=} mimeType\n *   The mime type for the content |manifestUri| points to or a manifest parser\n *   factory to override auto-detection or use an unregistered parser. Passing\n *   a manifest parser factory is deprecated and will be removed.\n * @return {!Promise} Resolved when the manifest has been loaded and playback\n *   has begun; rejected when an error occurs or the call was interrupted by\n *   destroy(), unload() or another call to load().\n * @export\n */\nshaka.Player.prototype.load = async function(\n    assetUri, startTime = null, mimeType) {\n  if (!this.video_) {\n    throw new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.PLAYER,\n        shaka.util.Error.Code.NO_VIDEO_ELEMENT);\n  }\n\n  let cancelValue;\n  /** @type {!shaka.util.PublicPromise} */\n  const cancelPromise = new shaka.util.PublicPromise();\n  const cancelCallback = function() {\n    cancelValue = new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.PLAYER,\n        shaka.util.Error.Code.LOAD_INTERRUPTED);\n    return cancelPromise;\n  };\n\n  this.dispatchEvent(new shaka.util.FakeEvent('loading'));\n  let loadStartTime = Date.now();\n\n  try {\n    const unloadPromise = this.unload();\n    this.onCancelLoad_ = cancelCallback;\n    await unloadPromise;\n\n    // Not tracked in stats because it should be insignificant.\n    // Logged in case it is not.\n    shaka.log.debug('Unload latency:', (Date.now() - loadStartTime) / 1000);\n\n    this.stats_ = this.getCleanStats_();\n\n    this.eventManager_.listen(this.video_, 'playing',\n                              this.updateState_.bind(this));\n    this.eventManager_.listen(this.video_, 'pause',\n                              this.updateState_.bind(this));\n    this.eventManager_.listen(this.video_, 'ended',\n                              this.updateState_.bind(this));\n\n    const AbrManagerFactory = this.config_.abrFactory;\n    this.abrManager_ = new AbrManagerFactory();\n    this.abrManager_.configure(this.config_.abr);\n\n    const TextDisplayerFactory = this.config_.textDisplayFactory;\n    this.textDisplayer_ = new TextDisplayerFactory();\n    this.textDisplayer_.setTextVisibility(this.textVisibility_);\n\n    if (cancelValue) throw cancelValue;\n\n    /** @type {?shaka.extern.ManifestParser.Factory} */\n    let Factory = null;\n    /** @type {?string} */\n    let contentMimeType = null;\n\n\n    // TODO(vaage) : Remove the code that supports manifest parser factories\n    //               in v2.6.\n    if (mimeType) {\n      if (typeof mimeType == 'string') {\n        contentMimeType = /** @type {string} */(mimeType);\n      } else {\n        shaka.log.alwaysWarn(\n            'Loading with a manifest parser factory is deprecated. Instead ' +\n                'please register a manifest parser and pass in the mime type.');\n        Factory = /** @type {shaka.extern.ManifestParser.Factory} */(mimeType);\n      }\n    }\n\n    this.parser_ = Factory ?\n                   new Factory() :\n                   await this.getParser_(assetUri, contentMimeType);\n\n    this.parser_.configure(this.config_.manifest);\n\n    this.assetUri_ = assetUri;\n    this.manifest_ = await this.loadManifest_();\n\n    if (cancelValue) throw cancelValue;\n\n    this.filterManifestForAVVariants_();\n\n    this.drmEngine_ = this.createDrmEngine();\n    this.drmEngine_.configure(this.config_.drm);\n    goog.asserts.assert(\n        this.manifest_,\n        'We just got a manifest instance, it should be non-null.');\n    await this.drmEngine_.initForPlayback(this.manifest_);\n\n    if (cancelValue) throw cancelValue;\n\n    // Re-filter the manifest after DRM has been initialized.\n    this.filterAllPeriods_(this.manifest_.periods);\n\n    this.lastTimeStatsUpdateTimestamp_ = Date.now() / 1000;\n\n    // Copy preferred languages from the config again, in case the config was\n    // changed between construction and playback.\n    this.currentAudioLanguage_ = this.config_.preferredAudioLanguage;\n    this.currentTextLanguage_ = this.config_.preferredTextLanguage;\n    this.currentAudioChannelCount_ = this.config_.preferredAudioChannelCount;\n\n    shaka.Player.applyPlayRange_(this.manifest_.presentationTimeline,\n                                 this.config_.playRangeStart,\n                                 this.config_.playRangeEnd,\n                                 this.isLive());\n\n    await this.drmEngine_.attach(this.video_);\n\n    if (cancelValue) throw cancelValue;\n\n    this.abrManager_.init(this.switch_.bind(this));\n\n    if (!this.mediaSourceEngine_) {\n      this.mediaSourceEngine_ = this.createMediaSourceEngine();\n    }\n\n    this.mediaSourceEngine_.setTextDisplayer(this.textDisplayer_);\n\n    // TODO: If there's a default value in the function definition, startTime\n    // can never be undefined.  Even if the caller explicitly passes undefined,\n    // it will be assigned the default value.  So there is no reason for the\n    // compiler to continue treating startTime as (number|null|undefined) when\n    // the default value is null.  File a bug on the Closure compiler.\n    goog.asserts.assert(startTime !== undefined, 'Cannot be undefined!');\n\n    this.playhead_ = this.createPlayhead(startTime);\n    this.playheadObserver_ = this.createPlayheadObserver();\n\n    this.streamingEngine_ = this.createStreamingEngine();\n    this.streamingEngine_.configure(this.config_.streaming);\n\n    // If the content is multi-codec and the browser can play more than one of\n    // them, choose codecs now before we initialize streaming.\n    this.chooseCodecsAndFilterManifest_();\n\n    this.dispatchEvent(new shaka.util.FakeEvent('streaming'));\n\n    await this.streamingEngine_.init();\n\n    if (cancelValue) throw cancelValue;\n\n    if (this.config_.streaming.startAtSegmentBoundary) {\n      let time = this.adjustStartTime_(this.playhead_.getTime());\n      this.playhead_.setStartTime(time);\n    }\n\n    // Re-filter the manifest after streams have been chosen.\n    this.manifest_.periods.forEach(this.filterNewPeriod_.bind(this));\n    // Dispatch a 'trackschanged' event now that all initial filtering is done.\n    this.onTracksChanged_();\n    // Since the first streams just became active, send an adaptation event.\n    this.onAdaptation_();\n\n    // Now that we've filtered out variants that aren't compatible with the\n    // active one, update abr manager with filtered variants for the current\n    // period.\n    let currentPeriod = this.streamingEngine_.getCurrentPeriod();\n    let variants = shaka.util.StreamUtils.filterVariantsByConfig(\n        currentPeriod.variants, this.currentAudioLanguage_,\n        this.currentVariantRole_, this.currentAudioChannelCount_);\n    this.abrManager_.setVariants(variants);\n\n    let hasPrimary = currentPeriod.variants.some(function(variant) {\n      return variant.primary;\n    });\n    if (!this.currentAudioLanguage_ && !hasPrimary) {\n      shaka.log.warning('No preferred audio language set.  We will choose an ' +\n                        'arbitrary language initially');\n    }\n\n    this.pendingTimelineRegions_.forEach(\n        this.playheadObserver_.addTimelineRegion.bind(this.playheadObserver_));\n    this.pendingTimelineRegions_ = [];\n\n    // Wait for the 'loadeddata' event to measure load() latency.\n    this.eventManager_.listenOnce(this.video_, 'loadeddata', function() {\n      // Compute latency in seconds (Date.now() gives ms):\n      let latency = (Date.now() - loadStartTime) / 1000;\n      this.stats_.loadLatency = latency;\n      shaka.log.debug('Load latency:', latency);\n    }.bind(this));\n\n    if (cancelValue) throw cancelValue;\n    this.onCancelLoad_ = null;\n  } catch (error) {\n    goog.asserts.assert(error instanceof shaka.util.Error,\n                        'Wrong error type!');\n    shaka.log.debug('load() failed:', error,\n        error ? error.message : null, error ? error.stack : null);\n\n    // If we haven't started another load, clear the onCancelLoad_.\n    cancelPromise.resolve();\n    if (this.onCancelLoad_ == cancelCallback) {\n      this.onCancelLoad_ = null;\n      this.dispatchEvent(new shaka.util.FakeEvent('unloading'));\n    }\n\n    // If part of the load chain was aborted, that async call may have thrown.\n    // In those cases, we want the cancelation error, not the thrown error.\n    if (cancelValue) {\n      return Promise.reject(cancelValue);\n    }\n    return Promise.reject(error);\n  }\n};\n\n\n/**\n * In case of multiple usable codecs, choose one based on lowest average\n * bandwidth and filter out the rest.\n * @private\n */\nshaka.Player.prototype.chooseCodecsAndFilterManifest_ = function() {\n  // Collect a list of variants for all periods.\n  /** @type {!Array.<shaka.extern.Variant>} */\n  let variants = this.manifest_.periods.reduce(\n      (variants, period) => variants.concat(period.variants), []);\n\n  // To start, consider a subset of variants based on audio channel preferences.\n  // For some content (#1013), surround-sound variants will use a different\n  // codec than stereo variants, so it is important to choose codecs **after**\n  // considering the audio channel config.\n  variants = shaka.util.StreamUtils.filterVariantsByAudioChannelCount(\n      variants, this.config_.preferredAudioChannelCount);\n\n  function variantCodecs(variant) {\n    // Only consider the base of the codec string.  For example, these should\n    // both be considered the same codec: avc1.42c01e, avc1.4d401f\n    let baseVideoCodec =\n        variant.video ? variant.video.codecs.split('.')[0] : '';\n    let baseAudioCodec =\n        variant.audio ? variant.audio.codecs.split('.')[0] : '';\n    return baseVideoCodec + '-' + baseAudioCodec;\n  }\n\n  // Now organize variants into buckets by codecs.\n  /** @type {!shaka.util.MultiMap.<shaka.extern.Variant>} */\n  const variantsByCodecs = new shaka.util.MultiMap();\n  variants.forEach((variant) => {\n    const group = variantCodecs(variant);\n    variantsByCodecs.push(group, variant);\n  });\n\n  // Compute the average bandwidth for each group of variants.\n  // Choose the lowest-bandwidth codecs.\n  let bestCodecs = null;\n  let lowestAverageBandwidth = Infinity;\n  variantsByCodecs.forEach((codecs, variants) => {\n    let sum = 0;\n    let num = 0;\n    variants.forEach(function(variant) {\n      sum += variant.bandwidth || 0;\n      ++num;\n    });\n    let averageBandwidth = sum / num;\n    shaka.log.debug('codecs', codecs, 'avg bandwidth', averageBandwidth);\n\n    if (averageBandwidth < lowestAverageBandwidth) {\n      bestCodecs = codecs;\n      lowestAverageBandwidth = averageBandwidth;\n    }\n  });\n  goog.asserts.assert(bestCodecs != null, 'Should have chosen codecs!');\n  goog.asserts.assert(!isNaN(lowestAverageBandwidth),\n      'Bandwidth should be a number!');\n\n  // Filter out any variants that don't match, forcing AbrManager to choose from\n  // the most efficient variants possible.\n  this.manifest_.periods.forEach(function(period) {\n    period.variants = period.variants.filter(function(variant) {\n      let codecs = variantCodecs(variant);\n      if (codecs == bestCodecs) return true;\n\n      shaka.log.debug('Dropping Variant (better codec available)', variant);\n      return false;\n    });\n  });\n};\n\n\n/**\n * Creates a new instance of DrmEngine.  This can be replaced by tests to\n * create fake instances instead.\n *\n * @return {!shaka.media.DrmEngine}\n */\nshaka.Player.prototype.createDrmEngine = function() {\n  goog.asserts.assert(this.networkingEngine_, 'Must not be destroyed');\n\n  let playerInterface = {\n    netEngine: this.networkingEngine_,\n    onError: this.onError_.bind(this),\n    onKeyStatus: this.onKeyStatus_.bind(this),\n    onExpirationUpdated: this.onExpirationUpdated_.bind(this),\n    onEvent: this.onEvent_.bind(this),\n  };\n  return new shaka.media.DrmEngine(playerInterface);\n};\n\n\n/**\n * Creates a new instance of NetworkingEngine.  This can be replaced by tests\n * to create fake instances instead.\n *\n * @return {!shaka.net.NetworkingEngine}\n */\nshaka.Player.prototype.createNetworkingEngine = function() {\n  /** @type {function(number, number)} */\n  const onSegmentDownloaded = (deltaTimeMs, numBytes) => {\n    // In some situations, such as during offline storage, the abr manager might\n    // not yet exist. Therefore, we need to check if abr manager has been\n    // initialized before using it.\n    if (this.abrManager_) {\n      this.abrManager_.segmentDownloaded(deltaTimeMs, numBytes);\n    }\n  };\n\n  return new shaka.net.NetworkingEngine(onSegmentDownloaded);\n};\n\n\n/**\n * Creates a new instance of Playhead.  This can be replaced by tests to create\n * fake instances instead.\n *\n * @param {?number} startTime\n * @return {!shaka.media.Playhead}\n */\nshaka.Player.prototype.createPlayhead = function(startTime) {\n  goog.asserts.assert(this.manifest_, 'Must have manifest');\n  goog.asserts.assert(this.video_, 'Must have video');\n  return new shaka.media.Playhead(\n      this.video_,\n      this.manifest_.presentationTimeline,\n      this.manifest_.minBufferTime || 0,\n      this.config_.streaming,\n      startTime,\n      this.onSeek_.bind(this),\n      this.onEvent_.bind(this));\n};\n\n\n/**\n * Creates a new instance of PlayheadOvserver.  This can be replaced by tests to\n * create fake instances instead.\n *\n * @return {!shaka.media.PlayheadObserver}\n */\nshaka.Player.prototype.createPlayheadObserver = function() {\n  goog.asserts.assert(this.video_, 'Must have video element');\n  goog.asserts.assert(this.manifest_, 'Must have manifest');\n  goog.asserts.assert(this.mediaSourceEngine_, 'Must have media source engine');\n\n  let impl = new shaka.media.MediaSourcePlayheadObserver(\n      this.video_,\n      this.mediaSourceEngine_,\n      this.manifest_);\n\n  return new shaka.media.PlayheadObserver(\n      this.video_,\n      this.manifest_.minBufferTime,\n      this.config_.streaming,\n      this.onBuffering_.bind(this),\n      this.onEvent_.bind(this),\n      this.onChangePeriod_.bind(this),\n      impl);\n};\n\n\n/**\n * Creates a new instance of MediaSourceEngine.  This can be replaced by tests\n * to create fake instances instead.\n *\n * @return {!shaka.media.MediaSourceEngine}\n */\nshaka.Player.prototype.createMediaSourceEngine = function() {\n  return new shaka.media.MediaSourceEngine(this.video_);\n};\n\n\n/**\n * Creates a new instance of StreamingEngine.  This can be replaced by tests\n * to create fake instances instead.\n *\n * @return {!shaka.media.StreamingEngine}\n */\nshaka.Player.prototype.createStreamingEngine = function() {\n  goog.asserts.assert(\n      this.playhead_ && this.playheadObserver_ && this.mediaSourceEngine_ &&\n          this.manifest_,\n      'Must not be destroyed');\n\n  /** @type {shaka.media.StreamingEngine.PlayerInterface} */\n  let playerInterface = {\n    playhead: this.playhead_,\n    mediaSourceEngine: this.mediaSourceEngine_,\n    netEngine: this.networkingEngine_,\n    onChooseStreams: this.onChooseStreams_.bind(this),\n    onCanSwitch: this.canSwitch_.bind(this),\n    onError: this.onError_.bind(this),\n    onEvent: this.onEvent_.bind(this),\n    onManifestUpdate: this.onManifestUpdate_.bind(this),\n    onSegmentAppended: this.onSegmentAppended_.bind(this),\n  };\n\n  return new shaka.media.StreamingEngine(this.manifest_, playerInterface);\n};\n\n\n/**\n * Configure the Player instance.\n *\n * The config object passed in need not be complete.  It will be merged with\n * the existing Player configuration.\n *\n * Config keys and types will be checked.  If any problems with the config\n * object are found, errors will be reported through logs and this returns\n * false.  If there are errors, valid config objects are still set.\n *\n * @param {string|!Object} config This should either be a field name or an\n *   object following the form of {@link shaka.extern.PlayerConfiguration},\n *   where you may omit any field you do not wish to change.\n * @param {*=} value This should be provided if the previous parameter\n *   was a string field name.\n * @return {boolean} True if the passed config object was valid, false if there\n *   were invalid entries.\n * @export\n */\nshaka.Player.prototype.configure = function(config, value) {\n  goog.asserts.assert(this.config_, 'Config must not be null!');\n  goog.asserts.assert(typeof(config) == 'object' || arguments.length == 2,\n                      'String configs should have values!');\n\n  // ('fieldName', value) format\n  if (arguments.length == 2 && typeof(config) == 'string') {\n    config = this.convertToConfigObject_(config, value);\n  }\n\n  goog.asserts.assert(typeof(config) == 'object', 'Should be an object!');\n\n  let ret = shaka.util.ConfigUtils.mergeConfigObjects(\n      this.config_, config, this.defaultConfig_(), this.configOverrides_(), '');\n\n  this.applyConfig_();\n  return ret;\n};\n\n\n/**\n * Convert config from ('fieldName', value) format to a partial\n * shaka.extern.PlayerConfiguration object.\n * E. g. from ('manifest.retryParameters.maxAttempts', 1) to\n * { manifest: { retryParameters: { maxAttempts: 1 }}}.\n *\n * @param {string} fieldName\n * @param {*} value\n * @return {!Object}\n * @private\n */\nshaka.Player.prototype.convertToConfigObject_ = function(fieldName, value) {\n  let configObject = {};\n  let last = configObject;\n  let searchIndex = 0;\n  let nameStart = 0;\n  while (true) {  // eslint-disable-line no-constant-condition\n    let idx = fieldName.indexOf('.', searchIndex);\n    if (idx < 0) {\n      break;\n    }\n    if (idx == 0 || fieldName[idx - 1] != '\\\\') {\n      let part = fieldName.substring(nameStart, idx).replace(/\\\\\\./g, '.');\n      last[part] = {};\n      last = last[part];\n      nameStart = idx + 1;\n    }\n    searchIndex = idx + 1;\n  }\n\n  last[fieldName.substring(nameStart).replace(/\\\\\\./g, '.')] = value;\n  return configObject;\n};\n\n\n/**\n * Apply config changes.\n * @private\n */\nshaka.Player.prototype.applyConfig_ = function() {\n  if (this.parser_) {\n    this.parser_.configure(this.config_.manifest);\n  }\n  if (this.drmEngine_) {\n    this.drmEngine_.configure(this.config_.drm);\n  }\n  if (this.streamingEngine_) {\n    this.streamingEngine_.configure(this.config_.streaming);\n\n    // Need to apply the restrictions to every period.\n    try {\n      // this.filterNewPeriod_() may throw.\n      this.manifest_.periods.forEach(this.filterNewPeriod_.bind(this));\n    } catch (error) {\n      this.onError_(error);\n    }\n\n    // If the stream we are playing is restricted, we need to switch.\n    let activeAudio = this.streamingEngine_.getActiveAudio();\n    let activeVideo = this.streamingEngine_.getActiveVideo();\n    let period = this.streamingEngine_.getCurrentPeriod();\n    let activeVariant = shaka.util.StreamUtils.getVariantByStreams(\n        activeAudio, activeVideo, period.variants);\n    if (!activeVariant || !activeVariant.allowedByApplication ||\n        !activeVariant.allowedByKeySystem) {\n      shaka.log.debug('Choosing new streams after changing configuration');\n      this.chooseStreamsAndSwitch_(period);\n    }\n  }\n\n  if (this.abrManager_) {\n    this.abrManager_.configure(this.config_.abr);\n    // Simply enable/disable ABR with each call, since multiple calls to these\n    // methods have no effect.\n    if (this.config_.abr.enabled && !this.switchingPeriods_) {\n      this.abrManager_.enable();\n    } else {\n      this.abrManager_.disable();\n    }\n  }\n};\n\n\n/**\n * Return a copy of the current configuration.  Modifications of the returned\n * value will not affect the Player's active configuration.  You must call\n * player.configure() to make changes.\n *\n * @return {shaka.extern.PlayerConfiguration}\n * @export\n */\nshaka.Player.prototype.getConfiguration = function() {\n  goog.asserts.assert(this.config_, 'Config must not be null!');\n\n  let ret = this.defaultConfig_();\n  shaka.util.ConfigUtils.mergeConfigObjects(\n      ret, this.config_, this.defaultConfig_(), this.configOverrides_(), '');\n  return ret;\n};\n\n\n/**\n * Return a reference to the current configuration. Modifications to the\n * returned value will affect the Player's active configuration. This method\n * is not exported as sharing configuration with external objects is not\n * supported.\n *\n * @return {shaka.extern.PlayerConfiguration}\n */\nshaka.Player.prototype.getSharedConfiguration = function() {\n  goog.asserts.assert(\n      this.config_, 'Cannot call getSharedConfiguration after call destroy!');\n  return this.config_;\n};\n\n\n/**\n * Reset configuration to default.\n * @export\n */\nshaka.Player.prototype.resetConfiguration = function() {\n  // Don't call mergeConfigObjects_(), since that would not reset open-ended\n  // dictionaries like drm.servers.\n  this.config_ = this.defaultConfig_();\n  this.applyConfig_();\n};\n\n\n/**\n * @return {HTMLMediaElement} A reference to the HTML Media Element passed\n *     to the constructor or to attach().\n * @export\n */\nshaka.Player.prototype.getMediaElement = function() {\n  return this.video_;\n};\n\n\n/**\n * @return {shaka.net.NetworkingEngine} A reference to the Player's networking\n *     engine.  Applications may use this to make requests through Shaka's\n *     networking plugins.\n * @export\n */\nshaka.Player.prototype.getNetworkingEngine = function() {\n  return this.networkingEngine_;\n};\n\n\n/**\n * @return {?string} If an asset is loaded, returns the asset URI given in\n *   the last call to load().  Otherwise, returns null.\n * @export\n */\nshaka.Player.prototype.getAssetUri = function() {\n  return this.assetUri_;\n};\n\n\n/**\n * @return {?string} If a manifest is loaded, returns the manifest URI given in\n *   the last call to load().  Otherwise, returns null.\n * @export\n */\nshaka.Player.prototype.getManifestUri = function() {\n  shaka.log.alwaysWarn(\n      '\"getManifestUri\" is deprecated and will be removed in v2.6. ' +\n          'Please use \"getAssetUri\" instead.');\n  return this.assetUri_;\n};\n\n\n/**\n * @return {boolean} True if the current stream is live.  False otherwise.\n * @export\n */\nshaka.Player.prototype.isLive = function() {\n  return this.manifest_ ?\n         this.manifest_.presentationTimeline.isLive() :\n         false;\n};\n\n\n/**\n * @return {boolean} True if the current stream is in-progress VOD.\n *   False otherwise.\n * @export\n */\nshaka.Player.prototype.isInProgress = function() {\n  return this.manifest_ ?\n         this.manifest_.presentationTimeline.isInProgress() :\n         false;\n};\n\n\n/**\n * @return {boolean} True for audio-only content.  False otherwise.\n * @export\n */\nshaka.Player.prototype.isAudioOnly = function() {\n  if (!this.manifest_ || !this.manifest_.periods.length) {\n    return false;\n  }\n\n  let variants = this.manifest_.periods[0].variants;\n  if (!variants.length) {\n    return false;\n  }\n\n  // Note that if there are some audio-only variants and some audio-video\n  // variants, the audio-only variants are removed during filtering.\n  // Therefore if the first variant has no video, that's sufficient to say it\n  // is audio-only content.\n  return !variants[0].video;\n};\n\n\n/**\n * Get the seekable range for the current stream.\n * @return {{start: number, end: number}}\n * @export\n */\nshaka.Player.prototype.seekRange = function() {\n  let start = 0;\n  let end = 0;\n  if (this.manifest_) {\n    let timeline = this.manifest_.presentationTimeline;\n    start = timeline.getSeekRangeStart();\n    end = timeline.getSeekRangeEnd();\n  }\n  return {'start': start, 'end': end};\n};\n\n\n/**\n * Get the key system currently being used by EME.  This returns the empty\n * string if not using EME.\n *\n * @return {string}\n * @export\n */\nshaka.Player.prototype.keySystem = function() {\n  return this.drmEngine_ ? this.drmEngine_.keySystem() : '';\n};\n\n\n/**\n * Get the DrmInfo used to initialize EME.  This returns null when not using\n * EME.\n *\n * @return {?shaka.extern.DrmInfo}\n * @export\n */\nshaka.Player.prototype.drmInfo = function() {\n  return this.drmEngine_ ? this.drmEngine_.getDrmInfo() : null;\n};\n\n\n/**\n * The next known expiration time for any EME session.  If the sessions never\n * expire, or there are no EME sessions, this returns Infinity.\n *\n * @return {number}\n * @export\n */\nshaka.Player.prototype.getExpiration = function() {\n  return this.drmEngine_ ? this.drmEngine_.getExpiration() : Infinity;\n};\n\n\n/**\n * @return {boolean} True if the Player is in a buffering state.\n * @export\n */\nshaka.Player.prototype.isBuffering = function() {\n  return this.buffering_;\n};\n\n\n/**\n * Unload the current manifest and make the Player available for re-use.\n *\n * @param {boolean=} reinitializeMediaSource If true, start reinitializing\n *   MediaSource right away.  This can improve load() latency for\n *   MediaSource-based playbacks.  Defaults to true.\n * @return {!Promise} If reinitializeMediaSource is false, the Promise is\n *   resolved as soon as streaming has stopped and the previous content, if any,\n *   has been unloaded.  If reinitializeMediaSource is true or undefined, the\n *   Promise resolves after MediaSource has been subsequently reinitialized.\n * @export\n */\nshaka.Player.prototype.unload = async function(reinitializeMediaSource) {\n  if (this.destroyer_.destroyed()) {\n    return;\n  }\n\n  if (reinitializeMediaSource === undefined) {\n    reinitializeMediaSource = true;\n  }\n\n  this.dispatchEvent(new shaka.util.FakeEvent('unloading'));\n\n  await this.cancelLoad_();\n\n  // If there is an existing unload operation, use that.\n  if (!this.unloadChain_) {\n    this.unloadChain_ = this.destroyStreaming_().then(() => {\n      // Force an exit from the buffering state.\n      this.onBuffering_(false);\n      this.unloadChain_ = null;\n    });\n  }\n  await this.unloadChain_;\n\n  if (reinitializeMediaSource) {\n    // Start the (potentially slow) process of opening MediaSource now.\n    this.mediaSourceEngine_ = this.createMediaSourceEngine();\n    await this.mediaSourceEngine_.open();\n  }\n};\n\n\n/**\n * Gets the current effective playback rate.  If using trick play, it will\n * return the current trick play rate; otherwise, it will return the video\n * playback rate.\n * @return {number}\n * @export\n */\nshaka.Player.prototype.getPlaybackRate = function() {\n  return this.playhead_ ? this.playhead_.getPlaybackRate() : 0;\n};\n\n\n/**\n * Skip through the content without playing.  Simulated using repeated seeks.\n *\n * Trick play will be canceled automatically if the playhead hits the beginning\n * or end of the seekable range for the content.\n *\n * @param {number} rate The playback rate to simulate.  For example, a rate of\n *     2.5 would result in 2.5 seconds of content being skipped every second.\n *     To trick-play backward, use a negative rate.\n * @export\n */\nshaka.Player.prototype.trickPlay = function(rate) {\n  shaka.log.debug('Trick play rate', rate);\n  if (this.playhead_) {\n    this.playhead_.setPlaybackRate(rate);\n  }\n\n  if (this.streamingEngine_) {\n    this.streamingEngine_.setTrickPlay(rate != 1);\n  }\n};\n\n\n/**\n * Cancel trick-play.\n * @export\n */\nshaka.Player.prototype.cancelTrickPlay = function() {\n  shaka.log.debug('Trick play canceled');\n  if (this.playhead_) {\n    this.playhead_.setPlaybackRate(1);\n  }\n\n  if (this.streamingEngine_) {\n    this.streamingEngine_.setTrickPlay(false);\n  }\n};\n\n\n/**\n * Return a list of variant tracks available for the current\n * Period.  If there are multiple Periods, then you must seek to the Period\n * before being able to switch.\n *\n * @return {!Array.<shaka.extern.Track>}\n * @export\n */\nshaka.Player.prototype.getVariantTracks = function() {\n  if (!this.manifest_ || !this.playhead_) {\n    return [];\n  }\n  this.assertCorrectActiveStreams_();\n\n  const ContentType = shaka.util.ManifestParserUtils.ContentType;\n\n  let currentPeriod = shaka.util.StreamUtils.findPeriodContainingTime(\n      this.manifest_, this.playhead_.getTime());\n  return shaka.util.StreamUtils.getVariantTracks(\n      this.manifest_.periods[currentPeriod],\n      this.activeStreams_.get(currentPeriod, ContentType.AUDIO),\n      this.activeStreams_.get(currentPeriod, ContentType.VIDEO));\n};\n\n\n/**\n * Return a list of text tracks available for the current\n * Period.  If there are multiple Periods, then you must seek to the Period\n * before being able to switch.\n *\n * @return {!Array.<shaka.extern.Track>}\n * @export\n */\nshaka.Player.prototype.getTextTracks = function() {\n  if (!this.manifest_ || !this.playhead_) {\n    return [];\n  }\n  this.assertCorrectActiveStreams_();\n\n  const ContentType = shaka.util.ManifestParserUtils.ContentType;\n  let currentPeriod = shaka.util.StreamUtils.findPeriodContainingTime(\n      this.manifest_, this.playhead_.getTime());\n  if (!this.activeStreams_.get(currentPeriod, ContentType.TEXT)) {\n    // This is a workaround for the demo page to be able to display the\n    // list of text tracks. If no text track is currently active, pick\n    // the one that's going to be streamed when captions are enabled\n    // and mark it as active.\n    let textStreams = shaka.util.StreamUtils.filterStreamsByLanguageAndRole(\n        this.manifest_.periods[currentPeriod].textStreams,\n        this.currentTextLanguage_,\n        this.currentTextRole_);\n    if (textStreams.length) {\n      this.activeStreams_.update(\n          currentPeriod, ContentType.TEXT, textStreams[0].id);\n    }\n  }\n  return shaka.util.StreamUtils\n      .getTextTracks(\n          this.manifest_.periods[currentPeriod],\n          this.activeStreams_.get(currentPeriod, ContentType.TEXT))\n      .filter(function(track) {\n        // Don't show any tracks that are being loaded still.\n        return this.loadingTextStreamIds_.indexOf(track.id) < 0;\n      }.bind(this));\n};\n\n\n/**\n * Select a specific text track.  Note that AdaptationEvents are not\n * fired for manual track selections.\n *\n * @param {shaka.extern.Track} track\n * @export\n */\nshaka.Player.prototype.selectTextTrack = function(track) {\n  if (!this.streamingEngine_) {\n    return;\n  }\n\n  const StreamUtils = shaka.util.StreamUtils;\n\n  let period = this.streamingEngine_.getCurrentPeriod();\n  let stream = StreamUtils.findTextStreamForTrack(period, track);\n\n  if (!stream) {\n    shaka.log.error('Unable to find the track with id \"' + track.id +\n                    '\"; did we change Periods?');\n    return;\n  }\n\n  this.mediaSourceEngine_.setUseEmbeddedText(false);\n  // Add entries to the history.\n  this.addTextStreamToSwitchHistory_(stream, /* fromAdaptation */ false);\n  this.switchTextStream_(stream);\n\n  // Workaround for https://github.com/google/shaka-player/issues/1299\n  // When track is selected, back-propogate the language to\n  // currentTextLanguage_.\n  this.currentTextLanguage_ = stream.language;\n};\n\n\n/**\n * Use the embedded text for the current stream, if present.\n *\n * CEA 608/708 captions data is embedded inside the video stream.\n *\n * @export\n */\nshaka.Player.prototype.selectEmbeddedTextTrack = function() {\n  this.mediaSourceEngine_.setUseEmbeddedText(true);\n  this.streamingEngine_.unloadTextStream();\n};\n\n\n/**\n * @return {boolean} True if we are using any embedded text tracks present.\n * @export\n */\nshaka.Player.prototype.usingEmbeddedTextTrack = function() {\n  return this.mediaSourceEngine_ ?\n      this.mediaSourceEngine_.getUseEmbeddedText() : false;\n};\n\n\n/**\n * Select a specific track.  Note that AdaptationEvents are not fired for manual\n * track selections.\n *\n * @param {shaka.extern.Track} track\n * @param {boolean=} clearBuffer\n * @param {number=} safeMargin Optional amount of buffer (in seconds) to retain\n *   when clearing the buffer. Useful for switching variant quickly without\n *   causing a buffering event.\n *   Defaults to 0 if not provided. Ignored if clearBuffer is false.\n *   Can cause hiccups on some browsers if chosen too small, e.g. The amount of\n *   two segments is a fair minimum to consider as safeMargin value.\n * @export\n */\nshaka.Player.prototype.selectVariantTrack = function(\n    track, clearBuffer, safeMargin = 0) {\n  if (!this.streamingEngine_) {\n    return;\n  }\n\n  if (this.config_.abr.enabled) {\n    shaka.log.alwaysWarn('Changing tracks while abr manager is enabled will ' +\n                         'likely result in the selected track being ' +\n                         'overriden. Consider disabling abr before calling ' +\n                         'selectVariantTrack().');\n  }\n\n  const StreamUtils = shaka.util.StreamUtils;\n\n  let period = this.streamingEngine_.getCurrentPeriod();\n  let variant = StreamUtils.findVariantForTrack(period, track);\n  if (!variant) {\n    shaka.log.error('Unable to locate track with id \"' + track.id + '\".');\n    return;\n  }\n\n  // Double check that the track is allowed to be played.\n  // The track list should only contain playable variants,\n  // but if restrictions change and selectVariantTrack()\n  // is called before the track list is updated, we could\n  // get a now-restricted variant.\n  let variantIsPlayable = StreamUtils.isPlayable(variant);\n  if (!variantIsPlayable) {\n    shaka.log.error('Unable to switch to track with id \"' + track.id +\n                    '\" because it is restricted.');\n    return;\n  }\n\n  // Add entries to the history.\n  this.addVariantToSwitchHistory_(variant, /* fromAdaptation */ false);\n  this.switchVariant_(variant, clearBuffer, safeMargin);\n\n  // Workaround for https://github.com/google/shaka-player/issues/1299\n  // When track is selected, back-propogate the language to\n  // currentAudioLanguage_.\n  this.currentAudioLanguage_ = variant.language;\n  if (variant.audio && variant.audio.channelsCount) {\n    this.currentAudioChannelCount_ = variant.audio.channelsCount;\n  }\n\n  // Update AbrManager variants to match these new settings.\n  let variants = shaka.util.StreamUtils.filterVariantsByConfig(\n      period.variants, this.currentAudioLanguage_, this.currentVariantRole_,\n      this.currentAudioChannelCount_);\n  this.abrManager_.setVariants(variants);\n};\n\n\n/**\n * Return a list of audio language-role combinations available for the current\n * Period.\n *\n * @return {!Array.<shaka.extern.LanguageRole>}\n * @export\n */\nshaka.Player.prototype.getAudioLanguagesAndRoles = function() {\n  if (!this.streamingEngine_) {\n    return [];\n  }\n\n  const StreamUtils = shaka.util.StreamUtils;\n  let period = this.streamingEngine_.getCurrentPeriod();\n  let variants = StreamUtils.getPlayableVariants(period.variants);\n  let audioStreams = variants.map(function(variant) {\n    return variant.audio;\n  }).filter(shaka.util.Functional.isNotDuplicate);\n\n  return this.getLanguagesAndRoles_(audioStreams);\n};\n\n\n/**\n * Return a list of text language-role combinations available for the current\n * Period.\n *\n * @return {!Array.<shaka.extern.LanguageRole>}\n * @export\n */\nshaka.Player.prototype.getTextLanguagesAndRoles = function() {\n  if (!this.streamingEngine_) {\n    return [];\n  }\n\n  let period = this.streamingEngine_.getCurrentPeriod();\n  return this.getLanguagesAndRoles_(period.textStreams);\n};\n\n\n/**\n * Return a list of audio languages available for the current Period.\n *\n * @return {!Array.<string>}\n * @export\n */\nshaka.Player.prototype.getAudioLanguages = function() {\n  if (!this.streamingEngine_) {\n    return [];\n  }\n\n  const StreamUtils = shaka.util.StreamUtils;\n  let period = this.streamingEngine_.getCurrentPeriod();\n  let variants = StreamUtils.getPlayableVariants(period.variants);\n  return variants.map(function(variant) {\n    return variant.language;\n  }).filter(shaka.util.Functional.isNotDuplicate);\n};\n\n\n/**\n * Return a list of text languages available for the current Period.\n *\n * @return {!Array.<string>}\n * @export\n */\nshaka.Player.prototype.getTextLanguages = function() {\n  if (!this.streamingEngine_) {\n    return [];\n  }\n\n  let period = this.streamingEngine_.getCurrentPeriod();\n  return period.textStreams.map(function(stream) {\n    return stream.language;\n  }).filter(shaka.util.Functional.isNotDuplicate);\n};\n\n\n/**\n * Given a list of streams, return a list of language-role combinations\n * available for them.\n *\n * @param {!Array.<?shaka.extern.Stream>} streams\n * @return {!Array.<shaka.extern.LanguageRole>}\n * @private\n */\nshaka.Player.prototype.getLanguagesAndRoles_ = function(streams) {\n  /** @const {string} */\n  const noLanguage = 'und';\n\n  /** @const {string} */\n  const noRole = '';\n\n  /** @type {!Array.<shaka.extern.LanguageRole>} */\n  let roleLangCombinations = [];\n\n  streams.forEach(function(stream) {\n    if (!stream) {\n      // Video-only variant\n      roleLangCombinations.push({language: noLanguage, role: noRole});\n    } else {\n      let language = stream.language;\n\n      if (stream.roles.length) {\n        stream.roles.forEach(function(role) {\n          roleLangCombinations.push({language: language, role: role});\n        });\n      } else {\n        // No roles, just add language by itself\n        roleLangCombinations.push({language: language, role: noRole});\n      }\n    }\n  });\n  return shaka.util.ArrayUtils.removeDuplicates(\n      roleLangCombinations,\n      function(a, b) {\n        return a.language == b.language && a.role == b.role;\n      });\n};\n\n\n/**\n * Sets currentAudioLanguage and currentVariantRole to the selected\n * language and role, and chooses a new variant if need be.\n *\n * @param {string} language\n * @param {string=} role\n * @export\n */\nshaka.Player.prototype.selectAudioLanguage =\n    function(language, role) {\n  if (!this.streamingEngine_) return;\n  let period = this.streamingEngine_.getCurrentPeriod();\n  this.currentAudioLanguage_ = language;\n  this.currentVariantRole_ = role || '';\n  // TODO: Refactor to only change audio and not affect text.\n  this.chooseStreamsAndSwitch_(period);\n};\n\n\n/**\n * Sets currentTextLanguage and currentTextRole to the selected\n * language and role, and chooses a new text stream if need be.\n *\n * @param {string} language\n * @param {string=} role\n * @export\n */\nshaka.Player.prototype.selectTextLanguage =\n    function(language, role) {\n  if (!this.streamingEngine_) return;\n  let period = this.streamingEngine_.getCurrentPeriod();\n  this.currentTextLanguage_ = language;\n  this.currentTextRole_ = role || '';\n  // TODO: Refactor to only change text and not affect audio.\n  this.chooseStreamsAndSwitch_(period);\n};\n\n\n/**\n * @return {boolean} True if the current text track is visible.\n * @export\n */\nshaka.Player.prototype.isTextTrackVisible = function() {\n  if (this.textDisplayer_) {\n    return this.textDisplayer_.isTextVisible();\n  } else {\n    return this.textVisibility_;\n  }\n};\n\n\n/**\n * Set the visibility of the current text track, if any.\n *\n * @param {boolean} on\n * @export\n */\nshaka.Player.prototype.setTextTrackVisibility = function(on) {\n  if (this.textDisplayer_) {\n    this.textDisplayer_.setTextVisibility(on);\n  }\n  this.textVisibility_ = on;\n  this.onTextTrackVisibility_();\n\n  // If we always stream text, don't do anything special to StreamingEngine.\n  if (this.config_.streaming.alwaysStreamText) return;\n\n  // Load text stream when the user chooses to show the caption, and pause\n  // loading text stream when the user chooses to hide the caption.\n  if (!this.streamingEngine_) return;\n  const StreamUtils = shaka.util.StreamUtils;\n\n  if (on) {\n    let period = this.streamingEngine_.getCurrentPeriod();\n    let textStreams = StreamUtils.filterStreamsByLanguageAndRole(\n        period.textStreams,\n        this.currentTextLanguage_,\n        this.currentTextRole_);\n    let stream = textStreams[0];\n    if (stream) {\n      this.streamingEngine_.loadNewTextStream(\n        stream, /* createMediaState */ true);\n    }\n  } else {\n    this.streamingEngine_.unloadTextStream();\n  }\n};\n\n\n/**\n * Returns current playhead time as a Date.\n *\n * @return {Date}\n * @export\n */\nshaka.Player.prototype.getPlayheadTimeAsDate = function() {\n  if (!this.manifest_) return null;\n\n  goog.asserts.assert(this.isLive(),\n      'getPlayheadTimeAsDate should be called on a live stream!');\n\n  let time =\n      this.manifest_.presentationTimeline.getPresentationStartTime() * 1000 +\n      this.video_.currentTime * 1000;\n\n  return new Date(time);\n};\n\n\n/**\n * Returns the presentation start time as a Date.\n *\n * @return {Date}\n * @export\n */\nshaka.Player.prototype.getPresentationStartTimeAsDate = function() {\n  if (!this.manifest_) return null;\n\n  goog.asserts.assert(this.isLive(),\n      'getPresentationStartTimeAsDate should be called on a live stream!');\n\n  let time =\n      this.manifest_.presentationTimeline.getPresentationStartTime() * 1000;\n\n  return new Date(time);\n};\n\n\n/**\n * Return the information about the current buffered ranges.\n *\n * @return {shaka.extern.BufferedInfo}\n * @export\n */\nshaka.Player.prototype.getBufferedInfo = function() {\n  if (!this.mediaSourceEngine_) {\n    return {\n      total: [],\n      audio: [],\n      video: [],\n      text: [],\n    };\n  }\n\n  return this.mediaSourceEngine_.getBufferedInfo();\n};\n\n\n/**\n * Return playback and adaptation stats.\n *\n * @return {shaka.extern.Stats}\n * @export\n */\nshaka.Player.prototype.getStats = function() {\n  const ContentType = shaka.util.ManifestParserUtils.ContentType;\n\n  this.updateTimeStats_();\n  this.updateState_();\n\n  let video = null;\n  let variant = null;\n\n  let videoElem = /** @type {!HTMLVideoElement} */ (this.video_);\n  let videoInfo = videoElem && videoElem.getVideoPlaybackQuality ?\n      videoElem.getVideoPlaybackQuality() : {};\n\n  if (this.playhead_ && this.manifest_) {\n    let periodIdx = shaka.util.StreamUtils.findPeriodContainingTime(\n        this.manifest_, this.playhead_.getTime());\n    let period = this.manifest_.periods[periodIdx];\n\n    if (this.activeStreams_.hasPeriod(periodIdx)) {\n      variant = shaka.util.StreamUtils.getVariantByStreamIds(\n          this.activeStreams_.get(periodIdx, ContentType.AUDIO),\n          this.activeStreams_.get(periodIdx, ContentType.VIDEO),\n          period.variants);\n\n      video = variant.video || {};\n    }\n  }\n\n  if (!video) video = {};\n  if (!variant) variant = {};\n\n  // Clone the internal object so our state cannot be tampered with.\n  const cloneObject = shaka.util.ObjectUtils.cloneObject;\n  return {\n    // Not tracked in this.stats_:\n    width: video.width || 0,\n    height: video.height || 0,\n    streamBandwidth: variant.bandwidth || 0,\n    decodedFrames: Number(videoInfo.totalVideoFrames),\n    droppedFrames: Number(videoInfo.droppedVideoFrames),\n    estimatedBandwidth: this.abrManager_ ?\n        this.abrManager_.getBandwidthEstimate() : NaN,\n\n    loadLatency: this.stats_.loadLatency,\n    playTime: this.stats_.playTime,\n    bufferingTime: this.stats_.bufferingTime,\n    // Deep-clone the objects as well as the arrays that contain them:\n    switchHistory: cloneObject(this.stats_.switchHistory),\n    stateHistory: cloneObject(this.stats_.stateHistory),\n  };\n};\n\n\n/**\n * Adds the given text track to the current Period.  load() must resolve before\n * calling.  The current Period or the presentation must have a duration.  This\n * returns a Promise that will resolve with the track that was created, when\n * that track can be switched to.\n *\n * @param {string} uri\n * @param {string} language\n * @param {string} kind\n * @param {string} mime\n * @param {string=} codec\n * @param {string=} label\n * @return {!Promise.<shaka.extern.Track>}\n * @export\n */\nshaka.Player.prototype.addTextTrack = function(\n    uri, language, kind, mime, codec, label) {\n  if (!this.streamingEngine_) {\n    shaka.log.error(\n        'Must call load() and wait for it to resolve before adding text ' +\n        'tracks.');\n    return Promise.reject();\n  }\n\n  const ContentType = shaka.util.ManifestParserUtils.ContentType;\n\n  // Get the Period duration.\n  /** @type {shaka.extern.Period} */\n  const period = this.streamingEngine_.getCurrentPeriod();\n  /** @type {number} */\n  const periodIndex = this.manifest_.periods.indexOf(period);\n  /** @type {number} */\n  const nextPeriodIndex = periodIndex + 1;\n  /** @type {number} */\n  const nextPeriodStart = nextPeriodIndex >= this.manifest_.periods.length ?\n                          this.manifest_.presentationTimeline.getDuration() :\n                          this.manifest_.periods[nextPeriodIndex].startTime;\n  /** @type {number} */\n  const periodDuration = nextPeriodStart - period.startTime;\n  if (periodDuration == Infinity) {\n    return Promise.reject(new shaka.util.Error(\n        shaka.util.Error.Severity.RECOVERABLE,\n        shaka.util.Error.Category.MANIFEST,\n        shaka.util.Error.Code.CANNOT_ADD_EXTERNAL_TEXT_TO_LIVE_STREAM));\n  }\n\n  /** @type {shaka.extern.Stream} */\n  let stream = {\n    id: this.nextExternalStreamId_++,\n    originalId: null,\n    createSegmentIndex: Promise.resolve.bind(Promise),\n    findSegmentPosition: function(time) { return 1; },\n    getSegmentReference: function(ref) {\n      if (ref != 1) return null;\n      return new shaka.media.SegmentReference(\n          1, 0, periodDuration, function() { return [uri]; }, 0, null);\n    },\n    initSegmentReference: null,\n    presentationTimeOffset: 0,\n    mimeType: mime,\n    codecs: codec || '',\n    kind: kind,\n    encrypted: false,\n    keyId: null,\n    language: language,\n    label: label || null,\n    type: ContentType.TEXT,\n    primary: false,\n    trickModeVideo: null,\n    emsgSchemeIdUris: null,\n    roles: [],\n    channelsCount: null,\n    closedCaptions: {},\n  };\n\n  // Add the stream to the loading list to ensure it isn't switched to while it\n  // is initializing.\n  this.loadingTextStreamIds_.push(stream.id);\n  period.textStreams.push(stream);\n  // Don't create the media state until subtitles are actually enabled\n  return this.streamingEngine_.loadNewTextStream(\n      stream, this.textVisibility_).then(function() {\n    if (this.destroyer_.destroyed()) {\n      return;\n    }\n\n    let curPeriodIdx = this.manifest_.periods.indexOf(period);\n    let activeText = this.streamingEngine_.getActiveText();\n    if (activeText) {\n      // If this was the first text stream, StreamingEngine will start streaming\n      // it in loadNewTextStream.  To reflect this, update the active stream.\n      this.activeStreams_.update(curPeriodIdx, ContentType.TEXT, activeText.id);\n    }\n    // Remove the stream from the loading list.\n    shaka.util.ArrayUtils.remove(this.loadingTextStreamIds_, stream.id);\n\n    shaka.log.debug('Choosing new streams after adding a text stream');\n    this.chooseStreamsAndSwitch_(period);\n    this.onTracksChanged_();\n\n    return {\n      id: stream.id,\n      active: false,\n      type: ContentType.TEXT,\n      bandwidth: 0,\n      language: language,\n      label: label || null,\n      kind: kind,\n      width: null,\n      height: null,\n    };\n  }.bind(this));\n};\n\n\n/**\n * Set the maximum resolution that the platform's hardware can handle.\n * This will be called automatically by shaka.cast.CastReceiver to enforce\n * limitations of the Chromecast hardware.\n *\n * @param {number} width\n * @param {number} height\n * @export\n */\nshaka.Player.prototype.setMaxHardwareResolution = function(width, height) {\n  this.maxHwRes_.width = width;\n  this.maxHwRes_.height = height;\n};\n\n\n/**\n * Retry streaming after a failure.  Does nothing if not in a failure state.\n * @return {boolean} False if unable to retry.\n * @export\n */\nshaka.Player.prototype.retryStreaming = function() {\n  return this.streamingEngine_ ? this.streamingEngine_.retry() : false;\n};\n\n\n/**\n * Return the manifest information if it's loaded. Otherwise, return null.\n * @return {?shaka.extern.Manifest}\n * @export\n */\nshaka.Player.prototype.getManifest = function() {\n  return this.manifest_;\n};\n\n\n/**\n * @param {shaka.extern.Variant} variant\n * @param {boolean} fromAdaptation\n * @private\n */\nshaka.Player.prototype.addVariantToSwitchHistory_ = function(\n    variant, fromAdaptation) {\n  if (variant.video) {\n    this.updateActiveStreams_(variant.video);\n  }\n  if (variant.audio) {\n    this.updateActiveStreams_(variant.audio);\n  }\n\n  // TODO: Get StreamingEngine to track variants and create getActiveVariant()\n  let activePeriod = this.streamingEngine_.getActivePeriod();\n  let activeVariant = shaka.util.StreamUtils.getVariantByStreams(\n      this.streamingEngine_.getActiveAudio(),\n      this.streamingEngine_.getActiveVideo(),\n      activePeriod ? activePeriod.variants : []);\n\n  // Only log the switch if the variant changes. For the initial decision,\n  // activeVariant is null and variant != activeVariant.\n  // This allows us to avoid onAdaptation_() when nothing has changed.\n  if (variant != activeVariant) {\n    this.stats_.switchHistory.push({\n      timestamp: Date.now() / 1000,\n      id: variant.id,\n      type: 'variant',\n      fromAdaptation: fromAdaptation,\n      bandwidth: variant.bandwidth,\n    });\n  }\n};\n\n\n/**\n * @param {shaka.extern.Stream} textStream\n * @param {boolean} fromAdaptation\n * @private\n */\nshaka.Player.prototype.addTextStreamToSwitchHistory_ =\n    function(textStream, fromAdaptation) {\n  this.updateActiveStreams_(textStream);\n\n  this.stats_.switchHistory.push({\n    timestamp: Date.now() / 1000,\n    id: textStream.id,\n    type: 'text',\n    fromAdaptation: fromAdaptation,\n    bandwidth: null,\n  });\n};\n\n\n/**\n * @param {!shaka.extern.Stream} stream\n * @private\n */\nshaka.Player.prototype.updateActiveStreams_ = function(stream) {\n  goog.asserts.assert(this.manifest_, 'Must not be destroyed');\n  let periodIndex =\n      shaka.util.StreamUtils.findPeriodContainingStream(this.manifest_, stream);\n  this.activeStreams_.update(periodIndex, stream.type, stream.id);\n};\n\n\n/**\n * Destroy members responsible for streaming.\n *\n * @return {!Promise}\n * @private\n */\nshaka.Player.prototype.destroyStreaming_ = function() {\n  if (this.eventManager_) {\n    this.eventManager_.unlisten(this.video_, 'loadeddata');\n    this.eventManager_.unlisten(this.video_, 'playing');\n    this.eventManager_.unlisten(this.video_, 'pause');\n    this.eventManager_.unlisten(this.video_, 'ended');\n  }\n\n  let p = Promise.all([\n    this.abrManager_ ? this.abrManager_.stop() : null,\n    // MediaSourceEngine must be destroyed before DrmEngine, so that DrmEngine\n    // can detach MediaKeys from the media element.\n    this.mediaSourceEngine_ ? this.mediaSourceEngine_.destroy() : null,\n    this.drmEngine_ ? this.drmEngine_.destroy() : null,\n    this.playhead_ ? this.playhead_.destroy() : null,\n    this.playheadObserver_ ? this.playheadObserver_.destroy() : null,\n    this.streamingEngine_ ? this.streamingEngine_.destroy() : null,\n    this.parser_ ? this.parser_.stop() : null,\n    this.textDisplayer_ ? this.textDisplayer_.destroy() : null,\n  ]);\n\n  this.switchingPeriods_ = true;\n  this.drmEngine_ = null;\n  this.mediaSourceEngine_ = null;\n  this.playhead_ = null;\n  this.playheadObserver_ = null;\n  this.streamingEngine_ = null;\n  this.parser_ = null;\n  this.textDisplayer_ = null;\n  this.manifest_ = null;\n  this.assetUri_ = null;\n  this.pendingTimelineRegions_ = [];\n  this.activeStreams_ = new shaka.media.ActiveStreamMap();\n  this.stats_ = this.getCleanStats_();\n\n  return p;\n};\n\n\n/**\n * @return {!Object}\n * @private\n */\nshaka.Player.prototype.configOverrides_ = function() {\n  return {\n    '.drm.servers': '',\n    '.drm.clearKeys': '',\n    '.drm.advanced': {\n      distinctiveIdentifierRequired: false,\n      persistentStateRequired: false,\n      videoRobustness: '',\n      audioRobustness: '',\n      serverCertificate: new Uint8Array(0),\n    },\n  };\n};\n\n\n/**\n * @return {shaka.extern.PlayerConfiguration}\n * @private\n */\nshaka.Player.prototype.defaultConfig_ = function() {\n  const config = shaka.util.PlayerConfiguration.createDefault();\n\n  config.streaming.failureCallback = (error) => {\n    this.defaultStreamingFailureCallback_(error);\n  };\n\n  // Because this.video_ may not be set when the config is built, the default\n  // TextDisplay factory must capture a reference to \"this\" as \"self\" to use at\n  // the time we call the factory.  Bind can't be used here because we call the\n  // factory with \"new\", effectively removing any binding to \"this\".\n  const self = this;\n  config.textDisplayFactory = function() {\n    return new shaka.text.SimpleTextDisplayer(self.video_);\n  };\n\n  return config;\n};\n\n\n/**\n * @param {!shaka.util.Error} error\n * @private\n */\nshaka.Player.prototype.defaultStreamingFailureCallback_ = function(error) {\n  let retryErrorCodes = [\n    shaka.util.Error.Code.BAD_HTTP_STATUS,\n    shaka.util.Error.Code.HTTP_ERROR,\n    shaka.util.Error.Code.TIMEOUT,\n  ];\n\n  if (this.isLive() && retryErrorCodes.indexOf(error.code) >= 0) {\n    error.severity = shaka.util.Error.Severity.RECOVERABLE;\n\n    shaka.log.warning('Live streaming error.  Retrying automatically...');\n    this.retryStreaming();\n  }\n};\n\n\n/**\n * @return {shaka.extern.Stats}\n * @private\n */\nshaka.Player.prototype.getCleanStats_ = function() {\n  return {\n    // These are not tracked in the private stats structure and are only here to\n    // satisfy the compiler.\n    width: NaN,\n    height: NaN,\n    streamBandwidth: NaN,\n    decodedFrames: NaN,\n    droppedFrames: NaN,\n    estimatedBandwidth: NaN,\n\n    // These are tracked in the private stats structure to avoid the need for\n    // many private member variables.\n    loadLatency: NaN,\n    playTime: 0,\n    bufferingTime: 0,\n    switchHistory: [],\n    stateHistory: [],\n  };\n};\n\n\n/**\n * Filters a list of periods.\n * @param {!Array.<!shaka.extern.Period>} periods\n * @private\n */\nshaka.Player.prototype.filterAllPeriods_ = function(periods) {\n  goog.asserts.assert(this.video_, 'Must not be destroyed');\n  const ArrayUtils = shaka.util.ArrayUtils;\n  const StreamUtils = shaka.util.StreamUtils;\n\n  /** @type {?shaka.extern.Stream} */\n  let activeAudio =\n      this.streamingEngine_ ? this.streamingEngine_.getActiveAudio() : null;\n  /** @type {?shaka.extern.Stream} */\n  let activeVideo =\n      this.streamingEngine_ ? this.streamingEngine_.getActiveVideo() : null;\n\n  let filterPeriod = StreamUtils.filterNewPeriod.bind(\n      null, this.drmEngine_, activeAudio, activeVideo);\n  periods.forEach(filterPeriod);\n\n  let validPeriodsCount = ArrayUtils.count(periods, function(period) {\n    return period.variants.some(StreamUtils.isPlayable);\n  });\n\n  // If none of the periods are playable, throw CONTENT_UNSUPPORTED_BY_BROWSER.\n  if (validPeriodsCount == 0) {\n    throw new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.MANIFEST,\n        shaka.util.Error.Code.CONTENT_UNSUPPORTED_BY_BROWSER);\n  }\n\n  // If only some of the periods are playable, throw UNPLAYABLE_PERIOD.\n  if (validPeriodsCount < periods.length) {\n    throw new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.MANIFEST,\n        shaka.util.Error.Code.UNPLAYABLE_PERIOD);\n  }\n\n  periods.forEach(function(period) {\n    let tracksChanged = shaka.util.StreamUtils.applyRestrictions(\n        period.variants, this.config_.restrictions, this.maxHwRes_);\n    if (tracksChanged && this.streamingEngine_ &&\n        this.streamingEngine_.getCurrentPeriod() == period) {\n      this.onTracksChanged_();\n    }\n\n    this.checkRestrictedVariants_(period.variants);\n  }.bind(this));\n};\n\n\n/**\n * Filters a new period.\n * @param {shaka.extern.Period} period\n * @private\n */\nshaka.Player.prototype.filterNewPeriod_ = function(period) {\n  goog.asserts.assert(this.video_, 'Must not be destroyed');\n  const StreamUtils = shaka.util.StreamUtils;\n\n  /** @type {?shaka.extern.Stream} */\n  let activeAudio =\n      this.streamingEngine_ ? this.streamingEngine_.getActiveAudio() : null;\n  /** @type {?shaka.extern.Stream} */\n  let activeVideo =\n      this.streamingEngine_ ? this.streamingEngine_.getActiveVideo() : null;\n\n  StreamUtils.filterNewPeriod(\n      this.drmEngine_, activeAudio, activeVideo, period);\n\n  /** @type {!Array.<shaka.extern.Variant>} */\n  let variants = period.variants;\n\n  // Check for playable variants before restrictions, so that we can give a\n  // special error when there were tracks but they were all filtered.\n  const hasPlayableVariant = variants.some(StreamUtils.isPlayable);\n  if (!hasPlayableVariant) {\n    throw new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.MANIFEST,\n        shaka.util.Error.Code.UNPLAYABLE_PERIOD);\n  }\n\n  this.checkRestrictedVariants_(period.variants);\n\n  const tracksChanged = shaka.util.StreamUtils.applyRestrictions(\n      variants, this.config_.restrictions, this.maxHwRes_);\n\n  // Trigger the track change event if the restrictions now prevent use from\n  // using a variant that we previously thought we could use.\n  if (tracksChanged && this.streamingEngine_ &&\n      this.streamingEngine_.getCurrentPeriod() == period) {\n    this.onTracksChanged_();\n  }\n};\n\n\n/**\n * Switches to the given variant, deferring if needed.\n * @param {shaka.extern.Variant} variant\n * @param {boolean=} clearBuffer\n * @param {number=} safeMargin\n * @private\n */\nshaka.Player.prototype.switchVariant_ =\n    function(variant, clearBuffer = false, safeMargin = 0) {\n  if (this.switchingPeriods_) {\n    // Store this action for later.\n    this.deferredVariant_ = variant;\n    this.deferredVariantClearBuffer_ = clearBuffer;\n    this.deferredVariantClearBufferSafeMargin_ = safeMargin;\n  } else {\n    // Act now.\n    this.streamingEngine_.switchVariant(variant, clearBuffer, safeMargin);\n  }\n};\n\n\n/**\n * Switches to the given text stream, deferring if needed.\n * @param {shaka.extern.Stream} textStream\n * @private\n */\nshaka.Player.prototype.switchTextStream_ = function(textStream) {\n  if (this.switchingPeriods_) {\n    // Store this action for later.\n    this.deferredTextStream_ = textStream;\n  } else {\n    // Act now.\n    this.streamingEngine_.switchTextStream(textStream);\n  }\n};\n\n\n/**\n * Verifies that the active streams according to the player match those in\n * StreamingEngine.\n * @private\n */\nshaka.Player.prototype.assertCorrectActiveStreams_ = function() {\n  if (!this.streamingEngine_ || !this.manifest_ || !goog.DEBUG) return;\n  const StreamUtils = shaka.util.StreamUtils;\n  const ContentType = shaka.util.ManifestParserUtils.ContentType;\n\n  let activeAudio = this.streamingEngine_.getActiveAudio();\n  let activeVideo = this.streamingEngine_.getActiveVideo();\n  let activeText = this.streamingEngine_.getActiveText();\n\n  /** @type {?shaka.extern.Stream} */\n  let mainStream = activeVideo || activeAudio;\n  if (!mainStream) {\n    return;\n  }\n\n  let streamingPeriodIndex =\n      StreamUtils.findPeriodContainingStream(this.manifest_, mainStream);\n  let currentPeriodIndex =\n      this.manifest_.periods.indexOf(this.streamingEngine_.getCurrentPeriod());\n  if (streamingPeriodIndex < 0 || streamingPeriodIndex != currentPeriodIndex) {\n    return;\n  }\n\n  let activeStreams = [activeAudio, activeVideo, activeText];\n  activeStreams.filter((stream) => stream).forEach((stream) => {\n    const type = stream.type;\n    let id = stream.id;\n\n    if (type == ContentType.TEXT && this.deferredTextStream_) {\n      id = this.deferredTextStream_.id;\n    }\n\n    if (type == ContentType.AUDIO && this.deferredVariant_) {\n      id = this.deferredVariant_.audio.id;\n    }\n\n    if (type == ContentType.VIDEO && this.deferredVariant_) {\n      id = this.deferredVariant_.video.id;\n    }\n\n    goog.asserts.assert(\n        this.activeStreams_.get(currentPeriodIndex, type) == id,\n        'Inconsistent active stream');\n  });\n};\n\n\n/** @private */\nshaka.Player.prototype.updateTimeStats_ = function() {\n  // Only count while we're loaded.\n  if (!this.manifest_) {\n    return;\n  }\n\n  let now = Date.now() / 1000;\n  if (this.buffering_) {\n    this.stats_.bufferingTime += (now - this.lastTimeStatsUpdateTimestamp_);\n  } else {\n    this.stats_.playTime += (now - this.lastTimeStatsUpdateTimestamp_);\n  }\n\n  this.lastTimeStatsUpdateTimestamp_ = now;\n};\n\n\n/**\n * @param {number} time\n * @return {number}\n * @private\n */\nshaka.Player.prototype.adjustStartTime_ = function(time) {\n  /** @type {?shaka.extern.Stream} */\n  let activeAudio = this.streamingEngine_.getActiveAudio();\n  /** @type {?shaka.extern.Stream} */\n  let activeVideo = this.streamingEngine_.getActiveVideo();\n  /** @type {shaka.extern.Period} */\n  let period = this.streamingEngine_.getCurrentPeriod();\n\n  // This method is called after StreamingEngine.init resolves, which means that\n  // all the active streams have had createSegmentIndex called.\n  function getAdjustedTime(stream, time) {\n    if (!stream) return null;\n    let idx = stream.findSegmentPosition(time - period.startTime);\n    if (idx == null) return null;\n    let ref = stream.getSegmentReference(idx);\n    if (!ref) return null;\n    let refTime = ref.startTime + period.startTime;\n    goog.asserts.assert(refTime <= time, 'Segment should start before time');\n    return refTime;\n  }\n\n  let audioStartTime = getAdjustedTime(activeAudio, time);\n  let videoStartTime = getAdjustedTime(activeVideo, time);\n\n  // If we have both video and audio times, pick the larger one.  If we picked\n  // the smaller one, that one will download an entire segment to buffer the\n  // difference.\n  if (videoStartTime != null && audioStartTime != null) {\n    return Math.max(videoStartTime, audioStartTime);\n  } else if (videoStartTime != null) {\n    return videoStartTime;\n  } else if (audioStartTime != null) {\n    return audioStartTime;\n  } else {\n    return time;\n  }\n};\n\n\n/**\n * Callback from PlayheadObserver.\n *\n * @param {boolean} buffering\n * @private\n */\nshaka.Player.prototype.onBuffering_ = function(buffering) {\n  // Before setting |buffering_|, update the time spent in the previous state.\n  this.updateTimeStats_();\n  this.buffering_ = buffering;\n  this.updateState_();\n\n  if (this.playhead_) {\n    this.playhead_.setBuffering(buffering);\n  }\n\n  let event = new shaka.util.FakeEvent('buffering', {'buffering': buffering});\n  this.dispatchEvent(event);\n};\n\n\n/**\n * Callback from PlayheadObserver.\n * @private\n */\nshaka.Player.prototype.onChangePeriod_ = function() {\n  this.onTracksChanged_();\n};\n\n\n/**\n * Called from potential initiators of state changes, or before returning stats\n * to the user.\n *\n * This method decides if state has actually changed, updates the last entry,\n * and adds a new one if needed.\n *\n * @private\n */\nshaka.Player.prototype.updateState_ = function() {\n  if (this.destroyer_.destroyed()) {\n    return;\n  }\n\n  let newState;\n  if (this.buffering_) {\n    newState = 'buffering';\n  } else if (this.video_.ended) {\n    newState = 'ended';\n  } else if (this.video_.paused) {\n    newState = 'paused';\n  } else {\n    newState = 'playing';\n  }\n\n  let now = Date.now() / 1000;\n  if (this.stats_.stateHistory.length) {\n    let lastIndex = this.stats_.stateHistory.length - 1;\n    let lastEntry = this.stats_.stateHistory[lastIndex];\n    lastEntry.duration = now - lastEntry.timestamp;\n\n    if (newState == lastEntry.state) {\n      // The state has not changed, so do not add anything to the history.\n      return;\n    }\n  }\n\n  this.stats_.stateHistory.push({\n    timestamp: now,\n    state: newState,\n    duration: 0,\n  });\n};\n\n\n/**\n * Callback from Playhead.\n *\n * @private\n */\nshaka.Player.prototype.onSeek_ = function() {\n  if (this.playheadObserver_) {\n    this.playheadObserver_.seeked();\n  }\n  if (this.streamingEngine_) {\n    this.streamingEngine_.seeked();\n  }\n};\n\n\n/**\n * Chooses a variant through the ABR manager.\n * On error, this dispatches an error event and returns null.\n *\n * @param {shaka.extern.Period} period\n * @param {!Array.<shaka.extern.Variant>} variants\n * @return {?shaka.extern.Variant}\n * @private\n */\nshaka.Player.prototype.chooseVariant_ = function(period, variants) {\n  goog.asserts.assert(this.config_, 'Must not be destroyed');\n\n  try {\n    // |variants| are the filtered variants, use |period.variants| so we know\n    // why they we restricted.\n    this.checkRestrictedVariants_(period.variants);\n  } catch (e) {\n    this.onError_(e);\n    return null;\n  }\n  goog.asserts.assert(variants.length, 'Should have thrown for no Variants.');\n\n  // Update the abr manager with newly filtered variants.\n  this.abrManager_.setVariants(variants);\n  return this.abrManager_.chooseVariant();\n};\n\n\n/**\n * Chooses streams from the given Period and switches to them.\n * Called after a config change, a new text stream, a key status event, or an\n * explicit language change.\n *\n * @param {!shaka.extern.Period} period\n * @private\n */\nshaka.Player.prototype.chooseStreamsAndSwitch_ = function(period) {\n  goog.asserts.assert(this.config_, 'Must not be destroyed');\n\n  let variants = shaka.util.StreamUtils.filterVariantsByConfig(\n      period.variants, this.currentAudioLanguage_, this.currentVariantRole_,\n      this.currentAudioChannelCount_);\n  let textStreams = shaka.util.StreamUtils.filterStreamsByLanguageAndRole(\n      period.textStreams, this.currentTextLanguage_, this.currentTextRole_);\n\n  // Because we're running this after a config change (manual language change),\n  // a new text stream, or a key status event, and because switching to an\n  // active stream is a no-op, it is always okay to clear the buffer here.\n  let chosenVariant = this.chooseVariant_(period, variants);\n  if (chosenVariant) {\n    this.addVariantToSwitchHistory_(chosenVariant, /* fromAdaptation */ true);\n    this.switchVariant_(chosenVariant, /* clearBuffers */ true);\n  }\n\n  // Only switch text if we should be streaming text right now.\n  let chosenText = textStreams[0];\n  if (chosenText && this.streamText_()) {\n    this.addTextStreamToSwitchHistory_(chosenText, /* fromAdaptation */ true);\n    this.switchTextStream_(chosenText);\n  }\n\n  // Send an adaptation event so that the UI can show the new language/tracks.\n  this.onAdaptation_();\n};\n\n\n/**\n * Callback from StreamingEngine, invoked when a period starts.\n *\n * @param {!shaka.extern.Period} period\n * @return {shaka.media.StreamingEngine.ChosenStreams} An object containing the\n *   chosen variant and text stream.\n * @private\n */\nshaka.Player.prototype.onChooseStreams_ = function(period) {\n  shaka.log.debug('onChooseStreams_', period);\n  goog.asserts.assert(this.config_, 'Must not be destroyed');\n\n  const ContentType = shaka.util.ManifestParserUtils.ContentType;\n  const StreamUtils = shaka.util.StreamUtils;\n\n  // We are switching Periods, so the AbrManager will be disabled.  But if we\n  // want to abr.enabled, we do not want to call AbrManager.enable before\n  // canSwitch_ is called.\n  this.switchingPeriods_ = true;\n  this.abrManager_.disable();\n\n  shaka.log.debug('Choosing new streams after period changed');\n\n  // Create empty object first and initialize the fields through\n  // [] to allow field names to be expressions.\n  //\n  // TODO: This feedback system for language matches could be cleaned up. See\n  //       https://github.com/google/shaka-player/issues/1497#issuecomment-406699596\n  //       for more information.\n  let languageMatches = {};\n  languageMatches[ContentType.AUDIO] = false;\n  languageMatches[ContentType.TEXT] = false;\n\n  let variants = StreamUtils.filterVariantsByConfig(\n      period.variants,\n      this.currentAudioLanguage_,\n      this.currentVariantRole_,\n      this.currentAudioChannelCount_,\n      languageMatches);\n\n  let textStreams = StreamUtils.filterStreamsByLanguageAndRole(\n      period.textStreams, this.currentTextLanguage_, this.currentTextRole_,\n      languageMatches);\n\n  shaka.log.v2('onChooseStreams_, variants and text streams: ',\n               variants, textStreams);\n\n  let chosenVariant = this.chooseVariant_(period, variants);\n  let chosenTextStream = textStreams[0] || null;\n\n  shaka.log.v2('onChooseStreams_, chosen=', chosenVariant, chosenTextStream);\n\n  // This assertion satisfies a compiler nullability check below.\n  goog.asserts.assert(this.manifest_, 'Manifest should exist!');\n\n  // Ignore deferred variant or text streams only if we are starting a new\n  // period.  In this case, any deferred switches were from an older period, so\n  // they do not apply.  We can still have deferred switches from the current\n  // period in the case of an early call to select*Track while we are setting up\n  // the first period.  This can happen with the 'streaming' event.\n  if (this.deferredVariant_) {\n    const deferredPeriodIndex = StreamUtils.findPeriodContainingVariant(\n        this.manifest_, this.deferredVariant_);\n    const deferredPeriod = this.manifest_.periods[deferredPeriodIndex];\n    if (deferredPeriod == period) {\n      chosenVariant = this.deferredVariant_;\n    }\n    this.deferredVariant_ = null;\n  }\n  if (this.deferredTextStream_) {\n    const deferredPeriodIndex = StreamUtils.findPeriodContainingStream(\n        this.manifest_, this.deferredTextStream_);\n    const deferredPeriod = this.manifest_.periods[deferredPeriodIndex];\n    if (deferredPeriod == period) {\n      chosenTextStream = this.deferredTextStream_;\n    }\n    this.deferredTextStream_ = null;\n  }\n\n  if (chosenVariant) {\n    this.addVariantToSwitchHistory_(chosenVariant, /* fromAdaptation */ true);\n  }\n  if (chosenTextStream) {\n    this.addTextStreamToSwitchHistory_(\n        chosenTextStream, /* fromAdaptation */ true);\n\n    // If audio and text tracks have different languages, and the text track\n    // matches the user's preference, then show the captions.  Only do this\n    // when we are choosing the initial tracks during startup.\n    let startingUp = !this.streamingEngine_.getActivePeriod();\n    if (startingUp) {\n      if (chosenVariant && chosenVariant.audio &&\n          languageMatches[ContentType.TEXT] &&\n          chosenTextStream.language != chosenVariant.audio.language) {\n        this.textDisplayer_.setTextVisibility(true);\n        this.onTextTrackVisibility_();\n      }\n    }\n  }\n\n  // Don't fire a tracks-changed event since we aren't inside the new Period\n  // yet.\n  // Don't initialize with a text stream unless we should be streaming text.\n  if (this.streamText_()) {\n    return {variant: chosenVariant, text: chosenTextStream};\n  } else {\n    return {variant: chosenVariant, text: null};\n  }\n};\n\n\n/**\n * Callback from StreamingEngine, invoked when the period is set up.\n *\n * @private\n */\nshaka.Player.prototype.canSwitch_ = function() {\n  shaka.log.debug('canSwitch_');\n  goog.asserts.assert(this.config_, 'Must not be destroyed');\n\n  this.switchingPeriods_ = false;\n\n  if (this.config_.abr.enabled) {\n    this.abrManager_.enable();\n  }\n\n  // If we still have deferred switches, switch now.\n  if (this.deferredVariant_) {\n    this.streamingEngine_.switchVariant(\n        this.deferredVariant_, this.deferredVariantClearBuffer_,\n        this.deferredVariantClearBufferSafeMargin_);\n    this.deferredVariant_ = null;\n  }\n  if (this.deferredTextStream_) {\n    this.streamingEngine_.switchTextStream(this.deferredTextStream_);\n    this.deferredTextStream_ = null;\n  }\n};\n\n\n/**\n * Callback from StreamingEngine.\n *\n * @private\n */\nshaka.Player.prototype.onManifestUpdate_ = function() {\n  if (this.parser_ && this.parser_.update) {\n    this.parser_.update();\n  }\n};\n\n\n/**\n * Callback from StreamingEngine.\n *\n * @private\n */\nshaka.Player.prototype.onSegmentAppended_ = function() {\n  if (this.playhead_) {\n    this.playhead_.onSegmentAppended();\n  }\n};\n\n\n/**\n * Callback from AbrManager.\n *\n * @param {shaka.extern.Variant} variant\n * @param {boolean=} clearBuffer\n * @param {number=} safeMargin Optional amount of buffer (in seconds) to retain\n *   when clearing the buffer.\n *   Defaults to 0 if not provided. Ignored if clearBuffer is false.\n * @private\n */\nshaka.Player.prototype.switch_ = function(\n    variant, clearBuffer = false, safeMargin = 0) {\n  shaka.log.debug('switch_');\n  goog.asserts.assert(this.config_.abr.enabled,\n      'AbrManager should not call switch while disabled!');\n  goog.asserts.assert(!this.switchingPeriods_,\n      'AbrManager should not call switch while transitioning between Periods!');\n\n  this.addVariantToSwitchHistory_(variant, /* fromAdaptation */ true);\n\n  if (!this.streamingEngine_) {\n    // There's no way to change it.\n    return;\n  }\n\n  this.streamingEngine_.switchVariant(variant, clearBuffer, safeMargin);\n  this.onAdaptation_();\n};\n\n\n/**\n * Dispatches an 'adaptation' event.\n * @return {!Promise}\n * @private\n */\nshaka.Player.prototype.onAdaptation_ = async function() {\n  // Dispatch an 'adaptation' event next interpreter cycle. This gives\n  // StreamingEngine time to absorb the changes before the user tries to query\n  // them.\n  await this.waitNextTick_();\n\n  if (this.destroyer_.destroyed()) {\n    return;\n  }\n\n  let event = new shaka.util.FakeEvent('adaptation');\n  this.dispatchEvent(event);\n};\n\n\n/**\n * Dispatches a 'trackschanged' event.\n * @return {!Promise}\n * @private\n */\nshaka.Player.prototype.onTracksChanged_ = async function() {\n  // Dispatch a 'trackschanged' event next interpreter cycle. This gives\n  // StreamingEngine time to absorb the changes before the user tries to query\n  // them.\n  await this.waitNextTick_();\n\n  if (this.destroyer_.destroyed()) {\n    return;\n  }\n\n  let event = new shaka.util.FakeEvent('trackschanged');\n  this.dispatchEvent(event);\n};\n\n\n/** @private */\nshaka.Player.prototype.onTextTrackVisibility_ = function() {\n  let event = new shaka.util.FakeEvent('texttrackvisibility');\n  this.dispatchEvent(event);\n};\n\n\n/**\n * @param {!shaka.util.Error} error\n * @private\n */\nshaka.Player.prototype.onError_ = function(error) {\n  // Errors dispatched after destroy is called are irrelevant.\n  if (this.destroyer_.destroyed()) {\n    return;\n  }\n\n  goog.asserts.assert(error instanceof shaka.util.Error, 'Wrong error type!');\n\n  let event = new shaka.util.FakeEvent('error', {'detail': error});\n  this.dispatchEvent(event);\n  if (event.defaultPrevented) {\n    error.handled = true;\n  }\n};\n\n\n/**\n * @param {!Event} event\n * @private\n */\nshaka.Player.prototype.onEvent_ = function(event) {\n  this.dispatchEvent(event);\n};\n\n\n/**\n * @param {!Event} event\n * @private\n */\nshaka.Player.prototype.onVideoError_ = function(event) {\n  if (!this.video_.error) return;\n\n  let code = this.video_.error.code;\n  if (code == 1 /* MEDIA_ERR_ABORTED */) {\n    // Ignore this error code, which should only occur when navigating away or\n    // deliberately stopping playback of HTTP content.\n    return;\n  }\n\n  // Extra error information from MS Edge and IE11:\n  let extended = this.video_.error.msExtendedCode;\n  if (extended) {\n    // Convert to unsigned:\n    if (extended < 0) {\n      extended += Math.pow(2, 32);\n    }\n    // Format as hex:\n    extended = extended.toString(16);\n  }\n\n  // Extra error information from Chrome:\n  let message = this.video_.error.message;\n\n  this.onError_(new shaka.util.Error(\n      shaka.util.Error.Severity.CRITICAL,\n      shaka.util.Error.Category.MEDIA,\n      shaka.util.Error.Code.VIDEO_ERROR,\n      code, extended, message));\n};\n\n\n/**\n * @param {!Object.<string, string>} keyStatusMap A map of hex key IDs to\n *   statuses.\n * @private\n */\nshaka.Player.prototype.onKeyStatus_ = function(keyStatusMap) {\n  goog.asserts.assert(this.streamingEngine_, 'Should have been initialized.');\n  const restrictedStatuses = shaka.Player.restrictedStatuses_;\n\n  let period = this.streamingEngine_.getCurrentPeriod();\n  let tracksChanged = false;\n\n  let keyIds = Object.keys(keyStatusMap);\n  if (keyIds.length == 0) {\n    shaka.log.warning(\n        'Got a key status event without any key statuses, so we don\\'t know ' +\n        'the real key statuses. If we don\\'t have all the keys, you\\'ll need ' +\n        'to set restrictions so we don\\'t select those tracks.');\n  }\n\n  // If EME is using a synthetic key ID, the only key ID is '00' (a single 0\n  // byte).  In this case, it is only used to report global success/failure.\n  // See note about old platforms in: https://bit.ly/2tpez5Z\n  let isGlobalStatus = keyIds.length == 1 && keyIds[0] == '00';\n\n  if (isGlobalStatus) {\n    shaka.log.warning(\n        'Got a synthetic key status event, so we don\\'t know the real key ' +\n        'statuses. If we don\\'t have all the keys, you\\'ll need to set ' +\n        'restrictions so we don\\'t select those tracks.');\n  }\n\n  // Only filter tracks for keys if we have some key statuses to look at.\n  if (keyIds.length) {\n    period.variants.forEach(function(variant) {\n      const streams = shaka.util.StreamUtils.getVariantStreams(variant);\n\n      streams.forEach(function(stream) {\n        let originalAllowed = variant.allowedByKeySystem;\n\n        // Only update if we have a key ID for the stream.\n        // If the key isn't present, then we don't have that key and the track\n        // should be restricted.\n        if (stream.keyId) {\n          let keyStatus = keyStatusMap[isGlobalStatus ? '00' : stream.keyId];\n          variant.allowedByKeySystem =\n              !!keyStatus && restrictedStatuses.indexOf(keyStatus) < 0;\n        }\n\n        if (originalAllowed != variant.allowedByKeySystem) {\n          tracksChanged = true;\n        }\n      });  // streams.forEach\n    });  // period.variants.forEach\n  }  // if (keyIds.length)\n\n  // TODO: Get StreamingEngine to track variants and create getActiveVariant()\n  let activeAudio = this.streamingEngine_.getActiveAudio();\n  let activeVideo = this.streamingEngine_.getActiveVideo();\n  let activeVariant = shaka.util.StreamUtils.getVariantByStreams(\n      activeAudio, activeVideo, period.variants);\n\n  if (activeVariant && !activeVariant.allowedByKeySystem) {\n    shaka.log.debug('Choosing new streams after key status changed');\n    this.chooseStreamsAndSwitch_(period);\n  }\n\n  if (tracksChanged) {\n    this.onTracksChanged_();\n\n    // Update AbrManager about any restricted/un-restricted variants.\n    let variants = shaka.util.StreamUtils.filterVariantsByConfig(\n        period.variants,\n        this.currentAudioLanguage_,\n        this.currentVariantRole_,\n        this.currentAudioChannelCount_);\n    this.abrManager_.setVariants(variants);\n  }\n};\n\n\n/**\n * Callback from DrmEngine\n * @param {string} keyId\n * @param {number} expiration\n * @private\n */\nshaka.Player.prototype.onExpirationUpdated_ = function(keyId, expiration) {\n  if (this.parser_ && this.parser_.onExpirationUpdated) {\n    this.parser_.onExpirationUpdated(keyId, expiration);\n  }\n\n  let event = new shaka.util.FakeEvent('expirationupdated');\n  this.dispatchEvent(event);\n};\n\n/**\n * @return {boolean} true if we should stream text right now.\n * @private\n */\nshaka.Player.prototype.streamText_ = function() {\n  return this.config_.streaming.alwaysStreamText || this.isTextTrackVisible();\n};\n\n\n/**\n * Applys playRangeStart and playRangeEnd to the given timeline.\n *\n * @param {shaka.media.PresentationTimeline} timeline\n * @param {number} playRangeStart\n * @param {number} playRangeEnd\n * @param {boolean} isLive\n *\n * @private\n */\nshaka.Player.applyPlayRange_ = function(timeline,\n                                        playRangeStart,\n                                        playRangeEnd,\n                                        isLive) {\n  if (playRangeStart > 0) {\n    if (isLive) {\n      shaka.log.warning(\n          '|playRangeStart| has been configured for live content. ' +\n          'Ignoring the setting.');\n    } else {\n      timeline.setUserSeekStart(playRangeStart);\n    }\n  }\n\n  // If the playback has been configured to end before the end of the\n  // presentation, update the duration unless it's live content.\n  const fullDuration = timeline.getDuration();\n  if (playRangeEnd < fullDuration) {\n    if (isLive) {\n      shaka.log.warning(\n          '|playRangeEnd| has been configured for live content. ' +\n          'Ignoring the setting.');\n    } else {\n      timeline.setDuration(playRangeEnd);\n    }\n  }\n};\n\n\n/**\n * Checks the given variants and if they are all restricted, throw an\n * appropriate exception.\n *\n * @param {!Array.<shaka.extern.Variant>} variants\n * @private\n */\nshaka.Player.prototype.checkRestrictedVariants_ = function(variants) {\n  const restrictedStatuses = shaka.Player.restrictedStatuses_;\n  const keyStatusMap = this.drmEngine_ ? this.drmEngine_.getKeyStatuses() : {};\n  const keyIds = Object.keys(keyStatusMap);\n  const isGlobalStatus = keyIds.length && keyIds[0] == '00';\n\n  let hasPlayable = false;\n  let hasAppRestrict = false;\n  let missingKeys = [];\n  let badKeyStatuses = [];\n\n  for (let variant of variants) {\n    // TODO: Combine with onKeyStatus_.\n    let streams = [];\n    if (variant.audio) streams.push(variant.audio);\n    if (variant.video) streams.push(variant.video);\n\n    for (let stream of streams) {\n      if (stream.keyId) {\n        let keyStatus = keyStatusMap[isGlobalStatus ? '00' : stream.keyId];\n        if (!keyStatus) {\n          if (missingKeys.indexOf(stream.keyId) < 0) {\n            missingKeys.push(stream.keyId);\n          }\n        } else if (restrictedStatuses.indexOf(keyStatus) >= 0) {\n          if (badKeyStatuses.indexOf(keyStatus) < 0) {\n            badKeyStatuses.push(keyStatus);\n          }\n        }\n      }\n    }\n\n    if (!variant.allowedByApplication) {\n      hasAppRestrict = true;\n    } else if (variant.allowedByKeySystem) {\n      hasPlayable = true;\n    }\n  }\n\n  if (!hasPlayable) {\n    /** @type {shaka.extern.RestrictionInfo} */\n    let data = {\n      hasAppRestrictions: hasAppRestrict,\n      missingKeys: missingKeys,\n      restrictedKeyStatuses: badKeyStatuses,\n    };\n    throw new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.MANIFEST,\n        shaka.util.Error.Code.RESTRICTIONS_CANNOT_BE_MET,\n        data);\n  }\n};\n\n/**\n * Return a promise that will delay the next next action to the next\n * interpreter cycle.\n *\n * @return {!Promise}\n * @private\n */\nshaka.Player.prototype.waitNextTick_ = function() {\n  return Promise.resolve();\n};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.offline.StoredContentUtils');\n\ngoog.require('goog.asserts');\ngoog.require('shaka.media.PresentationTimeline');\ngoog.require('shaka.offline.ManifestConverter');\ngoog.require('shaka.offline.OfflineUri');\ngoog.require('shaka.util.StreamUtils');\n\n\n/**\n * A utility class used to create |shaka.extern.StoredContent| from different\n * types of input.\n */\nshaka.offline.StoredContentUtils = class {\n  /**\n   * @param {string} originalUri\n   * @param {shaka.extern.Manifest} manifest\n   * @param {number} size\n   * @param {!Object} metadata\n   * @return {shaka.extern.StoredContent}\n   */\n  static fromManifest(originalUri, manifest, size, metadata) {\n    goog.asserts.assert(\n        manifest.periods.length,\n        'Cannot create stored content from manifest with no periods.');\n\n    /** @type {number} */\n    let expiration = manifest.expiration == undefined ?\n                     Infinity :\n                     manifest.expiration;\n\n    /** @type {number} */\n    let duration = manifest.presentationTimeline.getDuration();\n\n    /** @type {shaka.extern.Period} */\n    let firstPeriod = manifest.periods[0];\n\n    /** @type {!Array.<shaka.extern.Track>} */\n    let tracks = shaka.util.StreamUtils.getTracks(firstPeriod);\n\n    /** @type {shaka.extern.StoredContent} */\n    let content = {\n      offlineUri: null,\n      originalManifestUri: originalUri,\n      duration: duration,\n      size: size,\n      expiration: expiration,\n      tracks: tracks,\n      appMetadata: metadata,\n    };\n\n    return content;\n  }\n\n\n  /**\n   * @param {!shaka.offline.OfflineUri} offlineUri\n   * @param {shaka.extern.ManifestDB} manifestDB\n   * @return {shaka.extern.StoredContent}\n   */\n  static fromManifestDB(offlineUri, manifestDB) {\n    goog.asserts.assert(\n        manifestDB.periods.length,\n        'Cannot create stored content from manifestDB with no periods.');\n\n    let converter = new shaka.offline.ManifestConverter(\n        offlineUri.mechanism(), offlineUri.cell());\n\n    /** @type {shaka.extern.PeriodDB} */\n    let firstPeriodDB = manifestDB.periods[0];\n    /** @type {!shaka.media.PresentationTimeline} */\n    let timeline = new shaka.media.PresentationTimeline(null, 0);\n\n\n    /** @type {shaka.extern.Period} */\n    let firstPeriod = converter.fromPeriodDB(firstPeriodDB, timeline);\n\n    /** @type {!Object} */\n    let metadata = manifestDB.appMetadata || {};\n\n    /** @type {!Array.<shaka.extern.Track>} */\n    let tracks = shaka.util.StreamUtils.getTracks(firstPeriod);\n\n    /** @type {shaka.extern.StoredContent} */\n    let content = {\n      offlineUri: offlineUri.toString(),\n      originalManifestUri: manifestDB.originalManifestUri,\n      duration: manifestDB.duration,\n      size: manifestDB.size,\n      expiration: manifestDB.expiration,\n      tracks: tracks,\n      appMetadata: metadata,\n    };\n\n    return content;\n  }\n};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.offline.StreamBandwidthEstimator');\n\ngoog.require('shaka.log');\n\n\n/**\n * A utility class to help estimate the size of streams based on stream and\n * variant bandwidths. This class's main purpose is to isolate the logic in\n * creating non-zero bandwidth estimates for all streams so that each stream\n * will have some influence over the progress of the download.\n */\nshaka.offline.StreamBandwidthEstimator = class {\n  constructor() {\n    /** @private {!Object.<number, number>} */\n    this.estimateByStreamId_ = {};\n  }\n\n  /**\n   * Add a new variant to the estimator. This will update the estimates for all\n   * streams in the variant.\n   *\n   * @param {shaka.extern.Variant} variant\n   */\n  addVariant(variant) {\n    // Three cases:\n    //  1 - Only Audio\n    //  2 - Only Video\n    //  3 - Audio and Video\n\n    let audio = variant.audio;\n    let video = variant.video;\n\n    // Case 1\n    if (audio && !video) {\n      let audioBitRate = audio.bandwidth || variant.bandwidth;\n      this.setBitrate_(audio.id, audioBitRate);\n    }\n\n    // Case 2\n    if (!audio && video) {\n      let videoBitRate = video.bandwidth || variant.bandwidth;\n      this.setBitrate_(video.id, videoBitRate);\n    }\n\n    // Case 3\n    if (audio && video) {\n      // Get the audio's bandwidth. If it is missing, default to our default\n      // audio bandwidth.\n      let audioBitRate =\n          audio.bandwidth ||\n          shaka.offline.StreamBandwidthEstimator.DEFAULT_AUDIO_BITRATE_;\n\n      // Get the video's bandwidth. If it is missing, use the variant bandwidth\n      // less the audio. If we get a negative bit rate, fall back to our\n      // default video bandwidth.\n      let videoBitRate = video.bandwidth || (variant.bandwidth - audioBitRate);\n      if (videoBitRate <= 0) {\n        shaka.log.warning(\n            'Audio bit rate consumes variants bandwidth. Setting video ' +\n            'bandwidth to match variant\\'s bandwidth.');\n        videoBitRate = variant.bandwidth;\n      }\n\n      this.setBitrate_(audio.id, audioBitRate);\n      this.setBitrate_(video.id, videoBitRate);\n    }\n  }\n\n  /**\n   * @param {number} stream\n   * @param {number} bitRate\n   * @private\n   */\n  setBitrate_(stream, bitRate) {\n    this.estimateByStreamId_[stream] = bitRate;\n  }\n\n  /**\n   * Create an estimate for the text stream.\n   *\n   * @param {shaka.extern.Stream} text\n   */\n  addText(text) {\n    this.estimateByStreamId_[text.id] =\n        shaka.offline.StreamBandwidthEstimator.DEFAULT_TEXT_BITRATE_;\n  }\n\n  /**\n   * Get the estimate for a segment that is part of a stream that has already\n   * added to the estimator.\n   *\n   * @param {number} id\n   * @param {!shaka.media.SegmentReference} segment\n   * @return {number}\n   */\n  getSegmentEstimate(id, segment) {\n    let duration = segment.endTime - segment.startTime;\n    return this.getEstimate_(id) * duration;\n  }\n\n  /**\n   * Get the estimate for an init segment for a stream that has already\n   * added to the estimator.\n   *\n   * @param {number} id\n   * @return {number}\n   */\n  getInitSegmentEstimate(id) {\n    // Assume that the init segment is worth approximately half a second of\n    // content.\n    let duration = 0.5;\n    return this.getEstimate_(id) * duration;\n  }\n\n  /**\n   * @param {number} id\n   * @return {number}\n   * @private\n   */\n  getEstimate_(id) {\n    let bitRate = this.estimateByStreamId_[id];\n\n    if (bitRate == null) {\n      bitRate = 0;\n      shaka.log.error(\n          'Asking for bitrate of stream not given to the estimator');\n    }\n\n    if (bitRate == 0) {\n      shaka.log.warning(\n          'Using bitrate of 0, this stream won\\'t affect progress');\n    }\n\n    return bitRate;\n  }\n};\n\n\n/**\n * Since audio bandwidth does not vary much, we are going to use a constant\n * approximation for audio bit rate allowing use to more accurately guess at\n * the video bitrate.\n *\n * YouTube's suggested bitrate for stereo audio is 384 kbps so we are going to\n * assume that: https://support.google.com/youtube/answer/1722171?hl=en\n *\n * @const {number}\n * @private\n */\nshaka.offline.StreamBandwidthEstimator.DEFAULT_AUDIO_BITRATE_ = 393216;\n\n\n/**\n * Since we don't normally get the bitrate for text, we still want to create\n * some approximation so that it can influence progress. This will use the\n * bitrate from \"Tears of Steal\" to give some kind of data-driven result.\n *\n * The file size for English subtitles is 4.7 KB. The video is 12:14 long,\n * which means that the text's bit rate is around 52 bps.\n *\n * @const {number}\n * @private\n */\nshaka.offline.StreamBandwidthEstimator.DEFAULT_TEXT_BITRATE_ = 52;\n\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.offline.Storage');\n\ngoog.require('goog.asserts');\ngoog.require('shaka.Player');\ngoog.require('shaka.log');\ngoog.require('shaka.media.DrmEngine');\ngoog.require('shaka.media.ManifestParser');\ngoog.require('shaka.net.NetworkingEngine');\ngoog.require('shaka.offline.DownloadManager');\ngoog.require('shaka.offline.ManifestConverter');\ngoog.require('shaka.offline.OfflineUri');\ngoog.require('shaka.offline.StorageCellPath');\ngoog.require('shaka.offline.StorageMuxer');\ngoog.require('shaka.offline.StoredContentUtils');\ngoog.require('shaka.offline.StreamBandwidthEstimator');\ngoog.require('shaka.util.ArrayUtils');\ngoog.require('shaka.util.ConfigUtils');\ngoog.require('shaka.util.Destroyer');\ngoog.require('shaka.util.Error');\ngoog.require('shaka.util.Functional');\ngoog.require('shaka.util.IDestroyable');\ngoog.require('shaka.util.MapUtils');\ngoog.require('shaka.util.PlayerConfiguration');\ngoog.require('shaka.util.StreamUtils');\n\n\n/**\n * This manages persistent offline data including storage, listing, and deleting\n * stored manifests.  Playback of offline manifests are done through the Player\n * using a special URI (see shaka.offline.OfflineUri).\n *\n * First, check support() to see if offline is supported by the platform.\n * Second, configure() the storage object with callbacks to your application.\n * Third, call store(), remove(), or list() as needed.\n * When done, call destroy().\n *\n * @param {!shaka.Player=} player\n *    A player instance to share a networking engine and configuration with.\n *    When initializing with a player, storage is only valid as long as\n *    |destroy| has not been called on the player instance. When omitted,\n *    storage will manage its own networking engine and configuration.\n *\n * @struct\n * @constructor\n * @implements {shaka.util.IDestroyable}\n * @export\n */\nshaka.offline.Storage = function(player) {\n  // It is an easy mistake to make to pass a Player proxy from CastProxy.\n  // Rather than throw a vague exception later, throw an explicit and clear one\n  // now.\n  //\n  // TODO(vaage): After we decide whether or not we want to support\n  //  initializing storage with a player proxy, we should either remove\n  //  this error or rename the error.\n  if (player && player.constructor != shaka.Player) {\n    throw new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.STORAGE,\n        shaka.util.Error.Code.LOCAL_PLAYER_INSTANCE_REQUIRED);\n  }\n\n  /** @private {?shaka.extern.PlayerConfiguration} */\n  this.config_ = null;\n\n  /** @private {shaka.net.NetworkingEngine} */\n  this.networkingEngine_ = null;\n\n  // Initialize |config_| and |networkingEngine_| based on whether or not\n  // we were given a player instance.\n  if (player) {\n    this.config_ = player.getSharedConfiguration();\n    this.networkingEngine_ = player.getNetworkingEngine();\n\n    goog.asserts.assert(\n        this.networkingEngine_,\n        'Storage should not be initialized with a player that had |destroy| ' +\n            'called on it.');\n  } else {\n    this.config_ = shaka.util.PlayerConfiguration.createDefault();\n    this.networkingEngine_ = new shaka.net.NetworkingEngine();\n  }\n\n  /** @private {boolean} */\n  this.storeInProgress_ = false;\n\n  /** @private {Array.<shaka.extern.Track>} */\n  this.firstPeriodTracks_ = null;\n\n  /**\n   * A list of segment ids for all the segments that were added during the\n   * current store. If the store fails or is aborted, these need to be\n   * removed from storage.\n   * @private {!Array.<number>}\n   */\n  this.segmentsFromStore_ = [];\n\n  /**\n   * A list of open operations that are being performed by this instance of\n   * |shaka.offline.Storage|.\n   *\n   * @private {!Array.<!Promise>}\n   */\n  this.openOperations_ = [];\n\n  /**\n   * Storage should only destroy the networking engine if it was initialized\n   * without a player instance. Store this as a flag here to avoid including\n   * the player object in the destoyer's closure.\n   *\n   * @type {boolean}\n   */\n  const destroyNetworkingEngine = !player;\n\n  /** @private {!shaka.util.Destroyer} */\n  this.destroyer_ = new shaka.util.Destroyer(async () => {\n    // Wait for all the open operations to end. Wrap each operations so that a\n    // single rejected promise won't cause |Promise.all| to return early or to\n    // return a rejected Promise.\n    const noop = () => {};\n    await Promise.all(this.openOperations_.map((op) => op.then(noop, noop)));\n\n    // Wait until after all the operations have finished before we destroy\n    // the networking engine to avoid any unexpected errors.\n    if (destroyNetworkingEngine) {\n      await this.networkingEngine_.destroy();\n    }\n\n    // Drop all references to internal objects to help with GC.\n    this.config_ = null;\n    this.networkingEngine_ = null;\n  });\n};\n\n\n/**\n * Gets whether offline storage is supported.  Returns true if offline storage\n * is supported for clear content.  Support for offline storage of encrypted\n * content will not be determined until storage is attempted.\n *\n * @return {boolean}\n * @export\n */\nshaka.offline.Storage.support = function() {\n  return shaka.offline.StorageMuxer.support();\n};\n\n\n/**\n * @override\n * @export\n */\nshaka.offline.Storage.prototype.destroy = function() {\n  return this.destroyer_.destroy();\n};\n\n\n/**\n * Sets configuration values for Storage.  This is associated with\n * Player.configure and will change the player instance given at\n * initialization.\n *\n * @param {!Object} config This should follow the form of\n *   {@link shaka.extern.PlayerConfiguration}, but you may omit any field\n *   you do not wish to change.\n * @export\n */\nshaka.offline.Storage.prototype.configure = function(config) {\n  shaka.offline.Storage.verifyConfig_(config);\n\n  goog.asserts.assert(\n      this.config_, 'Cannot reconfigure stroage after calling destroy.');\n\n  shaka.util.ConfigUtils.mergeConfigObjects(\n      this.config_ /* destination */,\n      config /* updates */,\n      shaka.util.PlayerConfiguration.createDefault() /* template */,\n      {},\n      '');\n};\n\n\n/**\n * Return the networking engine that storage is using. If storage was\n * initialized with a player instance, then the networking engine returned\n * will be the same as |player.getNetworkingEngine()|.\n *\n * The returned value will only be null if |destroy| was called before\n * |getNetworkingEngine|.\n *\n * @return {shaka.net.NetworkingEngine}\n * @export\n */\nshaka.offline.Storage.prototype.getNetworkingEngine = function() {\n  return this.networkingEngine_;\n};\n\n\n/**\n * Stores the given manifest.  If the content is encrypted, and encrypted\n * content cannot be stored on this platform, the Promise will be rejected with\n * error code 6001, REQUESTED_KEY_SYSTEM_CONFIG_UNAVAILABLE.\n *\n * @param {string} uri The URI of the manifest to store.\n * @param {!Object=} appMetadata An arbitrary object from the application\n *   that will be stored along-side the offline content.  Use this for any\n *   application-specific metadata you need associated with the stored content.\n *   For details on the data types that can be stored here, please refer to\n *   {@link https://bit.ly/StructClone}\n * @param {string|shaka.extern.ManifestParser.Factory=} mimeType\n *   The mime type for the content |manifestUri| points to or a manifest parser\n *   factory to override auto-detection or use an unregistered parser. Passing\n *   a manifest parser factory is deprecated and will be removed.\n * @return {!Promise.<shaka.extern.StoredContent>}  A Promise to a structure\n *   representing what was stored.  The \"offlineUri\" member is the URI that\n *   should be given to Player.load() to play this piece of content offline.\n *   The \"appMetadata\" member is the appMetadata argument you passed to store().\n * @export\n */\nshaka.offline.Storage.prototype.store = function(uri, appMetadata, mimeType) {\n  /** @type {?shaka.extern.ManifestParser.Factory} */\n  let Factory = null;\n  /** @type {?string} */\n  let contentMimeType = null;\n\n  // TODO(vaage) : Remove the code that supports manifest parser factories\n  //               in v2.6.\n  if (mimeType) {\n    if (typeof mimeType == 'string') {\n      contentMimeType = /** @type {string} */(mimeType);\n    } else {\n      shaka.log.alwaysWarn(\n          'Loading with a manifest parser factory is deprecated. Instead ' +\n              'please register a manifest parser and pass in the mime type.');\n      Factory = /** @type {shaka.extern.ManifestParser.Factory} */(mimeType);\n    }\n  }\n\n  const getParser = async () => {\n    const parser = Factory ?\n                   new Factory() :\n                   await this.getParser_(uri, contentMimeType);\n\n    parser.configure(this.config_.manifest);\n    return parser;\n  };\n\n  return this.startOperation_(this.store_(uri, appMetadata || {}, getParser));\n};\n\n\n/**\n * See |shaka.offline.Storage.store| for details.\n *\n * @param {string} uri\n * @param {!Object} appMetadata\n * @param {function():!Promise.<shaka.extern.ManifestParser>} getParser\n * @return {!Promise.<shaka.extern.StoredContent>}\n * @private\n */\nshaka.offline.Storage.prototype.store_ = async function(\n    uri, appMetadata, getParser) {\n  // TODO: Create a way for a download to be canceled while being downloaded.\n  this.requireSupport_();\n\n  if (this.storeInProgress_) {\n    return Promise.reject(new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.STORAGE,\n        shaka.util.Error.Code.STORE_ALREADY_IN_PROGRESS));\n  }\n  this.storeInProgress_ = true;\n\n  let error = null;\n  let onError = (e) => {\n    // To avoid hiding a previously thrown error, throw the older error.\n    error = error || e;\n  };\n\n  let data = await this.loadInternal(uri, onError, getParser);\n\n  let canDownload = !data.manifest.presentationTimeline.isLive() &&\n                    !data.manifest.presentationTimeline.isInProgress();\n\n  if (!canDownload) {\n    throw new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.STORAGE,\n        shaka.util.Error.Code.CANNOT_STORE_LIVE_OFFLINE,\n        uri);\n  }\n\n  this.checkDestroyed_();\n  if (error) { throw error; }\n\n  /** @type {!shaka.offline.StorageMuxer} */\n  const muxer = new shaka.offline.StorageMuxer();\n  return shaka.util.Destroyer.with([muxer, data.drmEngine], async () => {\n    try {\n      await muxer.init();\n      this.checkDestroyed_();\n\n      // Re-filter now that DrmEngine is initialized.\n      this.filterAllPeriods_(data.drmEngine, data.manifest.periods);\n\n      // Get the cell that we are saving the manifest to. Once we get a cell\n      // we will only reference the cell and not the muxer so that the manifest\n      // and segments will all be saved to the same cell.\n      let active = await muxer.getActive();\n      this.checkDestroyed_();\n\n      try {\n        let manifestDB = await this.downloadManifest_(\n            active.cell,\n            data.drmEngine,\n            data.manifest,\n            uri,\n            appMetadata);\n        this.checkDestroyed_();\n\n        let ids = await active.cell.addManifests([manifestDB]);\n        this.checkDestroyed_();\n\n        let offlineUri = shaka.offline.OfflineUri.manifest(\n            active.path.mechanism, active.path.cell, ids[0]);\n        return shaka.offline.StoredContentUtils.fromManifestDB(\n            offlineUri, manifestDB);\n      } catch (e) {\n        // We need to remove all the segments that did get into storage as\n        // the manifest won't be playable.\n        let segmentsToRemove = this.segmentsFromStore_;\n        let noop = () => {};\n        await active.cell.removeSegments(segmentsToRemove, noop);\n\n        // If we already had an error, ignore this error to avoid hiding\n        // the original error.\n        throw error || e;\n      }\n    } finally {\n      this.storeInProgress_ = false;\n      this.firstPeriodTracks_ = null;\n      this.segmentsFromStore_ = [];\n    }\n  });\n};\n\n\n/**\n * Create a download manager and download the manifest.\n *\n * @param {shaka.extern.StorageCell} storage\n * @param {!shaka.media.DrmEngine} drm\n * @param {shaka.extern.Manifest} manifest\n * @param {string} uri\n * @param {!Object} metadata\n * @return {!Promise.<shaka.extern.ManifestDB>}\n * @private\n */\nshaka.offline.Storage.prototype.downloadManifest_ = async function(\n    storage, drm, manifest, uri, metadata) {\n  const noSize = 0;\n  let pendingContent = shaka.offline.StoredContentUtils.fromManifest(\n      uri, manifest, noSize, metadata);\n\n  /** @type {!shaka.offline.DownloadManager} */\n  let downloader = new shaka.offline.DownloadManager((progress, size) => {\n    // Update the size of the stored content before issuing a progress update.\n    pendingContent.size = size;\n    this.config_.offline.progressCallback(pendingContent, progress);\n  });\n\n  goog.asserts.assert(\n      this.networkingEngine_,\n      'Cannot call |downloadManifest_| after calling |destroy|.');\n  const networkingEngine = this.networkingEngine_;\n\n  /** @type {shaka.extern.ManifestDB} */\n  let manifestDB;\n\n  await shaka.util.Destroyer.with([downloader], async () => {\n    manifestDB = this.createOfflineManifest_(\n        downloader, storage, drm, manifest, uri, metadata);\n    await downloader.download(networkingEngine);\n  });\n\n  // Update the size before saving it.\n  manifestDB.size = pendingContent.size;\n  return manifestDB;\n};\n\n\n/**\n * Removes the given stored content.\n *\n * @param {string} contentUri\n * @return {!Promise}\n * @export\n */\nshaka.offline.Storage.prototype.remove = function(contentUri) {\n  return this.startOperation_(this.remove_(contentUri));\n};\n\n\n/**\n * See |shaka.offline.Storage.remove| for details.\n *\n * @param {string} contentUri\n * @return {!Promise}\n * @private\n */\nshaka.offline.Storage.prototype.remove_ = function(contentUri) {\n  this.requireSupport_();\n\n  let nullableUri = shaka.offline.OfflineUri.parse(contentUri);\n  if (nullableUri == null || !nullableUri.isManifest()) {\n    return Promise.reject(new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.STORAGE,\n        shaka.util.Error.Code.MALFORMED_OFFLINE_URI,\n        contentUri));\n  }\n\n  let uri = /** @type {!shaka.offline.OfflineUri} */ (nullableUri);\n\n  let muxer = new shaka.offline.StorageMuxer();\n  return shaka.util.Destroyer.with([muxer], async () => {\n    await muxer.init();\n\n    let cell = await muxer.getCell(uri.mechanism(), uri.cell());\n    let manifests = await cell.getManifests([uri.key()]);\n    let manifest = manifests[0];\n\n    await Promise.all([\n      this.removeFromDRM_(uri, manifest),\n      this.removeFromStorage_(cell, uri, manifest),\n    ]);\n  });\n};\n\n\n/**\n * @param {!shaka.offline.OfflineUri} uri\n * @param {shaka.extern.ManifestDB} manifestDB\n * @return {!Promise}\n * @private\n */\nshaka.offline.Storage.prototype.removeFromDRM_ = function(uri, manifestDB) {\n  let error;\n  let onError = (e) => {\n    // Ignore errors if the session was already removed.\n    if (e.code != shaka.util.Error.Code.OFFLINE_SESSION_REMOVED) {\n      error = e;\n    }\n  };\n\n  goog.asserts.assert(\n      this.networkingEngine_, 'Cannot call |removeFromDRM_| after |destroy|');\n\n  let drmEngine = new shaka.media.DrmEngine({\n    netEngine: this.networkingEngine_,\n    onError: onError,\n    onKeyStatus: () => {},\n    onExpirationUpdated: () => {},\n    onEvent: () => {},\n  });\n\n  drmEngine.configure(this.config_.drm);\n\n  let converter = new shaka.offline.ManifestConverter(\n      uri.mechanism(), uri.cell());\n  let manifest = converter.fromManifestDB(manifestDB);\n\n  return shaka.util.Destroyer.with([drmEngine], async () => {\n    await drmEngine.initForStorage(\n        manifest, this.config_.offline.usePersistentLicense);\n    await drmEngine.removeSessions(manifestDB.sessionIds);\n  }).then(() => { if (error) { throw error; } });\n};\n\n\n/**\n * @param {shaka.extern.StorageCell} storage\n * @param {!shaka.offline.OfflineUri} uri\n * @param {shaka.extern.ManifestDB} manifest\n * @return {!Promise}\n * @private\n */\nshaka.offline.Storage.prototype.removeFromStorage_ = function(\n    storage, uri, manifest) {\n  /** @type {!Array.<number>} */\n  let segmentIds = shaka.offline.Storage.getAllSegmentIds_(manifest);\n\n  // Count(segments) + Count(manifests)\n  let toRemove = segmentIds.length + 1;\n  let removed = 0;\n\n  let pendingContent = shaka.offline.StoredContentUtils.fromManifestDB(\n      uri, manifest);\n\n  let onRemove = (key) => {\n    removed += 1;\n    this.config_.offline.progressCallback(pendingContent, removed / toRemove);\n  };\n\n  return Promise.all([\n    storage.removeSegments(segmentIds, onRemove),\n    storage.removeManifests([uri.key()], onRemove),\n  ]);\n};\n\n\n/**\n * Lists all the stored content available.\n *\n * @return {!Promise.<!Array.<shaka.extern.StoredContent>>}  A Promise to an\n *   array of structures representing all stored content.  The \"offlineUri\"\n *   member of the structure is the URI that should be given to Player.load()\n *   to play this piece of content offline.  The \"appMetadata\" member is the\n *   appMetadata argument you passed to store().\n * @export\n */\nshaka.offline.Storage.prototype.list = function() {\n  return this.startOperation_(this.list_());\n};\n\n\n/**\n * See |shaka.offline.Storage.list| for details.\n *\n * @return {!Promise.<!Array.<shaka.extern.StoredContent>>}\n * @private\n */\nshaka.offline.Storage.prototype.list_ = function() {\n  this.requireSupport_();\n\n  /** @type {!Array.<shaka.extern.StoredContent>} */\n  let result = [];\n\n  /**\n   * @param {!shaka.offline.StorageCellPath} path\n   * @param {shaka.extern.StorageCell} cell\n   */\n  async function onCell(path, cell) {\n    let manifests = await cell.getAllManifests();\n\n    shaka.util.MapUtils.forEach(manifests, (key, manifest) => {\n      let uri = shaka.offline.OfflineUri.manifest(\n          path.mechanism, path.cell, key);\n      let content = shaka.offline.StoredContentUtils.fromManifestDB(\n          uri, manifest);\n\n      result.push(content);\n    });\n  }\n\n  // Go over each storage cell and call |onCell| to create our list of\n  // stored content.\n  let muxer = new shaka.offline.StorageMuxer();\n  return shaka.util.Destroyer.with([muxer], async () => {\n    await muxer.init();\n\n    let p = Promise.resolve();\n    muxer.forEachCell((path, cell) => {\n      p = p.then(() => onCell(path, cell));\n    });\n\n    await p;\n  }).then(() => result);\n};\n\n\n/**\n * Loads the given manifest, parses it, and constructs the DrmEngine.  This\n * stops the manifest parser.  This may be replaced by tests.\n *\n * @param {string} manifestUri\n * @param {function(*)} onError\n * @param {function():!Promise.<shaka.extern.ManifestParser>} getParser\n * @return {!Promise.<{\n *   manifest: shaka.extern.Manifest,\n *   drmEngine: !shaka.media.DrmEngine\n * }>}\n */\nshaka.offline.Storage.prototype.loadInternal = function(\n    manifestUri, onError, getParser) {\n  goog.asserts.assert(\n      this.networkingEngine_,\n      'Cannot call |loadInternal| after calling |destroy|');\n  const netEngine = this.networkingEngine_;\n\n  const config = this.config_;\n\n  /** @type {shaka.extern.Manifest} */\n  let manifest;\n  /** @type {!shaka.media.DrmEngine} */\n  let drmEngine;\n  /** @type {shaka.extern.ManifestParser} */\n  let manifestParser;\n\n  let onKeyStatusChange = function() {};\n\n  // TODO(vaage): Change the promise chain below to use async/await.\n\n  return getParser().then(function(parser) {\n        this.checkDestroyed_();\n\n        manifestParser = parser;\n\n        drmEngine = new shaka.media.DrmEngine({\n          netEngine: netEngine,\n          onError: onError,\n          onKeyStatus: onKeyStatusChange,\n          onExpirationUpdated: () => {},\n          onEvent: () => {},\n        });\n\n        drmEngine.configure(config.drm);\n\n        let playerInterface = {\n          networkingEngine: netEngine,\n          filterAllPeriods: (periods) => {\n            this.filterAllPeriods_(drmEngine, periods);\n          },\n          filterNewPeriod: (period) => {\n            this.filterPeriod_(drmEngine, period);\n          },\n          onTimelineRegionAdded: function() {},\n          onEvent: function() {},\n          onError: onError,\n        };\n\n        return manifestParser.start(manifestUri, playerInterface);\n      }.bind(this))\n      .then(function(data) {\n        this.checkDestroyed_();\n        manifest = data;\n        return drmEngine.initForStorage(\n            manifest, this.config_.offline.usePersistentLicense);\n      }.bind(this))\n      .then(function() {\n        this.checkDestroyed_();\n        return this.createSegmentIndex_(manifest);\n      }.bind(this))\n      .then(function() {\n        this.checkDestroyed_();\n        return drmEngine.createOrLoad();\n      }.bind(this))\n      .then(function() {\n        this.checkDestroyed_();\n        return manifestParser.stop();\n      }.bind(this))\n      .then(function() {\n        this.checkDestroyed_();\n        return {manifest: manifest, drmEngine: drmEngine};\n      }.bind(this))\n      .catch(function(error) {\n        if (manifestParser) {\n          return manifestParser.stop().then(function() { throw error; });\n        } else {\n          throw error;\n        }\n      });\n};\n\n\n/**\n * @param {!shaka.media.DrmEngine} drmEngine\n * @param {!Array.<shaka.extern.Period>} periods\n * @private\n */\nshaka.offline.Storage.prototype.filterAllPeriods_ = function(\n    drmEngine, periods) {\n  periods.forEach((period) => this.filterPeriod_(drmEngine, period));\n};\n\n\n/**\n * @param {!shaka.media.DrmEngine} drmEngine\n * @param {shaka.extern.Period} period\n * @private\n */\nshaka.offline.Storage.prototype.filterPeriod_ = function(drmEngine, period) {\n  const StreamUtils = shaka.util.StreamUtils;\n\n  const maxHwRes = {width: Infinity, height: Infinity};\n\n  /** @type {?shaka.extern.Variant} */\n  let variant = null;\n\n  if (this.firstPeriodTracks_) {\n    let variantTrack = this.firstPeriodTracks_.filter(function(track) {\n      return track.type == 'variant';\n    })[0];\n\n    if (variantTrack) {\n      variant = StreamUtils.findVariantForTrack(period, variantTrack);\n    }\n  }\n\n  /** @type {?shaka.extern.Stream} */\n  let activeAudio = null;\n  /** @type {?shaka.extern.Stream} */\n  let activeVideo = null;\n\n  if (variant) {\n    // Use the first variant as the container of \"active streams\".  This\n    // is then used to filter out the streams that are not compatible with it.\n    // This ensures that in multi-Period content, all Periods have streams\n    // with compatible MIME types.\n    if (variant.audio) activeAudio = variant.audio;\n    if (variant.video) activeVideo = variant.video;\n  }\n\n  StreamUtils.filterNewPeriod(\n      drmEngine, activeAudio, activeVideo, period);\n  StreamUtils.applyRestrictions(\n      period.variants, this.config_.restrictions, maxHwRes);\n};\n\n\n/**\n * Calls createSegmentIndex for all streams in the manifest.\n *\n * @param {shaka.extern.Manifest} manifest\n * @return {!Promise}\n * @private\n */\nshaka.offline.Storage.prototype.createSegmentIndex_ = function(manifest) {\n  const Functional = shaka.util.Functional;\n  let streams = manifest.periods\n      .map(function(period) { return period.variants; })\n      .reduce(Functional.collapseArrays, [])\n      .map(function(variant) {\n        return shaka.util.StreamUtils.getVariantStreams(variant);\n      })\n      .reduce(Functional.collapseArrays, [])\n      .filter(Functional.isNotDuplicate);\n\n  let textStreams = manifest.periods\n      .map(function(period) { return period.textStreams; })\n      .reduce(Functional.collapseArrays, []);\n\n  streams.push.apply(streams, textStreams);\n  return Promise.all(\n      streams.map(function(stream) { return stream.createSegmentIndex(); }));\n};\n\n\n/**\n * Creates an offline 'manifest' for the real manifest.  This does not store the\n * segments yet, only adds them to the download manager through createPeriod_.\n *\n * @param {!shaka.offline.DownloadManager} downloader\n * @param {shaka.extern.StorageCell} storage\n * @param {!shaka.media.DrmEngine} drmEngine\n * @param {shaka.extern.Manifest} manifest\n * @param {string} originalManifestUri\n * @param {!Object} metadata\n * @return {shaka.extern.ManifestDB}\n * @private\n */\nshaka.offline.Storage.prototype.createOfflineManifest_ = function(\n    downloader, storage, drmEngine, manifest, originalManifestUri, metadata) {\n  let estimator = new shaka.offline.StreamBandwidthEstimator();\n\n  let periods = manifest.periods.map((period) => {\n    return this.createPeriod_(\n        downloader, storage, estimator, drmEngine, manifest, period);\n  });\n\n  let drmInfo = drmEngine.getDrmInfo();\n  let sessions = drmEngine.getSessionIds();\n\n  if (drmInfo && this.config_.offline.usePersistentLicense) {\n    if (!sessions.length) {\n      throw new shaka.util.Error(\n          shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.STORAGE,\n          shaka.util.Error.Code.NO_INIT_DATA_FOR_OFFLINE, originalManifestUri);\n    }\n    // Don't store init data, since we have stored sessions.\n    drmInfo.initData = [];\n  }\n\n  return {\n    originalManifestUri: originalManifestUri,\n    duration: manifest.presentationTimeline.getDuration(),\n    size: 0,\n    expiration: drmEngine.getExpiration(),\n    periods: periods,\n    sessionIds: this.config_.offline.usePersistentLicense ? sessions : [],\n    drmInfo: drmInfo,\n    appMetadata: metadata,\n  };\n};\n\n\n/**\n * Converts a manifest Period to a database Period.  This will use the current\n * configuration to get the tracks to use, then it will search each segment\n * index and add all the segments to the download manager through createStream_.\n *\n * @param {!shaka.offline.DownloadManager} downloader\n * @param {shaka.extern.StorageCell} storage\n * @param {shaka.offline.StreamBandwidthEstimator} estimator\n * @param {!shaka.media.DrmEngine} drmEngine\n * @param {shaka.extern.Manifest} manifest\n * @param {shaka.extern.Period} period\n * @return {shaka.extern.PeriodDB}\n * @private\n */\nshaka.offline.Storage.prototype.createPeriod_ = function(\n    downloader, storage, estimator, drmEngine, manifest, period) {\n  const StreamUtils = shaka.util.StreamUtils;\n\n  let variantTracks = StreamUtils.getVariantTracks(period, null, null);\n  let textTracks = StreamUtils.getTextTracks(period, null);\n  let allTracks = variantTracks.concat(textTracks);\n\n  let chosenTracks = this.config_.offline.trackSelectionCallback(allTracks);\n\n  if (this.firstPeriodTracks_ == null) {\n    this.firstPeriodTracks_ = chosenTracks;\n    // Now that the first tracks are chosen, filter again.  This ensures all\n    // Periods have compatible content types.\n    this.filterAllPeriods_(drmEngine, manifest.periods);\n  }\n\n  // Check for any similar tracks.\n  if (shaka.offline.Storage.lookForSimilarTracks_(chosenTracks)) {\n    shaka.log.warning(\n        'Multiple tracks of the same type/kind/language given.');\n  }\n\n  // Pass all variants and text streams to the estimator so that we can\n  // get the best estimate for each stream later.\n  manifest.periods.forEach((period) => {\n    period.variants.forEach((variant) => { estimator.addVariant(variant); });\n    period.textStreams.forEach((text) => { estimator.addText(text); });\n  });\n\n  // Need a way to look up which streams should be downloaded. Use a map so\n  // that we can easily lookup if a stream should be downloaded just by\n  // checking if its id is in the map.\n  let idMap = {};\n  chosenTracks.forEach((track) => {\n    if (track.type == 'variant' && track.audioId != null) {\n      idMap[track.audioId] = true;\n    }\n    if (track.type == 'variant' && track.videoId != null) {\n      idMap[track.videoId] = true;\n    }\n    if (track.type == 'text') {\n      idMap[track.id] = true;\n    }\n  });\n\n  // Find the streams we want to download and create a stream db instance\n  // for each of them.\n  let streamDBs = {};\n  shaka.offline.Storage.getStreamSet_(manifest)\n      .filter((stream) => !!idMap[stream.id])\n      .forEach((stream) => {\n        streamDBs[stream.id] = this.createStream_(\n            downloader, storage, estimator, manifest, period, stream);\n      });\n\n  // Connect streams and variants together.\n  chosenTracks.forEach((track) => {\n    if (track.type == 'variant' && track.audioId != null) {\n      streamDBs[track.audioId].variantIds.push(track.id);\n    }\n    if (track.type == 'variant' && track.videoId != null) {\n      streamDBs[track.videoId].variantIds.push(track.id);\n    }\n  });\n\n  return {\n    startTime: period.startTime,\n    streams: shaka.util.MapUtils.values(streamDBs),\n  };\n};\n\n\n/**\n * Converts a manifest stream to a database stream.  This will search the\n * segment index and add all the segments to the download manager.\n *\n * @param {!shaka.offline.DownloadManager} downloader\n * @param {shaka.extern.StorageCell} storage\n * @param {shaka.offline.StreamBandwidthEstimator} estimator\n * @param {shaka.extern.Manifest} manifest\n * @param {shaka.extern.Period} period\n * @param {shaka.extern.Stream} stream\n * @return {shaka.extern.StreamDB}\n * @private\n */\nshaka.offline.Storage.prototype.createStream_ = function(\n    downloader, storage, estimator, manifest, period, stream) {\n  /** @type {shaka.extern.StreamDB} */\n  let streamDb = {\n    id: stream.id,\n    originalId: stream.originalId,\n    primary: stream.primary,\n    presentationTimeOffset: stream.presentationTimeOffset || 0,\n    contentType: stream.type,\n    mimeType: stream.mimeType,\n    codecs: stream.codecs,\n    frameRate: stream.frameRate,\n    kind: stream.kind,\n    language: stream.language,\n    label: stream.label,\n    width: stream.width || null,\n    height: stream.height || null,\n    initSegmentKey: null,\n    encrypted: stream.encrypted,\n    keyId: stream.keyId,\n    segments: [],\n    variantIds: [],\n  };\n\n  /** @type {number} */\n  let startTime =\n      manifest.presentationTimeline.getSegmentAvailabilityStart();\n\n  // Download each stream in parallel.\n  let downloadGroup = stream.id;\n\n  shaka.offline.Storage.forEachSegment_(stream, startTime, (segment) => {\n    downloader.queue(\n        downloadGroup,\n        this.createRequest_(segment),\n        estimator.getSegmentEstimate(stream.id, segment),\n        (data) => {\n          return storage.addSegments([{data: data}]).then((ids) => {\n            this.segmentsFromStore_.push(ids[0]);\n\n            streamDb.segments.push({\n              startTime: segment.startTime,\n              endTime: segment.endTime,\n              dataKey: ids[0],\n            });\n          });\n        });\n  });\n\n  let initSegment = stream.initSegmentReference;\n  if (initSegment) {\n    downloader.queue(\n        downloadGroup,\n        this.createRequest_(initSegment),\n        estimator.getInitSegmentEstimate(stream.id),\n        (data) => {\n          return storage.addSegments([{data: data}]).then((ids) => {\n            this.segmentsFromStore_.push(ids[0]);\n            streamDb.initSegmentKey = ids[0];\n          });\n        });\n  }\n\n  return streamDb;\n};\n\n\n/**\n * @param {shaka.extern.Stream} stream\n * @param {number} startTime\n * @param {function(!shaka.media.SegmentReference)} callback\n * @private\n */\nshaka.offline.Storage.forEachSegment_ = function(stream, startTime, callback) {\n  /** @type {?number} */\n  let i = stream.findSegmentPosition(startTime);\n  /** @type {?shaka.media.SegmentReference} */\n  let ref = i == null ? null : stream.getSegmentReference(i);\n\n  while (ref) {\n    callback(ref);\n    ref = stream.getSegmentReference(++i);\n  }\n};\n\n\n/**\n * Throws an error if the object is destroyed.\n * @private\n */\nshaka.offline.Storage.prototype.checkDestroyed_ = function() {\n  if (this.destroyer_.destroyed()) {\n    throw new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.STORAGE,\n        shaka.util.Error.Code.OPERATION_ABORTED);\n  }\n};\n\n\n/**\n * Used by functions that need storage support to ensure that the current\n * platform has storage support before continuing. This should only be\n * needed to be used at the start of public methods.\n *\n * @private\n */\nshaka.offline.Storage.prototype.requireSupport_ = function() {\n  if (!shaka.offline.Storage.support()) {\n    throw new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.STORAGE,\n        shaka.util.Error.Code.STORAGE_NOT_SUPPORTED);\n  }\n};\n\n\n/**\n * @param {!shaka.media.SegmentReference|\n *         !shaka.media.InitSegmentReference} segment\n * @return {shaka.extern.Request}\n * @private\n */\nshaka.offline.Storage.prototype.createRequest_ = function(segment) {\n  const retryParams = this.config_.streaming.retryParameters;\n  let request = shaka.net.NetworkingEngine.makeRequest(\n      segment.getUris(), retryParams);\n\n  if (segment.startByte != 0 || segment.endByte != null) {\n    let end = segment.endByte == null ? '' : segment.endByte;\n    request.headers['Range'] = 'bytes=' + segment.startByte + '-' + end;\n  }\n\n  return request;\n};\n\n\n/**\n * Perform an action. Track the action's progress so that when we destroy\n * we will wait until all the actions have completed before allowing destroy\n * to resolve.\n *\n * @param {!Promise<T>} action\n * @return {!Promise<T>}\n * @template T\n * @private\n */\nshaka.offline.Storage.prototype.startOperation_ = async function(action) {\n  this.openOperations_.push(action);\n\n  try {\n    // Await |action| so we can use the finally statement to remove |action|\n    // from |openOperations_| when we still have a reference to |action|.\n    return await action;\n  } finally {\n    shaka.util.ArrayUtils.remove(this.openOperations_, action);\n  }\n};\n\n\n/**\n * Get a parser for the asset located at |assetUri|.\n *\n * @param {string} assetUri\n * @param {?string} mimeType\n *    When not null, the mimeType will be used to find the best manifest parser\n *    for the given asset.\n * @return {!Promise.<shaka.extern.ManifestParser>}\n * @private\n */\nshaka.offline.Storage.prototype.getParser_ = async function(\n    assetUri, mimeType) {\n  const networkingEngine = this.networkingEngine_;\n  goog.asserts.assert(\n      networkingEngine, 'Cannot called |getParser_| after calling |destroy|');\n\n  const Factory = await shaka.media.ManifestParser.getFactory(\n      assetUri,\n      networkingEngine,\n      this.config_.manifest.retryParameters,\n      mimeType);\n\n  return new Factory();\n};\n\n\n/**\n * @param {shaka.extern.ManifestDB} manifest\n * @return {!Array.<number>}\n * @private\n */\nshaka.offline.Storage.getAllSegmentIds_ = function(manifest) {\n  /** @type {!Array.<number>} */\n  let ids = [];\n\n  // Get every segment for every stream in the manifest.\n  manifest.periods.forEach(function(period) {\n    period.streams.forEach(function(stream) {\n      if (stream.initSegmentKey != null) {\n        ids.push(stream.initSegmentKey);\n      }\n\n      stream.segments.forEach(function(segment) {\n        ids.push(segment.dataKey);\n      });\n    });\n  });\n\n  return ids;\n};\n\n\n/**\n * Delete the on-disk storage and all the content it contains. This should not\n * be done regularly; only do it when storage is rendered unusable.\n *\n * @param {!shaka.Player} player\n * @return {!Promise}\n * @export\n */\nshaka.offline.Storage.deleteAll = function(player) {\n  /** @type {shaka.net.NetworkingEngine} */\n  const networkingEngine = player.getNetworkingEngine();\n  goog.asserts.assert(\n      networkingEngine, 'Cannot used destroyed player with |deleteAll|');\n\n  /** @type {shaka.extern.PlayerConfiguration} */\n  const config = player.getConfiguration();\n\n  return shaka.offline.Storage.deleteAll_(networkingEngine, config.drm);\n};\n\n\n/**\n * @param {!shaka.net.NetworkingEngine} networkingEngine\n * @param {shaka.extern.DrmConfiguration} drmConfig\n * @return {!Promise}\n * @private\n */\nshaka.offline.Storage.deleteAll_ = function(networkingEngine, drmConfig) {\n  const deleteLicenseFor = shaka.offline.Storage.deleteLicenseFor_;\n\n  /** @type {!shaka.offline.StorageMuxer} */\n  const muxer = new shaka.offline.StorageMuxer();\n\n  return shaka.util.Destroyer.with([muxer], async () => {\n    await muxer.init();\n\n    /** @type {!Array.<shaka.extern.Manifest>} */\n    let manifests = await shaka.offline.Storage.getAllManifests_(muxer);\n\n    let deleteLicenses = Promise.resolve();\n\n    // Since |deleteLicenseFor_| will create a drm engine instance and each\n    // drm engine instance represents a CDM instance, having too many CDM\n    // instances open on some platforms could be problematic. So instead\n    // we will need to do each manifest serially to avoid potential problems\n    // with too many open sessions.\n    manifests\n        .filter((manifest) => manifest.offlineSessionIds.length)\n        .forEach((manifest) => {\n          deleteLicenses = deleteLicenses.then(() => {\n            return deleteLicenseFor(networkingEngine, drmConfig, manifest);\n          });\n        });\n\n    // Wait for all the sessions to be removed before clearing storage. In the\n    // case that something goes wrong, we will still have the manifests so that\n    // we can get the sessions and try removing them again.\n    await deleteLicenses;\n\n    // Now that the sessions are gone, we can remove all the content.\n    await muxer.erase();\n  });\n};\n\n\n/**\n * @param {!shaka.net.NetworkingEngine} net\n * @param {!shaka.extern.DrmConfiguration} drmConfig\n * @param {shaka.extern.Manifest} manifest\n * @return {!Promise}\n * @private\n */\nshaka.offline.Storage.deleteLicenseFor_ = function(net, drmConfig, manifest) {\n  goog.asserts.assert(\n      manifest.offlineSessionIds.length,\n      'Do not call |deleteLicenseFor_| if there are no offline sessions');\n\n  /** @type {!shaka.media.DrmEngine} */\n  let drm = new shaka.media.DrmEngine({\n    netEngine: net,\n    onError: (e) => shaka.log.error('ignoring drm engine error', e),\n    onKeyStatus: () => {},\n    onExpirationUpdated: () => {},\n    onEvent: () => {},\n  });\n\n  drm.configure(drmConfig);\n\n  // Since there were offline sessions ids, we can assume that there were\n  // persistent licenses.\n  return shaka.util.Destroyer.with([drm], async () => {\n    await drm.initForStorage(manifest, /* use persistent license */ true);\n    await drm.removeSessions(manifest.offlineSessionIds);\n  });\n};\n\n\n/**\n * Look to see if there are any tracks that are \"too\" similar to each other.\n *\n * @param {!Array.<shaka.extern.Track>} tracks\n * @return {boolean}\n * @private\n */\nshaka.offline.Storage.lookForSimilarTracks_ = function(tracks) {\n  return tracks.some((t0) => {\n    return tracks.some((t1) => {\n      return t0 != t1 &&\n             t0.type == t1.type &&\n             t0.kind == t1.kind &&\n             t0.language == t1.language;\n    });\n  });\n};\n\n\n/**\n * Get a collection of streams that are in the manifest. This collection will\n * only have one instance of each stream (similar to a set).\n *\n * @param {shaka.extern.Manifest} manifest\n * @return {!Array.<shaka.extern.Stream>}\n * @private\n */\nshaka.offline.Storage.getStreamSet_ = function(manifest) {\n  // Use a map so that we don't store duplicates. Since a stream's id should\n  // be unique within the manifest, we can use that as the key.\n  let map = {};\n\n  manifest.periods.forEach((period) => {\n    period.textStreams.forEach((text) => { map[text.id] = text; });\n    period.variants.forEach((variant) => {\n      if (variant.audio) { map[variant.audio.id] = variant.audio; }\n      if (variant.video) { map[variant.video.id] = variant.video; }\n    });\n  });\n\n  return shaka.util.MapUtils.values(map);\n};\n\n\n/**\n * @param{!shaka.offline.StorageMuxer} muxer\n * @return {!Promise.<!Array.<shaka.extern.Manifest>>}\n * @private\n */\nshaka.offline.Storage.getAllManifests_ = function(muxer) {\n  let manifests = [];\n\n  let waits = [];\n\n  muxer.forEachCell((path, cell) => {\n    let converter = new shaka.offline.ManifestConverter(\n        path.mechanism, path.cell);\n\n    waits.push(cell.getAllManifests().then((map) => {\n      let manifestDBs = shaka.util.MapUtils.values(map);\n      manifestDBs.forEach((manifestDB) => {\n        manifests.push(converter.fromManifestDB(manifestDB));\n      });\n    }));\n  });\n\n  return Promise.all(waits).then(() => manifests);\n};\n\n\n/**\n * Make sure that the given configuration object follows the correct structure\n * expected by |configure|. This function should be removed in v2.6 when\n * backward-compatibility is no longer needed.\n *\n * @param {!Object} config\n *    The config fields that the app wants to update. This object will be\n *    change by this function.\n * @private\n */\nshaka.offline.Storage.verifyConfig_ = function(config) {\n  // To avoid printing a deprecated warning multiple times, track all\n  // infractions and then print it once at the end.\n  let usedLegacyConfig = false;\n\n  // For each field in the legacy config structure\n  // (shaka.extern.OfflineConfiguration), move any occurances to the correct\n  // location in the player configuration.\n  if (config.trackSelectionCallback != null) {\n    usedLegacyConfig = true;\n    config.offline = config.offline || {};\n    config.offline.trackSelectionCallback = config.trackSelectionCallback;\n  }\n\n  if (config.progressCallback != null) {\n    usedLegacyConfig = true;\n    config.offline = config.offline || {};\n    config.offline.progressCallback = config.progressCallback;\n  }\n\n  if (config.usePersistentLicense != null) {\n    usedLegacyConfig = true;\n    config.offline = config.offline || {};\n    config.offline.usePersistentLicense = config.usePersistentLicense;\n  }\n\n  if (usedLegacyConfig) {\n    shaka.log.alwaysWarn(\n        'Storage.configure should now be passed a player configuration ' +\n            'structure. Using a non-player configuration will be deprecated ' +\n            'in v2.6.');\n  }\n};\n\nshaka.Player.registerSupportPlugin('offline', shaka.offline.Storage.support);\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.polyfill.installAll');\ngoog.provide('shaka.polyfill.register');\n\n\n/**\n * @namespace shaka.polyfill\n * @summary A one-stop installer for all polyfills.\n * @see http://enwp.org/polyfill\n * @exportDoc\n */\n\n\n/**\n * Install all polyfills.\n * @export\n */\nshaka.polyfill.installAll = function() {\n  for (let i = 0; i < shaka.polyfill.polyfills_.length; ++i) {\n    shaka.polyfill.polyfills_[i].callback();\n  }\n};\n\n\n/**\n * Contains the polyfills that will be installed.\n * @private {!Array.<{priority: number, callback: function()}>}\n */\nshaka.polyfill.polyfills_ = [];\n\n\n/**\n * Registers a new polyfill to be installed.\n *\n * @param {function()} polyfill\n * @param {number=} priority An optional number priority.  Higher priorities\n *   will be executed before lower priority ones.  Default is 0.\n * @export\n */\nshaka.polyfill.register = function(polyfill, priority) {\n  priority = priority || 0;\n  const item = {priority: priority, callback: polyfill};\n  for (let i = 0; i < shaka.polyfill.polyfills_.length; i++) {\n    if (shaka.polyfill.polyfills_[i].priority < priority) {\n      shaka.polyfill.polyfills_.splice(i, 0, item);\n      return;\n    }\n  }\n  shaka.polyfill.polyfills_.push(item);\n};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.polyfill.Fullscreen');\n\ngoog.require('shaka.polyfill.register');\n\n\n/**\n * @namespace shaka.polyfill.Fullscreen\n *\n * @summary A polyfill to unify fullscreen APIs across browsers.\n * Many browsers have prefixed fullscreen methods on Element and document.\n * See {@link https://mzl.la/2K0xcHo Using fullscreen mode} on MDN for more\n * information.\n */\n\n\n/**\n * Install the polyfill if needed.\n */\nshaka.polyfill.Fullscreen.install = function() {\n  if (!window.Document) {\n    // Avoid errors on very old browsers.\n    return;\n  }\n\n  let proto = Element.prototype;\n  proto.requestFullscreen = proto.requestFullscreen ||\n                            proto.mozRequestFullScreen ||\n                            proto.msRequestFullscreen ||\n                            proto.webkitRequestFullscreen;\n\n  proto = Document.prototype;\n  proto.exitFullscreen = proto.exitFullscreen ||\n                         proto.mozCancelFullScreen ||\n                         proto.msExitFullscreen ||\n                         proto.webkitExitFullscreen;\n\n  if (!('fullscreenElement' in document)) {\n    Object.defineProperty(document, 'fullscreenElement', {\n      get: function() {\n        return document.mozFullScreenElement ||\n               document.msFullscreenElement ||\n               document.webkitFullscreenElement;\n      },\n    });\n    Object.defineProperty(document, 'fullscreenEnabled', {\n      get: function() {\n        return document.mozFullScreenEnabled ||\n               document.msFullscreenEnabled ||\n               document.webkitFullscreenEnabled;\n      },\n    });\n  }\n\n  let proxy = shaka.polyfill.Fullscreen.proxyEvent_;\n  document.addEventListener('webkitfullscreenchange', proxy);\n  document.addEventListener('webkitfullscreenerror', proxy);\n  document.addEventListener('mozfullscreenchange', proxy);\n  document.addEventListener('mozfullscreenerror', proxy);\n  document.addEventListener('MSFullscreenChange', proxy);\n  document.addEventListener('MSFullscreenError', proxy);\n};\n\n\n/**\n * Proxy fullscreen events after changing their name.\n * @param {!Event} event\n * @private\n */\nshaka.polyfill.Fullscreen.proxyEvent_ = function(event) {\n  let eventType = event.type.replace(/^(webkit|moz|MS)/, '').toLowerCase();\n\n  let newEvent;\n  // IE 11 does not have an Event constructor\n  if (typeof(Event) === 'function') {\n    newEvent = new Event(eventType, /** @type {EventInit} */(event));\n  } else {\n    newEvent = document.createEvent('Event');\n    newEvent.initEvent(eventType, event.bubbles, event.cancelable);\n  }\n\n  event.target.dispatchEvent(newEvent);\n};\n\n\nshaka.polyfill.register(shaka.polyfill.Fullscreen.install);\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.polyfill.IndexedDB');\n\ngoog.require('goog.asserts');\ngoog.require('shaka.log');\ngoog.require('shaka.polyfill.register');\n\n\n/**\n * @namespace shaka.polyfill.IndexedDB\n *\n * @summary A polyfill to patch IndexedDB bugs.\n */\n\n\n/**\n * Install the polyfill if needed.\n */\nshaka.polyfill.IndexedDB.install = function() {\n  shaka.log.debug('IndexedDB.install');\n\n  let agent = navigator.userAgent;\n  if (agent && agent.indexOf('CrKey') >= 0) {\n    shaka.log.debug('Removing IndexedDB from ChromeCast');\n    delete window.indexedDB;\n    goog.asserts.assert(\n        !window.indexedDB, 'Failed to override window.indexedDB');\n  }\n};\n\nshaka.polyfill.register(shaka.polyfill.IndexedDB.install);\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.polyfill.InputEvent');\n\ngoog.require('shaka.log');\ngoog.require('shaka.polyfill.register');\n\n\n/**\n * @namespace shaka.polyfill.InputEvent\n *\n * @summary A polyfill to patch 'input' event support in IE11.\n */\n\n\n/**\n * Install the polyfill if needed.\n */\nshaka.polyfill.InputEvent.install = function() {\n  shaka.log.debug('InputEvent.install');\n\n  // IE11 doesn't treat the 'input' event correctly.\n  // https://bit.ly/2loLsuX\n  // If you know a better way than a userAgent check to detect this, please\n  // send a patch.\n\n  // This matches IE11, but not Edge.  Edge does not have this problem.\n  if (navigator.userAgent.indexOf('Trident/') < 0) {\n    // Not IE, so don't patch anything.\n    return;\n  }\n\n  if (HTMLInputElement.prototype.addEventListener ==\n      shaka.polyfill.InputEvent.addEventListener_) {\n    // The polyfill was already installed.\n    return;\n  }\n\n  shaka.log.info('Patching input event support on IE.');\n\n  shaka.polyfill.InputEvent.originalAddEventListener_ =\n      HTMLInputElement.prototype.addEventListener;\n\n  HTMLInputElement.prototype['addEventListener'] =\n      shaka.polyfill.InputEvent.addEventListener_;\n};\n\n\n/**\n * The original addEventListener from HTMLInputElement.\n * @private Function\n */\nshaka.polyfill.InputEvent.originalAddEventListener_;\n\n\n/**\n * Add an event listener to this object and translate the event types to those\n * that work on IE11.\n *\n * @param {string} type\n * @param {EventListener|function(!Event):(boolean|undefined)} listener\n * @param {(!AddEventListenerOptions|boolean)=} options\n * @this {HTMLInputElement}\n * @private\n */\nshaka.polyfill.InputEvent.addEventListener_ =\n    function(type, listener, options) {\n  if (type == 'input') {\n    // Based on the type of input element, translate the HTML5 'input' event to\n    // one that IE11 will actually dispatch.\n\n    switch (this.type) {\n      // For range inputs, we use the 'change' event.\n      case 'range':\n        type = 'change';\n        break;\n    }\n  }\n\n  shaka.polyfill.InputEvent.originalAddEventListener_.call(\n      this, type, listener, options);\n};\n\n\nshaka.polyfill.register(shaka.polyfill.InputEvent.install);\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\ngoog.provide('shaka.polyfill.MathRound');\n\ngoog.require('shaka.log');\ngoog.require('shaka.polyfill.register');\n\n/**\n * @namespace shaka.polyfill.MathRound\n *\n * @summary A polyfill to patch math round bug on some browsers.\n * @see https://stackoverflow.com/q/12830742\n */\n\n\n/**\n @const {number}\n @private\n */\nshaka.polyfill.MathRound.MAX_ACCURATE_INPUT_ = 0x10000000000000;\n\n\n/**\n * Install the polyfill if needed.\n */\nshaka.polyfill.MathRound.install = function() {\n  shaka.log.debug('mathRound.install');\n\n  let testNumber = shaka.polyfill.MathRound.MAX_ACCURATE_INPUT_ + 1;\n  if (Math.round(testNumber) != testNumber) {\n    shaka.log.debug('polyfill Math.round');\n    let originalMathRound = Math.round;\n    Math.round = function(number) {\n      let result = number;\n      // Due to the precision of JavaScript numbers, the number must be integer.\n      if (number <= shaka.polyfill.MathRound.MAX_ACCURATE_INPUT_) {\n        result = originalMathRound(number);\n      }\n      return result;\n    };\n  }\n};\n\nshaka.polyfill.register(shaka.polyfill.MathRound.install);\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.polyfill.MediaSource');\n\ngoog.require('shaka.log');\ngoog.require('shaka.polyfill.register');\n\n\n/**\n * @namespace shaka.polyfill.MediaSource\n *\n * @summary A polyfill to patch MSE bugs.\n */\n\n\n/**\n * Install the polyfill if needed.\n */\nshaka.polyfill.MediaSource.install = function() {\n  shaka.log.debug('MediaSource.install');\n\n  // MediaSource bugs are difficult to detect without checking for the affected\n  // platform.  SourceBuffer is not always exposed on window, for example, and\n  // instances are only accessible after setting up MediaSource on a video\n  // element.  Because of this, we use UA detection and other platform detection\n  // tricks to decide which patches to install.\n\n  if (!window.MediaSource) {\n    shaka.log.info('No MSE implementation available.');\n  } else if (window.cast && cast.__platform__ &&\n             cast.__platform__.canDisplayType) {\n    shaka.log.info('Patching Chromecast MSE bugs.');\n    // Chromecast cannot make accurate determinations via isTypeSupported.\n    shaka.polyfill.MediaSource.patchCastIsTypeSupported_();\n  } else if (navigator.vendor && navigator.vendor.indexOf('Apple') >= 0) {\n    let version = navigator.appVersion;\n\n    // TS content is broken on Safari in general.\n    // See https://github.com/google/shaka-player/issues/743\n    // and https://bugs.webkit.org/show_bug.cgi?id=165342\n    shaka.polyfill.MediaSource.rejectTsContent_();\n\n    if (version.indexOf('Version/8') >= 0) {\n      // Safari 8 does not implement appendWindowEnd.  If we ignore the\n      // incomplete MSE implementation, some content (especially multi-period)\n      // will fail to play correctly.  The best we can do is blacklist Safari 8.\n      shaka.log.info('Blacklisting Safari 8 MSE.');\n      shaka.polyfill.MediaSource.blacklist_();\n    } else if (version.indexOf('Version/9') >= 0) {\n      shaka.log.info('Patching Safari 9 MSE bugs.');\n      // Safari 9 does not correctly implement abort() on SourceBuffer.\n      // Calling abort() causes a decoder failure, rather than resetting the\n      // decode timestamp as called for by the spec.\n      // Bug filed: https://bugs.webkit.org/show_bug.cgi?id=160316\n      shaka.polyfill.MediaSource.stubAbort_();\n    } else if (version.indexOf('Version/10') >= 0) {\n      shaka.log.info('Patching Safari 10 MSE bugs.');\n      // Safari 10 does not correctly implement abort() on SourceBuffer.\n      // Calling abort() before appending a segment causes that segment to be\n      // incomplete in buffer.\n      // Bug filed: https://bugs.webkit.org/show_bug.cgi?id=165342\n      shaka.polyfill.MediaSource.stubAbort_();\n      // Safari 10 fires spurious 'updateend' events after endOfStream().\n      // Bug filed: https://bugs.webkit.org/show_bug.cgi?id=165336\n      shaka.polyfill.MediaSource.patchEndOfStreamEvents_();\n    } else if (version.indexOf('Version/11') >= 0) {\n      shaka.log.info('Patching Safari 11 MSE bugs.');\n      // Safari 11 does not correctly implement abort() on SourceBuffer.\n      // Calling abort() before appending a segment causes that segment to be\n      // incomplete in the buffer.\n      // Bug filed: https://bugs.webkit.org/show_bug.cgi?id=165342\n      shaka.polyfill.MediaSource.stubAbort_();\n      // If you remove up to a keyframe, Safari 11 incorrectly will also remove\n      // that keyframe and the content up to the next.\n      // Offsetting the end of the removal range seems to help.\n      // Bug filed: https://bugs.webkit.org/show_bug.cgi?id=177884\n      shaka.polyfill.MediaSource.patchRemovalRange_();\n    }\n  } else {\n    shaka.log.info('Using native MSE as-is.');\n  }\n};\n\n\n/**\n * Blacklist the current browser by making MediaSourceEngine.isBrowserSupported\n * fail later.\n *\n * @private\n */\nshaka.polyfill.MediaSource.blacklist_ = function() {\n  window['MediaSource'] = null;\n};\n\n\n/**\n * Stub out abort().  On some buggy MSE implementations, calling abort() causes\n * various problems.\n *\n * @private\n */\nshaka.polyfill.MediaSource.stubAbort_ = function() {\n  const addSourceBuffer = MediaSource.prototype.addSourceBuffer;\n  MediaSource.prototype.addSourceBuffer = function(...varArgs) {\n    let sourceBuffer = addSourceBuffer.apply(this, varArgs);\n    sourceBuffer.abort = function() {};  // Stub out for buggy implementations.\n    return sourceBuffer;\n  };\n};\n\n\n/**\n * Patch remove().  On Safari 11, if you call remove() to remove the content up\n * to a keyframe, Safari will also remove the keyframe and all of the data up to\n * the next one. For example, if the keyframes are at 0s, 5s, and 10s, and you\n * tried to remove 0s-5s, it would instead remove 0s-10s.\n *\n * Offsetting the end of the range seems to be a usable workaround.\n *\n * @private\n */\nshaka.polyfill.MediaSource.patchRemovalRange_ = function() {\n  const originalRemove = SourceBuffer.prototype.remove;\n\n  SourceBuffer.prototype.remove = function(startTime, endTime) {\n    return originalRemove.call(this, startTime, endTime - 0.001);\n  };\n};\n\n\n/**\n * Patch endOfStream() to get rid of 'updateend' events that should not fire.\n * These extra events confuse MediaSourceEngine, which relies on correct events\n * to manage SourceBuffer state.\n *\n * @private\n */\nshaka.polyfill.MediaSource.patchEndOfStreamEvents_ = function() {\n  const endOfStream = MediaSource.prototype.endOfStream;\n  MediaSource.prototype.endOfStream = function(...varArgs) {\n    // This bug manifests only when endOfStream() results in the truncation\n    // of the MediaSource's duration.  So first we must calculate what the\n    // new duration will be.\n    let newDuration = 0;\n    for (let i = 0; i < this.sourceBuffers.length; ++i) {\n      let buffer = this.sourceBuffers[i];\n      let bufferEnd = buffer.buffered.end(buffer.buffered.length - 1);\n      newDuration = Math.max(newDuration, bufferEnd);\n    }\n\n    // If the duration is going to be reduced, suppress the next 'updateend'\n    // event on each SourceBuffer.\n    if (!isNaN(this.duration) &&\n        newDuration < this.duration) {\n      this.ignoreUpdateEnd_ = true;\n      for (let i = 0; i < this.sourceBuffers.length; ++i) {\n        let buffer = this.sourceBuffers[i];\n        buffer.eventSuppressed_ = false;\n      }\n    }\n\n    return endOfStream.apply(this, varArgs);\n  };\n\n  let cleanUpHandlerInstalled = false;\n  let addSourceBuffer = MediaSource.prototype.addSourceBuffer;\n  MediaSource.prototype.addSourceBuffer = function(...varArgs) {\n    // After adding a new source buffer, add an event listener to allow us to\n    // suppress events.\n    let sourceBuffer = addSourceBuffer.apply(this, varArgs);\n    sourceBuffer['mediaSource_'] = this;\n    sourceBuffer.addEventListener('updateend',\n        shaka.polyfill.MediaSource.ignoreUpdateEnd_, false);\n\n    if (!cleanUpHandlerInstalled) {\n      // If we haven't already, install an event listener to allow us to clean\n      // up listeners when MediaSource is torn down.\n      this.addEventListener('sourceclose',\n          shaka.polyfill.MediaSource.cleanUpListeners_, false);\n      cleanUpHandlerInstalled = true;\n    }\n    return sourceBuffer;\n  };\n};\n\n\n/**\n * An event listener for 'updateend' which selectively suppresses the events.\n *\n * @see shaka.polyfill.MediaSource.patchEndOfStreamEvents_\n *\n * @param {Event} event\n * @private\n */\nshaka.polyfill.MediaSource.ignoreUpdateEnd_ = function(event) {\n  let sourceBuffer = event.target;\n  let mediaSource = sourceBuffer['mediaSource_'];\n\n  if (mediaSource.ignoreUpdateEnd_) {\n    event.preventDefault();\n    event.stopPropagation();\n    event.stopImmediatePropagation();\n    sourceBuffer.eventSuppressed_ = true;\n\n    for (let i = 0; i < mediaSource.sourceBuffers.length; ++i) {\n      let buffer = mediaSource.sourceBuffers[i];\n      if (buffer.eventSuppressed_ == false) {\n        // More events need to be suppressed.\n        return;\n      }\n    }\n\n    // All events have been suppressed, all buffers are out of 'updating'\n    // mode.  Stop suppressing events.\n    mediaSource.ignoreUpdateEnd_ = false;\n  }\n};\n\n\n/**\n * An event listener for 'sourceclose' which cleans up listeners for 'updateend'\n * to avoid memory leaks.\n *\n * @see shaka.polyfill.MediaSource.patchEndOfStreamEvents_\n * @see shaka.polyfill.MediaSource.ignoreUpdateEnd_\n *\n * @param {Event} event\n * @private\n */\nshaka.polyfill.MediaSource.cleanUpListeners_ = function(event) {\n  let mediaSource = /** @type {!MediaSource} */ (event.target);\n  for (let i = 0; i < mediaSource.sourceBuffers.length; ++i) {\n    let buffer = mediaSource.sourceBuffers[i];\n    buffer.removeEventListener('updateend',\n        shaka.polyfill.MediaSource.ignoreUpdateEnd_, false);\n  }\n  mediaSource.removeEventListener('sourceclose',\n      shaka.polyfill.MediaSource.cleanUpListeners_, false);\n};\n\n\n/**\n * Patch isTypeSupported() to reject TS content.  Used to avoid TS-related MSE\n * bugs on Safari.\n *\n * @private\n */\nshaka.polyfill.MediaSource.rejectTsContent_ = function() {\n  const originalIsTypeSupported = MediaSource.isTypeSupported;\n\n  MediaSource.isTypeSupported = function(mimeType) {\n    // Parse the basic MIME type from its parameters.\n    let pieces = mimeType.split(/ *; */);\n    let basicMimeType = pieces[0];\n    let container = basicMimeType.split('/')[1];\n\n    if (container == 'mp2t') {\n      return false;\n    }\n\n    return originalIsTypeSupported(mimeType);\n  };\n};\n\n\n/**\n * Patch isTypeSupported() to parse for HDR-related clues and chain to a private\n * API on the Chromecast which can query for support.\n *\n * @private\n */\nshaka.polyfill.MediaSource.patchCastIsTypeSupported_ = function() {\n  const originalIsTypeSupported = MediaSource.isTypeSupported;\n\n  // Docs from Dolby detailing profile names: https://bit.ly/2MfV72y\n  let dolbyVisionRegex = /^dv(?:he|av)\\./;\n\n  MediaSource.isTypeSupported = function(mimeType) {\n    // Parse the basic MIME type from its parameters.\n    let pieces = mimeType.split(/ *; */);\n    let basicMimeType = pieces[0];\n\n    // Parse the parameters into key-value pairs.\n    /** @type {Object.<string, string>} */\n    let parameters = {};\n    for (let i = 1; i < pieces.length; ++i) {\n      let kv = pieces[i].split('=');\n      let k = kv[0];\n      let v = kv[1].replace(/\"(.*)\"/, '$1');\n      parameters[k] = v;\n    }\n\n    let codecs = parameters['codecs'];\n    if (!codecs) {\n      return originalIsTypeSupported(mimeType);\n    }\n\n    let isHDR = false;\n    let isDolbyVision = false;\n\n    let codecList = codecs.split(',').filter(function(codec) {\n      // Remove Dolby Vision codec strings.  These are not understood on\n      // Chromecast, even though the content can still be played.\n      if (dolbyVisionRegex.test(codec)) {\n        isDolbyVision = true;\n        // Return false to remove this string from the list.\n        return false;\n      }\n\n      // We take this string as a signal for HDR, but don't remove it.\n      if (/^(hev|hvc)1\\.2/.test(codec)) {\n        isHDR = true;\n      }\n\n      // Keep all other strings in the list.\n      return true;\n    });\n\n    // If the content uses Dolby Vision, we take this as a sign that the content\n    // is not HDR after all.\n    if (isDolbyVision) isHDR = false;\n\n    // Reconstruct the \"codecs\" parameter from the results of the filter.\n    parameters['codecs'] = codecList.join(',');\n\n    // If the content is HDR, we add this additional parameter so that the Cast\n    // platform will check for HDR support.\n    if (isHDR) {\n      parameters['eotf'] = 'smpte2084';\n    }\n\n    // Reconstruct the MIME type, possibly with additional parameters.\n    let extendedMimeType = basicMimeType;\n    for (let k in parameters) {\n      let v = parameters[k];\n      extendedMimeType += '; ' + k + '=\"' + v + '\"';\n    }\n    return cast.__platform__.canDisplayType(extendedMimeType);\n  };\n};\n\n\nshaka.polyfill.register(shaka.polyfill.MediaSource.install);\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.util.Pssh');\n\ngoog.require('goog.asserts');\ngoog.require('shaka.log');\ngoog.require('shaka.util.Mp4Parser');\ngoog.require('shaka.util.Uint8ArrayUtils');\n\n\n/**\n * Parse a PSSH box and extract the system IDs.\n *\n * @param {!Uint8Array} psshBox\n * @constructor\n * @struct\n * @throws {shaka.util.Error} if a PSSH box is truncated or contains a size\n *   field over 53 bits.\n */\nshaka.util.Pssh = function(psshBox) {\n  /**\n   * In hex.\n   * @type {!Array.<string>}\n   */\n  this.systemIds = [];\n\n  /**\n   * In hex.\n   * @type {!Array.<string>}\n   */\n  this.cencKeyIds = [];\n\n  /*\n  * Array of tuples that define the startIndex + size for each\n  * discrete pssh within |psshBox|\n  * */\n  this.dataBoundaries = [];\n\n  new shaka.util.Mp4Parser()\n      .fullBox('pssh', this.parseBox_.bind(this)).parse(psshBox.buffer);\n\n  if (this.dataBoundaries.length == 0) {\n    shaka.log.warning('No pssh box found!');\n  }\n};\n\n\n/**\n * @param {!shaka.extern.ParsedBox} box\n * @private\n */\nshaka.util.Pssh.prototype.parseBox_ = function(box) {\n  goog.asserts.assert(\n      box.version != null,\n      'PSSH boxes are full boxes and must have a valid version');\n\n  goog.asserts.assert(\n      box.flags != null,\n      'PSSH boxes are full boxes and must have a valid flag');\n\n  if (box.version > 1) {\n    shaka.log.warning('Unrecognized PSSH version found!');\n    return;\n  }\n\n  let systemId = shaka.util.Uint8ArrayUtils.toHex(box.reader.readBytes(16));\n  let keyIds = [];\n  if (box.version > 0) {\n    let numKeyIds = box.reader.readUint32();\n    for (let i = 0; i < numKeyIds; ++i) {\n      let keyId = shaka.util.Uint8ArrayUtils.toHex(box.reader.readBytes(16));\n      keyIds.push(keyId);\n    }\n  }\n\n  let dataSize = box.reader.readUint32();\n  box.reader.skip(dataSize);  // Ignore the data section.\n\n  // Now that everything has been succesfully parsed from this box,\n  // update member variables.\n  this.cencKeyIds.push.apply(this.cencKeyIds, keyIds);\n  this.systemIds.push(systemId);\n  this.dataBoundaries.push({\n    start: box.start,\n    end: box.start + box.size - 1,\n  });\n\n  if (box.reader.getPosition() != box.reader.getLength()) {\n    shaka.log.warning('Mismatch between box size and data size!');\n  }\n};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.polyfill.PatchedMediaKeysMs');\n\ngoog.require('goog.asserts');\ngoog.require('shaka.log');\ngoog.require('shaka.polyfill.register');\ngoog.require('shaka.util.ArrayUtils');\ngoog.require('shaka.util.EventManager');\ngoog.require('shaka.util.FakeEvent');\ngoog.require('shaka.util.FakeEventTarget');\ngoog.require('shaka.util.Pssh');\ngoog.require('shaka.util.PublicPromise');\ngoog.require('shaka.util.Uint8ArrayUtils');\n\n\n/**\n * @namespace shaka.polyfill.PatchedMediaKeysMs\n *\n * @summary A polyfill to implement\n * {@link https://bit.ly/EmeMar15 EME draft 12 March 2015}\n * on top of ms-prefixed\n * {@link https://www.w3.org/TR/2014/WD-encrypted-media-20140218/ EME v20140218}\n */\n\n\n/**\n * Installs the polyfill if needed.\n */\nshaka.polyfill.PatchedMediaKeysMs.install = function() {\n  if (!window.HTMLVideoElement || !window.MSMediaKeys ||\n      (navigator.requestMediaKeySystemAccess &&\n       MediaKeySystemAccess.prototype.getConfiguration)) {\n    return;\n  }\n  shaka.log.info('Using ms-prefixed EME v20140218');\n\n  // Alias\n  const PatchedMediaKeysMs = shaka.polyfill.PatchedMediaKeysMs;\n\n  // Construct a fake key ID.  This is not done at load-time to avoid exceptions\n  // on unsupported browsers.  This particular fake key ID was suggested in\n  // w3c/encrypted-media#32.\n  PatchedMediaKeysMs.MediaKeyStatusMap.KEY_ID_ = (new Uint8Array([0])).buffer;\n\n  // Delete mediaKeys to work around strict mode compatibility issues.\n  delete HTMLMediaElement.prototype['mediaKeys'];\n  // Work around read-only declaration for mediaKeys by using a string.\n  HTMLMediaElement.prototype['mediaKeys'] = null;\n  HTMLMediaElement.prototype.setMediaKeys = PatchedMediaKeysMs.setMediaKeys;\n\n  // Install patches\n  window.MediaKeys = PatchedMediaKeysMs.MediaKeys;\n  window.MediaKeySystemAccess = PatchedMediaKeysMs.MediaKeySystemAccess;\n  navigator.requestMediaKeySystemAccess =\n      PatchedMediaKeysMs.requestMediaKeySystemAccess;\n};\n\n\n/**\n * An implementation of navigator.requestMediaKeySystemAccess.\n * Retrieves a MediaKeySystemAccess object.\n *\n * @this {!Navigator}\n * @param {string} keySystem\n * @param {!Array.<!MediaKeySystemConfiguration>} supportedConfigurations\n * @return {!Promise.<!MediaKeySystemAccess>}\n */\nshaka.polyfill.PatchedMediaKeysMs.requestMediaKeySystemAccess =\n    function(keySystem, supportedConfigurations) {\n  shaka.log.debug('PatchedMediaKeysMs.requestMediaKeySystemAccess');\n  goog.asserts.assert(this == navigator,\n                      'bad \"this\" for requestMediaKeySystemAccess');\n\n  // Alias.\n  const PatchedMediaKeysMs = shaka.polyfill.PatchedMediaKeysMs;\n  try {\n    let access = new PatchedMediaKeysMs.MediaKeySystemAccess(\n        keySystem, supportedConfigurations);\n    return Promise.resolve(/** @type {!MediaKeySystemAccess} */ (access));\n  } catch (exception) {\n    return Promise.reject(exception);\n  }\n};\n\n\n/**\n * An implementation of MediaKeySystemAccess.\n *\n * @constructor\n * @struct\n * @param {string} keySystem\n * @param {!Array.<!MediaKeySystemConfiguration>} supportedConfigurations\n * @implements {MediaKeySystemAccess}\n * @throws {Error} if the key system is not supported.\n */\nshaka.polyfill.PatchedMediaKeysMs.MediaKeySystemAccess =\n    function(keySystem, supportedConfigurations) {\n  shaka.log.debug('PatchedMediaKeysMs.MediaKeySystemAccess');\n\n  /** @type {string} */\n  this.keySystem = keySystem;\n\n  /** @private {!MediaKeySystemConfiguration} */\n  this.configuration_;\n\n  let allowPersistentState = false;\n\n  let success = false;\n  for (let i = 0; i < supportedConfigurations.length; ++i) {\n    let cfg = supportedConfigurations[i];\n\n    // Create a new config object and start adding in the pieces which we\n    // find support for.  We will return this from getConfiguration() if asked.\n    /** @type {!MediaKeySystemConfiguration} */\n    let newCfg = {\n      'audioCapabilities': [],\n      'videoCapabilities': [],\n      // It is technically against spec to return these as optional, but we\n      // don't truly know their values from the prefixed API:\n      'persistentState': 'optional',\n      'distinctiveIdentifier': 'optional',\n      // Pretend the requested init data types are supported, since we don't\n      // really know that either:\n      'initDataTypes': cfg.initDataTypes,\n      'sessionTypes': ['temporary'],\n      'label': cfg.label,\n    };\n\n    // PatchedMediaKeysMs tests for key system availability through\n    // MSMediaKeys.isTypeSupported\n    let ranAnyTests = false;\n    if (cfg.audioCapabilities) {\n      for (let j = 0; j < cfg.audioCapabilities.length; ++j) {\n        let cap = cfg.audioCapabilities[j];\n        if (cap.contentType) {\n          ranAnyTests = true;\n          let contentType = cap.contentType.split(';')[0];\n          if (MSMediaKeys.isTypeSupported(this.keySystem, contentType)) {\n            newCfg.audioCapabilities.push(cap);\n            success = true;\n          }\n        }\n      }\n    }\n    if (cfg.videoCapabilities) {\n      for (let j = 0; j < cfg.videoCapabilities.length; ++j) {\n        let cap = cfg.videoCapabilities[j];\n        if (cap.contentType) {\n          ranAnyTests = true;\n          let contentType = cap.contentType.split(';')[0];\n          if (MSMediaKeys.isTypeSupported(this.keySystem, contentType)) {\n            newCfg.videoCapabilities.push(cap);\n            success = true;\n          }\n        }\n      }\n    }\n\n    if (!ranAnyTests) {\n      // If no specific types were requested, we check all common types to find\n      // out if the key system is present at all.\n      success = MSMediaKeys.isTypeSupported(this.keySystem, 'video/mp4');\n    }\n    if (cfg.persistentState == 'required') {\n      if (allowPersistentState) {\n        newCfg.persistentState = 'required';\n        newCfg.sessionTypes = ['persistent-license'];\n      } else {\n        success = false;\n      }\n    }\n\n    if (success) {\n      this.configuration_ = newCfg;\n      return;\n    }\n  }  // for each cfg in supportedConfigurations\n\n  // As per the spec, this should be a DOMException, but there is not a public\n  // constructor for this.\n  let unsupportedKeySystemError = new Error('Unsupported keySystem');\n  unsupportedKeySystemError.name = 'NotSupportedError';\n  unsupportedKeySystemError.code = DOMException.NOT_SUPPORTED_ERR;\n  throw unsupportedKeySystemError;\n};\n\n\n/** @override */\nshaka.polyfill.PatchedMediaKeysMs.MediaKeySystemAccess.prototype.\n    createMediaKeys = function() {\n  shaka.log.debug('PatchedMediaKeysMs.MediaKeySystemAccess.createMediaKeys');\n\n  // Alias\n  const PatchedMediaKeysMs = shaka.polyfill.PatchedMediaKeysMs;\n\n  let mediaKeys = new PatchedMediaKeysMs.MediaKeys(this.keySystem);\n  return Promise.resolve(/** @type {!MediaKeys} */ (mediaKeys));\n};\n\n\n/** @override */\nshaka.polyfill.PatchedMediaKeysMs.MediaKeySystemAccess.prototype.\n    getConfiguration = function() {\n  shaka.log.debug('PatchedMediaKeysMs.MediaKeySystemAccess.getConfiguration');\n  return this.configuration_;\n};\n\n\n/**\n * An implementation of HTMLMediaElement.prototype.setMediaKeys.\n * Attaches a MediaKeys object to the media element.\n *\n * @this {!HTMLMediaElement}\n * @param {MediaKeys} mediaKeys\n * @return {!Promise}\n */\nshaka.polyfill.PatchedMediaKeysMs.setMediaKeys = function(mediaKeys) {\n  shaka.log.debug('PatchedMediaKeysMs.setMediaKeys');\n  goog.asserts.assert(this instanceof HTMLMediaElement,\n                      'bad \"this\" for setMediaKeys');\n\n  // Alias\n  const PatchedMediaKeysMs = shaka.polyfill.PatchedMediaKeysMs;\n\n  let newMediaKeys =\n      /** @type {shaka.polyfill.PatchedMediaKeysMs.MediaKeys} */ (\n      mediaKeys);\n  let oldMediaKeys =\n      /** @type {shaka.polyfill.PatchedMediaKeysMs.MediaKeys} */ (\n      this.mediaKeys);\n\n  if (oldMediaKeys && oldMediaKeys != newMediaKeys) {\n    goog.asserts.assert(oldMediaKeys instanceof PatchedMediaKeysMs.MediaKeys,\n                        'non-polyfill instance of oldMediaKeys');\n    // Have the old MediaKeys stop listening to events on the video tag.\n    oldMediaKeys.setMedia(null);\n  }\n\n  delete this['mediaKeys'];  // in case there is an existing getter\n  this['mediaKeys'] = mediaKeys;  // work around read-only declaration\n\n  if (newMediaKeys) {\n    goog.asserts.assert(newMediaKeys instanceof PatchedMediaKeysMs.MediaKeys,\n                        'non-polyfill instance of newMediaKeys');\n    return newMediaKeys.setMedia(this);\n  }\n\n  return Promise.resolve();\n};\n\n\n/**\n * An implementation of MediaKeys.\n *\n * @constructor\n * @struct\n * @param {string} keySystem\n * @implements {MediaKeys}\n */\nshaka.polyfill.PatchedMediaKeysMs.MediaKeys = function(keySystem) {\n  shaka.log.debug('PatchedMediaKeysMs.MediaKeys');\n\n  /** @private {!MSMediaKeys} */\n  this.nativeMediaKeys_ = new MSMediaKeys(keySystem);\n\n  /** @private {!shaka.util.EventManager} */\n  this.eventManager_ = new shaka.util.EventManager();\n};\n\n\n/** @override */\nshaka.polyfill.PatchedMediaKeysMs.MediaKeys.prototype.\n    createSession = function(sessionType) {\n  shaka.log.debug('PatchedMediaKeysMs.MediaKeys.createSession');\n\n  sessionType = sessionType || 'temporary';\n  // For now, only the 'temporary' type is supported.\n  if (sessionType != 'temporary') {\n    throw new TypeError('Session type ' + sessionType +\n        ' is unsupported on this platform.');\n  }\n\n  // Alias\n  const PatchedMediaKeysMs = shaka.polyfill.PatchedMediaKeysMs;\n\n  return new PatchedMediaKeysMs.MediaKeySession(\n      this.nativeMediaKeys_, sessionType);\n};\n\n\n/** @override */\nshaka.polyfill.PatchedMediaKeysMs.MediaKeys.prototype.\n    setServerCertificate = function(serverCertificate) {\n  shaka.log.debug('PatchedMediaKeysMs.MediaKeys.setServerCertificate');\n\n  // There is no equivalent in PatchedMediaKeysMs, so return failure.\n  return Promise.resolve(false);\n};\n\n\n/**\n * @param {HTMLMediaElement} media\n * @protected\n * @return {!Promise}\n */\nshaka.polyfill.PatchedMediaKeysMs.MediaKeys.prototype.\n    setMedia = function(media) {\n  // Alias\n  const PatchedMediaKeysMs = shaka.polyfill.PatchedMediaKeysMs;\n\n  // Remove any old listeners.\n  this.eventManager_.removeAll();\n\n  // It is valid for media to be null; null is used to flag that event handlers\n  // need to be cleaned up.\n  if (!media) {\n    return Promise.resolve();\n  }\n\n  // Intercept and translate these prefixed EME events.\n  this.eventManager_.listen(media, 'msneedkey',\n      /** @type {shaka.util.EventManager.ListenerType} */\n      (PatchedMediaKeysMs.onMsNeedKey_));\n\n  let self = this;\n  function setMediaKeysDeferred() {\n    media.msSetMediaKeys(self.nativeMediaKeys_);\n    media.removeEventListener('loadedmetadata', setMediaKeysDeferred);\n  }\n\n  // Wrap native HTMLMediaElement.msSetMediaKeys with a Promise.\n  try {\n    // IE11/Edge requires that readyState >=1 before mediaKeys can be set, so\n    // check this and wait for loadedmetadata if we are not in the correct state\n    if (media.readyState >= 1) {\n      media.msSetMediaKeys(this.nativeMediaKeys_);\n    } else {\n      media.addEventListener('loadedmetadata', setMediaKeysDeferred);\n    }\n\n    return Promise.resolve();\n  } catch (exception) {\n    return Promise.reject(exception);\n  }\n};\n\n\n/**\n * An implementation of MediaKeySession.\n *\n * @constructor\n * @struct\n * @param {MSMediaKeys} nativeMediaKeys\n * @param {string} sessionType\n * @implements {MediaKeySession}\n * @extends {shaka.util.FakeEventTarget}\n */\nshaka.polyfill.PatchedMediaKeysMs.\n    MediaKeySession = function(nativeMediaKeys, sessionType) {\n  shaka.log.debug('PatchedMediaKeysMs.MediaKeySession');\n  shaka.util.FakeEventTarget.call(this);\n\n  // The native MediaKeySession, which will be created in generateRequest.\n  /** @private {MSMediaKeySession} */\n  this.nativeMediaKeySession_ = null;\n\n  /** @private {MSMediaKeys} */\n  this.nativeMediaKeys_ = nativeMediaKeys;\n\n  // Promises that are resolved later\n  /** @private {shaka.util.PublicPromise} */\n  this.generateRequestPromise_ = null;\n\n  /** @private {shaka.util.PublicPromise} */\n  this.updatePromise_ = null;\n\n  /** @private {!shaka.util.EventManager} */\n  this.eventManager_ = new shaka.util.EventManager();\n\n  /** @type {string} */\n  this.sessionId = '';\n\n  /** @type {number} */\n  this.expiration = NaN;\n\n  /** @type {!shaka.util.PublicPromise} */\n  this.closed = new shaka.util.PublicPromise();\n\n  /** @type {!shaka.polyfill.PatchedMediaKeysMs.MediaKeyStatusMap} */\n  this.keyStatuses =\n      new shaka.polyfill.PatchedMediaKeysMs.MediaKeyStatusMap();\n};\ngoog.inherits(shaka.polyfill.PatchedMediaKeysMs.MediaKeySession,\n    shaka.util.FakeEventTarget);\n\n\n/** @override */\nshaka.polyfill.PatchedMediaKeysMs.MediaKeySession.prototype.\n    generateRequest = function(initDataType, initData) {\n  shaka.log.debug('PatchedMediaKeysMs.MediaKeySession.generateRequest');\n\n  this.generateRequestPromise_ = new shaka.util.PublicPromise();\n\n  try {\n    // This EME spec version requires a MIME content type as the 1st param\n    // to createSession, but doesn't seem to matter what the value is.\n\n    // NOTE: IE11 takes either Uint8Array or ArrayBuffer, but Edge 12 only\n    // accepts Uint8Array.\n    this.nativeMediaKeySession_ = this.nativeMediaKeys_\n        .createSession('video/mp4', new Uint8Array(initData), null);\n\n    // Attach session event handlers here.\n    this.eventManager_.listen(this.nativeMediaKeySession_, 'mskeymessage',\n        /** @type {shaka.util.EventManager.ListenerType} */\n        (this.onMsKeyMessage_.bind(this)));\n    this.eventManager_.listen(this.nativeMediaKeySession_, 'mskeyadded',\n        /** @type {shaka.util.EventManager.ListenerType} */\n        (this.onMsKeyAdded_.bind(this)));\n    this.eventManager_.listen(this.nativeMediaKeySession_, 'mskeyerror',\n        /** @type {shaka.util.EventManager.ListenerType} */\n        (this.onMsKeyError_.bind(this)));\n\n    this.updateKeyStatus_('status-pending');\n  } catch (exception) {\n    this.generateRequestPromise_.reject(exception);\n  }\n\n  return this.generateRequestPromise_;\n};\n\n\n/** @override */\nshaka.polyfill.PatchedMediaKeysMs.MediaKeySession.prototype.\n    load = function() {\n  shaka.log.debug('PatchedMediaKeysMs.MediaKeySession.load');\n\n  return Promise.reject(new Error('MediaKeySession.load not yet supported'));\n};\n\n\n/** @override */\nshaka.polyfill.PatchedMediaKeysMs.MediaKeySession.prototype.\n    update = function(response) {\n  shaka.log.debug('PatchedMediaKeysMs.MediaKeySession.update');\n\n  this.updatePromise_ = new shaka.util.PublicPromise();\n\n  try {\n    // Pass through to the native session.\n    // NOTE: IE11 takes either Uint8Array or ArrayBuffer, but Edge 12 only\n    // accepts Uint8Array.\n    this.nativeMediaKeySession_.update(new Uint8Array(response));\n  } catch (exception) {\n    this.updatePromise_.reject(exception);\n  }\n\n  return this.updatePromise_;\n};\n\n\n/** @override */\nshaka.polyfill.PatchedMediaKeysMs.MediaKeySession.prototype.\n    close = function() {\n  shaka.log.debug('PatchedMediaKeysMs.MediaKeySession.close');\n\n  try {\n    // Pass through to the native session.\n    // NOTE: IE seems to have a spec discrepancy here - v2010218 should have\n    // MediaKeySession.release, but actually uses \"close\". The next version\n    // of the spec is the initial Promise based one, so it's not the target spec\n    // either.\n    this.nativeMediaKeySession_.close();\n\n    this.closed.resolve();\n    this.eventManager_.removeAll();\n  } catch (exception) {\n    this.closed.reject(exception);\n  }\n\n  return this.closed;\n};\n\n\n/** @override */\nshaka.polyfill.PatchedMediaKeysMs.MediaKeySession.prototype.\n    remove = function() {\n  shaka.log.debug('PatchedMediaKeysMs.MediaKeySession.remove');\n\n  return Promise.reject(new Error('MediaKeySession.remove is only ' +\n      'applicable for persistent licenses, which are not supported on ' +\n      'this platform'));\n};\n\n\n/**\n * Handler for the native media elements msNeedKey event.\n *\n * @this {!HTMLMediaElement}\n * @param {!MediaKeyEvent} event\n * @private\n */\nshaka.polyfill.PatchedMediaKeysMs.onMsNeedKey_ = function(event) {\n  shaka.log.debug('PatchedMediaKeysMs.onMsNeedKey_', event);\n\n  // Alias\n  const PatchedMediaKeysMs = shaka.polyfill.PatchedMediaKeysMs;\n\n  // NOTE: Because \"this\" is a real EventTarget, on IE, the event we dispatch\n  // here must also be a real Event.\n  let event2 = /** @type {!CustomEvent} */(document.createEvent('CustomEvent'));\n  event2.initCustomEvent('encrypted', false, false, null);\n  event2.initDataType = 'cenc';\n  event2.initData = PatchedMediaKeysMs.normaliseInitData_(event.initData);\n\n  this.dispatchEvent(event2);\n};\n\n\n/**\n * Normalise the initData array. This is to apply browser specific work-arounds,\n * e.g. removing duplicates which appears to occur intermittently when the\n * native msneedkey event fires (i.e. event.initData contains dupes).\n *\n * @param {?Uint8Array} initData\n * @private\n * @return {?Uint8Array}\n */\nshaka.polyfill.PatchedMediaKeysMs.normaliseInitData_ = function(initData) {\n  if (!initData) {\n    return initData;\n  }\n\n  let pssh = new shaka.util.Pssh(initData);\n\n  // If there is only a single pssh, return the original array.\n  if (pssh.dataBoundaries.length <= 1) {\n    return initData;\n  }\n\n  let unfilteredInitDatas = [];\n  for (let i = 0; i < pssh.dataBoundaries.length; i++) {\n    let currPssh = initData.subarray(\n        pssh.dataBoundaries[i].start,\n        pssh.dataBoundaries[i].end + 1); // End is exclusive, hence the +1.\n\n    unfilteredInitDatas.push(currPssh);\n  }\n\n  // Dedupe psshData.\n  let dedupedInitDatas = shaka.util.ArrayUtils.removeDuplicates(\n      unfilteredInitDatas,\n      shaka.polyfill.PatchedMediaKeysMs.compareInitDatas_);\n\n  let targetLength = 0;\n  for (let i = 0; i < dedupedInitDatas.length; i++) {\n    targetLength += dedupedInitDatas[i].length;\n  }\n\n  // Flatten the array of Uint8Arrays back into a single Uint8Array.\n  let normalisedInitData = new Uint8Array(targetLength);\n  let offset = 0;\n  for (let i = 0; i < dedupedInitDatas.length; i++) {\n    normalisedInitData.set(dedupedInitDatas[i], offset);\n    offset += dedupedInitDatas[i].length;\n  }\n\n  return normalisedInitData;\n};\n\n\n/**\n * @param {!Uint8Array} initDataA\n * @param {!Uint8Array} initDataB\n * @return {boolean}\n * @private\n */\nshaka.polyfill.PatchedMediaKeysMs.compareInitDatas_ =\n    function(initDataA, initDataB) {\n  return shaka.util.Uint8ArrayUtils.equal(initDataA, initDataB);\n};\n\n\n/**\n * Handler for the native keymessage event on MSMediaKeySession.\n *\n * @param {!MediaKeyEvent} event\n * @private\n */\nshaka.polyfill.PatchedMediaKeysMs.MediaKeySession.prototype.\n    onMsKeyMessage_ = function(event) {\n  shaka.log.debug('PatchedMediaKeysMs.onMsKeyMessage_', event);\n\n  // We can now resolve this.generateRequestPromise, which should be non-null.\n  goog.asserts.assert(this.generateRequestPromise_,\n                      'generateRequestPromise_ not set in onMsKeyMessage_');\n  if (this.generateRequestPromise_) {\n    this.generateRequestPromise_.resolve();\n    this.generateRequestPromise_ = null;\n  }\n\n  let isNew = this.keyStatuses.getStatus() == undefined;\n\n  let event2 = new shaka.util.FakeEvent('message', {\n    messageType: isNew ? 'licenserequest' : 'licenserenewal',\n    message: event.message.buffer,\n  });\n\n  this.dispatchEvent(event2);\n};\n\n\n/**\n * Handler for the native keyadded event on MSMediaKeySession.\n *\n * @param {!MediaKeyEvent} event\n * @private\n */\nshaka.polyfill.PatchedMediaKeysMs.MediaKeySession.prototype.\n    onMsKeyAdded_ = function(event) {\n  shaka.log.debug('PatchedMediaKeysMs.onMsKeyAdded_', event);\n\n  // PlayReady's concept of persistent licenses makes emulation difficult here.\n  // A license policy can say that the license persists, which causes the CDM to\n  // store it for use in a later session.  The result is that in IE11, the CDM\n  // fires 'mskeyadded' without ever firing 'mskeymessage'.\n  if (this.generateRequestPromise_) {\n    shaka.log.debug('Simulating completion for a PR persistent license.');\n    goog.asserts.assert(!this.updatePromise_,\n        'updatePromise_ and generateRequestPromise_ set in onMsKeyAdded_');\n    this.updateKeyStatus_('usable');\n    this.generateRequestPromise_.resolve();\n    this.generateRequestPromise_ = null;\n    return;\n  }\n\n  // We can now resolve this.updatePromise, which should be non-null.\n  goog.asserts.assert(this.updatePromise_,\n                      'updatePromise_ not set in onMsKeyAdded_');\n  if (this.updatePromise_) {\n    this.updateKeyStatus_('usable');\n    this.updatePromise_.resolve();\n    this.updatePromise_ = null;\n  }\n};\n\n\n/**\n * Handler for the native keyerror event on MSMediaKeySession.\n *\n * @param {!MediaKeyEvent} event\n * @private\n */\nshaka.polyfill.PatchedMediaKeysMs.MediaKeySession.prototype.\n    onMsKeyError_ = function(event) {\n  shaka.log.debug('PatchedMediaKeysMs.onMsKeyError_', event);\n\n  let error = new Error('EME PatchedMediaKeysMs key error');\n  error.errorCode = this.nativeMediaKeySession_.error;\n\n  if (this.generateRequestPromise_ != null) {\n    this.generateRequestPromise_.reject(error);\n    this.generateRequestPromise_ = null;\n  } else if (this.updatePromise_ != null) {\n    this.updatePromise_.reject(error);\n    this.updatePromise_ = null;\n  } else {\n    // Unexpected error - map native codes to standardised key statuses.\n    // Possible values of this.nativeMediaKeySession_.error.code:\n    // MS_MEDIA_KEYERR_UNKNOWN        = 1\n    // MS_MEDIA_KEYERR_CLIENT         = 2\n    // MS_MEDIA_KEYERR_SERVICE        = 3\n    // MS_MEDIA_KEYERR_OUTPUT         = 4\n    // MS_MEDIA_KEYERR_HARDWARECHANGE = 5\n    // MS_MEDIA_KEYERR_DOMAIN         = 6\n\n    switch (this.nativeMediaKeySession_.error.code) {\n      case MSMediaKeyError.MS_MEDIA_KEYERR_OUTPUT:\n      case MSMediaKeyError.MS_MEDIA_KEYERR_HARDWARECHANGE:\n        this.updateKeyStatus_('output-not-allowed');\n        break;\n      default:\n        this.updateKeyStatus_('internal-error');\n        break;\n    }\n  }\n};\n\n\n/**\n * Updates key status and dispatch a 'keystatuseschange' event.\n *\n * @param {string} status\n * @private\n */\nshaka.polyfill.PatchedMediaKeysMs.MediaKeySession.prototype.\n    updateKeyStatus_ = function(status) {\n  this.keyStatuses.setStatus(status);\n  let event = new shaka.util.FakeEvent('keystatuseschange');\n  this.dispatchEvent(event);\n};\n\n\n/**\n * An implementation of MediaKeyStatusMap.\n * This fakes a map with a single key ID.\n *\n * @constructor\n * @struct\n * @implements {MediaKeyStatusMap}\n */\nshaka.polyfill.PatchedMediaKeysMs.MediaKeyStatusMap = function() {\n  /**\n   * @type {number}\n   */\n  this.size = 0;\n\n  /**\n   * @private {string|undefined}\n   */\n  this.status_ = undefined;\n};\n\n\n/**\n * @const {!ArrayBuffer}\n * @private\n */\nshaka.polyfill.PatchedMediaKeysMs.MediaKeyStatusMap.KEY_ID_;\n\n\n/**\n * An internal method used by the session to set key status.\n * @param {string|undefined} status\n */\nshaka.polyfill.PatchedMediaKeysMs.MediaKeyStatusMap.prototype.\n    setStatus = function(status) {\n  this.size = status == undefined ? 0 : 1;\n  this.status_ = status;\n};\n\n\n/**\n * An internal method used by the session to get key status.\n * @return {string|undefined}\n */\nshaka.polyfill.PatchedMediaKeysMs.MediaKeyStatusMap.prototype.\n    getStatus = function() {\n  return this.status_;\n};\n\n\n/** @override */\nshaka.polyfill.PatchedMediaKeysMs.MediaKeyStatusMap.prototype.\n    forEach = function(fn) {\n  if (this.status_) {\n    let fakeKeyId =\n        shaka.polyfill.PatchedMediaKeysMs.MediaKeyStatusMap.KEY_ID_;\n    fn(this.status_, fakeKeyId);\n  }\n};\n\n\n/** @override */\nshaka.polyfill.PatchedMediaKeysMs.MediaKeyStatusMap.prototype.\n    get = function(keyId) {\n  if (this.has(keyId)) {\n    return this.status_;\n  }\n  return undefined;\n};\n\n\n/** @override */\nshaka.polyfill.PatchedMediaKeysMs.MediaKeyStatusMap.prototype.\n    has = function(keyId) {\n  let fakeKeyId =\n      shaka.polyfill.PatchedMediaKeysMs.MediaKeyStatusMap.KEY_ID_;\n  if (this.status_ &&\n      shaka.util.Uint8ArrayUtils.equal(\n          new Uint8Array(keyId), new Uint8Array(fakeKeyId))) {\n    return true;\n  }\n  return false;\n};\n\n\n/**\n * @suppress {missingReturn}\n * @override\n */\nshaka.polyfill.PatchedMediaKeysMs.MediaKeyStatusMap.prototype.\n    entries = function() {\n  goog.asserts.assert(false, 'Not used!  Provided only for the compiler.');\n};\n\n\n/**\n * @suppress {missingReturn}\n * @override\n */\nshaka.polyfill.PatchedMediaKeysMs.MediaKeyStatusMap.prototype.\n    keys = function() {\n  goog.asserts.assert(false, 'Not used!  Provided only for the compiler.');\n};\n\n\n/**\n * @suppress {missingReturn}\n * @override\n */\nshaka.polyfill.PatchedMediaKeysMs.MediaKeyStatusMap.prototype.\n    values = function() {\n  goog.asserts.assert(false, 'Not used!  Provided only for the compiler.');\n};\n\n\nshaka.polyfill.register(shaka.polyfill.PatchedMediaKeysMs.install);\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.polyfill.PatchedMediaKeysNop');\n\ngoog.require('goog.asserts');\ngoog.require('shaka.log');\ngoog.require('shaka.polyfill.register');\n\n\n/**\n * @namespace shaka.polyfill.PatchedMediaKeysNop\n *\n * @summary A polyfill to stub out\n * {@link https://bit.ly/EmeMar15 EME draft 12 March 2015} on browsers without\n * EME.\n * All methods will fail.\n */\n\n\n/**\n * Installs the polyfill if needed.\n */\nshaka.polyfill.PatchedMediaKeysNop.install = function() {\n  if (!window.HTMLVideoElement ||\n      (navigator.requestMediaKeySystemAccess &&\n       MediaKeySystemAccess.prototype.getConfiguration)) {\n    return;\n  }\n  shaka.log.info('EME not available.');\n\n  // Alias.\n  const PatchedMediaKeysNop = shaka.polyfill.PatchedMediaKeysNop;\n\n  // Install patches.\n  navigator.requestMediaKeySystemAccess =\n      PatchedMediaKeysNop.requestMediaKeySystemAccess;\n  // Delete mediaKeys to work around strict mode compatibility issues.\n  delete HTMLMediaElement.prototype['mediaKeys'];\n  // Work around read-only declaration for mediaKeys by using a string.\n  HTMLMediaElement.prototype['mediaKeys'] = null;\n  HTMLMediaElement.prototype.setMediaKeys = PatchedMediaKeysNop.setMediaKeys;\n  // These are not usable, but allow Player.isBrowserSupported to pass.\n  window.MediaKeys = PatchedMediaKeysNop.MediaKeys;\n  window.MediaKeySystemAccess = PatchedMediaKeysNop.MediaKeySystemAccess;\n};\n\n\n/**\n * An implementation of navigator.requestMediaKeySystemAccess.\n * Retrieves a MediaKeySystemAccess object.\n *\n * @this {!Navigator}\n * @param {string} keySystem\n * @param {!Array.<!MediaKeySystemConfiguration>} supportedConfigurations\n * @return {!Promise.<!MediaKeySystemAccess>}\n */\nshaka.polyfill.PatchedMediaKeysNop.requestMediaKeySystemAccess =\n    function(keySystem, supportedConfigurations) {\n  shaka.log.debug('PatchedMediaKeysNop.requestMediaKeySystemAccess');\n  goog.asserts.assert(this == navigator,\n                      'bad \"this\" for requestMediaKeySystemAccess');\n\n\n  return Promise.reject(new Error(\n      'The key system specified is not supported.'));\n};\n\n\n/**\n * An implementation of HTMLMediaElement.prototype.setMediaKeys.\n * Attaches a MediaKeys object to the media element.\n *\n * @this {!HTMLMediaElement}\n * @param {MediaKeys} mediaKeys\n * @return {!Promise}\n */\nshaka.polyfill.PatchedMediaKeysNop.setMediaKeys = function(mediaKeys) {\n  shaka.log.debug('PatchedMediaKeysNop.setMediaKeys');\n  goog.asserts.assert(this instanceof HTMLMediaElement,\n                      'bad \"this\" for setMediaKeys');\n\n  if (mediaKeys == null) {\n    return Promise.resolve();\n  }\n\n  return Promise.reject(new Error('MediaKeys not supported.'));\n};\n\n\n/**\n * An unusable constructor for MediaKeys.\n * @constructor\n * @struct\n * @implements {MediaKeys}\n */\nshaka.polyfill.PatchedMediaKeysNop.MediaKeys = function() {\n  throw new TypeError('Illegal constructor.');\n};\n\n\n/** @override */\nshaka.polyfill.PatchedMediaKeysNop.MediaKeys.prototype.createSession =\n    function() {};\n\n\n/** @override */\nshaka.polyfill.PatchedMediaKeysNop.MediaKeys.prototype.setServerCertificate =\n    function() {};\n\n\n/**\n * An unusable constructor for MediaKeySystemAccess.\n * @constructor\n * @struct\n * @implements {MediaKeySystemAccess}\n */\nshaka.polyfill.PatchedMediaKeysNop.MediaKeySystemAccess = function() {\n  throw new TypeError('Illegal constructor.');\n};\n\n\n/** @override */\nshaka.polyfill.PatchedMediaKeysNop.MediaKeySystemAccess.prototype.\n    getConfiguration = function() {};\n\n\n/** @override */\nshaka.polyfill.PatchedMediaKeysNop.MediaKeySystemAccess.prototype.\n    createMediaKeys = function() {};\n\n\n/** @override */\nshaka.polyfill.PatchedMediaKeysNop.MediaKeySystemAccess.prototype.\n    keySystem;\n\n\n// A low priority ensures this is the last and acts as a fallback.\nshaka.polyfill.register(shaka.polyfill.PatchedMediaKeysNop.install, -10);\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.polyfill.PatchedMediaKeysWebkit');\n\ngoog.require('goog.asserts');\ngoog.require('shaka.log');\ngoog.require('shaka.polyfill.register');\ngoog.require('shaka.util.EventManager');\ngoog.require('shaka.util.FakeEvent');\ngoog.require('shaka.util.FakeEventTarget');\ngoog.require('shaka.util.PublicPromise');\ngoog.require('shaka.util.StringUtils');\ngoog.require('shaka.util.Uint8ArrayUtils');\n\n\n/**\n * @namespace shaka.polyfill.PatchedMediaKeysWebkit\n *\n * @summary A polyfill to implement\n * {@link https://bit.ly/EmeMar15 EME draft 12 March 2015} on top of\n * webkit-prefixed {@link https://bit.ly/Eme01b EME v0.1b}.\n */\n\n\n/**\n * Store api prefix.\n *\n * @private {string}\n */\nshaka.polyfill.PatchedMediaKeysWebkit.prefix_ = '';\n\n\n/**\n * Installs the polyfill if needed.\n */\nshaka.polyfill.PatchedMediaKeysWebkit.install = function() {\n  // Alias.\n  const PatchedMediaKeysWebkit = shaka.polyfill.PatchedMediaKeysWebkit;\n  const prefixApi = PatchedMediaKeysWebkit.prefixApi_;\n\n  if (!window.HTMLVideoElement ||\n      (navigator.requestMediaKeySystemAccess &&\n       MediaKeySystemAccess.prototype.getConfiguration)) {\n    return;\n  }\n  if (HTMLMediaElement.prototype.webkitGenerateKeyRequest) {\n    shaka.log.info('Using webkit-prefixed EME v0.1b');\n    PatchedMediaKeysWebkit.prefix_ = 'webkit';\n  } else if (HTMLMediaElement.prototype.generateKeyRequest) {\n    shaka.log.info('Using nonprefixed EME v0.1b');\n  } else {\n    return;\n  }\n\n  goog.asserts.assert(\n      HTMLMediaElement.prototype[prefixApi('generateKeyRequest')],\n                      'PatchedMediaKeysWebkit APIs not available!');\n\n  // Construct a fake key ID.  This is not done at load-time to avoid exceptions\n  // on unsupported browsers.  This particular fake key ID was suggested in\n  // w3c/encrypted-media#32.\n  PatchedMediaKeysWebkit.MediaKeyStatusMap.KEY_ID_ =\n      (new Uint8Array([0])).buffer;\n\n  // Install patches.\n  navigator.requestMediaKeySystemAccess =\n      PatchedMediaKeysWebkit.requestMediaKeySystemAccess;\n  // Delete mediaKeys to work around strict mode compatibility issues.\n  delete HTMLMediaElement.prototype['mediaKeys'];\n  // Work around read-only declaration for mediaKeys by using a string.\n  HTMLMediaElement.prototype['mediaKeys'] = null;\n  HTMLMediaElement.prototype.setMediaKeys = PatchedMediaKeysWebkit.setMediaKeys;\n  window.MediaKeys = PatchedMediaKeysWebkit.MediaKeys;\n  window.MediaKeySystemAccess = PatchedMediaKeysWebkit.MediaKeySystemAccess;\n};\n\n\n/**\n * Prefix the api with the stored prefix.\n *\n * @param {string} api\n * @return {string}\n * @private\n */\nshaka.polyfill.PatchedMediaKeysWebkit.prefixApi_ = function(api) {\n  let prefix = shaka.polyfill.PatchedMediaKeysWebkit.prefix_;\n  if (prefix) {\n    return prefix + api.charAt(0).toUpperCase() + api.slice(1);\n  }\n  return api;\n};\n\n\n/**\n * An implementation of navigator.requestMediaKeySystemAccess.\n * Retrieves a MediaKeySystemAccess object.\n *\n * @this {!Navigator}\n * @param {string} keySystem\n * @param {!Array.<!MediaKeySystemConfiguration>} supportedConfigurations\n * @return {!Promise.<!MediaKeySystemAccess>}\n */\nshaka.polyfill.PatchedMediaKeysWebkit.requestMediaKeySystemAccess =\n    function(keySystem, supportedConfigurations) {\n  shaka.log.debug('PatchedMediaKeysWebkit.requestMediaKeySystemAccess');\n  goog.asserts.assert(this == navigator,\n                      'bad \"this\" for requestMediaKeySystemAccess');\n\n  // Alias.\n  const PatchedMediaKeysWebkit = shaka.polyfill.PatchedMediaKeysWebkit;\n  try {\n    let access = new PatchedMediaKeysWebkit.MediaKeySystemAccess(\n        keySystem, supportedConfigurations);\n    return Promise.resolve(/** @type {!MediaKeySystemAccess} */ (access));\n  } catch (exception) {\n    return Promise.reject(exception);\n  }\n};\n\n\n/**\n * An implementation of HTMLMediaElement.prototype.setMediaKeys.\n * Attaches a MediaKeys object to the media element.\n *\n * @this {!HTMLMediaElement}\n * @param {MediaKeys} mediaKeys\n * @return {!Promise}\n */\nshaka.polyfill.PatchedMediaKeysWebkit.setMediaKeys = function(mediaKeys) {\n  shaka.log.debug('PatchedMediaKeysWebkit.setMediaKeys');\n  goog.asserts.assert(this instanceof HTMLMediaElement,\n                      'bad \"this\" for setMediaKeys');\n\n  // Alias.\n  const PatchedMediaKeysWebkit = shaka.polyfill.PatchedMediaKeysWebkit;\n\n  let newMediaKeys =\n      /** @type {shaka.polyfill.PatchedMediaKeysWebkit.MediaKeys} */ (\n          mediaKeys);\n  let oldMediaKeys =\n      /** @type {shaka.polyfill.PatchedMediaKeysWebkit.MediaKeys} */ (\n          this.mediaKeys);\n\n  if (oldMediaKeys && oldMediaKeys != newMediaKeys) {\n    goog.asserts.assert(\n        oldMediaKeys instanceof PatchedMediaKeysWebkit.MediaKeys,\n        'non-polyfill instance of oldMediaKeys');\n    // Have the old MediaKeys stop listening to events on the video tag.\n    oldMediaKeys.setMedia(null);\n  }\n\n  delete this['mediaKeys'];  // In case there is an existing getter.\n  this['mediaKeys'] = mediaKeys;  // Work around the read-only declaration.\n\n  if (newMediaKeys) {\n    goog.asserts.assert(\n        newMediaKeys instanceof PatchedMediaKeysWebkit.MediaKeys,\n        'non-polyfill instance of newMediaKeys');\n    newMediaKeys.setMedia(this);\n  }\n\n  return Promise.resolve();\n};\n\n\n/**\n * For some of this polyfill's implementation, we need to query a video element.\n * But for some embedded systems, it is memory-expensive to create multiple\n * video elements.  Therefore, we check the document to see if we can borrow one\n * to query before we fall back to creating one temporarily.\n *\n * @return {!HTMLVideoElement}\n * @private\n */\nshaka.polyfill.PatchedMediaKeysWebkit.getVideoElement_ = function() {\n  let videos = document.getElementsByTagName('video');\n  let tmpVideo = videos.length ? videos[0] : document.createElement('video');\n  return /** @type {!HTMLVideoElement} */(tmpVideo);\n};\n\n\n/**\n * An implementation of MediaKeySystemAccess.\n *\n * @constructor\n * @struct\n * @param {string} keySystem\n * @param {!Array.<!MediaKeySystemConfiguration>} supportedConfigurations\n * @implements {MediaKeySystemAccess}\n * @throws {Error} if the key system is not supported.\n */\nshaka.polyfill.PatchedMediaKeysWebkit.MediaKeySystemAccess =\n    function(keySystem, supportedConfigurations) {\n  shaka.log.debug('PatchedMediaKeysWebkit.MediaKeySystemAccess');\n\n  /** @type {string} */\n  this.keySystem = keySystem;\n\n  /** @private {string} */\n  this.internalKeySystem_ = keySystem;\n\n  /** @private {!MediaKeySystemConfiguration} */\n  this.configuration_;\n\n  // This is only a guess, since we don't really know from the prefixed API.\n  let allowPersistentState = false;\n\n  if (keySystem == 'org.w3.clearkey') {\n    // ClearKey's string must be prefixed in v0.1b.\n    this.internalKeySystem_ = 'webkit-org.w3.clearkey';\n    // ClearKey doesn't support persistence.\n    allowPersistentState = false;\n  }\n\n  let success = false;\n  let tmpVideo = shaka.polyfill.PatchedMediaKeysWebkit.getVideoElement_();\n  for (let i = 0; i < supportedConfigurations.length; ++i) {\n    let cfg = supportedConfigurations[i];\n\n    // Create a new config object and start adding in the pieces which we\n    // find support for.  We will return this from getConfiguration() if asked.\n    /** @type {!MediaKeySystemConfiguration} */\n    let newCfg = {\n      'audioCapabilities': [],\n      'videoCapabilities': [],\n      // It is technically against spec to return these as optional, but we\n      // don't truly know their values from the prefixed API:\n      'persistentState': 'optional',\n      'distinctiveIdentifier': 'optional',\n      // Pretend the requested init data types are supported, since we don't\n      // really know that either:\n      'initDataTypes': cfg.initDataTypes,\n      'sessionTypes': ['temporary'],\n      'label': cfg.label,\n    };\n\n    // v0.1b tests for key system availability with an extra argument on\n    // canPlayType.\n    let ranAnyTests = false;\n    if (cfg.audioCapabilities) {\n      for (let j = 0; j < cfg.audioCapabilities.length; ++j) {\n        let cap = cfg.audioCapabilities[j];\n        if (cap.contentType) {\n          ranAnyTests = true;\n          // In Chrome <= 40, if you ask about Widevine-encrypted audio support,\n          // you get a false-negative when you specify codec information.\n          // Work around this by stripping codec info for audio types.\n          let contentType = cap.contentType.split(';')[0];\n          if (tmpVideo.canPlayType(contentType, this.internalKeySystem_)) {\n            newCfg.audioCapabilities.push(cap);\n            success = true;\n          }\n        }\n      }\n    }\n    if (cfg.videoCapabilities) {\n      for (let j = 0; j < cfg.videoCapabilities.length; ++j) {\n        let cap = cfg.videoCapabilities[j];\n        if (cap.contentType) {\n          ranAnyTests = true;\n          if (tmpVideo.canPlayType(cap.contentType, this.internalKeySystem_)) {\n            newCfg.videoCapabilities.push(cap);\n            success = true;\n          }\n        }\n      }\n    }\n\n    if (!ranAnyTests) {\n      // If no specific types were requested, we check all common types to find\n      // out if the key system is present at all.\n      success = tmpVideo.canPlayType('video/mp4', this.internalKeySystem_) ||\n                tmpVideo.canPlayType('video/webm', this.internalKeySystem_);\n    }\n    if (cfg.persistentState == 'required') {\n      if (allowPersistentState) {\n        newCfg.persistentState = 'required';\n        newCfg.sessionTypes = ['persistent-license'];\n      } else {\n        success = false;\n      }\n    }\n\n    if (success) {\n      this.configuration_ = newCfg;\n      return;\n    }\n  }  // for each cfg in supportedConfigurations\n\n  let message = 'Unsupported keySystem';\n  if (keySystem == 'org.w3.clearkey' || keySystem == 'com.widevine.alpha') {\n    message = 'None of the requested configurations were supported.';\n  }\n  let unsupportedError = new Error(message);\n  unsupportedError.name = 'NotSupportedError';\n  unsupportedError.code = DOMException.NOT_SUPPORTED_ERR;\n  throw unsupportedError;\n};\n\n\n/** @override */\nshaka.polyfill.PatchedMediaKeysWebkit.MediaKeySystemAccess.prototype.\n    createMediaKeys = function() {\n  shaka.log.debug(\n      'PatchedMediaKeysWebkit.MediaKeySystemAccess.createMediaKeys');\n\n  // Alias.\n  const PatchedMediaKeysWebkit = shaka.polyfill.PatchedMediaKeysWebkit;\n  let mediaKeys = new PatchedMediaKeysWebkit.MediaKeys(this.internalKeySystem_);\n  return Promise.resolve(/** @type {!MediaKeys} */ (mediaKeys));\n};\n\n\n/** @override */\nshaka.polyfill.PatchedMediaKeysWebkit.MediaKeySystemAccess.prototype.\n    getConfiguration = function() {\n  shaka.log.debug(\n      'PatchedMediaKeysWebkit.MediaKeySystemAccess.getConfiguration');\n  return this.configuration_;\n};\n\n\n/**\n * An implementation of MediaKeys.\n *\n * @constructor\n * @struct\n * @param {string} keySystem\n * @implements {MediaKeys}\n */\nshaka.polyfill.PatchedMediaKeysWebkit.MediaKeys = function(keySystem) {\n  shaka.log.debug('PatchedMediaKeysWebkit.MediaKeys');\n\n  /** @private {string} */\n  this.keySystem_ = keySystem;\n\n  /** @private {HTMLMediaElement} */\n  this.media_ = null;\n\n  /** @private {!shaka.util.EventManager} */\n  this.eventManager_ = new shaka.util.EventManager();\n\n  /**\n   * @private {!Array.<!shaka.polyfill.PatchedMediaKeysWebkit.MediaKeySession>}\n   */\n  this.newSessions_ = [];\n\n  /**\n   * @private {!Object.<string,\n   *                    !shaka.polyfill.PatchedMediaKeysWebkit.MediaKeySession>}\n   */\n  this.sessionMap_ = {};\n};\n\n\n/**\n * @param {HTMLMediaElement} media\n * @protected\n */\nshaka.polyfill.PatchedMediaKeysWebkit.MediaKeys.prototype.setMedia =\n    function(media) {\n  this.media_ = media;\n\n  // Remove any old listeners.\n  this.eventManager_.removeAll();\n\n  let prefix = shaka.polyfill.PatchedMediaKeysWebkit.prefix_;\n  if (media) {\n    // Intercept and translate these prefixed EME events.\n    this.eventManager_.listen(media, prefix + 'needkey',\n        /** @type {shaka.util.EventManager.ListenerType} */ (\n            this.onWebkitNeedKey_.bind(this)));\n\n    this.eventManager_.listen(media, prefix + 'keymessage',\n        /** @type {shaka.util.EventManager.ListenerType} */ (\n            this.onWebkitKeyMessage_.bind(this)));\n\n    this.eventManager_.listen(media, prefix + 'keyadded',\n        /** @type {shaka.util.EventManager.ListenerType} */ (\n            this.onWebkitKeyAdded_.bind(this)));\n\n    this.eventManager_.listen(media, prefix + 'keyerror',\n        /** @type {shaka.util.EventManager.ListenerType} */ (\n            this.onWebkitKeyError_.bind(this)));\n  }\n};\n\n\n/** @override */\nshaka.polyfill.PatchedMediaKeysWebkit.MediaKeys.prototype.createSession =\n    function(sessionType) {\n  shaka.log.debug('PatchedMediaKeysWebkit.MediaKeys.createSession');\n\n  sessionType = sessionType || 'temporary';\n  if (sessionType != 'temporary' && sessionType != 'persistent-license') {\n    throw new TypeError('Session type ' + sessionType +\n                        ' is unsupported on this platform.');\n  }\n\n  // Alias.\n  const PatchedMediaKeysWebkit = shaka.polyfill.PatchedMediaKeysWebkit;\n\n  // Unprefixed EME allows for session creation without a video tag or src.\n  // Prefixed EME requires both a valid HTMLMediaElement and a src.\n  let media = this.media_ || /** @type {!HTMLMediaElement} */(\n      document.createElement('video'));\n  if (!media.src) media.src = 'about:blank';\n\n  let session = new PatchedMediaKeysWebkit.MediaKeySession(\n      media, this.keySystem_, sessionType);\n  this.newSessions_.push(session);\n  return session;\n};\n\n\n/** @override */\nshaka.polyfill.PatchedMediaKeysWebkit.MediaKeys.prototype.setServerCertificate =\n    function(serverCertificate) {\n  shaka.log.debug('PatchedMediaKeysWebkit.MediaKeys.setServerCertificate');\n\n  // There is no equivalent in v0.1b, so return failure.\n  return Promise.resolve(false);\n};\n\n\n/**\n * @param {!MediaKeyEvent} event\n * @private\n */\nshaka.polyfill.PatchedMediaKeysWebkit.MediaKeys.prototype.onWebkitNeedKey_ =\n    function(event) {\n  shaka.log.debug('PatchedMediaKeysWebkit.onWebkitNeedKey_', event);\n  goog.asserts.assert(this.media_, 'media_ not set in onWebkitNeedKey_');\n\n  let event2 =\n      /** @type {!CustomEvent} */ (document.createEvent('CustomEvent'));\n  event2.initCustomEvent('encrypted', false, false, null);\n\n  // not used by v0.1b EME, but given a valid value\n  event2.initDataType = 'webm';\n  event2.initData = event.initData;\n\n  this.media_.dispatchEvent(event2);\n};\n\n\n/**\n * @param {!MediaKeyEvent} event\n * @private\n */\nshaka.polyfill.PatchedMediaKeysWebkit.MediaKeys.prototype.onWebkitKeyMessage_ =\n    function(event) {\n  shaka.log.debug('PatchedMediaKeysWebkit.onWebkitKeyMessage_', event);\n\n  let session = this.findSession_(event.sessionId);\n  if (!session) {\n    shaka.log.error('Session not found', event.sessionId);\n    return;\n  }\n\n  let isNew = session.keyStatuses.getStatus() == undefined;\n\n  let event2 = new shaka.util.FakeEvent('message', {\n    messageType: isNew ? 'licenserequest' : 'licenserenewal',\n    message: event.message,\n  });\n\n  session.generated();\n  session.dispatchEvent(event2);\n};\n\n\n/**\n * @param {!MediaKeyEvent} event\n * @private\n */\nshaka.polyfill.PatchedMediaKeysWebkit.MediaKeys.prototype.onWebkitKeyAdded_ =\n    function(event) {\n  shaka.log.debug('PatchedMediaKeysWebkit.onWebkitKeyAdded_', event);\n\n  let session = this.findSession_(event.sessionId);\n  goog.asserts.assert(session, 'unable to find session in onWebkitKeyAdded_');\n  if (session) {\n    session.ready();\n  }\n};\n\n\n/**\n * @param {!MediaKeyEvent} event\n * @private\n */\nshaka.polyfill.PatchedMediaKeysWebkit.MediaKeys.prototype.onWebkitKeyError_ =\n    function(event) {\n  shaka.log.debug('PatchedMediaKeysWebkit.onWebkitKeyError_', event);\n\n  let session = this.findSession_(event.sessionId);\n  goog.asserts.assert(session, 'unable to find session in onWebkitKeyError_');\n  if (session) {\n    session.handleError(event);\n  }\n};\n\n\n/**\n * @param {string} sessionId\n * @return {shaka.polyfill.PatchedMediaKeysWebkit.MediaKeySession}\n * @private\n */\nshaka.polyfill.PatchedMediaKeysWebkit.MediaKeys.prototype.findSession_ =\n    function(sessionId) {\n  let session = this.sessionMap_[sessionId];\n  if (session) {\n    shaka.log.debug('PatchedMediaKeysWebkit.MediaKeys.findSession_', session);\n    return session;\n  }\n\n  session = this.newSessions_.shift();\n  if (session) {\n    session.sessionId = sessionId;\n    this.sessionMap_[sessionId] = session;\n    shaka.log.debug('PatchedMediaKeysWebkit.MediaKeys.findSession_', session);\n    return session;\n  }\n\n  return null;\n};\n\n\n/**\n * An implementation of MediaKeySession.\n *\n * @param {!HTMLMediaElement} media\n * @param {string} keySystem\n * @param {string} sessionType\n *\n * @constructor\n * @struct\n * @implements {MediaKeySession}\n * @extends {shaka.util.FakeEventTarget}\n */\nshaka.polyfill.PatchedMediaKeysWebkit.MediaKeySession =\n    function(media, keySystem, sessionType) {\n  shaka.log.debug('PatchedMediaKeysWebkit.MediaKeySession');\n  shaka.util.FakeEventTarget.call(this);\n\n  /** @private {!HTMLMediaElement} */\n  this.media_ = media;\n\n  /** @private {boolean} */\n  this.initialized_ = false;\n\n  /** @private {shaka.util.PublicPromise} */\n  this.generatePromise_ = null;\n\n  /** @private {shaka.util.PublicPromise} */\n  this.updatePromise_ = null;\n\n  /** @private {string} */\n  this.keySystem_ = keySystem;\n\n  /** @private {string} */\n  this.type_ = sessionType;\n\n  /** @type {string} */\n  this.sessionId = '';\n\n  /** @type {number} */\n  this.expiration = NaN;\n\n  /** @type {!shaka.util.PublicPromise} */\n  this.closed = new shaka.util.PublicPromise();\n\n  /** @type {!shaka.polyfill.PatchedMediaKeysWebkit.MediaKeyStatusMap} */\n  this.keyStatuses =\n      new shaka.polyfill.PatchedMediaKeysWebkit.MediaKeyStatusMap();\n};\ngoog.inherits(shaka.polyfill.PatchedMediaKeysWebkit.MediaKeySession,\n              shaka.util.FakeEventTarget);\n\n\n/**\n * Signals that the license request has been generated.  This resolves the\n * 'generateRequest' promise.\n *\n * @protected\n */\nshaka.polyfill.PatchedMediaKeysWebkit.MediaKeySession.prototype.generated =\n    function() {\n  shaka.log.debug('PatchedMediaKeysWebkit.MediaKeySession.generated');\n\n  if (this.generatePromise_) {\n    this.generatePromise_.resolve();\n    this.generatePromise_ = null;\n  }\n};\n\n\n/**\n * Signals that the session is 'ready', which is the terminology used in older\n * versions of EME.  The new signal is to resolve the 'update' promise.  This\n * translates between the two.\n *\n * @protected\n */\nshaka.polyfill.PatchedMediaKeysWebkit.MediaKeySession.prototype.ready =\n    function() {\n  shaka.log.debug('PatchedMediaKeysWebkit.MediaKeySession.ready');\n\n  this.updateKeyStatus_('usable');\n\n  if (this.updatePromise_) {\n    this.updatePromise_.resolve();\n  }\n  this.updatePromise_ = null;\n};\n\n\n/**\n * Either rejects a promise, or dispatches an error event, as appropriate.\n *\n * @param {!MediaKeyEvent} event\n */\nshaka.polyfill.PatchedMediaKeysWebkit.MediaKeySession.prototype.handleError =\n    function(event) {\n  shaka.log.debug('PatchedMediaKeysWebkit.MediaKeySession.handleError', event);\n\n  // This does not match the DOMException we get in current WD EME, but it will\n  // at least provide some information which can be used to look into the\n  // problem.\n  let error = new Error('EME v0.1b key error');\n  error.errorCode = event.errorCode;\n  error.errorCode.systemCode = event.systemCode;\n\n  // The presence or absence of sessionId indicates whether this corresponds to\n  // generateRequest() or update().\n  if (!event.sessionId && this.generatePromise_) {\n    error.method = 'generateRequest';\n    if (event.systemCode == 45) {\n      error.message = 'Unsupported session type.';\n    }\n    this.generatePromise_.reject(error);\n    this.generatePromise_ = null;\n  } else if (event.sessionId && this.updatePromise_) {\n    error.method = 'update';\n    this.updatePromise_.reject(error);\n    this.updatePromise_ = null;\n  } else {\n    // This mapping of key statuses is imperfect at best.\n    let code = event.errorCode.code;\n    let systemCode = event.systemCode;\n    if (code == MediaKeyError['MEDIA_KEYERR_OUTPUT']) {\n      this.updateKeyStatus_('output-restricted');\n    } else if (systemCode == 1) {\n      this.updateKeyStatus_('expired');\n    } else {\n      this.updateKeyStatus_('internal-error');\n    }\n  }\n};\n\n\n/**\n * Logic which is shared between generateRequest() and load(), both of which\n * are ultimately implemented with webkitGenerateKeyRequest in prefixed EME.\n *\n * @param {?BufferSource} initData\n * @param {?string} offlineSessionId\n * @return {!Promise}\n * @private\n */\nshaka.polyfill.PatchedMediaKeysWebkit.MediaKeySession.prototype.generate_ =\n    function(initData, offlineSessionId) {\n  if (this.initialized_) {\n    return Promise.reject(new Error('The session is already initialized.'));\n  }\n\n  this.initialized_ = true;\n\n  /** @type {!Uint8Array} */\n  let mangledInitData;\n\n  try {\n    if (this.type_ == 'persistent-license') {\n      const StringUtils = shaka.util.StringUtils;\n      if (!offlineSessionId) {\n        // Persisting the initial license.\n        // Prefix the init data with a tag to indicate persistence.\n        let prefix = StringUtils.toUTF8('PERSISTENT|');\n        let result = new Uint8Array(prefix.byteLength + initData.byteLength);\n        result.set(new Uint8Array(prefix), 0);\n        result.set(new Uint8Array(initData), prefix.byteLength);\n        mangledInitData = result;\n      } else {\n        // Loading a stored license.\n        // Prefix the init data (which is really a session ID) with a tag to\n        // indicate that we are loading a persisted session.\n        mangledInitData = new Uint8Array(\n            StringUtils.toUTF8('LOAD_SESSION|' + offlineSessionId));\n      }\n    } else {\n      // Streaming.\n      goog.asserts.assert(this.type_ == 'temporary',\n                          'expected temporary session');\n      goog.asserts.assert(!offlineSessionId,\n                          'unexpected offline session ID');\n      mangledInitData = new Uint8Array(initData);\n    }\n\n    goog.asserts.assert(mangledInitData,\n                        'init data not set!');\n  } catch (exception) {\n    return Promise.reject(exception);\n  }\n\n  goog.asserts.assert(this.generatePromise_ == null,\n                      'generatePromise_ should be null');\n  this.generatePromise_ = new shaka.util.PublicPromise();\n\n  // Because we are hacking media.src in createSession to better emulate\n  // unprefixed EME's ability to create sessions and license requests without a\n  // video tag, we can get ourselves into trouble.  It seems that sometimes,\n  // the setting of media.src hasn't been processed by some other thread, and\n  // GKR can throw an exception.  If this occurs, wait 10 ms and try again at\n  // most once.  This situation should only occur when init data is available\n  // ahead of the 'needkey' event.\n\n  let prefixApi = shaka.polyfill.PatchedMediaKeysWebkit.prefixApi_;\n  let generateKeyRequestName = prefixApi('generateKeyRequest');\n  try {\n    this.media_[generateKeyRequestName](this.keySystem_, mangledInitData);\n  } catch (exception) {\n    if (exception.name != 'InvalidStateError') {\n      this.generatePromise_ = null;\n      return Promise.reject(exception);\n    }\n\n    setTimeout(function() {\n      try {\n        this.media_[generateKeyRequestName](this.keySystem_, mangledInitData);\n      } catch (exception2) {\n        this.generatePromise_.reject(exception2);\n        this.generatePromise_ = null;\n      }\n    }.bind(this), 10);\n  }\n\n  return this.generatePromise_;\n};\n\n\n/**\n * An internal version of update which defers new calls while old ones are in\n * progress.\n *\n * @param {!shaka.util.PublicPromise} promise  The promise associated with this\n *   call.\n * @param {?BufferSource} response\n * @private\n */\nshaka.polyfill.PatchedMediaKeysWebkit.MediaKeySession.prototype.update_ =\n    function(promise, response) {\n  if (this.updatePromise_) {\n    // We already have an update in-progress, so defer this one until after the\n    // old one is resolved.  Execute this whether the original one succeeds or\n    // fails.\n    this.updatePromise_.then(\n        this.update_.bind(this, promise, response)\n    ).catch(\n        this.update_.bind(this, promise, response)\n    );\n    return;\n  }\n\n  this.updatePromise_ = promise;\n\n  let key;\n  let keyId;\n\n  if (this.keySystem_ == 'webkit-org.w3.clearkey') {\n    // The current EME version of clearkey wants a structured JSON response.\n    // The v0.1b version wants just a raw key.  Parse the JSON response and\n    // extract the key and key ID.\n    const StringUtils = shaka.util.StringUtils;\n    const Uint8ArrayUtils = shaka.util.Uint8ArrayUtils;\n    let licenseString = StringUtils.fromUTF8(response);\n    let jwkSet = /** @type {JWKSet} */ (JSON.parse(licenseString));\n    let kty = jwkSet.keys[0].kty;\n    if (kty != 'oct') {\n      // Reject the promise.\n      let error = new Error('Response is not a valid JSON Web Key Set.');\n      this.updatePromise_.reject(error);\n      this.updatePromise_ = null;\n    }\n    key = Uint8ArrayUtils.fromBase64(jwkSet.keys[0].k);\n    keyId = Uint8ArrayUtils.fromBase64(jwkSet.keys[0].kid);\n  } else {\n    // The key ID is not required.\n    key = new Uint8Array(response);\n    keyId = null;\n  }\n\n  let prefixApi = shaka.polyfill.PatchedMediaKeysWebkit.prefixApi_;\n  let addKeyName = prefixApi('addKey');\n  try {\n    this.media_[addKeyName](this.keySystem_, key, keyId, this.sessionId);\n  } catch (exception) {\n    // Reject the promise.\n    this.updatePromise_.reject(exception);\n    this.updatePromise_ = null;\n  }\n};\n\n\n/**\n * Update key status and dispatch a 'keystatuseschange' event.\n *\n * @param {string} status\n * @private\n */\nshaka.polyfill.PatchedMediaKeysWebkit.MediaKeySession.prototype.\n    updateKeyStatus_ = function(status) {\n  this.keyStatuses.setStatus(status);\n  let event = new shaka.util.FakeEvent('keystatuseschange');\n  this.dispatchEvent(event);\n};\n\n\n/** @override */\nshaka.polyfill.PatchedMediaKeysWebkit.MediaKeySession.prototype.\n    generateRequest = function(initDataType, initData) {\n  shaka.log.debug('PatchedMediaKeysWebkit.MediaKeySession.generateRequest');\n  return this.generate_(initData, null);\n};\n\n\n/** @override */\nshaka.polyfill.PatchedMediaKeysWebkit.MediaKeySession.prototype.load =\n    function(sessionId) {\n  shaka.log.debug('PatchedMediaKeysWebkit.MediaKeySession.load');\n  if (this.type_ == 'persistent-license') {\n    return this.generate_(null, sessionId);\n  } else {\n    return Promise.reject(new Error('Not a persistent session.'));\n  }\n};\n\n\n/** @override */\nshaka.polyfill.PatchedMediaKeysWebkit.MediaKeySession.prototype.update =\n    function(response) {\n  shaka.log.debug('PatchedMediaKeysWebkit.MediaKeySession.update', response);\n  goog.asserts.assert(this.sessionId, 'update without session ID');\n\n  let nextUpdatePromise = new shaka.util.PublicPromise();\n  this.update_(nextUpdatePromise, response);\n  return nextUpdatePromise;\n};\n\n\n/** @override */\nshaka.polyfill.PatchedMediaKeysWebkit.MediaKeySession.prototype.close =\n    function() {\n  shaka.log.debug('PatchedMediaKeysWebkit.MediaKeySession.close');\n\n  // This will remove a persistent session, but it's also the only way to\n  // free CDM resources on v0.1b.\n  if (this.type_ != 'persistent-license') {\n    // sessionId may reasonably be null if no key request has been generated\n    // yet.  Unprefixed EME will return a rejected promise in this case.\n    // We will use the same error message that Chrome 41 uses in its EME\n    // implementation.\n    if (!this.sessionId) {\n      this.closed.reject(new Error('The session is not callable.'));\n      return this.closed;\n    }\n\n    // This may throw an exception, but we ignore it because we are only using\n    // it to clean up resources in v0.1b.  We still consider the session closed.\n    // We can't let the exception propagate because MediaKeySession.close()\n    // should not throw.\n    let prefixApi = shaka.polyfill.PatchedMediaKeysWebkit.prefixApi_;\n    let cancelKeyRequestName = prefixApi('cancelKeyRequest');\n    try {\n      this.media_[cancelKeyRequestName](this.keySystem_, this.sessionId);\n    } catch (exception) {}\n  }\n\n  // Resolve the 'closed' promise and return it.\n  this.closed.resolve();\n  return this.closed;\n};\n\n\n/** @override */\nshaka.polyfill.PatchedMediaKeysWebkit.MediaKeySession.prototype.remove =\n    function() {\n  shaka.log.debug('PatchedMediaKeysWebkit.MediaKeySession.remove');\n\n  if (this.type_ != 'persistent-license') {\n    return Promise.reject(new Error('Not a persistent session.'));\n  }\n\n  return this.close();\n};\n\n\n/**\n * An implementation of MediaKeyStatusMap.\n * This fakes a map with a single key ID.\n *\n * @constructor\n * @struct\n * @implements {MediaKeyStatusMap}\n */\nshaka.polyfill.PatchedMediaKeysWebkit.MediaKeyStatusMap = function() {\n  /**\n   * @type {number}\n   */\n  this.size = 0;\n\n  /**\n   * @private {string|undefined}\n   */\n  this.status_ = undefined;\n};\n\n\n/**\n * @const {!ArrayBuffer}\n * @private\n */\nshaka.polyfill.PatchedMediaKeysWebkit.MediaKeyStatusMap.KEY_ID_;\n\n\n/**\n * An internal method used by the session to set key status.\n * @param {string|undefined} status\n */\nshaka.polyfill.PatchedMediaKeysWebkit.MediaKeyStatusMap.prototype.setStatus =\n    function(status) {\n  this.size = status == undefined ? 0 : 1;\n  this.status_ = status;\n};\n\n\n/**\n * An internal method used by the session to get key status.\n * @return {string|undefined}\n */\nshaka.polyfill.PatchedMediaKeysWebkit.MediaKeyStatusMap.prototype.getStatus =\n    function() {\n  return this.status_;\n};\n\n\n/** @override */\nshaka.polyfill.PatchedMediaKeysWebkit.MediaKeyStatusMap.prototype.forEach =\n    function(fn) {\n  if (this.status_) {\n    let fakeKeyId =\n        shaka.polyfill.PatchedMediaKeysWebkit.MediaKeyStatusMap.KEY_ID_;\n    fn(this.status_, fakeKeyId);\n  }\n};\n\n\n/** @override */\nshaka.polyfill.PatchedMediaKeysWebkit.MediaKeyStatusMap.prototype.get =\n    function(keyId) {\n  if (this.has(keyId)) {\n    return this.status_;\n  }\n  return undefined;\n};\n\n\n/** @override */\nshaka.polyfill.PatchedMediaKeysWebkit.MediaKeyStatusMap.prototype.has =\n    function(keyId) {\n  let fakeKeyId =\n      shaka.polyfill.PatchedMediaKeysWebkit.MediaKeyStatusMap.KEY_ID_;\n  if (this.status_ &&\n      shaka.util.Uint8ArrayUtils.equal(\n          new Uint8Array(keyId), new Uint8Array(fakeKeyId))) {\n    return true;\n  }\n  return false;\n};\n\n\n/**\n * @suppress {missingReturn}\n * @override\n */\nshaka.polyfill.PatchedMediaKeysWebkit.MediaKeyStatusMap.prototype.\n    entries = function() {\n  goog.asserts.assert(false, 'Not used!  Provided only for compiler.');\n};\n\n\n/**\n * @suppress {missingReturn}\n * @override\n */\nshaka.polyfill.PatchedMediaKeysWebkit.MediaKeyStatusMap.prototype.\n    keys = function() {\n  goog.asserts.assert(false, 'Not used!  Provided only for compiler.');\n};\n\n\n/**\n * @suppress {missingReturn}\n * @override\n */\nshaka.polyfill.PatchedMediaKeysWebkit.MediaKeyStatusMap.prototype.\n    values = function() {\n  goog.asserts.assert(false, 'Not used!  Provided only for compiler.');\n};\n\n\nshaka.polyfill.register(shaka.polyfill.PatchedMediaKeysWebkit.install);\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.polyfill.VideoPlayPromise');\n\ngoog.require('shaka.log');\ngoog.require('shaka.polyfill.register');\n\n\n/**\n * @namespace shaka.polyfill.VideoPlayPromise\n *\n * @summary A polyfill to silence the play() Promise in HTML5 video.\n */\n\n\n/**\n * Install the polyfill if needed.\n */\nshaka.polyfill.VideoPlayPromise.install = function() {\n  shaka.log.debug('VideoPlayPromise.install');\n\n  if (window.HTMLMediaElement) {\n    const originalPlay = HTMLMediaElement.prototype.play;\n    HTMLMediaElement.prototype.play = function() {\n      let p = originalPlay.apply(this);\n      if (p) {\n        // This browser is returning a Promise from play().\n        // If the play() call fails or is interrupted, the Promise will be\n        // rejected.  Some apps, however, don't listen to this Promise,\n        // especially since it is not available cross-browser.  If the Promise\n        // is rejected without anyone listening for the failure, an error will\n        // appear in the JS console.\n        // To avoid confusion over this innocuous \"error\", we will install a\n        // catch handler on the Promise.  This does not prevent the app from\n        // also catching failures and handling them.  It only prevents the\n        // console message.\n        p.catch(function() {});\n      }\n      return p;\n    };\n  }\n};\n\nshaka.polyfill.register(shaka.polyfill.VideoPlayPromise.install);\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.polyfill.VideoPlaybackQuality');\n\ngoog.require('shaka.polyfill.register');\n\n\n/**\n * @namespace shaka.polyfill.VideoPlaybackQuality\n *\n * @summary A polyfill to provide MSE VideoPlaybackQuality metrics.\n * Many browsers do not yet provide this API, and Chrome currently provides\n * similar data through individual prefixed attributes on HTMLVideoElement.\n */\n\n\n/**\n * Install the polyfill if needed.\n */\nshaka.polyfill.VideoPlaybackQuality.install = function() {\n  if (!window.HTMLVideoElement) {\n    // Avoid errors on very old browsers.\n    return;\n  }\n\n  let proto = HTMLVideoElement.prototype;\n  if (proto.getVideoPlaybackQuality) {\n    // No polyfill needed.\n    return;\n  }\n\n  if ('webkitDroppedFrameCount' in proto) {\n    proto.getVideoPlaybackQuality =\n        shaka.polyfill.VideoPlaybackQuality.webkit_;\n  }\n};\n\n\n/**\n * @this {HTMLVideoElement}\n * @return {!VideoPlaybackQuality}\n * @private\n */\nshaka.polyfill.VideoPlaybackQuality.webkit_ = function() {\n  return {\n    'droppedVideoFrames': this.webkitDroppedFrameCount,\n    'totalVideoFrames': this.webkitDecodedFrameCount,\n    // Not provided by this polyfill:\n    'corruptedVideoFrames': 0,\n    'creationTime': NaN,\n    'totalFrameDelay': 0,\n  };\n};\n\n\nshaka.polyfill.register(shaka.polyfill.VideoPlaybackQuality.install);\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.polyfill.VTTCue');\n\ngoog.require('shaka.log');\ngoog.require('shaka.polyfill.register');\n\n\n/**\n * @namespace shaka.polyfill.VTTCue\n *\n * @summary A polyfill to provide VTTCue.\n */\n\n\n/**\n * Install the polyfill if needed.\n */\nshaka.polyfill.VTTCue.install = function() {\n  if (window.VTTCue) {\n    shaka.log.info('Using native VTTCue.');\n    return;\n  }\n\n  if (!window.TextTrackCue) {\n    shaka.log.error('VTTCue not available.');\n    return;\n  }\n\n  let constructorLength = TextTrackCue.length;\n  if (constructorLength == 3) {\n    shaka.log.info('Using VTTCue polyfill from 3 argument TextTrackCue.');\n    window.VTTCue = shaka.polyfill.VTTCue.from3ArgsTextTrackCue_;\n  } else if (constructorLength == 6) {\n    shaka.log.info('Using VTTCue polyfill from 6 argument TextTrackCue.');\n    window.VTTCue = shaka.polyfill.VTTCue.from6ArgsTextTrackCue_;\n  } else if (shaka.polyfill.VTTCue.canUse3ArgsTextTrackCue_()) {\n    shaka.log.info('Using VTTCue polyfill from 3 argument TextTrackCue.');\n    window.VTTCue = shaka.polyfill.VTTCue.from3ArgsTextTrackCue_;\n  }\n};\n\n\n/**\n * Draft spec TextTrackCue with 3 constructor arguments.\n * @see {@link https://bit.ly/2IdyKbA W3C Working Draft 25 October 2012}.\n *\n * @param {number} startTime\n * @param {number} endTime\n * @param {string} text\n * @return {TextTrackCue}\n * @private\n */\nshaka.polyfill.VTTCue.from3ArgsTextTrackCue_ = function(startTime, endTime,\n    text) {\n  return new window.TextTrackCue(startTime, endTime, text);\n};\n\n\n/**\n * Draft spec TextTrackCue with 6 constructor arguments (5th & 6th are\n * optional).\n * @see {@link https://bit.ly/2KaGSP2 W3C Working Draft 29 March 2012}.\n *\n * @param {number} startTime\n * @param {number} endTime\n * @param {string} text\n * @return {TextTrackCue}\n * @private\n */\nshaka.polyfill.VTTCue.from6ArgsTextTrackCue_ = function(startTime, endTime,\n    text) {\n  let id = startTime + '-' + endTime + '-' + text;\n  // Quoting the access to the TextTrackCue object to satisfy the compiler.\n  return new window['TextTrackCue'](id, startTime, endTime, text);\n};\n\n\n/**\n * IE10, IE11 and Edge return TextTrackCue.length = 0, although they accept 3\n * constructor arguments.\n *\n * @return {boolean}\n * @private\n */\nshaka.polyfill.VTTCue.canUse3ArgsTextTrackCue_ = function() {\n  try {\n    return !!shaka.polyfill.VTTCue.from3ArgsTextTrackCue_(1, 2, '');\n  } catch (error) {\n    return false;\n  }\n};\n\n\nshaka.polyfill.register(shaka.polyfill.VTTCue.install);\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.text.TtmlTextParser');\n\ngoog.require('goog.asserts');\ngoog.require('shaka.log');\ngoog.require('shaka.text.Cue');\ngoog.require('shaka.text.CueRegion');\ngoog.require('shaka.text.TextEngine');\ngoog.require('shaka.util.ArrayUtils');\ngoog.require('shaka.util.Error');\ngoog.require('shaka.util.StringUtils');\n\n\n/**\n * @constructor\n * @implements {shaka.extern.TextParser}\n */\nshaka.text.TtmlTextParser = function() {};\n\n\n/** @override */\nshaka.text.TtmlTextParser.prototype.parseInit = function(data) {\n  goog.asserts.assert(false, 'TTML does not have init segments');\n};\n\n\n/** @override */\nshaka.text.TtmlTextParser.prototype.parseMedia = function(data, time) {\n  const TtmlTextParser = shaka.text.TtmlTextParser;\n  let str = shaka.util.StringUtils.fromUTF8(data);\n  let ret = [];\n  let parser = new DOMParser();\n  let xml = null;\n\n  try {\n    xml = parser.parseFromString(str, 'text/xml');\n  } catch (exception) {\n    throw new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.TEXT,\n        shaka.util.Error.Code.INVALID_XML);\n  }\n\n  if (xml) {\n    // Try to get the framerate, subFrameRate and frameRateMultiplier\n    // if applicable\n    let frameRate = null;\n    let subFrameRate = null;\n    let frameRateMultiplier = null;\n    let tickRate = null;\n    let spaceStyle = null;\n    let tts = xml.getElementsByTagName('tt');\n    let tt = tts[0];\n    // TTML should always have tt element.\n    if (!tt) {\n      throw new shaka.util.Error(\n          shaka.util.Error.Severity.CRITICAL,\n          shaka.util.Error.Category.TEXT,\n          shaka.util.Error.Code.INVALID_XML);\n    } else {\n      frameRate = tt.getAttribute('ttp:frameRate');\n      subFrameRate = tt.getAttribute('ttp:subFrameRate');\n      frameRateMultiplier = tt.getAttribute('ttp:frameRateMultiplier');\n      tickRate = tt.getAttribute('ttp:tickRate');\n      spaceStyle = tt.getAttribute('xml:space') || 'default';\n    }\n\n    if (spaceStyle != 'default' && spaceStyle != 'preserve') {\n      throw new shaka.util.Error(\n          shaka.util.Error.Severity.CRITICAL,\n          shaka.util.Error.Category.TEXT,\n          shaka.util.Error.Code.INVALID_XML);\n    }\n    let whitespaceTrim = spaceStyle == 'default';\n\n    let rateInfo = new TtmlTextParser.RateInfo_(\n        frameRate, subFrameRate, frameRateMultiplier, tickRate);\n\n    let styles = TtmlTextParser.getLeafNodes_(\n        tt.getElementsByTagName('styling')[0]);\n    let regionElements = TtmlTextParser.getLeafNodes_(\n        tt.getElementsByTagName('layout')[0]);\n    let cueRegions = [];\n    for (let i = 0; i < regionElements.length; i++) {\n      let cueRegion = TtmlTextParser.parseCueRegion_(\n          regionElements[i], styles);\n      if (cueRegion) {\n        cueRegions.push(cueRegion);\n      }\n    }\n\n    let textNodes = TtmlTextParser.getLeafNodes_(\n        tt.getElementsByTagName('body')[0]);\n\n    for (let i = 0; i < textNodes.length; i++) {\n      let cue = TtmlTextParser.parseCue_(textNodes[i],\n                                         time.periodStart,\n                                         rateInfo,\n                                         styles,\n                                         regionElements,\n                                         cueRegions,\n                                         whitespaceTrim);\n      if (cue) {\n        ret.push(cue);\n      }\n    }\n  }\n\n  return ret;\n};\n\n\n/**\n * @const\n * @private {!RegExp}\n * @example 50% 10%\n */\nshaka.text.TtmlTextParser.percentValues_ = /^(\\d{1,2}|100)% (\\d{1,2}|100)%$/;\n\n\n/**\n * @const\n * @private {!RegExp}\n * @example 100px\n */\nshaka.text.TtmlTextParser.unitValues_ = /^(\\d+px|\\d+em)$/;\n\n\n/**\n * @const\n * @private {!RegExp}\n * @example 100px\n */\nshaka.text.TtmlTextParser.pixelValues_ = /^(\\d+)px (\\d+)px$/;\n\n/**\n * @const\n * @private {!RegExp}\n * @example 00:00:40:07 (7 frames) or 00:00:40:07.1 (7 frames, 1 subframe)\n */\nshaka.text.TtmlTextParser.timeColonFormatFrames_ =\n    /^(\\d{2,}):(\\d{2}):(\\d{2}):(\\d{2})\\.?(\\d+)?$/;\n\n\n/**\n * @const\n * @private {!RegExp}\n * @example 00:00:40 or 00:40\n */\nshaka.text.TtmlTextParser.timeColonFormat_ = /^(?:(\\d{2,}):)?(\\d{2}):(\\d{2})$/;\n\n\n/**\n * @const\n * @private {!RegExp}\n * @example 01:02:43.0345555 or 02:43.03\n */\nshaka.text.TtmlTextParser.timeColonFormatMilliseconds_ =\n    /^(?:(\\d{2,}):)?(\\d{2}):(\\d{2}\\.\\d{2,})$/;\n\n\n/**\n * @const\n * @private {!RegExp}\n * @example 75f or 75.5f\n */\nshaka.text.TtmlTextParser.timeFramesFormat_ = /^(\\d*(?:\\.\\d*)?)f$/;\n\n\n/**\n * @const\n * @private {!RegExp}\n * @example 50t or 50.5t\n */\nshaka.text.TtmlTextParser.timeTickFormat_ = /^(\\d*(?:\\.\\d*)?)t$/;\n\n\n/**\n * @const\n * @private {!RegExp}\n * @example 3.45h, 3m or 4.20s\n */\nshaka.text.TtmlTextParser.timeHMSFormat_ =\n    new RegExp(['^(?:(\\\\d*(?:\\\\.\\\\d*)?)h)?',\n                '(?:(\\\\d*(?:\\\\.\\\\d*)?)m)?',\n                '(?:(\\\\d*(?:\\\\.\\\\d*)?)s)?',\n                '(?:(\\\\d*(?:\\\\.\\\\d*)?)ms)?$'].join(''));\n\n\n/**\n * @const\n * @private {!Object.<string, shaka.text.Cue.lineAlign>}\n */\nshaka.text.TtmlTextParser.textAlignToLineAlign_ = {\n  'left': shaka.text.Cue.lineAlign.START,\n  'center': shaka.text.Cue.lineAlign.CENTER,\n  'right': shaka.text.Cue.lineAlign.END,\n  'start': shaka.text.Cue.lineAlign.START,\n  'end': shaka.text.Cue.lineAlign.END,\n};\n\n\n/**\n * @const\n * @private {!Object.<string, shaka.text.Cue.positionAlign>}\n */\nshaka.text.TtmlTextParser.textAlignToPositionAlign_ = {\n  'left': shaka.text.Cue.positionAlign.LEFT,\n  'center': shaka.text.Cue.positionAlign.CENTER,\n  'right': shaka.text.Cue.positionAlign.RIGHT,\n};\n\n\n/**\n * Gets the leaf nodes of the xml node tree. Ignores the text, br elements\n * and the spans positioned inside paragraphs\n *\n * @param {Element} element\n * @return {!Array.<!Element>}\n * @private\n */\nshaka.text.TtmlTextParser.getLeafNodes_ = function(element) {\n  let result = [];\n  if (!element) {\n    return result;\n  }\n\n  let childNodes = element.childNodes;\n  for (let i = 0; i < childNodes.length; i++) {\n    // Currently we don't support styles applicable to span\n    // elements, so they are ignored.\n    let isSpanChildOfP = childNodes[i].nodeName == 'span' &&\n        element.nodeName == 'p';\n    if (childNodes[i].nodeType == Node.ELEMENT_NODE &&\n        childNodes[i].nodeName != 'br' && !isSpanChildOfP) {\n      // Get the leaves the child might contain.\n      goog.asserts.assert(childNodes[i] instanceof Element,\n                          'Node should be Element!');\n      let leafChildren = shaka.text.TtmlTextParser.getLeafNodes_(\n          /** @type {Element} */(childNodes[i]));\n      goog.asserts.assert(leafChildren.length > 0,\n                          'Only a null Element should return no leaves!');\n      result = result.concat(leafChildren);\n    }\n  }\n\n  // if no result at this point, the element itself must be a leaf.\n  if (!result.length) {\n    result.push(element);\n  }\n  return result;\n};\n\n\n/**\n * Inserts \\n where <br> tags are found.\n *\n * @param {!Node} element\n * @param {boolean} whitespaceTrim\n * @private\n */\nshaka.text.TtmlTextParser.addNewLines_ = function(element, whitespaceTrim) {\n  let childNodes = element.childNodes;\n\n  for (let i = 0; i < childNodes.length; i++) {\n    if (childNodes[i].nodeName == 'br' && i > 0) {\n      childNodes[i - 1].textContent += '\\n';\n    } else if (childNodes[i].childNodes.length > 0) {\n      shaka.text.TtmlTextParser.addNewLines_(childNodes[i], whitespaceTrim);\n    } else if (whitespaceTrim) {\n      // Trim leading and trailing whitespace.\n      let trimmed = childNodes[i].textContent.trim();\n      // Collapse multiple spaces into one.\n      trimmed = trimmed.replace(/\\s+/g, ' ');\n\n      childNodes[i].textContent = trimmed;\n    }\n  }\n};\n\n\n/**\n * Parses an Element into a TextTrackCue or VTTCue.\n *\n * @param {!Element} cueElement\n * @param {number} offset\n * @param {!shaka.text.TtmlTextParser.RateInfo_} rateInfo\n * @param {!Array.<!Element>} styles\n * @param {!Array.<!Element>} regionElements\n * @param {!Array.<!shaka.text.CueRegion>} cueRegions\n * @param {boolean} whitespaceTrim\n * @return {shaka.text.Cue}\n * @private\n */\nshaka.text.TtmlTextParser.parseCue_ = function(\n    cueElement, offset, rateInfo, styles, regionElements,\n    cueRegions, whitespaceTrim) {\n  // Disregard empty elements:\n  // TTML allows for empty elements like <div></div>.\n  // If cueElement has neither time attributes, nor\n  // non-whitespace text, don't try to make a cue out of it.\n  if (!cueElement.hasAttribute('begin') &&\n      !cueElement.hasAttribute('end') &&\n      /^\\s*$/.test(cueElement.textContent)) {\n    return null;\n  }\n\n  shaka.text.TtmlTextParser.addNewLines_(cueElement, whitespaceTrim);\n\n  // Get time.\n  let start = shaka.text.TtmlTextParser.parseTime_(\n      cueElement.getAttribute('begin'), rateInfo);\n  let end = shaka.text.TtmlTextParser.parseTime_(\n      cueElement.getAttribute('end'), rateInfo);\n  let duration = shaka.text.TtmlTextParser.parseTime_(\n      cueElement.getAttribute('dur'), rateInfo);\n  let payload = cueElement.textContent;\n\n  if (end == null && duration != null) {\n    end = start + duration;\n  }\n\n  if (start == null || end == null) {\n    throw new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.TEXT,\n        shaka.util.Error.Code.INVALID_TEXT_CUE);\n  }\n\n  start += offset;\n  end += offset;\n\n  let cue = new shaka.text.Cue(start, end, payload);\n\n  // Get other properties if available.\n  let regionElement = shaka.text.TtmlTextParser.getElementFromCollection_(\n      cueElement, 'region', regionElements);\n  if (regionElement && regionElement.getAttribute('xml:id')) {\n    let regionId = regionElement.getAttribute('xml:id');\n    let regionsWithId = cueRegions.filter(function(region) {\n      return region.id == regionId;\n    });\n    cue.region = regionsWithId[0];\n  }\n  shaka.text.TtmlTextParser.addStyle_(cue, cueElement, regionElement, styles);\n\n  return cue;\n};\n\n\n/**\n * Parses an Element into a TextTrackCue or VTTCue.\n *\n * @param {!Element} regionElement\n * @param {!Array.<!Element>} styles\n * @return {shaka.text.CueRegion}\n * @private\n */\nshaka.text.TtmlTextParser.parseCueRegion_ = function(regionElement, styles) {\n  const TtmlTextParser = shaka.text.TtmlTextParser;\n  let region = new shaka.text.CueRegion();\n  let id = regionElement.getAttribute('xml:id');\n  if (!id) {\n    shaka.log.warning('TtmlTextParser parser encountered a region with ' +\n                      'no id. Region will be ignored.');\n    return null;\n  }\n  region.id = id;\n\n  let results = null;\n  let percentage = null;\n  let extent = TtmlTextParser.getStyleAttributeFromRegion_(\n      regionElement, styles, 'tts:extent');\n  if (extent) {\n    percentage = TtmlTextParser.percentValues_.exec(extent);\n    results = percentage || TtmlTextParser.pixelValues_.exec(extent);\n    if (results != null) {\n      region.width = Number(results[1]);\n      region.height = Number(results[2]);\n      region.widthUnits = percentage ?\n                         shaka.text.CueRegion.units.PERCENTAGE :\n                         shaka.text.CueRegion.units.PX;\n\n      region.heightUnits = percentage ?\n                         shaka.text.CueRegion.units.PERCENTAGE :\n                         shaka.text.CueRegion.units.PX;\n    }\n  }\n\n  let origin = TtmlTextParser.getStyleAttributeFromRegion_(\n      regionElement, styles, 'tts:origin');\n  if (origin) {\n    percentage = TtmlTextParser.percentValues_.exec(origin);\n    results = percentage || TtmlTextParser.pixelValues_.exec(origin);\n    if (results != null) {\n      region.viewportAnchorX = Number(results[1]);\n      region.viewportAnchorY = Number(results[2]);\n      region.viewportAnchorUnits = percentage ?\n                shaka.text.CueRegion.units.PERCENTAGE :\n                shaka.text.CueRegion.units.PX;\n    }\n  }\n\n  return region;\n};\n\n/**\n * Adds applicable style properties to a cue.\n *\n * @param {!shaka.text.Cue} cue\n * @param {!Element} cueElement\n * @param {Element} region\n * @param {!Array.<!Element>} styles\n * @private\n */\nshaka.text.TtmlTextParser.addStyle_ = function(\n    cue, cueElement, region, styles) {\n  const TtmlTextParser = shaka.text.TtmlTextParser;\n  const Cue = shaka.text.Cue;\n\n  let direction = TtmlTextParser.getStyleAttribute_(\n      cueElement, region, styles, 'tts:direction');\n  if (direction == 'rtl') {\n    cue.writingDirection = Cue.writingDirection.HORIZONTAL_RIGHT_TO_LEFT;\n  }\n\n  // Direction attribute specifies one-dimentional writing direction\n  // (left to right or right to left). Writing mode specifies that\n  // plus whether text is vertical or horizontal.\n  // They should not contradict each other. If they do, we give\n  // preference to writing mode.\n  let writingMode = TtmlTextParser.getStyleAttribute_(\n      cueElement, region, styles, 'tts:writingMode');\n  if (writingMode == 'tb' || writingMode == 'tblr') {\n    cue.writingDirection = Cue.writingDirection.VERTICAL_LEFT_TO_RIGHT;\n  } else if (writingMode == 'tbrl') {\n    cue.writingDirection = Cue.writingDirection.VERTICAL_RIGHT_TO_LEFT;\n  } else if (writingMode == 'rltb' || writingMode == 'rl') {\n    cue.writingDirection = Cue.writingDirection.HORIZONTAL_RIGHT_TO_LEFT;\n  } else if (writingMode) {\n    cue.writingDirection = Cue.writingDirection.HORIZONTAL_LEFT_TO_RIGHT;\n  }\n\n  let align = TtmlTextParser.getStyleAttribute_(\n      cueElement, region, styles, 'tts:textAlign');\n  if (align) {\n    cue.positionAlign = TtmlTextParser.textAlignToPositionAlign_[align];\n    cue.lineAlign = TtmlTextParser.textAlignToLineAlign_[align];\n\n    goog.asserts.assert(align.toUpperCase() in Cue.textAlign,\n                        align.toUpperCase() +\n                        ' Should be in Cue.textAlign values!');\n\n    cue.textAlign = Cue.textAlign[align.toUpperCase()];\n  }\n\n  let displayAlign = TtmlTextParser.getStyleAttribute_(\n      cueElement, region, styles, 'tts:displayAlign');\n  if (displayAlign) {\n    goog.asserts.assert(displayAlign.toUpperCase() in Cue.displayAlign,\n                        displayAlign.toUpperCase() +\n                        ' Should be in Cue.displayAlign values!');\n    cue.displayAlign = Cue.displayAlign[displayAlign.toUpperCase()];\n  }\n\n  let color = TtmlTextParser.getStyleAttribute_(\n      cueElement, region, styles, 'tts:color');\n  if (color) {\n    cue.color = color;\n  }\n\n  let backgroundColor = TtmlTextParser.getStyleAttribute_(\n      cueElement, region, styles, 'tts:backgroundColor');\n  if (backgroundColor) {\n    cue.backgroundColor = backgroundColor;\n  }\n\n  let fontFamily = TtmlTextParser.getStyleAttribute_(\n      cueElement, region, styles, 'tts:fontFamily');\n  if (fontFamily) {\n    cue.fontFamily = fontFamily;\n  }\n\n  let fontWeight = TtmlTextParser.getStyleAttribute_(\n      cueElement, region, styles, 'tts:fontWeight');\n  if (fontWeight && fontWeight == 'bold') {\n    cue.fontWeight = Cue.fontWeight.BOLD;\n  }\n\n  let wrapOption = TtmlTextParser.getStyleAttribute_(\n      cueElement, region, styles, 'tts:wrapOption');\n  if (wrapOption && wrapOption == 'noWrap') {\n    cue.wrapLine = false;\n  }\n\n  let lineHeight = TtmlTextParser.getStyleAttribute_(\n      cueElement, region, styles, 'tts:lineHeight');\n  if (lineHeight && lineHeight.match(TtmlTextParser.unitValues_)) {\n    cue.lineHeight = lineHeight;\n  }\n\n  let fontSize = TtmlTextParser.getStyleAttribute_(\n      cueElement, region, styles, 'tts:fontSize');\n  if (fontSize && fontSize.match(TtmlTextParser.unitValues_)) {\n    cue.fontSize = fontSize;\n  }\n\n  let fontStyle = TtmlTextParser.getStyleAttribute_(\n      cueElement, region, styles, 'tts:fontStyle');\n  if (fontStyle) {\n    goog.asserts.assert(fontStyle.toUpperCase() in Cue.fontStyle,\n                        fontStyle.toUpperCase() +\n                        ' Should be in Cue.fontStyle values!');\n    cue.fontStyle = Cue.fontStyle[fontStyle.toUpperCase()];\n  }\n\n  // Text decoration is an array of values which can come both from the\n  // element's style or be inherited from elements' parent nodes. All of those\n  // values should be applied as long as they don't contradict each other. If\n  // they do, elements' own style gets preference.\n  let textDecorationRegion = TtmlTextParser.getStyleAttributeFromRegion_(\n      region, styles, 'tts:textDecoration');\n  if (textDecorationRegion) {\n    TtmlTextParser.addTextDecoration_(cue, textDecorationRegion);\n  }\n\n  let textDecorationElement = TtmlTextParser.getStyleAttributeFromElement_(\n      cueElement, styles, 'tts:textDecoration');\n  if (textDecorationElement) {\n    TtmlTextParser.addTextDecoration_(cue, textDecorationElement);\n  }\n};\n\n\n/**\n * Parses text decoration values and adds/removes them to/from the cue.\n *\n * @param {!shaka.text.Cue} cue\n * @param {string} decoration\n * @private\n */\nshaka.text.TtmlTextParser.addTextDecoration_ = function(cue, decoration) {\n  const Cue = shaka.text.Cue;\n  let values = decoration.split(' ');\n  for (let i = 0; i < values.length; i++) {\n    switch (values[i]) {\n      case 'underline':\n        if (cue.textDecoration.indexOf(Cue.textDecoration.UNDERLINE) < 0) {\n          cue.textDecoration.push(Cue.textDecoration.UNDERLINE);\n        }\n        break;\n      case 'noUnderline':\n        if (cue.textDecoration.indexOf(Cue.textDecoration.UNDERLINE) >= 0) {\n          shaka.util.ArrayUtils.remove(cue.textDecoration,\n                                       Cue.textDecoration.UNDERLINE);\n        }\n        break;\n      case 'lineThrough':\n        if (cue.textDecoration.indexOf(Cue.textDecoration.LINE_THROUGH) < 0) {\n          cue.textDecoration.push(Cue.textDecoration.LINE_THROUGH);\n        }\n        break;\n      case 'noLineThrough':\n        if (cue.textDecoration.indexOf(Cue.textDecoration.LINE_THROUGH) >= 0) {\n          shaka.util.ArrayUtils.remove(cue.textDecoration,\n                                       Cue.textDecoration.LINE_THROUGH);\n        }\n        break;\n      case 'overline':\n        if (cue.textDecoration.indexOf(Cue.textDecoration.OVERLINE) < 0) {\n          cue.textDecoration.push(Cue.textDecoration.OVERLINE);\n        }\n        break;\n      case 'noOverline':\n        if (cue.textDecoration.indexOf(Cue.textDecoration.OVERLINE) >= 0) {\n          shaka.util.ArrayUtils.remove(cue.textDecoration,\n                                       Cue.textDecoration.OVERLINE);\n        }\n        break;\n    }\n  }\n};\n\n\n/**\n * Finds a specified attribute on either the original cue element or its\n * associated region and returns the value if the attribute was found.\n *\n * @param {!Element} cueElement\n * @param {Element} region\n * @param {!Array.<!Element>} styles\n * @param {string} attribute\n * @return {?string}\n * @private\n */\nshaka.text.TtmlTextParser.getStyleAttribute_ = function(\n    cueElement, region, styles, attribute) {\n  // An attribute can be specified on region level or in a styling block\n  // associated with the region or original element.\n  const TtmlTextParser = shaka.text.TtmlTextParser;\n  let attr = TtmlTextParser.getStyleAttributeFromElement_(\n      cueElement, styles, attribute);\n  if (attr) {\n    return attr;\n  }\n\n  return TtmlTextParser.getStyleAttributeFromRegion_(\n      region, styles, attribute);\n};\n\n\n/**\n * Finds a specified attribute on the element's associated region\n * and returns the value if the attribute was found.\n *\n * @param {Element} region\n * @param {!Array.<!Element>} styles\n * @param {string} attribute\n * @return {?string}\n * @private\n */\nshaka.text.TtmlTextParser.getStyleAttributeFromRegion_ = function(\n    region, styles, attribute) {\n  let regionChildren = shaka.text.TtmlTextParser.getLeafNodes_(region);\n  for (let i = 0; i < regionChildren.length; i++) {\n    let attr = regionChildren[i].getAttribute(attribute);\n    if (attr) {\n      return attr;\n    }\n  }\n\n  let style = shaka.text.TtmlTextParser.getElementFromCollection_(\n      region, 'style', styles);\n  if (style) {\n    return style.getAttribute(attribute);\n  }\n  return null;\n};\n\n\n/**\n * Finds a specified attribute on the cue element and returns the value\n * if the attribute was found.\n *\n * @param {!Element} cueElement\n * @param {!Array.<!Element>} styles\n * @param {string} attribute\n * @return {?string}\n * @private\n */\nshaka.text.TtmlTextParser.getStyleAttributeFromElement_ = function(\n    cueElement, styles, attribute) {\n  let getElementFromCollection_ =\n      shaka.text.TtmlTextParser.getElementFromCollection_;\n  let style = getElementFromCollection_(cueElement, 'style', styles);\n  if (style) {\n    return style.getAttribute(attribute);\n  }\n  return null;\n};\n\n\n/**\n * Selects an item from |collection| whose id matches |attributeName|\n * from |element|.\n *\n * @param {Element} element\n * @param {string} attributeName\n * @param {!Array.<Element>} collection\n * @return {Element}\n * @private\n */\nshaka.text.TtmlTextParser.getElementFromCollection_ = function(\n    element, attributeName, collection) {\n  if (!element || collection.length < 1) {\n    return null;\n  }\n  let item = null;\n  let itemName = shaka.text.TtmlTextParser.getInheritedAttribute_(\n      element, attributeName);\n  if (itemName) {\n    for (let i = 0; i < collection.length; i++) {\n      if (collection[i].getAttribute('xml:id') == itemName) {\n        item = collection[i];\n        break;\n      }\n    }\n  }\n\n  return item;\n};\n\n\n/**\n * Traverses upwards from a given node until a given attribute is found.\n *\n * @param {!Element} element\n * @param {string} attributeName\n * @return {?string}\n * @private\n */\nshaka.text.TtmlTextParser.getInheritedAttribute_ = function(\n    element, attributeName) {\n  let ret = null;\n  while (element) {\n    ret = element.getAttribute(attributeName);\n    if (ret) {\n      break;\n    }\n\n    // Element.parentNode can lead to XMLDocument, which is not an Element and\n    // has no getAttribute().\n    let parentNode = element.parentNode;\n    if (parentNode instanceof Element) {\n      element = parentNode;\n    } else {\n      break;\n    }\n  }\n  return ret;\n};\n\n\n/**\n * Parses a TTML time from the given word.\n *\n * @param {string} text\n * @param {!shaka.text.TtmlTextParser.RateInfo_} rateInfo\n * @return {?number}\n * @private\n */\nshaka.text.TtmlTextParser.parseTime_ = function(text, rateInfo) {\n  let ret = null;\n  const TtmlTextParser = shaka.text.TtmlTextParser;\n\n  if (TtmlTextParser.timeColonFormatFrames_.test(text)) {\n    ret = TtmlTextParser.parseColonTimeWithFrames_(rateInfo, text);\n  } else if (TtmlTextParser.timeColonFormat_.test(text)) {\n    ret = TtmlTextParser.parseTimeFromRegex_(\n        TtmlTextParser.timeColonFormat_, text);\n  } else if (TtmlTextParser.timeColonFormatMilliseconds_.test(text)) {\n    ret = TtmlTextParser.parseTimeFromRegex_(\n        TtmlTextParser.timeColonFormatMilliseconds_, text);\n  } else if (TtmlTextParser.timeFramesFormat_.test(text)) {\n    ret = TtmlTextParser.parseFramesTime_(rateInfo, text);\n  } else if (TtmlTextParser.timeTickFormat_.test(text)) {\n    ret = TtmlTextParser.parseTickTime_(rateInfo, text);\n  } else if (TtmlTextParser.timeHMSFormat_.test(text)) {\n    ret = TtmlTextParser.parseTimeFromRegex_(\n        TtmlTextParser.timeHMSFormat_, text);\n  }\n\n  return ret;\n};\n\n\n/**\n * Parses a TTML time in frame format.\n *\n * @param {!shaka.text.TtmlTextParser.RateInfo_} rateInfo\n * @param {string} text\n * @return {?number}\n * @private\n */\nshaka.text.TtmlTextParser.parseFramesTime_ = function(rateInfo, text) {\n  // 75f or 75.5f\n  let results = shaka.text.TtmlTextParser.timeFramesFormat_.exec(text);\n  let frames = Number(results[1]);\n\n  return frames / rateInfo.frameRate;\n};\n\n\n/**\n * Parses a TTML time in tick format.\n *\n * @param {!shaka.text.TtmlTextParser.RateInfo_} rateInfo\n * @param {string} text\n * @return {?number}\n * @private\n */\nshaka.text.TtmlTextParser.parseTickTime_ = function(rateInfo, text) {\n  // 50t or 50.5t\n  let results = shaka.text.TtmlTextParser.timeTickFormat_.exec(text);\n  let ticks = Number(results[1]);\n\n  return ticks / rateInfo.tickRate;\n};\n\n\n/**\n * Parses a TTML colon formatted time containing frames.\n *\n * @param {!shaka.text.TtmlTextParser.RateInfo_} rateInfo\n * @param {string} text\n * @return {?number}\n * @private\n */\nshaka.text.TtmlTextParser.parseColonTimeWithFrames_ = function(\n    rateInfo, text) {\n  // 01:02:43:07 ('07' is frames) or 01:02:43:07.1 (subframes)\n  let results = shaka.text.TtmlTextParser.timeColonFormatFrames_.exec(text);\n\n  let hours = Number(results[1]);\n  let minutes = Number(results[2]);\n  let seconds = Number(results[3]);\n  let frames = Number(results[4]);\n  let subframes = Number(results[5]) || 0;\n\n  frames += subframes / rateInfo.subFrameRate;\n  seconds += frames / rateInfo.frameRate;\n\n  return seconds + (minutes * 60) + (hours * 3600);\n};\n\n\n/**\n * Parses a TTML time with a given regex. Expects regex to be some\n * sort of a time-matcher to match hours, minutes, seconds and milliseconds\n *\n * @param {!RegExp} regex\n * @param {string} text\n * @return {?number}\n * @private\n */\nshaka.text.TtmlTextParser.parseTimeFromRegex_ = function(regex, text) {\n  let results = regex.exec(text);\n  if (results == null || results[0] == '') {\n    return null;\n  }\n  // This capture is optional, but will still be in the array as undefined,\n  // in which case it is 0.\n  let hours = Number(results[1]) || 0;\n  let minutes = Number(results[2]) || 0;\n  let seconds = Number(results[3]) || 0;\n  let miliseconds = Number(results[4]) || 0;\n\n  return (miliseconds / 1000) + seconds + (minutes * 60) + (hours * 3600);\n};\n\n\n/**\n * Contains information about frame/subframe rate\n * and frame rate multiplier for time in frame format.\n *\n * @example 01:02:03:04(4 frames) or 01:02:03:04.1(4 frames, 1 subframe)\n * @param {?string} frameRate\n * @param {?string} subFrameRate\n * @param {?string} frameRateMultiplier\n * @param {?string} tickRate\n * @constructor\n * @struct\n * @private\n */\nshaka.text.TtmlTextParser.RateInfo_ = function(\n    frameRate, subFrameRate, frameRateMultiplier, tickRate) {\n  /**\n   * @type {number}\n   */\n  this.frameRate = Number(frameRate) || 30;\n\n  /**\n   * @type {number}\n   */\n  this.subFrameRate = Number(subFrameRate) || 1;\n\n  /**\n   * @type {number}\n   */\n  this.tickRate = Number(tickRate);\n  if (this.tickRate == 0) {\n    if (frameRate) {\n      this.tickRate = this.frameRate * this.subFrameRate;\n    } else {\n      this.tickRate = 1;\n    }\n  }\n\n  if (frameRateMultiplier) {\n    let multiplierResults = /^(\\d+) (\\d+)$/g.exec(frameRateMultiplier);\n    if (multiplierResults) {\n      let numerator = multiplierResults[1];\n      let denominator = multiplierResults[2];\n      let multiplierNum = numerator / denominator;\n      this.frameRate *= multiplierNum;\n    }\n  }\n};\n\n\nshaka.text.TextEngine.registerParser(\n    'application/ttml+xml',\n    shaka.text.TtmlTextParser);\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.text.Mp4TtmlParser');\n\ngoog.require('shaka.text.TextEngine');\ngoog.require('shaka.text.TtmlTextParser');\ngoog.require('shaka.util.Error');\ngoog.require('shaka.util.Mp4Parser');\n\n\n/**\n * @struct\n * @constructor\n * @implements {shaka.extern.TextParser}\n */\nshaka.text.Mp4TtmlParser = function() {\n  /**\n   * @type {!shaka.extern.TextParser}\n   * @private\n   */\n  this.parser_ = new shaka.text.TtmlTextParser();\n};\n\n\n/** @override **/\nshaka.text.Mp4TtmlParser.prototype.parseInit = function(data) {\n  const Mp4Parser = shaka.util.Mp4Parser;\n\n  let sawSTPP = false;\n\n  new Mp4Parser()\n      .box('moov', Mp4Parser.children)\n      .box('trak', Mp4Parser.children)\n      .box('mdia', Mp4Parser.children)\n      .box('minf', Mp4Parser.children)\n      .box('stbl', Mp4Parser.children)\n      .fullBox('stsd', Mp4Parser.sampleDescription)\n      .box('stpp', function(box) {\n        sawSTPP = true;\n        box.parser.stop();\n      }).parse(data);\n\n  if (!sawSTPP) {\n    throw new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.TEXT,\n        shaka.util.Error.Code.INVALID_MP4_TTML);\n  }\n};\n\n\n/** @override **/\nshaka.text.Mp4TtmlParser.prototype.parseMedia = function(data, time) {\n  const Mp4Parser = shaka.util.Mp4Parser;\n\n  let sawMDAT = false;\n  let payload = [];\n\n  new Mp4Parser()\n      .box('mdat', Mp4Parser.allData(function(data) {\n        sawMDAT = true;\n        // Join this to any previous payload, in case the mp4 has multiple\n        // mdats.\n        payload = payload.concat(this.parser_.parseMedia(data, time));\n      }.bind(this))).parse(data);\n\n  if (!sawMDAT) {\n    throw new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.TEXT,\n        shaka.util.Error.Code.INVALID_MP4_TTML);\n  }\n\n  return payload;\n};\n\n\nshaka.text.TextEngine.registerParser(\n    'application/mp4; codecs=\"stpp\"',\n    shaka.text.Mp4TtmlParser);\nshaka.text.TextEngine.registerParser(\n    'application/mp4; codecs=\"stpp.TTML.im1t\"',\n    shaka.text.Mp4TtmlParser);\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.text.VttTextParser');\n\ngoog.require('goog.asserts');\ngoog.require('shaka.log');\ngoog.require('shaka.text.Cue');\ngoog.require('shaka.text.CueRegion');\ngoog.require('shaka.text.TextEngine');\ngoog.require('shaka.util.Error');\ngoog.require('shaka.util.StringUtils');\ngoog.require('shaka.util.TextParser');\n\n\n/**\n * @constructor\n * @implements {shaka.extern.TextParser}\n */\nshaka.text.VttTextParser = function() {};\n\n\n/** @override */\nshaka.text.VttTextParser.prototype.parseInit = function(data) {\n  goog.asserts.assert(false, 'VTT does not have init segments');\n};\n\n\n/**\n * @override\n * @throws {shaka.util.Error}\n */\nshaka.text.VttTextParser.prototype.parseMedia = function(data, time) {\n  const VttTextParser = shaka.text.VttTextParser;\n  // Get the input as a string.  Normalize newlines to \\n.\n  let str = shaka.util.StringUtils.fromUTF8(data);\n  str = str.replace(/\\r\\n|\\r(?=[^\\n]|$)/gm, '\\n');\n  let blocks = str.split(/\\n{2,}/m);\n\n  if (!/^WEBVTT($|[ \\t\\n])/m.test(blocks[0])) {\n    throw new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.TEXT,\n        shaka.util.Error.Code.INVALID_TEXT_HEADER);\n  }\n\n  let offset = time.segmentStart;\n  if (offset == null) {\n    // This is a probe, such as the HLS parser makes.  We don't know the segment\n    // start time, so we will use the X-TIMESTAMP-MAP header, if present, to get\n    // the segment start time.  By only doing this when segmentStart == null, we\n    // protect against rollover in the MPEGTS field.\n\n    // In case the attempt below doesn't work out, assume an offset of 0.\n    offset = 0;\n\n    if (blocks[0].indexOf('X-TIMESTAMP-MAP') >= 0) {\n      // https://bit.ly/2K92l7y\n      // The 'X-TIMESTAMP-MAP' header is used in HLS to align text with\n      // the rest of the media.\n      // The header format is 'X-TIMESTAMP-MAP=MPEGTS:n,LOCAL:m'\n      // (the attributes can go in any order)\n      // where n is MPEG-2 time and m is cue time it maps to.\n      // For example 'X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:900000'\n      // means an offset of 10 seconds\n      // 900000/MPEG_TIMESCALE - cue time.\n      let cueTimeMatch =\n          blocks[0].match(/LOCAL:((?:(\\d{1,}):)?(\\d{2}):(\\d{2})\\.(\\d{3}))/m);\n\n      let mpegTimeMatch = blocks[0].match(/MPEGTS:(\\d+)/m);\n      if (cueTimeMatch && mpegTimeMatch) {\n        let parser = new shaka.util.TextParser(cueTimeMatch[1]);\n        let cueTime = shaka.text.VttTextParser.parseTime_(parser);\n        let mpegTime = Number(mpegTimeMatch[1]);\n        const mpegTimescale = shaka.text.VttTextParser.MPEG_TIMESCALE_;\n        // Apple-encoded HLS content uses absolute timestamps, so assume the\n        // presence of the map tag means the content uses absolute timestamps.\n        offset = time.periodStart + (mpegTime / mpegTimescale - cueTime);\n      }\n    }\n  }\n\n  // Parse VTT regions.\n  /* !Array.<!shaka.extern.CueRegion> */\n  let regions = [];\n  let lines = blocks[0].split('\\n');\n  for (let i = 1; i < lines.length; i++) {\n    if (/^Region:/.test(lines[i])) {\n      let region = VttTextParser.parseRegion_(lines[i]);\n      regions.push(region);\n    }\n  }\n\n  // Parse cues.\n  let ret = [];\n  for (let i = 1; i < blocks.length; i++) {\n    lines = blocks[i].split('\\n');\n    let cue = VttTextParser.parseCue_(lines, offset, regions);\n    if (cue) {\n      ret.push(cue);\n    }\n    }\n\n  return ret;\n};\n\n\n/**\n * Parses a string into a Region object.\n *\n * @param {string} text\n * @return {!shaka.extern.CueRegion}\n * @private\n */\nshaka.text.VttTextParser.parseRegion_ = function(text) {\n  const VttTextParser = shaka.text.VttTextParser;\n  let parser = new shaka.util.TextParser(text);\n  // The region string looks like this:\n  // Region: id=fred width=50% lines=3 regionanchor=0%,100%\n  //         viewportanchor=10%,90% scroll=up\n  let region = new shaka.text.CueRegion();\n\n  // Skip 'Region:'\n  parser.readWord();\n  parser.skipWhitespace();\n\n  let word = parser.readWord();\n  while (word) {\n    if (!VttTextParser.parseRegionSetting_(region, word)) {\n      shaka.log.warning('VTT parser encountered an invalid VTTRegion setting: ',\n                        word,\n                        ' The setting will be ignored.');\n    }\n    parser.skipWhitespace();\n    word = parser.readWord();\n  }\n\n  return region;\n};\n\n\n/**\n * Parses a text block into a Cue object.\n *\n * @param {!Array.<string>} text\n * @param {number} timeOffset\n * @param {!Array.<!shaka.extern.CueRegion>} regions\n * @return {shaka.text.Cue}\n * @private\n */\nshaka.text.VttTextParser.parseCue_ = function(text, timeOffset, regions) {\n  const VttTextParser = shaka.text.VttTextParser;\n\n  // Skip empty blocks.\n  if (text.length == 1 && !text[0]) {\n    return null;\n  }\n\n  // Skip comment blocks.\n  if (/^NOTE($|[ \\t])/.test(text[0])) {\n    return null;\n  }\n\n  // Skip style blocks.\n  if (text[0] == 'STYLE') {\n    return null;\n  }\n\n  let id = null;\n  let index = text[0].indexOf('--\u003e');\n  if (index < 0) {\n    id = text[0];\n    text.splice(0, 1);\n  }\n\n  // Parse the times.\n  let parser = new shaka.util.TextParser(text[0]);\n  let start = VttTextParser.parseTime_(parser);\n  let expect = parser.readRegex(/[ \\t]+--\u003e[ \\t]+/g);\n  let end = VttTextParser.parseTime_(parser);\n\n  if (start == null || expect == null || end == null) {\n    throw new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.TEXT,\n        shaka.util.Error.Code.INVALID_TEXT_CUE);\n  }\n\n  start += timeOffset;\n  end += timeOffset;\n\n  // Get the payload.\n  let payload = text.slice(1).join('\\n').trim();\n\n  let cue = new shaka.text.Cue(start, end, payload);\n\n  // Parse optional settings.\n  parser.skipWhitespace();\n  let word = parser.readWord();\n  while (word) {\n    if (!VttTextParser.parseCueSetting(cue, word, regions)) {\n      shaka.log.warning('VTT parser encountered an invalid VTT setting: ',\n                        word,\n                        ' The setting will be ignored.');\n    }\n    parser.skipWhitespace();\n    word = parser.readWord();\n  }\n\n  if (id != null) {\n    cue.id = id;\n  }\n  return cue;\n};\n\n\n/**\n * Parses a WebVTT setting from the given word.\n *\n * @param {!shaka.text.Cue} cue\n * @param {string} word\n * @param {!Array.<!shaka.text.CueRegion>} regions\n * @return {boolean} True on success.\n */\nshaka.text.VttTextParser.parseCueSetting = function(cue, word, regions) {\n  const VttTextParser = shaka.text.VttTextParser;\n  let results = null;\n  if ((results = /^align:(start|middle|center|end|left|right)$/.exec(word))) {\n    VttTextParser.setTextAlign_(cue, results[1]);\n  } else if ((results = /^vertical:(lr|rl)$/.exec(word))) {\n    VttTextParser.setVerticalWritingDirection_(cue, results[1]);\n  } else if ((results = /^size:([\\d.]+)%$/.exec(word))) {\n    cue.size = Number(results[1]);\n  } else if ((results =\n      /^position:([\\d.]+)%(?:,(line-left|line-right|center|start|end))?$/\n      .exec(word))) {\n    cue.position = Number(results[1]);\n    if (results[2]) {\n      VttTextParser.setPositionAlign_(cue, results[2]);\n    }\n  } else if ((results = /^region:(.*)$/.exec(word))) {\n    let region = VttTextParser.getRegionById_(regions, results[1]);\n    if (region) {\n      cue.region = region;\n    }\n  } else {\n    return VttTextParser.parsedLineValueAndInterpretation_(cue, word);\n  }\n\n  return true;\n};\n\n\n/**\n *\n * @param {!Array.<!shaka.text.CueRegion>} regions\n * @param {string} id\n * @return {?shaka.text.CueRegion}\n * @private\n */\nshaka.text.VttTextParser.getRegionById_ = function(regions, id) {\n  let regionsWithId = regions.filter(function(region) {\n    return region.id == id;\n  });\n  if (!regionsWithId.length) {\n    shaka.log.warning('VTT parser could not find a region with id: ',\n                  id,\n                  ' The region will be ignored.');\n    return null;\n  }\n  goog.asserts.assert(regionsWithId.length == 1,\n                      'VTTRegion ids should be unique!');\n\n  return regionsWithId[0];\n};\n\n\n/**\n * Parses a WebVTTRegion setting from the given word.\n *\n * @param {!shaka.text.CueRegion} region\n * @param {string} word\n * @return {boolean} True on success.\n * @private\n */\nshaka.text.VttTextParser.parseRegionSetting_ = function(region, word) {\n  let results = null;\n  if ((results = /^id=(.*)$/.exec(word))) {\n    region.id = results[1];\n  } else if ((results = /^width=(\\d{1,2}|100)%$/.exec(word))) {\n    region.width = Number(results[1]);\n  } else if ((results = /^lines=(\\d+)$/.exec(word))) {\n    region.height = Number(results[1]);\n    region.heightUnits = shaka.text.CueRegion.units.LINES;\n  } else if ((results = /^regionanchor=(\\d{1,2}|100)%,(\\d{1,2}|100)%$/\n            .exec(word))) {\n    region.regionAnchorX = Number(results[1]);\n    region.regionAnchorY = Number(results[2]);\n  } else if ((results = /^viewportanchor=(\\d{1,2}|100)%,(\\d{1,2}|100)%$/\n            .exec(word))) {\n    region.viewportAnchorX = Number(results[1]);\n    region.viewportAnchorY = Number(results[2]);\n  } else if ((results = /^scroll=up$/.exec(word))) {\n    region.scroll = shaka.text.CueRegion.scrollMode.UP;\n  } else {\n    return false;\n  }\n\n  return true;\n};\n\n\n/**\n * @param {!shaka.text.Cue} cue\n * @param {string} align\n * @private\n */\nshaka.text.VttTextParser.setTextAlign_ = function(cue, align) {\n  const Cue = shaka.text.Cue;\n  if (align == 'middle') {\n    cue.textAlign = Cue.textAlign.CENTER;\n  } else {\n    goog.asserts.assert(align.toUpperCase() in Cue.textAlign,\n                        align.toUpperCase() +\n                        ' Should be in Cue.textAlign values!');\n\n    cue.textAlign = Cue.textAlign[align.toUpperCase()];\n  }\n};\n\n\n/**\n * @param {!shaka.text.Cue} cue\n * @param {string} align\n * @private\n */\nshaka.text.VttTextParser.setPositionAlign_ = function(cue, align) {\n  const Cue = shaka.text.Cue;\n  if (align == 'line-left' || align == 'start') {\n    cue.positionAlign = Cue.positionAlign.LEFT;\n  } else if (align == 'line-right' || align == 'end') {\n    cue.positionAlign = Cue.positionAlign.RIGHT;\n  } else {\n    cue.positionAlign = Cue.positionAlign.CENTER;\n  }\n};\n\n\n/**\n * @param {!shaka.text.Cue} cue\n * @param {string} value\n * @private\n */\nshaka.text.VttTextParser.setVerticalWritingDirection_ = function(cue, value) {\n  const Cue = shaka.text.Cue;\n  if (value == 'lr') {\n    cue.writingDirection = Cue.writingDirection.VERTICAL_LEFT_TO_RIGHT;\n  } else {\n    cue.writingDirection = Cue.writingDirection.VERTICAL_RIGHT_TO_LEFT;\n  }\n};\n\n\n/**\n * @param {!shaka.text.Cue} cue\n * @param {string} word\n * @return {boolean}\n * @private\n */\nshaka.text.VttTextParser.parsedLineValueAndInterpretation_ =\n    function(cue, word) {\n  const Cue = shaka.text.Cue;\n  let results = null;\n  if ((results = /^line:([\\d.]+)%(?:,(start|end|center))?$/.exec(word))) {\n    cue.lineInterpretation = Cue.lineInterpretation.PERCENTAGE;\n    cue.line = Number(results[1]);\n    if (results[2]) {\n      goog.asserts.assert(results[2].toUpperCase() in Cue.lineAlign,\n                          results[2].toUpperCase() +\n                          ' Should be in Cue.lineAlign values!');\n      cue.lineAlign = Cue.lineAlign[results[2].toUpperCase()];\n    }\n  } else if ((results = /^line:(-?\\d+)(?:,(start|end|center))?$/.exec(word))) {\n    cue.lineInterpretation = Cue.lineInterpretation.LINE_NUMBER;\n    cue.line = Number(results[1]);\n    if (results[2]) {\n      goog.asserts.assert(results[2].toUpperCase() in Cue.lineAlign,\n                          results[2].toUpperCase() +\n                          ' Should be in Cue.lineAlign values!');\n      cue.lineAlign = Cue.lineAlign[results[2].toUpperCase()];\n    }\n  } else {\n    return false;\n  }\n\n  return true;\n};\n\n\n/**\n * Parses a WebVTT time from the given parser.\n *\n * @param {!shaka.util.TextParser} parser\n * @return {?number}\n * @private\n */\nshaka.text.VttTextParser.parseTime_ = function(parser) {\n  // 00:00.000 or 00:00:00.000 or 0:00:00.000\n  let results = parser.readRegex(/(?:(\\d{1,}):)?(\\d{2}):(\\d{2})\\.(\\d{3})/g);\n  if (results == null) {\n    return null;\n  }\n  // This capture is optional, but will still be in the array as undefined,\n  // in which case it is 0.\n  let hours = Number(results[1]) || 0;\n  let minutes = Number(results[2]);\n  let seconds = Number(results[3]);\n  let miliseconds = Number(results[4]);\n  if (minutes > 59 || seconds > 59) {\n    return null;\n  }\n\n  return (miliseconds / 1000) + seconds + (minutes * 60) + (hours * 3600);\n};\n\n\n/**\n * @const {number}\n * @private\n */\nshaka.text.VttTextParser.MPEG_TIMESCALE_ = 90000;\n\nshaka.text.TextEngine.registerParser(\n    'text/vtt',\n    shaka.text.VttTextParser);\n\nshaka.text.TextEngine.registerParser(\n    'text/vtt; codecs=\"vtt\"',\n    shaka.text.VttTextParser);\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ngoog.provide('shaka.text.Mp4VttParser');\n\ngoog.require('goog.asserts');\ngoog.require('shaka.log');\ngoog.require('shaka.text.Cue');\ngoog.require('shaka.text.TextEngine');\ngoog.require('shaka.text.VttTextParser');\ngoog.require('shaka.util.DataViewReader');\ngoog.require('shaka.util.Error');\ngoog.require('shaka.util.Functional');\ngoog.require('shaka.util.Mp4Parser');\ngoog.require('shaka.util.StringUtils');\ngoog.require('shaka.util.TextParser');\n\n\n/**\n * @struct\n * @constructor\n * @implements {shaka.extern.TextParser}\n */\nshaka.text.Mp4VttParser = function() {\n  /**\n   * The current time scale used by the VTT parser.\n   *\n   * @type {?number}\n   * @private\n   */\n  this.timescale_ = null;\n};\n\n\n/** @override */\nshaka.text.Mp4VttParser.prototype.parseInit = function(data) {\n  const Mp4Parser = shaka.util.Mp4Parser;\n\n  let sawWVTT = false;\n\n  new Mp4Parser()\n      .box('moov', Mp4Parser.children)\n      .box('trak', Mp4Parser.children)\n      .box('mdia', Mp4Parser.children)\n      .fullBox('mdhd', function(box) {\n        goog.asserts.assert(\n            box.version == 0 || box.version == 1,\n            'MDHD version can only be 0 or 1');\n        if (box.version == 0) {\n          box.reader.skip(4); // Skip \"creation_time\".\n          box.reader.skip(4); // Skip \"modification_time\".\n          this.timescale_ = box.reader.readUint32();\n          box.reader.skip(4); // Skip \"duration\".\n        } else {\n          box.reader.skip(8); // Skip \"creation_time\".\n          box.reader.skip(8); // Skip \"modification_time\".\n          this.timescale_ = box.reader.readUint32();\n          box.reader.skip(8); // Skip \"duration\".\n        }\n        box.reader.skip(4); // Skip \"pad\", \"language\", and \"pre-defined\".\n      }.bind(this))\n      .box('minf', Mp4Parser.children)\n      .box('stbl', Mp4Parser.children)\n      .fullBox('stsd', Mp4Parser.sampleDescription)\n      .box('wvtt', function(box) {\n        // A valid vtt init segment, though we have no actual subtitles yet.\n        sawWVTT = true;\n      }).parse(data);\n\n  if (!this.timescale_) {\n    // Missing timescale for VTT content. It should be located in the MDHD.\n    throw new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.TEXT,\n        shaka.util.Error.Code.INVALID_MP4_VTT);\n  }\n\n  if (!sawWVTT) {\n    // A WVTT box should have been seen (a valid vtt init segment with no\n    // actual subtitles).\n    throw new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.TEXT,\n        shaka.util.Error.Code.INVALID_MP4_VTT);\n  }\n};\n\n\n/** @override */\nshaka.text.Mp4VttParser.prototype.parseMedia = function(data, time) {\n  if (!this.timescale_) {\n    // Missing timescale for VTT content. We should have seen the init segment.\n    shaka.log.error('No init segment for MP4+VTT!');\n    throw new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.TEXT,\n        shaka.util.Error.Code.INVALID_MP4_VTT);\n  }\n\n  const Mp4VttParser = shaka.text.Mp4VttParser;\n  const Mp4Parser = shaka.util.Mp4Parser;\n\n  let baseTime = 0;\n  /** @type {!Array.<shaka.text.Mp4VttParser.TimeSegment>} */\n  let presentations = [];\n  /** @type {Uint8Array} */\n  let rawPayload;\n  /** @type {!Array.<shaka.text.Cue>} */\n  let cues = [];\n\n  let sawTFDT = false;\n  let sawTRUN = false;\n  let sawMDAT = false;\n  let defaultDuration = null;\n\n  new Mp4Parser()\n      .box('moof', Mp4Parser.children)\n      .box('traf', Mp4Parser.children)\n      .fullBox('tfdt', function(box) {\n        sawTFDT = true;\n        goog.asserts.assert(\n            box.version == 0 || box.version == 1,\n            'TFDT version can only be 0 or 1');\n        baseTime = (box.version == 0) ?\n            box.reader.readUint32() :\n            box.reader.readUint64();\n      })\n      .fullBox('tfhd', function(box) {\n        goog.asserts.assert(\n            box.flags != null,\n            'A TFHD box should have a valid flags value');\n        defaultDuration = Mp4VttParser.parseTFHD_(\n            box.flags, box.reader);\n      })\n      .fullBox('trun', function(box) {\n        sawTRUN = true;\n        goog.asserts.assert(\n            box.version != null,\n            'A TRUN box should have a valid version value');\n        goog.asserts.assert(\n            box.flags != null,\n            'A TRUN box should have a valid flags value');\n        presentations = Mp4VttParser.parseTRUN_(\n            box.version, box.flags, box.reader);\n      })\n      .box('mdat', Mp4Parser.allData(function(data) {\n        goog.asserts.assert(!sawMDAT,\n            'VTT cues in mp4 with multiple MDAT are not currently supported!');\n        sawMDAT = true;\n        rawPayload = data;\n      })).parse(data);\n\n  if (!sawMDAT && !sawTFDT && !sawTRUN) {\n    // A required box is missing.\n    throw new shaka.util.Error(\n        shaka.util.Error.Severity.CRITICAL,\n        shaka.util.Error.Category.TEXT,\n        shaka.util.Error.Code.INVALID_MP4_VTT);\n  }\n\n  let currentTime = baseTime;\n\n  let dataView = new DataView(\n      rawPayload.buffer, rawPayload.byteOffset, rawPayload.byteLength);\n  /** @type {!shaka.util.DataViewReader} */\n  let reader = new shaka.util.DataViewReader(\n      dataView, shaka.util.DataViewReader.Endianness.BIG_ENDIAN);\n\n  presentations.forEach((presentation) => {\n    // If one presentation corresponds to multiple payloads, it is assumed\n    // that all of those payloads have the same start time and duration.\n    let duration = presentation.duration || defaultDuration;\n    let startTime = presentation.timeOffset ?\n                    baseTime + presentation.timeOffset :\n                    currentTime;\n    currentTime = startTime + (duration || 0);\n\n    // Read samples until it adds up to the given size.\n    let totalSize = 0;\n    do {\n      // Read the payload size.\n      let payloadSize = reader.readUint32();\n      totalSize += payloadSize;\n\n      // Skip the type.\n      let payloadType = reader.readUint32();\n      let payloadName = shaka.util.Mp4Parser.typeToString(payloadType);\n\n      // Read the data payload.\n      /** @type {Uint8Array} */\n      let payload = null;\n      if (payloadName == 'vttc') {\n        if (payloadSize > 8) {\n          payload = reader.readBytes(payloadSize - 8);\n        }\n      } else if (payloadName == 'vtte') {\n        // It's a vtte, which is a vtt cue that is empty. Ignore any data that\n        // does exist.\n        reader.skip(payloadSize - 8);\n      } else {\n        shaka.log.error('Unknown box ' + payloadName + '! Skipping!');\n        reader.skip(payloadSize - 8);\n      }\n\n      if (duration) {\n        if (payload) {\n          cues.push(shaka.text.Mp4VttParser.parseVTTC_(\n              payload,\n              time.periodStart + startTime / this.timescale_,\n              time.periodStart + currentTime / this.timescale_));\n        }\n      } else {\n        shaka.log.error('WVTT sample duration unknown, and no default found!');\n      }\n\n      goog.asserts.assert(\n          !presentation.sampleSize || totalSize <= presentation.sampleSize,\n          'The samples do not fit evenly into the sample sizes given in the ' +\n          'TRUN box!');\n\n      // If no sampleSize was specified, it's assumed that this presentation\n      // corresponds to only a single cue.\n    } while (presentation.sampleSize && (totalSize < presentation.sampleSize));\n  });\n\n  goog.asserts.assert(\n      !reader.hasMoreData(),\n      'MDAT which contain VTT cues and non-VTT data are not currently ' +\n      'supported!');\n\n  return /** @type {!Array.<!shaka.extern.Cue>} */ (\n      cues.filter(shaka.util.Functional.isNotNull));\n};\n\n\n/**\n * @typedef {{\n *    duration: ?number,\n *    sampleSize: ?number,\n *    timeOffset: ?number\n *  }}\n *\n * @property {?number} duration\n *    The length of the segment in timescale units.\n * @property {?number} sampleSize\n *    The size of the segment in bytes.\n * @property {?number} timeOffset\n *    The time since the start of the segment in timescale units. Time\n *    offset is based of the start of the segment. If this value is\n *    missing, the accumated durations preceeding this time segment will\n *    be used to create the start time.\n */\nshaka.text.Mp4VttParser.TimeSegment;\n\n\n/**\n * @param {number} flags\n * @param {!shaka.util.DataViewReader} reader\n * @return {?number} The default_sample_duration field, if present.\n * @private\n */\nshaka.text.Mp4VttParser.parseTFHD_ = function(flags, reader) {\n  // Skip \"track_ID\".\n  reader.skip(4);\n\n  // Skip \"base_data_offset\" if present.\n  if (flags & 0x000001) { reader.skip(8); }\n\n  // Skip \"sample_description_index\" if present.\n  if (flags & 0x000002) { reader.skip(4); }\n\n  // Read and return \"default_sample_duration\" if present.\n  if (flags & 0x000008) { return reader.readUint32(); }\n\n  // There is no \"default_sample_duration\".\n  return null;\n};\n\n\n/**\n * @param {number} version\n * @param {number} flags\n * @param {!shaka.util.DataViewReader} reader\n * @return {!Array.<shaka.text.Mp4VttParser.TimeSegment>}\n * @private\n */\nshaka.text.Mp4VttParser.parseTRUN_ = function(version, flags, reader) {\n  let sampleCount = reader.readUint32();\n\n  // Skip \"data_offset\" if present.\n  if (flags & 0x000001) { reader.skip(4); }\n\n  // Skip \"first_sample_flags\" if present.\n  if (flags & 0x000004) { reader.skip(4); }\n\n  let samples = [];\n\n  for (let sampleIndex = 0; sampleIndex < sampleCount; sampleIndex++) {\n    /** @type {shaka.text.Mp4VttParser.TimeSegment} */\n    let sample = {\n      duration: null,\n      sampleSize: null,\n      timeOffset: null,\n    };\n\n    // Read \"sample duration\" if present.\n    if (flags & 0x000100) { sample.duration = reader.readUint32(); }\n\n    // Read \"sample_size\" if present.\n    if (flags & 0x000200) { sample.sampleSize = reader.readUint32(); }\n\n    // Skip \"sample_flags\" if present.\n    if (flags & 0x000400) { reader.skip(4); }\n\n    // Read \"sample_time_offset\" if present.\n    if (flags & 0x000800) {\n      sample.timeOffset = version == 0 ?\n          reader.readUint32() :\n          reader.readInt32();\n    }\n\n    samples.push(sample);\n  }\n\n  return samples;\n};\n\n\n/**\n * Parses a vttc box into a cue.\n *\n * @param {!Uint8Array} data\n * @param {number} startTime\n * @param {number} endTime\n * @return {shaka.text.Cue}\n * @private\n */\nshaka.text.Mp4VttParser.parseVTTC_ = function(data, startTime, endTime) {\n  let payload;\n  let id;\n  let settings;\n\n  new shaka.util.Mp4Parser()\n      .box('payl', shaka.util.Mp4Parser.allData(function(data) {\n        payload = shaka.util.StringUtils.fromUTF8(data);\n      }))\n      .box('iden', shaka.util.Mp4Parser.allData(function(data) {\n        id = shaka.util.StringUtils.fromUTF8(data);\n      }))\n      .box('sttg', shaka.util.Mp4Parser.allData(function(data) {\n        settings = shaka.util.StringUtils.fromUTF8(data);\n      }))\n      .parse(data);\n\n  if (payload) {\n    return shaka.text.Mp4VttParser.assembleCue_(payload,\n                                                id,\n                                                settings,\n                                                startTime,\n                                                endTime);\n  } else {\n    return null;\n  }\n};\n\n\n/**\n * Take the individual components that make a cue and create a vttc cue.\n *\n * @param {string} payload\n * @param {?string} id\n * @param {?string} settings\n * @param {number} startTime\n * @param {number} endTime\n * @return {!shaka.text.Cue}\n * @private\n */\nshaka.text.Mp4VttParser.assembleCue_ = function(payload,\n                                                id,\n                                                settings,\n                                                startTime,\n                                                endTime) {\n  let cue = new shaka.text.Cue(\n      startTime,\n      endTime,\n      payload);\n\n  if (id) {\n    cue.id = id;\n  }\n\n  if (settings) {\n    let parser = new shaka.util.TextParser(settings);\n\n    let word = parser.readWord();\n\n    while (word) {\n      // TODO: Check WebVTTConfigurationBox for region info.\n      if (!shaka.text.VttTextParser.parseCueSetting(cue, word,\n                                                    /* VTTRegions */ [])) {\n        shaka.log.warning('VTT parser encountered an invalid VTT setting: ',\n                          word,\n                          ' The setting will be ignored.');\n      }\n\n      parser.skipWhitespace();\n      word = parser.readWord();\n    }\n  }\n\n  return cue;\n};\n\n\nshaka.text.TextEngine.registerParser(\n    'application/mp4; codecs=\"wvtt\"',\n    shaka.text.Mp4VttParser);\n","/* eslint-disable */\ngoog.provide('lin.VstubParser');\n\ngoog.require('goog.asserts');\ngoog.require('lin.VstubSegmentList');\ngoog.require('shaka.dash.ContentProtection');\ngoog.require('shaka.dash.SegmentBase');\ngoog.require('shaka.dash.SegmentList');\ngoog.require('shaka.dash.SegmentTemplate');\ngoog.require('shaka.log');\ngoog.require('shaka.media.DrmEngine');\ngoog.require('shaka.media.ManifestParser');\ngoog.require('shaka.media.PresentationTimeline');\ngoog.require('shaka.media.SegmentReference');\ngoog.require('shaka.net.NetworkingEngine');\ngoog.require('shaka.util.Error');\ngoog.require('shaka.util.Functional');\ngoog.require('shaka.util.LanguageUtils');\ngoog.require('shaka.util.ManifestParserUtils');\ngoog.require('shaka.util.Uint8ArrayUtils');\ngoog.require('shaka.util.StreamUtils');\ngoog.require('shaka.util.StringUtils');\ngoog.require('shaka.util.XmlUtils');\n\n\nconst Uint8ArrayUtils = shaka.util.Uint8ArrayUtils;\nconst ManifestParserUtils = shaka.util.ManifestParserUtils;\nconst Functional = shaka.util.Functional;\n\nfunction limitCallN(fn, limitCallCount) {\n  let wrapper = function () {\n    if (limitCallCount > 0) {\n      limitCallCount -= 1\n      return fn.apply(this, arguments)\n    }\n  }\n\n  wrapper.unsafe = fn\n\n  return wrapper\n}\n\n/**\n * Creates a new DASH parser.\n *\n * @struct\n * @constructor\n * @implements {shakaExtern.ManifestParser}\n * @export\n */\nlin.VstubParser = function () {\n  /** @private {?shakaExtern.ManifestConfiguration} */\n  this.config_ = null;\n\n  /** @private {?shakaExtern.ManifestParser.PlayerInterface} */\n  this.playerInterface_ = null;\n\n  /** @private {!Array.<string>} */\n  this.manifestUris_ = [];\n\n  /** @private {string}*/\n  this.vstubUrl_ = null;\n\n  /** @private {Object}*/\n  this.playlist_ = null;\n\n  /** @private {?shakaExtern.Manifest} */\n  this.manifest_ = null;\n\n  /** @private {!Array.<string>} */\n  this.periodIds_ = [];\n\n  /** @private {number} */\n  this.globalId_ = 1;\n\n  /**\n   * A map of IDs to SegmentIndex objects.\n   * ID: Period@id,AdaptationSet@id,@Representation@id\n   * e.g.: '1,5,23'\n   * @private {!Object.<string, !shaka.media.SegmentIndex>}\n   */\n  this.segmentIndexMap_ = {};\n\n  /**\n   * The update period in seconds; or 0 for no updates.\n   * @private {number}\n   */\n  this.updatePeriod_ = 0;\n\n  /** @private {?number} */\n  this.updateTimer_ = null;\n};\n\n\n/**\n * Contains the minimum amount of time, in seconds, between manifest update\n * requests.\n *\n * @private\n * @const {number}\n */\nlin.VstubParser.MIN_UPDATE_PERIOD_ = 3;\n\n\nlin.VstubParser.defaultKeySystems_ = {\n  '1077efecc0b24d02ace33c1e52e2fb4b': 'org.w3.clearkey',\n  'edef8ba979d64acea3c827dcd51d21ed': 'com.widevine.alpha',\n  '9a04f07998404286ab92e65be0885f95': 'com.microsoft.playready',\n};\n\n/**\n * The default MPD@suggestedPresentationDelay in seconds.\n *\n * @private\n * @const {number}\n */\nlin.VstubParser.DEFAULT_SUGGESTED_PRESENTATION_DELAY_ = 10;\n\n\n/**\n * @typedef {\n *   !function(!Array.<string>, ?number, ?number):!Promise.<!ArrayBuffer>\n * }\n */\nlin.VstubParser.RequestInitSegmentCallback;\n\n\n/**\n * @typedef {{\n *   segmentBase: Element,\n *   segmentList: Element,\n *   segmentTemplate: Element,\n *   baseUris: !Array.<string>,\n *   width: (number|undefined),\n *   height: (number|undefined),\n *   contentType: string,\n *   mimeType: string,\n *   codecs: string,\n *   frameRate: (number|undefined),\n *   containsEmsgBoxes: boolean,\n *   id: string\n * }}\n *\n * @description\n * A collection of elements and properties which are inherited across levels\n * of a DASH manifest.\n *\n * @property {Element} segmentBase\n *   The XML node for SegmentBase.\n * @property {Element} segmentList\n *   The XML node for SegmentList.\n * @property {Element} segmentTemplate\n *   The XML node for SegmentTemplate.\n * @property {!Array.<string>} baseUris\n *   An array of absolute base URIs for the frame.\n * @property {(number|undefined)} width\n *   The inherited width value.\n * @property {(number|undefined)} height\n *   The inherited height value.\n * @property {string} contentType\n *   The inherited media type.\n * @property {string} mimeType\n *   The inherited MIME type value.\n * @property {string} codecs\n *   The inherited codecs value.\n * @property {(number|undefined)} frameRate\n *   The inherited framerate value.\n * @property {boolean} containsEmsgBoxes\n *   Whether there are 'emsg' boxes.\n * @property {string} id\n *   The ID of the element.\n */\nlin.VstubParser.InheritanceFrame;\n\n\n/**\n * @typedef {{\n *   dynamic: boolean,\n *   presentationTimeline: !shaka.media.PresentationTimeline,\n *   period: ?lin.VstubParser.InheritanceFrame,\n *   periodInfo: ?lin.VstubParser.PeriodInfo,\n *   adaptationSet: ?lin.VstubParser.InheritanceFrame,\n *   representation: ?lin.VstubParser.InheritanceFrame,\n *   bandwidth: (number|undefined),\n *   indexRangeWarningGiven: boolean\n * }}\n *\n * @description\n * Contains context data for the streams.\n *\n * @property {boolean} dynamic\n *   True if the MPD is dynamic (not all segments available at once)\n * @property {!shaka.media.PresentationTimeline} presentationTimeline\n *   The PresentationTimeline.\n * @property {?lin.VstubParser.InheritanceFrame} period\n *   The inheritance from the Period element.\n * @property {?lin.VstubParser.PeriodInfo} periodInfo\n *   The Period info for the current Period.\n * @property {?lin.VstubParser.InheritanceFrame} adaptationSet\n *   The inheritance from the AdaptationSet element.\n * @property {?lin.VstubParser.InheritanceFrame} representation\n *   The inheritance from the Representation element.\n * @property {(number|undefined)} bandwidth\n *   The bandwidth of the Representation.\n * @property {boolean} indexRangeWarningGiven\n *   True if the warning about SegmentURL@indexRange has been printed.\n */\nlin.VstubParser.Context;\n\n\n/**\n * @typedef {{\n *   start: number,\n *   duration: ?number,\n *   node: !Element,\n *   isLastPeriod: boolean\n * }}\n *\n * @description\n * Contains information about a Period element.\n *\n * @property {number} start\n *   The start time of the period.\n * @property {?number} duration\n *   The duration of the period; or null if the duration is not given.  This\n *   will be non-null for all periods except the last.\n * @property {!Element} node\n *   The XML Node for the Period.\n * @property {boolean} isLastPeriod\n *   Whether this Period is the last one in the manifest.\n */\nlin.VstubParser.PeriodInfo;\n\n\n/**\n * @typedef {{\n *   initSegment: Array,\n *   assetUrl: string,\n *   segments: !Array.<lin.VstubParser.VstubSegment>\n * }}\n */\nlin.VstubParser.Vstub;\n\n/**\n * @typedef {{\n *   sixdmoof: ArrayBuffer,\n *   mdatSize: number,\n *   startTime: number,\n *   endTime: number,\n *   mdatRanges: !Array.<lin.VstubSegmentList.Range>\n * }}\n */\nlin.VstubParser.VstubSegment;\n\n\n/**\n * @typedef {{\n *   id: string,\n *   contentType: ?string,\n *   language: string,\n *   main: boolean,\n *   streams: !Array.<shakaExtern.Stream>,\n *   drmInfos: !Array.<shakaExtern.DrmInfo>,\n *   trickModeFor: ?string,\n *   representationIds: !Array.<string>\n * }}\n *\n * @description\n * Contains information about an AdaptationSet element.\n *\n * @property {string} id\n *   The unique ID of the adaptation set.\n * @property {?string} contentType\n *   The content type of the AdaptationSet.\n * @property {string} language\n *   The language of the AdaptationSet.\n * @property {boolean} main\n *   Whether the AdaptationSet has the 'main' type.\n * @property {!Array.<shakaExtern.Stream>} streams\n *   The streams this AdaptationSet contains.\n * @property {!Array.<shakaExtern.DrmInfo>} drmInfos\n *   The DRM info for the AdaptationSet.\n * @property {?string} trickModeFor\n *   If non-null, this AdaptationInfo represents trick mode tracks.  This\n *   property is the ID of the normal AdaptationSet these tracks should be\n *   associated with.\n * @property {!Array.<string>} representationIds\n *   An array of the IDs of the Representations this AdaptationSet contains.\n */\nlin.VstubParser.AdaptationInfo;\n\n\n/**\n * @typedef {{\n *   createSegmentIndex: shakaExtern.CreateSegmentIndexFunction,\n *   findSegmentPosition: shakaExtern.FindSegmentPositionFunction,\n *   getSegmentReference: shakaExtern.GetSegmentReferenceFunction\n * }}\n *\n * @description\n * Contains functions used to create and find segment references.\n *\n * @property {shakaExtern.CreateSegmentIndexFunction} createSegmentIndex\n *   The createSegmentIndex function.\n * @property {shakaExtern.FindSegmentPositionFunction} findSegmentPosition\n *   The findSegmentPosition function.\n * @property {shakaExtern.GetSegmentReferenceFunction} getSegmentReference\n *   The getSegmentReference function.\n */\nlin.VstubParser.SegmentIndexFunctions;\n\n\n/**\n * @typedef {{\n *   createSegmentIndex: shakaExtern.CreateSegmentIndexFunction,\n *   findSegmentPosition: shakaExtern.FindSegmentPositionFunction,\n *   getSegmentReference: shakaExtern.GetSegmentReferenceFunction,\n *   initSegmentReference: shaka.media.InitSegmentReference,\n *   presentationTimeOffset: (number|undefined)\n * }}\n *\n * @description\n * Contains information about a Stream.  This is passed from the createStream\n * methods.\n *\n * @property {shakaExtern.CreateSegmentIndexFunction} createSegmentIndex\n *   The createSegmentIndex function for the stream.\n * @property {shakaExtern.FindSegmentPositionFunction} findSegmentPosition\n *   The findSegmentPosition function for the stream.\n * @property {shakaExtern.GetSegmentReferenceFunction} getSegmentReference\n *   The getSegmentReference function for the stream.\n * @property {shaka.media.InitSegmentReference} initSegmentReference\n *   The init segment for the stream.\n * @property {(number|undefined)} presentationTimeOffset\n *   The presentationTimeOffset for the stream.\n */\nlin.VstubParser.StreamInfo;\n\n\n/**\n * @override\n * @exportInterface\n */\nlin.VstubParser.prototype.configure = function (config) {\n  this.config_ = config;\n};\n\n\n/**\n * @override\n * @exportInterface\n */\nlin.VstubParser.prototype.start = function (uri, playerInterface) {\n  goog.asserts.assert(this.config_, 'Must call configure() before start()!');\n  this.vstubUrl_ = uri;\n  this.playerInterface_ = playerInterface;\n\n  return this.requestVstubManifest_().then(function () {\n    var assetUrls = this.playlist_.periods.map(function (period) {\n      return period.assetUrl;\n    });\n    return this.warmUpUrls(assetUrls);\n  }.bind(this))\n    .then(function () {\n      if (this.playerInterface_.networkingEngine)\n        this.setUpdateTimer_(0);\n      return this.manifest_;\n    }.bind(this));\n};\n\n\n/**\n * @override\n * @exportInterface\n */\nlin.VstubParser.prototype.stop = function () {\n  this.playerInterface_ = null;\n  this.config_ = null;\n\n  this.manifestUris_ = [];\n  this.manifest_ = null;\n  this.periodIds_ = [];\n  this.segmentIndexMap_ = {};\n  if (this.updateTimer_ != null) {\n    window.clearTimeout(this.updateTimer_);\n    this.updateTimer_ = null;\n  }\n\n  return Promise.resolve();\n};\n\n\n/**\n * @override\n * @exportInterface\n */\nlin.VstubParser.prototype.update = function () {\n  this.requestVstubManifest_().catch(function (error) {\n    if (!this.playerInterface_) return;\n    this.playerInterface_.onError(error);\n  }.bind(this));\n};\n\n\n/**\n * @override\n * @exportInterface\n */\nlin.VstubParser.prototype.onExpirationUpdated = function (sessionId, expiration) {\n  // No-op\n};\n\n\n/**\n * Makes a network request for the manifest and parses the resulting data.\n *\n * @return {!Promise}\n * @private\n */\nlin.VstubParser.prototype.requestVstubManifest_ = function () {\n  var requestType = shaka.net.NetworkingEngine.RequestType.PVSTUB;\n  var request = shaka.net.NetworkingEngine.makeRequest([this.vstubUrl_], this.config_.retryParameters);\n  return this.playerInterface_.networkingEngine.request(requestType, request)\n    .promise\n    .then(function (response) {\n      // Detect calls to stop().\n      if (!this.playerInterface_.networkingEngine)\n        return;\n      // This may throw; but it will result in a failed promise.\n      return this.parsePlaylist_(response.data);\n    }.bind(this));\n};\n\nlin.VstubParser.prototype.getPssh_ = function (initSegment) {\n  let pssh = {\n    systemIds: [],\n    cencKeyIds: [],\n    dataBoundaries: [],\n  }\n\n  let Pssh = shaka.util.Pssh;\n  let Mp4Parser = shaka.util.Mp4Parser;\n\n  new Mp4Parser()\n    .box('moov', Mp4Parser.children)\n    .fullBox('pssh', Pssh.prototype.parseBox_.bind(pssh))\n    .parse(initSegment);\n\n  let defaultSystemId = pssh.systemIds[0];\n  let defSystemName = lin.VstubParser.defaultKeySystems_[defaultSystemId];\n\n  if (!defSystemName) {\n    throw new Error('VstubParser key system is not supported');\n  }\n\n  let defBoundaries = pssh.dataBoundaries[0];\n  let offset = 8\n\n  return {\n    originalPssh: pssh,\n    psshData: initSegment.slice(defBoundaries.start + offset, defBoundaries.end + offset + 1),\n    keySystem: defSystemName\n  };\n}\n\n/**\n * Parses proto message to the shaka model\n *\n * @param {!ArrayBuffer} data\n *\n * @return {!Promise}\n *\n * @private\n */\nlin.VstubParser.prototype.parsePlaylist_ = function (data) {\n  var array = new Uint8Array(data);\n  var DASHPlayerMsg = window.VstubSchema.lookup(\"dash.DASHPlaylist\");\n  var dashPlaylist = DASHPlayerMsg.decode(array);\n  this.playlist_ = dashPlaylist;\n\n  var XmlUtils = shaka.util.XmlUtils;\n  var minBufferTime = XmlUtils.parseDuration(\"PT1.500S\");\n  this.updatePeriod_ = -1;//'minimumUpdatePeriod'\n\n  var presentationStartTime = 0;//'availabilityStartTime'\n  var segmentAvailabilityDuration = null;//'timeShiftBufferDepth'\n  var suggestedPresentationDelay = null;//suggestedPresentationDelay\n  var DASHABRVstubMsg = window.VstubSchema.lookup(\"dash.DASHABRVstub\");\n\n  //TODO: clean up\n\n  if (this.playlist_.abrPeriods && this.playlist_.abrPeriods.length > 0) {\n    this.playlist_.periods = [this.playlist_.abrPeriods[0].representation[0]];\n  } else if (this.playlist_.avPeriods && this.playlist_.avPeriods.length > 0) {\n    this.playlist_.periods = this.playlist_.avPeriods.map(av => av.video)\n\n    this.playlist_.abrPeriods = this.playlist_.avPeriods.map(function (av) {\n      var abrPeriodStub = DASHABRVstubMsg.create();\n      abrPeriodStub.representation = [av.video, av.audio];\n      return abrPeriodStub;\n    });\n  } else {\n    this.playlist_.abrPeriods = this.playlist_.periods.map(function (period) {\n      var abrPeriodStub = DASHABRVstubMsg.create();\n      abrPeriodStub.representation = [period];\n      return abrPeriodStub;\n    });\n    /*var abrPeriodStub = DASHABRVstubMsg.create();\n    abrPeriodStub.representation = [];\n    abrPeriodStub.representation.push(this.playlist_.periods[0]);\n    this.playlist_.abrPeriods=[];\n    this.playlist_.abrPeriods.push(abrPeriodStub);*/\n  }\n\n  var maxSegmentDuration = Math.max.apply(null, this.playlist_.periods.map(function (vstub) {\n    return vstub.info.maxSegmentDuration;\n  }));\n\n  var presentationTimeline;\n  if (this.manifest_) {\n    presentationTimeline = this.manifest_.presentationTimeline;\n  } else {\n    // DASH IOP v3.0 suggests using a default delay between minBufferTime and\n    // timeShiftBufferDepth.  This is literally the range of all feasible\n    // choices for the value.  Nothing older than timeShiftBufferDepth is still\n    // available, and anything less than minBufferTime will cause buffering\n    // issues.\n    //\n    // We have decided that our default will be 1.5 * minBufferTime, or 10s,\n    // whichever is larger.  This is fairly conservative.  Content providers\n    // should provide a suggestedPresentationDelay whenever possible to optimize\n    // the live streaming experience.\n    var defaultPresentationDelay = Math.max(lin.VstubParser.DEFAULT_SUGGESTED_PRESENTATION_DELAY_, minBufferTime * 1.5);\n    var presentationDelay = suggestedPresentationDelay != null ? suggestedPresentationDelay : defaultPresentationDelay;\n    presentationTimeline = new shaka.media.PresentationTimeline(presentationStartTime, presentationDelay);\n  }\n\n  /** @type {lin.VstubParser.Context} */\n  var context = {\n    dynamic: false,//mpdType != 'static'\n    presentationTimeline: presentationTimeline,\n    period: null,\n    periodInfo: null,\n    adaptationSet: null,\n    representation: null,\n    bandwidth: undefined\n  };\n\n  var periodsAndDuration = this.parseVstubPeriods_(context);\n  var duration = periodsAndDuration.duration;\n  var periods = periodsAndDuration.periods;\n\n  presentationTimeline.setStatic(true);\n  presentationTimeline.setDuration(duration || Infinity);\n  presentationTimeline.setSegmentAvailabilityDuration(\n    segmentAvailabilityDuration != null ?\n      segmentAvailabilityDuration :\n      Infinity);\n  // Use @maxSegmentDuration to override smaller, derived values.\n  presentationTimeline.notifyMaxSegmentDuration(maxSegmentDuration || 1);\n  if (!COMPILED) presentationTimeline.assertIsValid();\n\n  if (this.manifest_) {\n    // This is a manifest update, so we're done.\n    return Promise.resolve();\n  }\n\n  this.manifest_ = {\n    presentationTimeline: presentationTimeline,\n    periods: periods,\n    offlineSessionIds: [],\n    minBufferTime: minBufferTime || 0\n  };\n};\n\n\n/**\n * Reads and parses the periods from the PVSTUB.\n *\n * @param {lin.VstubParser.Context} context\n *\n * @return {{periods: !Array.<shakaExtern.Period>,\n *          duration: ?number, containsInband: boolean}}\n * @private\n */\nlin.VstubParser.prototype.parseVstubPeriods_ = function () {\n  var periods = [];\n  var presentationDuration = 0;\n\n  for (var periodIndex = 0; periodIndex < this.playlist_.abrPeriods.length; periodIndex++) {\n    var abrPeriod = this.playlist_.abrPeriods[periodIndex];\n\n    var periodDuration = abrPeriod.representation[0].duration;\n    var periodInfo = { start: presentationDuration, duration: periodDuration, containsInband: false };\n    presentationDuration = presentationDuration + periodDuration;\n\n    var period = {\n      id: '__shaka_period_' + periodIndex,\n      startTime: periodInfo.start,\n      variants: [],\n      textStreams: []\n    };\n\n    this.parseVstubAbrPeriod_(period, abrPeriod);\n    //var period = this.parseVstubPeriod_(context, periodInfo, vstubPeriod, periodIndex);\n    periods.push(period);\n  }\n\n  var retValue = {\n    periods: periods,\n    duration: presentationDuration,\n    containsInband: false\n  };\n\n  return retValue;\n};\n\n// move it to head\nlin.VstubParser.prototype.getCombinedDrmInfos = function (abrPeriod, vdStubs, audStubs) {\n  let keyIds = vdStubs.concat(audStubs).map(function (s) {\n    return s.keyId;\n  }).filter(Functional.isNotDuplicate);\n\n  return abrPeriod.representation.map((period) => {\n    let parsedPssh = this.getPssh_(period.initSegment);\n    let drmInfo = ManifestParserUtils.createDrmInfo(parsedPssh.keySystem,\n      [\n        { initDataType: 'cenc', initData: parsedPssh.psshData },\n      ])\n\n    drmInfo.keyIds.push(...keyIds);\n\n    return drmInfo;\n  });\n}\n\nlin.VstubParser.prototype.parseVstubAbrPeriod_ = function (period, abrPeriod) {\n  var ContentType = shaka.util.ManifestParserUtils.ContentType;\n  var vdStubs = [];\n  var audStubs = [];\n\n  for (var index = 0; index < abrPeriod.representation.length; index++) {\n    var repr = abrPeriod.representation[index];\n    var assetInfo = repr.info;\n    var streamInfo = lin.VstubSegmentList.createStream(period, repr);\n\n    var isVideo = (assetInfo.width != null && assetInfo.width > 0 && assetInfo.height > 0);\n    var streamType = ContentType.VIDEO;\n\n    if (!isVideo) {\n      streamType = ContentType.AUDIO;\n    }\n\n    var streamStub = {\n      //presentationTimeOffset: 0,\n      channelsCount: null,\n      bandwidth: assetInfo.bandwidth,\n      codecs: assetInfo.codecs,\n      createSegmentIndex: streamInfo.createSegmentIndex,\n      encrypted: Boolean(repr.encryptionKeyId),\n      findSegmentPosition: streamInfo.findSegmentPosition,\n      frameRate: assetInfo.frameRate,\n      getSegmentReference: streamInfo.getSegmentReference,\n      width: assetInfo.width,\n      height: assetInfo.height,\n      kind: null,\n      mimeType: streamType + \"/mp4\",\n      keyId: repr.encryptionKeyId || null,\n      language: \"en\",\n      allowedByApplication: true,\n      allowedByKeySystem: true,\n      roles: [],\n      type: streamType,\n      id: this.globalId_++,\n      initSegmentReference: streamInfo.initSegmentReference,\n      presentationTimeOffset: streamInfo.presentationTimeOffset,\n      containsEmsgBoxes: false,\n      trickModeVideo: null\n    };\n\n    if (isVideo) {\n      vdStubs.push(streamStub);\n    }\n    else {\n      audStubs.push(streamStub);\n    }\n  }\n\n  if (audStubs.length == 0) {\n    let drmInfos = this.getCombinedDrmInfos(abrPeriod, vdStubs, audStubs);\n\n    for (var i = 0; i < vdStubs.length; i++) {\n      var stub = vdStubs[i];\n      var variant = {\n        allowedByApplication: true,\n        allowedByKeySystem: true,\n        audio: null,\n        bandwidth: stub.bandwidth,\n        drmInfos: drmInfos,\n        id: this.globalId_++,\n        language: stub.language,\n        type: stub.type,\n        primary: false,\n        video: stub\n      };\n      period.variants.push(variant);\n    }\n  }\n  else if (vdStubs.length == 0) {\n    for (var i = 0; i < audStubs.length; i++) {\n      var stub = audStubs[i];\n      var variant = {\n        allowedByApplication: true,\n        allowedByKeySystem: true,\n        audio: stub,\n        bandwidth: stub.bandwidth,\n        drmInfos: [],\n        id: this.globalId_++,\n        language: stub.language,\n        type: stub.type,\n        primary: false,\n        video: null\n      };\n      period.variants.push(variant);\n    }\n  }\n  else {\n    let drmInfos = this.getCombinedDrmInfos(abrPeriod, vdStubs, audStubs);\n\n    for (var i = 0; i < audStubs.length; i++) {\n      for (var j = 0; j < vdStubs.length; j++) {\n        var auStub = audStubs[i];\n        var vdStub = vdStubs[j];\n        var variant = {\n          id: this.globalId_++,\n          allowedByApplication: true,\n          allowedByKeySystem: true,\n          video: vdStub,\n          audio: auStub,\n          bandwidth: vdStub.bandwidth + auStub.bandwidth,\n          drmInfos: drmInfos,\n          language: vdStub.language || auStub.language,\n          type: vdStub.type || auStub.type,\n          primary: false\n          //,text: null\n        };\n        period.variants.push(variant);\n      }\n    }\n  }\n};\n\n\n/**\n * Parses a Period XML element.  Unlike the other parse methods, this is not\n * given the Node; it is given a PeriodInfo structure.  Also, partial parsing\n * was done before this was called so start and duration are valid.\n *\n * @param {lin.VstubParser.Context} context\n * @param {lin.VstubParser.PeriodInfo} periodInfo\n * @return {shakaExtern.Period}\n * @param {!Object} prdVstub\n * @throws shaka.util.Error When there is a parsing error.\n * @private\n */\nlin.VstubParser.prototype.parseVstubPeriod_ = function (context, periodInfo, prdVstub, periodIndex) {\n\n  //periodInfo.node is children of the <Period>\n\n  var assetInfo = prdVstub.info;\n\n  var period = {\n    startTime: periodInfo.start,\n    id: '__shaka_period_' + periodIndex,\n    variants: [{\n      id: this.globalId_++,\n      language: \"en\",\n      type: \"video\",\n      primary: true,\n      drmInfos: [],\n      \"bandwidth\": assetInfo.bandwidth,\n      video: {\n        \"presentationTimeOffset\": 0,\n        \"mimeType\": \"video/mp4\",\n        \"codecs\": assetInfo.codecs,\n        \"frameRate\": assetInfo.frameRate,\n        \"bandwidth\": assetInfo.bandwidth,\n        \"width\": assetInfo.width,\n        \"height\": assetInfo.height,\n        \"encrypted\": false,\n        \"keyId\": null,\n        \"language\": \"en\",\n        \"allowedByApplication\": true,\n        \"allowedByKeySystem\": true\n      },\n      audio: null,\n      allowedByApplication: true,\n      allowedByKeySystem: true\n    }],\n    textStreams: []\n  };\n\n  var stream = period.variants[0].video;\n  var streamInfo = lin.VstubSegmentList.createStream(period, prdVstub);\n\n  stream.id = this.globalId_++;\n  stream.createSegmentIndex = streamInfo.createSegmentIndex;\n  stream.findSegmentPosition = streamInfo.findSegmentPosition;\n  stream.getSegmentReference = streamInfo.getSegmentReference;\n  stream.initSegmentReference = streamInfo.initSegmentReference;\n  stream.presentationTimeOffset = streamInfo.presentationTimeOffset;\n\n  return period;\n};\n\n/**\n * Called when the update timer ticks.\n *\n * @private\n */\nlin.VstubParser.prototype.onUpdate_ = function () {\n  goog.asserts.assert(this.updateTimer_, 'Should only be called by timer');\n  goog.asserts.assert(this.updatePeriod_ >= 0,\n    'There should be an update period');\n\n  shaka.log.info('Updating manifest...');\n\n  this.updateTimer_ = null;\n  var startTime = Date.now();\n\n  this.requestVstubManifest_().then(function () {\n    // Detect a call to stop()\n    if (!this.playerInterface_)\n      return;\n\n    // Ensure the next update occurs within |updatePeriod_| seconds by taking\n    // into account the time it took to update the manifest.\n    var endTime = Date.now();\n    this.setUpdateTimer_((endTime - startTime) / 1000.0);\n  }.bind(this)).catch(function (error) {\n    goog.asserts.assert(error instanceof shaka.util.Error,\n      'Should only receive a Shaka error');\n\n    // Try updating again, but ensure we haven't been destroyed.\n    if (this.playerInterface_) {\n      // We will retry updating, so override the severity of the error.\n      error.severity = shaka.util.Error.Severity.RECOVERABLE;\n      this.playerInterface_.onError(error);\n\n      this.setUpdateTimer_(0);\n    }\n  }.bind(this));\n};\n\n\n/**\n * Sets the update timer.  Does nothing if the manifest does not specify an\n * update period.\n *\n * @param {number} offset An offset, in seconds, to apply to the manifest's\n *   update period.\n * @private\n */\nlin.VstubParser.prototype.setUpdateTimer_ = function (offset) {\n  // NOTE: An updatePeriod_ of -1 means the attribute was missing.\n  // An attribute which is present and set to 0 should still result in periodic\n  // updates. For more, see: https://github.com/google/shaka-player/issues/331\n  if (this.updatePeriod_ < 0)\n    return;\n  goog.asserts.assert(this.updateTimer_ == null,\n    'Timer should not be already set');\n\n  var period =\n    Math.max(lin.VstubParser.MIN_UPDATE_PERIOD_, this.updatePeriod_);\n  var interval = Math.max(period - offset, 0);\n  shaka.log.debug('updateInterval', interval);\n\n  var callback = this.onUpdate_.bind(this);\n  this.updateTimer_ = window.setTimeout(callback, 1000 * interval);\n};\n\n/**\n * Makes a network request on behalf of SegmentBase.createStream.\n *\n * @param {!Array.<string>} uris\n * @param {?number} startByte\n * @param {?number} endByte\n * @return {!Promise.<!ArrayBuffer>}\n * @private\n */\nlin.VstubParser.prototype.requestInitSegment_ = function (uris, startByte, endByte) {\n  var requestType = shaka.net.NetworkingEngine.RequestType.SEGMENT;\n  var request = shaka.net.NetworkingEngine.makeRequest(\n    uris, this.config_.retryParameters);\n  if (startByte != null) {\n    var end = (endByte != null ? endByte : '');\n    request.headers['Range'] = 'bytes=' + startByte + '-' + end;\n  }\n\n  return this.playerInterface_.networkingEngine.request(requestType, request)\n    .promise\n    .then(function (response) {\n      return response.data;\n    });\n};\n\n/**\n * Warm up URLs by making requests and validating http 206 response,\n *\n *\n * @param {!Array.<string>} assetUrls\n * @return {!Promise}\n * @private\n */\nlin.VstubParser.prototype.warmUpUrls = function (assetUrls) {\n  shaka.log.info('Starting warm up...');\n  var self = this;\n  var firstUrls = assetUrls.filter(function (url, index) {\n    return index < 2;\n  });\n\n  var otherUrls = assetUrls.filter(function (url, index) {\n    return index >= 2;\n  });\n\n  var warmupPromises = [];\n  firstUrls.forEach(function (url) {\n    var urlPromise = this.warmUpUrl(url);\n    warmupPromises.push(urlPromise);\n  }, this);\n\n  var first = Promise.all(warmupPromises);\n\n  Promise.all([first]).then(function () {\n    shaka.log.info('second stage warmup, items: ' + otherUrls.length);\n    otherUrls.forEach(function (link) {\n      self.warmUpUrl(link);\n    });\n  }.bind(this));\n};\n\n/**\n * Warm up URL by making requests and validating http 206 response,\n *\n *\n * @param {!string} url\n * @return {!Promise}\n * @private\n */\nlin.VstubParser.prototype.warmUpUrl = function (url) {\n  shaka.log.info('Warm up: ' + url);\n  if (url.indexOf('instagram') == -1) {\n    shaka.log.info('Skipping warmup for non-instagram assets');\n    return Promise.resolve();\n  }\n\n  var self = this;\n  return new Promise(function (resolve, reject) {\n    var completeWarmup = function (req, donecallback) {\n      var messageOk = 'Correct Response status: ' + req.status;\n      shaka.log.info(messageOk);\n      //console.log(messageOk);\n      //console.log('resolve url: ' + resolve);\n      req.abort();//probably we do not need to abort it\n      donecallback(req.status);\n    };\n\n    var retryWarmup = limitCallN(function (url, donecallback) {\n      var xhr = new XMLHttpRequest();\n      xhr.open('GET', url, true);\n      xhr.setRequestHeader('Range', 'bytes=100-223');\n\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState == 4) {\n          if (xhr.status != 206) {\n            var messageFail = 'aborting request due to incorrect request status: ' + xhr.status;\n            shaka.log.info(messageFail);\n            //console.log(messageFail);\n            xhr.abort();\n            setTimeout(retryWarmup.bind(self, url, resolve), 1500);\n          } else {\n            completeWarmup(xhr, donecallback);\n          }\n        }\n      };\n      xhr.send();\n    }, 5);\n\n    retryWarmup.unsafe(url, resolve);\n  });\n}\n\n\nshaka.media.ManifestParser.registerParserByExtension('pvstub', lin.VstubParser);\nshaka.media.ManifestParser.registerParserByMime('application/octet-stream', lin.VstubParser);\nshaka.media.ManifestParser.registerParserByMime('linius/pvstub', lin.VstubParser);\n\n"],
"names":["COMPILED","goog","global","isDef","goog.isDef","val","exportPath_","goog.exportPath_","name","object","objectToExportTo","parts","split","cur","execScript","part","length","shift","define","goog.define","defaultValue","value","CLOSURE_UNCOMPILED_DEFINES","Object","prototype","hasOwnProperty","call","CLOSURE_DEFINES","DEBUG","provide","goog.provide","isProvided_","Error","implicitNamespaces_","namespace","substring","lastIndexOf","getObjectByName","forwardDeclare","goog.forwardDeclare","goog.isProvided_","isDefAndNotNull","goog.getObjectByName","obj","globalize","goog.globalize","x","addDependency","goog.addDependency","relPath","provides","requires","DEPENDENCIES_ENABLED","path","replace","deps","dependencies_","i","nameToPath","j","require","logToConsole_","goog.logToConsole_","msg","console","goog.require","ENABLE_DEBUG_LOADER","getPathFromDeps_","included_","writeScripts_","errorMessage","basePath","CLOSURE_NO_DEPS","visited","written","inHtmlDocument_","goog.inHtmlDocument_","doc","document","findBasePath_","goog.findBasePath_","CLOSURE_BASE_PATH","scripts","getElementsByTagName","src","qmark","l","substr","importScript_","goog.importScript_","sourceText","CLOSURE_IMPORT_SCRIPT","writeScriptTag_","goog.writeScriptTag_","readyState","test","isDeps","undefined","write","goog.writeScripts_","visitNode","requireName","seenScript","push","goog.getPathFromDeps_","rule","goog.isDefAndNotNull","isString","goog.isString","exportSymbol","goog.exportSymbol","publicPath","exportProperty","goog.exportProperty","publicName","symbol","inherits","goog.inherits","childCtor","parentCtor","tempCtor","superClass_","constructor","base","childCtor.base","me","methodName","var_args","args","Array","slice","arguments","apply","goog.asserts","asserts","assert","goog.asserts.assert","patchAssert_","goog.asserts.patchAssert_","bind","console.assert","ENABLE_ASSERTS","shaka","abr","Ewma","shaka.abr.Ewma","halfLife","alpha_","Math","exp","log","totalWeight_","estimate_","sample","shaka.abr.Ewma.prototype.sample","weight","adjAlpha","pow","newEstimate","isNaN","getEstimate","shaka.abr.Ewma.prototype.getEstimate","EwmaBandwidthEstimator","shaka.abr.EwmaBandwidthEstimator","fast_","slow_","bytesSampled_","minTotalBytes_","minBytes_","shaka.abr.EwmaBandwidthEstimator.prototype.sample","durationMs","numBytes","bandwidth","getBandwidthEstimate","shaka.abr.EwmaBandwidthEstimator.prototype.getBandwidthEstimate","defaultEstimate","min","hasGoodEstimate","shaka.abr.EwmaBandwidthEstimator.prototype.hasGoodEstimate","shaka.log","Level","NONE","ERROR","WARNING","INFO","V1","V2","alwaysWarn","shaka.log.alwaysWarn","error","shaka.log.error","warning","shaka.log.warning","info","shaka.log.info","debug","shaka.log.debug","v1","shaka.log.v1","v2","shaka.log.v2","window","warn","setLevel","shaka.log.setLevel","level","nop","currentLevel","MAX_LOG_LEVEL","goog.uri","goog.uri.utils","uri","utils","splitRe_","ComponentIndex","SCHEME","USER_INFO","DOMAIN","PORT","PATH","QUERY_DATA","FRAGMENT","goog.uri.utils.split","match","Uri","goog.Uri","m","setScheme","getScheme","setUserInfo","getUserInfo","setDomain","getDomain","setPort","getPort","setPath","getPath","setQueryData","getQueryData","clone","setFragment","getFragment","String","queryData_","QueryData","scheme_","userInfo_","domain_","port_","path_","fragment_","toString","goog.Uri.prototype.toString","out","scheme","encodeSpecialChars_","reDisallowedInSchemeOrUserInfo_","domain","userInfo","removeDoubleEncoding_","encodeURIComponent","port","hasDomain","charAt","reDisallowedInAbsolutePath_","reDisallowedInRelativePath_","query","getEncodedQuery","fragment","reDisallowedInFragment_","join","resolve","goog.Uri.prototype.resolve","relativeUri","absoluteUri","overridden","hasScheme","hasUserInfo","hasPort","hasPath","lastSlashIndex","removeDotSegments","hasQuery","hasFragment","goog.Uri.prototype.clone","goog.Uri.prototype.getScheme","goog.Uri.prototype.setScheme","newScheme","decode","decodeOrEmpty_","goog.Uri.prototype.hasScheme","goog.Uri.prototype.getUserInfo","goog.Uri.prototype.setUserInfo","newUserInfo","goog.Uri.prototype.hasUserInfo","goog.Uri.prototype.getDomain","goog.Uri.prototype.setDomain","newDomain","goog.Uri.prototype.hasDomain","goog.Uri.prototype.getPort","goog.Uri.prototype.setPort","newPort","Number","goog.Uri.prototype.hasPort","goog.Uri.prototype.getPath","goog.Uri.prototype.setPath","newPath","goog.Uri.prototype.hasPath","goog.Uri.prototype.hasQuery","goog.Uri.prototype.setQueryData","queryData","reDisallowedInQuery_","goog.Uri.prototype.getEncodedQuery","getDecodedQuery","goog.Uri.prototype.getDecodedQuery","toDecodedString","goog.Uri.prototype.getQueryData","goog.Uri.prototype.getFragment","goog.Uri.prototype.setFragment","newFragment","goog.Uri.prototype.hasFragment","goog.Uri.removeDotSegments","indexOf","leadingSlash","segments","pos","segment","pop","goog.Uri.decodeOrEmpty_","preserveReserved","decodeURI","decodeURIComponent","goog.Uri.encodeSpecialChars_","unescapedPart","extra","removeDoubleEncoding","encoded","encodeURI","encodeChar_","goog.Uri.encodeChar_","ch","n","charCodeAt","goog.Uri.removeDoubleEncoding_","doubleEncodedString","goog.Uri.QueryData","encodedQuery_","ensureKeyMapInitialized_","goog.Uri.QueryData.prototype.ensureKeyMapInitialized_","keyMap_","count_","pairs","indexOfEquals","add","getCount","goog.Uri.QueryData.prototype.getCount","goog.Uri.QueryData.prototype.add","key","values","goog.Uri.QueryData.prototype.toString","sb","encodedKey","param","goog.Uri.QueryData.prototype.toDecodedString","goog.Uri.QueryData.prototype.clone","rv","cloneMap","concat","shaka.util","util","PublicPromise","shaka.util.PublicPromise","resolvePromise","rejectPromise","promise","Promise","reject","shaka.util.PublicPromise.prototype.resolve","shaka.util.PublicPromise.prototype.reject","reason","shaka.net","net","Backoff","shaka.net.Backoff","parameters","autoReset","isCanceled","defaults","defaultRetryParameters","maxAttempts_","maxAttempts","baseDelay_","baseDelay","fuzzFactor_","fuzzFactor","backoffFactor_","backoffFactor","numAttempts_","nextUnfuzzedDelay_","autoReset_","isCanceled_","attempt","shaka.net.Backoff.prototype.attempt","reset_","p","fuzzedDelay","fuzz_","cancelableTimeout_","shaka.net.Backoff.defaultRetryParameters","timeout","shaka.net.Backoff.fuzz_","random","shaka.net.Backoff.prototype.reset_","shaka.net.Backoff.prototype.cancelableTimeout_","fn","timeoutMs","timeToUse","setTimeout_","shaka.net.Backoff.setTimeout_","setTimeout","shaka.util.Error","severity","category","code","data","varArgs","handled","codeName","categoryName","k","Category","Code","message","e","stack","shaka.util.Error.prototype.toString","JSON","stringify","Severity","AbortableOperation","onAbort","onAbort_","aborted_","shaka.util.AbortableOperation","failed","aborted","CRITICAL","PLAYER","OPERATION_ABORTED","catch","completed","notAbortable","abort","all","operations","map","op","finally","onFinal","then","chain","onSuccess","onError","newPromise","wrapChainCallback_","callback","ret","exception","shaka.util.ArrayUtils","ArrayUtils","removeDuplicates","shaka.util.ArrayUtils.removeDuplicates","array","compareFn","result","matchFound","shaka.util.ArrayUtils.indexOf","remove","shaka.util.ArrayUtils.remove","element","index","splice","count","shaka.util.ArrayUtils.count","check","forEach","copy","shaka.util.ArrayUtils.copy","FakeEvent","shaka.util.FakeEvent","type","dict","defaultPrevented","cancelable","bubbles","timeStamp","performance","now","Date","isTrusted","target","currentTarget","stopped","preventDefault","shaka.util.FakeEvent.prototype.preventDefault","stopImmediatePropagation","shaka.util.FakeEvent.prototype.stopImmediatePropagation","stopPropagation","shaka.util.FakeEvent.prototype.stopPropagation","MultiMap","shaka.util.MultiMap","map_","shaka.util.MultiMap.prototype.push","get","shaka.util.MultiMap.prototype.get","list","getAll","shaka.util.MultiMap.prototype.getAll","shaka.util.MultiMap.prototype.remove","clear","shaka.util.MultiMap.prototype.clear","shaka.util.MultiMap.prototype.forEach","FakeEventTarget","shaka.util.FakeEventTarget","listeners_","dispatchTarget","addEventListener","shaka.util.FakeEventTarget.prototype.addEventListener","listener","options","removeEventListener","shaka.util.FakeEventTarget.prototype.removeEventListener","dispatchEvent","shaka.util.FakeEventTarget.prototype.dispatchEvent","event","listeners","handleEvent","IDestroyable","destroy","ObjectUtils","cloneObject","arg","seenObjects","isArray","OperationManager","operations_","manage","operation","cleanup","NetworkingEngine","shaka.net.NetworkingEngine","onSegmentDownloaded","destroyed_","operationManager_","requestFilters_","responseFilters_","onSegmentDownloaded_","RequestType","PluginPriority","schemes_","registerScheme","shaka.net.NetworkingEngine.registerScheme","plugin","priority","APPLICATION","existing","unregisterScheme","shaka.net.NetworkingEngine.unregisterScheme","registerRequestFilter","shaka.net.NetworkingEngine.prototype.registerRequestFilter","filter","unregisterRequestFilter","shaka.net.NetworkingEngine.prototype.unregisterRequestFilter","clearAllRequestFilters","shaka.net.NetworkingEngine.prototype.clearAllRequestFilters","registerResponseFilter","shaka.net.NetworkingEngine.prototype.registerResponseFilter","unregisterResponseFilter","shaka.net.NetworkingEngine.prototype.unregisterResponseFilter","clearAllResponseFilters","shaka.net.NetworkingEngine.prototype.clearAllResponseFilters","makeRequest","shaka.net.NetworkingEngine.makeRequest","uris","retryParams","method","body","headers","allowCrossSiteCredentials","retryParameters","shaka.net.NetworkingEngine.prototype.destroy","shimRequests_","shaka.net.NetworkingEngine.shimRequests_","operation.then","operation.catch","request","shaka.net.NetworkingEngine.prototype.request","requestFilterOperation","filterRequest_","requestOperation","makeRequestWithRetry_","responseFilterOperation","response","filterResponse_","requestFilterStartTime","requestFilterMs","responseFilterStartTime","responseFilterMs","timeMs","fromCache","SEGMENT","byteLength","shaka.net.NetworkingEngine.prototype.filterRequest_","filterOperation","requestFilter","NETWORK","REQUEST_FILTER_ERROR","shaka.net.NetworkingEngine.prototype.makeRequestWithRetry_","backoff","send_","shaka.net.NetworkingEngine.prototype.send_","lastError","getLocationProtocol_","UNSUPPORTED_SCHEME","startTimeMs","backoffOperation","sendOperation","RECOVERABLE","errorOrNull","shaka.net.NetworkingEngine.prototype.filterResponse_","responseFilter","RESPONSE_FILTER_ERROR","shaka.net.NetworkingEngine.getLocationProtocol_","location","protocol","EventManager","shaka.util.EventManager","bindingMap_","shaka.util.EventManager.prototype.destroy","removeAll","listen","shaka.util.EventManager.prototype.listen","binding","Binding_","listenOnce","shaka.util.EventManager.prototype.listenOnce","unlisten","shaka.util.EventManager.prototype.unlisten","shaka.util.EventManager.prototype.removeAll","shaka.util.EventManager.Binding_","shaka.util.EventManager.Binding_.prototype.unlisten","shaka.util.Functional","Functional","createFallbackPromiseChain","shaka.util.Functional.createFallbackPromiseChain","reduce","elem","collapseArrays","shaka.util.Functional.collapseArrays","noop","shaka.util.Functional.noop","isNotNull","shaka.util.Functional.isNotNull","isNotDuplicate","shaka.util.Functional.isNotDuplicate","item","position","self","shaka.util.ManifestParserUtils","ManifestParserUtils","resolveUris","shaka.util.ManifestParserUtils.resolveUris","baseUris","relativeUris","relativeAsGoog","createDrmInfo","shaka.util.ManifestParserUtils.createDrmInfo","keySystem","initData","licenseServerUri","distinctiveIdentifierRequired","persistentStateRequired","audioRobustness","videoRobustness","serverCertificate","keyIds","ContentType","VIDEO","AUDIO","TEXT","TextStreamKind","SUBTITLE","CLOSED_CAPTION","GAP_OVERLAP_TOLERANCE_SECONDS","shaka.util.MapUtils","MapUtils","empty","shaka.util.MapUtils.empty","keys","shaka.util.MapUtils.values","shaka.util.MapUtils.map","every","shaka.util.MapUtils.every","shaka.util.MapUtils.forEach","shaka.util.MimeUtils","MimeUtils","getFullType","shaka.util.MimeUtils.getFullType","mimeType","codecs","fullMimeType","getExtendedType","shaka.util.MimeUtils.getExtendedType","stream","streamKey","EXTENDED_MIME_PARAMETERS_","mimeKey","shaka.util.StringUtils","StringUtils","fromUTF8","shaka.util.StringUtils.fromUTF8","uint8","Uint8Array","subarray","utf8","fromCharCode","escaped","escape","BAD_ENCODING","fromUTF16","shaka.util.StringUtils.fromUTF16","littleEndian","noThrow","ArrayBuffer","buffer","temp","set","floor","arr","Uint16Array","dataView","DataView","getUint16","fromBytesAutoDetect","shaka.util.StringUtils.fromBytesAutoDetect","isAscii","UNABLE_TO_DETECT_ENCODING","toUTF8","shaka.util.StringUtils.toUTF8","str","unescape","shaka.util.StringUtils.fromCharCode","max","subArray","Timer","shaka.util.Timer","id_","callback_","cancel","shaka.util.Timer.prototype.cancel","clearTimeout","schedule","shaka.util.Timer.prototype.schedule","seconds","scheduleRepeated","shaka.util.Timer.prototype.scheduleRepeated","repeat","shaka.util.Uint8ArrayUtils","Uint8ArrayUtils","toBase64","shaka.util.Uint8ArrayUtils.toBase64","padding","bytes","base64","btoa","fromBase64","shaka.util.Uint8ArrayUtils.fromBase64","atob","fromHex","shaka.util.Uint8ArrayUtils.fromHex","parseInt","toHex","shaka.util.Uint8ArrayUtils.toHex","hex","equal","shaka.util.Uint8ArrayUtils.equal","arr1","arr2","shaka.util.Uint8ArrayUtils.concat","totalLength","offset","shaka.media","media","DrmEngine","shaka.media.DrmEngine","playerInterface","playerInterface_","video_","mediaKeys_","supportedTypes_","initialized_","currentDrmInfo_","eventManager_","activeSessions_","offlineSessionIds_","allSessionsLoaded_","config_","onError_","this.onError_","err","keyStatusByKeyId_","announcedKeyStatusByKeyId_","keyStatusTimer_","processKeyStatusChanges_","usePersistentLicenses_","mediaKeyMessageEvents_","initialRequestsSent_","expirationTimer_","pollExpiration_","shaka.media.DrmEngine.prototype.destroy","async","activeSession","close","session","closeTimeout","timeout_","CLOSE_TIMEOUT_","race","setMediaKeys","configure","shaka.media.DrmEngine.prototype.configure","config","initForStorage","shaka.media.DrmEngine.prototype.initForStorage","manifest","usePersistentLicenses","init_","initForPlayback","shaka.media.DrmEngine.prototype.initForPlayback","offlineSessionIds","shaka.media.DrmEngine.prototype.init_","configsByKeySystem","keySystemsInOrder","isEncryptedContent","periods","some","period","variants","variant","drmInfos","prepareMediaKeyConfigs_","queryMediaKeys_","attach","shaka.media.DrmEngine.prototype.attach","video","DRM","ENCRYPTED_CONTENT_WITHOUT_DRM_INFO","onPlay_","FAILED_TO_ATTACH_TO_VIDEO","setServerCertificate","supported","INVALID_SERVER_CERTIFICATE","createOrLoad","onEncrypted_","removeSessions","shaka.media.DrmEngine.prototype.removeSessions","sessions","id","removeSession","shaka.media.DrmEngine.prototype.removeSession","sessionId","tasks","active","loadOfflineSession_","s","update","updatePromise","shaka.media.DrmEngine.prototype.createOrLoad","initDatas","initDataOverride","createTemporarySession_","initDataType","initialized","shaka.media.DrmEngine.prototype.initialized","shaka.media.DrmEngine.prototype.keySystem","getSupportedTypes","shaka.media.DrmEngine.prototype.getSupportedTypes","getSessionIds","shaka.media.DrmEngine.prototype.getSessionIds","getExpiration","shaka.media.DrmEngine.prototype.getExpiration","expirations","expiration","Infinity","getDrmInfo","shaka.media.DrmEngine.prototype.getDrmInfo","getKeyStatuses","shaka.media.DrmEngine.prototype.getKeyStatuses","shaka.media.DrmEngine.prototype.prepareMediaKeyConfigs_","StreamUtils","getAllVariants","clearKeyDrmInfo","configureClearKey_","overrideDrmInfos","serverKeys","servers","prepareMediaKeyConfigsForVariant_","shaka.media.DrmEngine.prototype.prepareMediaKeyConfigsForVariant_","streams","getVariantStreams","fillInDrmInfoDefaults_","cast","__platform__","audioCapabilities","videoCapabilities","distinctiveIdentifier","persistentState","sessionTypes","label","isVideo","robustness","capability","contentType","shaka.media.DrmEngine.prototype.queryMediaKeys_","NO_RECOGNIZED_KEY_SYSTEMS","instigator","shouldHaveLicenseServer","hasLicenseServer","navigator","requestMediaKeySystemAccess","REQUESTED_KEY_SYSTEM_CONFIG_UNAVAILABLE","mediaKeySystemAccess","isEdge","userAgent","realConfig","getConfiguration","caps","c","originalConfig","createCurrentDrmInfo_","createMediaKeys","NO_LICENSE_SERVER_GIVEN","mediaKeys","FAILED_TO_CREATE_CDM","shaka.media.DrmEngine.prototype.fillInDrmInfoDefaults_","drmInfo","server","advanced","shaka.media.DrmEngine.prototype.configureClearKey_","clearKeys","keyIdHex","keyHex","keyId","keyObj","kty","kid","license","jwkSet","initDataStr","shaka.media.DrmEngine.prototype.createCurrentDrmInfo_","licenseServers","serverCerts","processDrmInfos_","shaka.media.DrmEngine.prototype.processDrmInfos_","initDataOverrideEqual","a","b","shaka.media.DrmEngine.prototype.onEncrypted_","shaka.media.DrmEngine.prototype.loadOfflineSession_","createSession","FAILED_TO_CREATE_SESSION","onSessionMessage_","onKeyStatusesChange_","loaded","oldExpiration","load","present","OFFLINE_SESSION_REMOVED","shaka.media.DrmEngine.prototype.createTemporarySession_","generateRequest","FAILED_TO_GENERATE_LICENSE_REQUEST","shaka.media.DrmEngine.prototype.onSessionMessage_","delayLicenseRequest_","sendLicenseRequest_","shaka.media.DrmEngine.prototype.delayLicenseRequest_","delayLicenseRequestUntilPlayed","paused","shaka.media.DrmEngine.prototype.sendLicenseRequest_","requestType","LICENSE","unpackPlayReadyRequest_","netEngine","onEvent","loadTimeout","SESSION_LOAD_TIMEOUT_","shakaErr","LICENSE_REQUEST_FAILED","LICENSE_RESPONSE_REJECTED","shaka.media.DrmEngine.prototype.unpackPlayReadyRequest_","xml","dom","parseFromString","DOMParser","querySelector","textContent","challenge","getAttribute","shaka.media.DrmEngine.prototype.onKeyStatusesChange_","hasExpiredKeys","keyStatuses","status","tmp","part0","getUint32","part1","part2","setUint32","setUint16","msUntilExpiration","allSessionsLoaded","KEY_STATUS_BATCH_TIME_","shaka.media.DrmEngine.prototype.processKeyStatusChanges_","isExpired","EXPIRED","onKeyStatus","isBrowserSupported","shaka.media.DrmEngine.isBrowserSupported","MediaKeys","MediaKeySystemAccess","probeSupport","shaka.media.DrmEngine.probeSupport","tests","basicVideoCapabilities","configs","offlineConfig","basicConfig","support","testKeySystems","access","shaka.media.DrmEngine.prototype.onPlay_","supportsVariant","shaka.media.DrmEngine.prototype.supportsVariant","supportsStream","streamType","audio","areDrmCompatible","shaka.media.DrmEngine.areDrmCompatible","drms1","drms2","getCommonDrmInfos","shaka.media.DrmEngine.getCommonDrmInfos","commonDrms","drm1","drm2","mergedDrm","shaka.media.DrmEngine.prototype.pollExpiration_","old","new_","onExpirationUpdated","shaka.media.DrmEngine.timeout_","shaka.media.TimeRangesUtils","TimeRangesUtils","bufferStart","shaka.media.TimeRangesUtils.bufferStart","end","start","bufferEnd","shaka.media.TimeRangesUtils.bufferEnd","isBuffered","shaka.media.TimeRangesUtils.isBuffered","time","smallGapLimit","bufferedAheadOf","shaka.media.TimeRangesUtils.bufferedAheadOf","getGapIndex","shaka.media.TimeRangesUtils.getGapIndex","threshold","getBufferedInfo","shaka.media.TimeRangesUtils.getBufferedInfo","shaka.text","text","Cue","shaka.text.Cue","startTime","endTime","payload","region","CueRegion","positionAlign","AUTO","size","textAlign","CENTER","writingDirection","HORIZONTAL_LEFT_TO_RIGHT","lineInterpretation","LINE_NUMBER","line","lineHeight","lineAlign","displayAlign","BEFORE","fontSize","backgroundColor","color","fontWeight","NORMAL","fontStyle","fontFamily","textDecoration","wrapLine","shaka.text.CueRegion","regionAnchorY","regionAnchorX","viewportAnchorY","viewportAnchorX","height","width","viewportAnchorUnits","widthUnits","heightUnits","units","PERCENTAGE","scroll","scrollMode","Transmuxer","shaka.media.Transmuxer","muxTransmuxer_","muxjs","mp4","transmuxPromise_","transmuxedData_","cues_","isTransmuxing_","on","onTransmuxed_","onTransmuxDone_","shaka.media.Transmuxer.prototype.destroy","dispose","isSupported","shaka.media.Transmuxer.isSupported","isTsContainer","convertTsCodecs","MediaSource","isTypeSupported","shaka.media.Transmuxer.isTsContainer","shaka.media.Transmuxer.convertTsCodecs","tsMimeType","mp4MimeType","exec","newCodecString","profile","transmux","shaka.media.Transmuxer.prototype.transmux","dataArray","flush","MEDIA","TRANSMUXING_FAILED","shaka.media.Transmuxer.prototype.onTransmuxed_","captions","cue","segmentWithInit","initSegment","shaka.media.Transmuxer.prototype.onTransmuxDone_","output","cues","TextEngine","shaka.text.TextEngine","displayer","parser_","displayer_","appendWindowStart_","timestampOffset_","appendWindowEnd_","bufferEnd_","bufferStart_","parserMap_","registerParser","shaka.text.TextEngine.registerParser","unregisterParser","shaka.text.TextEngine.unregisterParser","shaka.text.TextEngine.isTypeSupported","shaka.text.TextEngine.prototype.destroy","setDisplayer","shaka.text.TextEngine.prototype.setDisplayer","initParser","shaka.text.TextEngine.prototype.initParser","Factory","getStartTime","shaka.text.TextEngine.prototype.getStartTime","periodStart","segmentStart","segmentEnd","parseMedia","allCues","UNABLE_TO_EXTRACT_CUE_START_TIME","appendBuffer","shaka.text.TextEngine.prototype.appendBuffer","parseInit","cuesToAppend","append","shaka.text.TextEngine.prototype.remove","setTimestampOffset","shaka.text.TextEngine.prototype.setTimestampOffset","timestampOffset","setAppendWindow","shaka.text.TextEngine.prototype.setAppendWindow","appendWindowStart","appendWindowEnd","shaka.text.TextEngine.prototype.bufferStart","shaka.text.TextEngine.prototype.bufferEnd","shaka.text.TextEngine.prototype.isBuffered","t","shaka.text.TextEngine.prototype.bufferedAheadOf","appendCues","shaka.text.TextEngine.prototype.appendCues","MediaSourceEngine","shaka.media.MediaSourceEngine","textDisplayer_","sourceBuffers_","textEngine_","queues_","transmuxers_","useEmbeddedText_","mediaSourceOpen_","mediaSource_","createMediaSource","shaka.media.MediaSourceEngine.prototype.createMediaSource","mediaSource","URL","createObjectURL","isStreamSupported","shaka.media.MediaSourceEngine.isStreamSupported","extendedMimeType","shaka.media.MediaSourceEngine.isBrowserSupported","shaka.media.MediaSourceEngine.probeSupport","testMimeTypes","basicType","shaka.media.MediaSourceEngine.prototype.destroy","q","inProgress","removeAttribute","open","shaka.media.MediaSourceEngine.prototype.open","init","shaka.media.MediaSourceEngine.prototype.init","streamsByType","forceTransmuxTS","reinitText","sourceBuffer","addSourceBuffer","onUpdateEnd_","setTextDisplayer","shaka.media.MediaSourceEngine.prototype.setTextDisplayer","textDisplayer","shaka.media.MediaSourceEngine.prototype.reinitText","ended","shaka.media.MediaSourceEngine.prototype.ended","shaka.media.MediaSourceEngine.prototype.bufferStart","getBuffered_","shaka.media.MediaSourceEngine.prototype.bufferEnd","shaka.media.MediaSourceEngine.prototype.isBuffered","buffered","shaka.media.MediaSourceEngine.prototype.bufferedAheadOf","shaka.media.MediaSourceEngine.prototype.getBufferedInfo","textRanges","total","shaka.media.MediaSourceEngine.prototype.getBuffered_","shaka.media.MediaSourceEngine.prototype.appendBuffer","transmuxedData","enqueueOperation_","append_","setUseEmbeddedText","shaka.media.MediaSourceEngine.prototype.setUseEmbeddedText","useEmbeddedText","getUseEmbeddedText","shaka.media.MediaSourceEngine.prototype.getUseEmbeddedText","shaka.media.MediaSourceEngine.prototype.remove","MAX_VALUE","remove_","shaka.media.MediaSourceEngine.prototype.clear","duration","shaka.media.MediaSourceEngine.prototype.flush","flush_","setStreamProperties","shaka.media.MediaSourceEngine.prototype.setStreamProperties","abort_","setTimestampOffset_","setAppendWindow_","endOfStream","shaka.media.MediaSourceEngine.prototype.endOfStream","enqueueBlockingOperation_","setDuration","shaka.media.MediaSourceEngine.prototype.setDuration","getDuration","shaka.media.MediaSourceEngine.prototype.getDuration","shaka.media.MediaSourceEngine.prototype.append_","shaka.media.MediaSourceEngine.prototype.remove_","shaka.media.MediaSourceEngine.prototype.abort_","shaka.media.MediaSourceEngine.prototype.flush_","currentTime","shaka.media.MediaSourceEngine.prototype.setTimestampOffset_","shaka.media.MediaSourceEngine.prototype.setAppendWindow_","shaka.media.MediaSourceEngine.prototype.onError_","updating","MEDIA_SOURCE_OPERATION_FAILED","shaka.media.MediaSourceEngine.prototype.onUpdateEnd_","popFromQueue_","shaka.media.MediaSourceEngine.prototype.enqueueOperation_","QUOTA_EXCEEDED_ERROR","MEDIA_SOURCE_OPERATION_THREW","shaka.media.MediaSourceEngine.prototype.enqueueBlockingOperation_","run","allWaiters","ready","shaka.media.MediaSourceEngine.prototype.popFromQueue_","next","shaka.util.LanguageUtils","LanguageUtils","shaka.util.LanguageUtils.match","fuzz","preference","candidate","normalize","MatchType","BASE_LANGUAGE_OKAY","OTHER_SUB_LANGUAGE_OKAY","EXACT","shaka.util.LanguageUtils.normalize","lang","fields","toLowerCase","replacement","isoMap_","shaka.util.StreamUtils","meetsRestrictions","shaka.util.StreamUtils.meetsRestrictions","restrictions","maxHwRes","inRange","minWidth","maxWidth","minHeight","maxHeight","minPixels","maxPixels","minBandwidth","maxBandwidth","applyRestrictions","shaka.util.StreamUtils.applyRestrictions","tracksChanged","originalAllowed","allowedByApplication","filterNewPeriod","shaka.util.StreamUtils.filterNewPeriod","drmEngine","activeAudio","activeVideo","isAudio","getStreamSummaryString_","areStreamsCompatible_","textStreams","keep","shaka.util.StreamUtils.areStreamsCompatible_","s0","s1","variantToTrack","shaka.util.StreamUtils.variantToTrack","audioCodec","videoCodec","mimeTypes","kinds","kind","roles","track","language","frameRate","primary","videoId","audioId","channelsCount","audioBandwidth","videoBandwidth","originalVideoId","originalAudioId","originalTextId","originalId","textStreamToTrack","shaka.util.StreamUtils.textStreamToTrack","getTracks","shaka.util.StreamUtils.getTracks","tracks","getPlayableVariants","getVariantTracks","shaka.util.StreamUtils.getVariantTracks","activeAudioId","activeVideoId","getTextTracks","shaka.util.StreamUtils.getTextTracks","activeStreamId","findVariantForTrack","shaka.util.StreamUtils.findVariantForTrack","findTextStreamForTrack","shaka.util.StreamUtils.findTextStreamForTrack","isPlayable","shaka.util.StreamUtils.isPlayable","allowedByKeySystem","shaka.util.StreamUtils.getPlayableVariants","filterVariantsByConfig","shaka.util.StreamUtils.filterVariantsByConfig","preferredLanguage","preferredRole","preferredAudioChannelCount","languageMatches","chosen","filterVariantsByLanguageAndRole","filterVariantsByAudioChannelCount","shaka.util.StreamUtils.filterVariantsByLanguageAndRole","playable","firstLanguage","pref","matchType","betterLangMatchFound","roleMatches","filterVariantsByRole_","allRoles","audioRoles","videoRoles","shaka.util.StreamUtils.filterVariantsByAudioChannelCount","variantsByChannelCount","v","channelCounts","countLessThanOrEqualtoConfig","filterStreamsByLanguageAndRole","shaka.util.StreamUtils.filterStreamsByLanguageAndRole","filterTextStreamsByRole_","noRoleMatches","shaka.util.StreamUtils.filterVariantsByRole_","shaka.util.StreamUtils.filterTextStreamsByRole_","getVariantByStreams","shaka.util.StreamUtils.getVariantByStreams","getVariantByStreamIds","shaka.util.StreamUtils.getVariantByStreamIds","matchesId","findPeriodContainingTime","shaka.util.StreamUtils.findPeriodContainingTime","findPeriodContainingStream","shaka.util.StreamUtils.findPeriodContainingStream","periodIdx","textStream","trickModeVideo","findPeriodContainingVariant","shaka.util.StreamUtils.findPeriodContainingVariant","shaka.util.StreamUtils.isAudio","shaka.util.StreamUtils.isVideo","shaka.util.StreamUtils.getAllVariants","found","shaka.util.StreamUtils.getVariantStreams","shaka.util.StreamUtils.getStreamSummaryString_","SimpleAbrManager","shaka.abr.SimpleAbrManager","switch_","enabled_","bandwidthEstimator_","variants_","startupComplete_","lastTimeChosenMs_","stop","shaka.abr.SimpleAbrManager.prototype.stop","shaka.abr.SimpleAbrManager.prototype.init","switchCallback","chooseVariant","shaka.abr.SimpleAbrManager.prototype.chooseVariant","sortedVariants","filterAndSortVariants_","currentBandwidth","defaultBandwidthEstimate","bandwidthDowngradeTarget","bandwidthUpgradeTarget","toFixed","enable","shaka.abr.SimpleAbrManager.prototype.enable","disable","shaka.abr.SimpleAbrManager.prototype.disable","segmentDownloaded","shaka.abr.SimpleAbrManager.prototype.segmentDownloaded","deltaTimeMs","suggestStreams_","shaka.abr.SimpleAbrManager.prototype.getBandwidthEstimate","setVariants","shaka.abr.SimpleAbrManager.prototype.setVariants","shaka.abr.SimpleAbrManager.prototype.configure","shaka.abr.SimpleAbrManager.prototype.suggestStreams_","switchInterval","chosenVariant","bandwidthEstimate","round","currentBandwidthKbps","shaka.abr.SimpleAbrManager.filterAndSortVariants_","sort","shaka.cast","shaka.cast.CastUtils","CastUtils","VideoEvents","VideoAttributes","VideoInitStateAttributes","VideoVoidMethods","PlayerEvents","PlayerGetterMethods","PlayerGetterMethodsThatRequireLive","PlayerInitState","PlayerInitAfterLoadState","PlayerVoidMethods","PlayerPromiseMethods","SHAKA_MESSAGE_NAMESPACE","GENERIC_MESSAGE_NAMESPACE","serialize","shaka.cast.CastUtils.serialize","thing","Event","simpleEvent","eventKey","eventValue","TimeRanges","unpackTimeRanges_","isFinite","deserialize","shaka.cast.CastUtils.deserialize","parse","NaN","simulateTimeRanges_","shaka.cast.CastUtils.unpackTimeRanges_","ranges","shaka.cast.CastUtils.simulateTimeRanges_","CastSender","shaka.cast.CastSender","receiverAppId","onStatusChanged","onFirstCastStateUpdate","onRemoteEvent","onResumeLocal","onInitStateRequired","receiverAppId_","onStatusChanged_","onFirstCastStateUpdate_","hasJoinedExistingSession_","onRemoteEvent_","onResumeLocal_","onInitStateRequired_","isCasting_","apiReady_","receiverName_","appData_","onConnectionStatusChangedBound_","onConnectionStatusChanged_","onMessageReceivedBound_","onMessageReceived_","cachedProperties_","nextAsyncCallId_","asyncCallPromises_","castPromise_","hasReceivers_","session_","shaka.cast.CastSender.prototype.destroy","rejectAllPromises_","removeListeners_","apiReady","shaka.cast.CastSender.prototype.apiReady","hasReceivers","shaka.cast.CastSender.prototype.hasReceivers","isCasting","shaka.cast.CastSender.prototype.isCasting","receiverName","shaka.cast.CastSender.prototype.receiverName","hasRemoteProperties","shaka.cast.CastSender.prototype.hasRemoteProperties","shaka.cast.CastSender.prototype.init","chrome","isAvailable","__onGCastApiAvailable","sessionRequest","SessionRequest","apiConfig","ApiConfig","onExistingSessionJoined_","onReceiverStatusChanged_","initialize","oldSession","SessionStatus","STOPPED","setAppData","shaka.cast.CastSender.prototype.setAppData","appData","sendMessage_","shaka.cast.CastSender.prototype.cast","initState","CAST","CAST_API_UNAVAILABLE","NO_CAST_RECEIVERS","ALREADY_CASTING","requestSession","onSessionInitiated_","onConnectionError_","showDisconnectDialog","shaka.cast.CastSender.prototype.showDisconnectDialog","forceDisconnect","shaka.cast.CastSender.prototype.forceDisconnect","shaka.cast.CastSender.prototype.get","targetName","property","remoteCall_","isLive","remoteAsyncCall_","propertyGetter_","shaka.cast.CastSender.prototype.set","shaka.cast.CastSender.prototype.onSessionInitiated_","onSessionCreated_","shaka.cast.CastSender.prototype.onConnectionError_","UNEXPECTED_CAST_ERROR","CAST_CANCELED_BY_USER","CAST_CONNECTION_TIMED_OUT","CAST_RECEIVER_APP_UNAVAILABLE","shaka.cast.CastSender.prototype.propertyGetter_","shaka.cast.CastSender.prototype.remoteCall_","shaka.cast.CastSender.prototype.remoteAsyncCall_","shaka.cast.CastSender.prototype.onExistingSessionJoined_","shaka.cast.CastSender.prototype.onReceiverStatusChanged_","availability","shaka.cast.CastSender.prototype.onSessionCreated_","addUpdateListener","addMessageListener","shaka.cast.CastSender.prototype.removeListeners_","removeUpdateListener","removeMessageListener","shaka.cast.CastSender.prototype.onConnectionStatusChanged_","connected","receiver","friendlyName","shaka.cast.CastSender.prototype.rejectAllPromises_","LOAD_INTERRUPTED","shaka.cast.CastSender.prototype.onMessageReceived_","serialized","fakeEvent","reconstructedError","shaka.cast.CastSender.prototype.sendMessage_","sendMessage","CastProxy","shaka.cast.CastProxy","player","localVideo_","localPlayer_","playerEventTarget_","videoEventTarget_","playerProxy_","videoProxy_","sender_","onCastStatusChanged_","getInitState_","shaka.cast.CastProxy.prototype.destroy","getVideo","shaka.cast.CastProxy.prototype.getVideo","getPlayer","shaka.cast.CastProxy.prototype.getPlayer","canCast","shaka.cast.CastProxy.prototype.canCast","shaka.cast.CastProxy.prototype.isCasting","shaka.cast.CastProxy.prototype.receiverName","shaka.cast.CastProxy.prototype.cast","unload","shaka.cast.CastProxy.prototype.setAppData","suggestDisconnect","shaka.cast.CastProxy.prototype.suggestDisconnect","shaka.cast.CastProxy.prototype.forceDisconnect","shaka.cast.CastProxy.prototype.init_","videoProxyLocalEvent_","playerProxyLocalEvent_","defineProperty","configurable","enumerable","videoProxyGet_","videoProxySet_","playerProxyGet_","shaka.cast.CastProxy.prototype.getInitState_","getAssetUri","pause","pair","setter","getter","shaka.cast.CastProxy.prototype.onCastStatusChanged_","shaka.cast.CastProxy.prototype.onFirstCastStateUpdate_","shaka.cast.CastProxy.prototype.onResumeLocal_","assetUri","manifestReady","autoplay","videoState","play","shaka.cast.CastProxy.prototype.videoProxyGet_","shaka.cast.CastProxy.prototype.videoProxySet_","shaka.cast.CastProxy.prototype.videoProxyLocalEvent_","shaka.cast.CastProxy.prototype.playerProxyGet_","getNetworkingEngine","shaka.cast.CastProxy.prototype.playerProxyLocalEvent_","shaka.cast.CastProxy.prototype.onRemoteEvent_","CastReceiver","shaka.cast.CastReceiver","appDataCallback","contentIdCallback","player_","targets_","appDataCallback_","contentIdCallback_","contentId","isConnected_","isIdle_","updateNumber_","startUpdatingUpdateNumber_","initialStatusUpdatePending_","pollTimerId_","genericBus_","shakaBus_","isConnected","shaka.cast.CastReceiver.prototype.isConnected","isIdle","shaka.cast.CastReceiver.prototype.isIdle","shaka.cast.CastReceiver.prototype.destroy","CastReceiverManager","getInstance","manager","shaka.cast.CastReceiver.prototype.init_","onSenderConnected","onSendersChanged_","onSenderDisconnected","onSystemVolumeChanged","fakeVolumeChangeEvent_","getCastMessageBus","onMessage","onGenericMessage_","onShakaMessage_","proxyEvent_","canDisplayType","setMaxHardwareResolution","shaka.cast.CastReceiver.prototype.onSendersChanged_","getSenders","shaka.cast.CastReceiver.prototype.onCastStatusChanged_","maybeSendMediaInfoMessage_","sendMediaStatus_","initState_","shaka.cast.CastReceiver.prototype.initState_","shaka.cast.CastReceiver.prototype.proxyEvent_","pollAttributes_","shaka.cast.CastReceiver.prototype.pollAttributes_","frequency","systemVolume","getSystemVolume","muted","shaka.cast.CastReceiver.prototype.maybeSendMediaInfoMessage_","sendMediaInfoMessage_","shaka.cast.CastReceiver.prototype.sendMediaInfoMessage_","shaka.cast.CastReceiver.prototype.fakeVolumeChangeEvent_","shaka.cast.CastReceiver.prototype.onShakaMessage_","setSystemVolumeLevel","setSystemVolumeMuted","senderId","sendAsyncComplete_","shaka.cast.CastReceiver.prototype.onGenericMessage_","resumeState","volumeObject","oldVolumeLevel","volume","oldVolumeMuted","mediaInfo","shaka.cast.CastReceiver.prototype.sendAsyncComplete_","shaka.cast.CastReceiver.prototype.sendMessage_","bus","getCastChannel","send","broadcast","getPlayState_","shaka.cast.CastReceiver.prototype.getPlayState_","playState","PLAY_STATE","IDLE","isBuffering","BUFFERING","PAUSED","PLAYING","shaka.cast.CastReceiver.prototype.sendMediaStatus_","requestId","mediaStatus","playbackRate","shaka.util.XmlUtils","XmlUtils","findChild","shaka.util.XmlUtils.findChild","children","findChildren","shaka.util.XmlUtils.findChildren","childNodes","child","Element","tagName","findChildrenNS","shaka.util.XmlUtils.findChildrenNS","ns","localName","namespaceURI","getAttributeNS","shaka.util.XmlUtils.getAttributeNS","hasAttributeNS","getContents","shaka.util.XmlUtils.getContents","isText","nodeType","Node","TEXT_NODE","CDATA_SECTION_NODE","trim","parseAttr","shaka.util.XmlUtils.parseAttr","parseFunction","parsedValue","parseDate","shaka.util.XmlUtils.parseDate","dateString","parseDuration","shaka.util.XmlUtils.parseDuration","durationString","matches","d","years","months","days","hours","minutes","parseRange","shaka.util.XmlUtils.parseRange","rangeString","shaka.util.XmlUtils.parseInt","intString","parsePositiveInt","shaka.util.XmlUtils.parsePositiveInt","parseNonNegativeInt","shaka.util.XmlUtils.parseNonNegativeInt","parseFloat","shaka.util.XmlUtils.parseFloat","floatString","evalDivision","shaka.util.XmlUtils.evalDivision","exprString","res","shaka.dash","shaka.dash.ContentProtection","dash","ContentProtection","defaultKeySystems_","MP4Protection_","CencNamespaceUri_","parseFromAdaptationSet","shaka.dash.ContentProtection.parseFromAdaptationSet","elems","ignoreDrmInfo","parsed","parseElements_","defaultInit","parsedNonCenc","MANIFEST","DASH_CONFLICTING_KEY_IDS","schemeUri","convertElements_","defaultKeyId","firstRepresentation","parseFromRepresentation","shaka.dash.ContentProtection.parseFromRepresentation","context","repContext","asUnknown","repUnencrypted","asInfo","repInfo","DASH_NO_COMMON_KEY_SYSTEM","shaka.dash.ContentProtection.convertElements_","elements","node","shaka.dash.ContentProtection.parseElements_","NS","psshs","DASH_MULTIPLE_KEY_IDS_NOT_SUPPORTED","pssh","DASH_PSSH_BAD_ENCODING","shaka.dash.MpdUtils","MpdUtils","XlinkNamespaceUri_","fillUriTemplate","shaka.dash.MpdUtils.fillUriTemplate","uriTemplate","representationId","number","valueTable","re","widthString","format","abs","valueString","toUpperCase","paddingSize","createTimeline","shaka.dash.MpdUtils.createTimeline","segmentTimeline","timescale","unscaledPresentationTimeOffset","periodDuration","timePoints","timeline","lastEndTime","timePoint","r","nextStartTime","nextTimePoint","ceil","unscaledStart","parseSegmentInfo","shaka.dash.MpdUtils.parseSegmentInfo","representation","timescaleStr","inheritAttribute","durationStr","segmentDuration","startNumberStr","startNumber","timelineNode","inheritChild","periodInfo","scaledPresentationTimeOffset","shaka.dash.MpdUtils.inheritAttribute","attribute","adaptationSet","nodes","shaka.dash.MpdUtils.inheritChild","parseXml","shaka.dash.MpdUtils.parseXml","expectedRootElemName","parser","string","documentElement","rootElem","handleXlinkInElement_","shaka.dash.MpdUtils.handleXlinkInElement_","failGracefully","baseUri","networkingEngine","linkDepth","xlinkHref","xlinkActuate","attributes","removeAttributeNS","DASH_XLINK_DEPTH_LIMIT","DASH_UNSUPPORTED_XLINK_ACTUATE","DASH_INVALID_XML","removeChild","appendChild","nodeName","attributeValue","setAttribute","processXlinks","shaka.dash.MpdUtils.processXlinks","resolveToZeroString","childOperations","ELEMENT_NODE","InitSegmentReference","shaka.media.InitSegmentReference","startByte","endByte","getUris","createUris","shaka.media.InitSegmentReference.prototype.createUris","getStartByte","shaka.media.InitSegmentReference.prototype.getStartByte","getEndByte","shaka.media.InitSegmentReference.prototype.getEndByte","SegmentReference","shaka.media.SegmentReference","getPosition","shaka.media.SegmentReference.prototype.getPosition","shaka.media.SegmentReference.prototype.getStartTime","getEndTime","shaka.media.SegmentReference.prototype.getEndTime","shaka.media.SegmentReference.prototype.createUris","shaka.media.SegmentReference.prototype.getStartByte","shaka.media.SegmentReference.prototype.getEndByte","DataViewReader","shaka.util.DataViewReader","endianness","dataView_","littleEndian_","Endianness","LITTLE_ENDIAN","position_","BIG_ENDIAN","hasMoreData","shaka.util.DataViewReader.prototype.hasMoreData","shaka.util.DataViewReader.prototype.getPosition","getLength","shaka.util.DataViewReader.prototype.getLength","readUint8","shaka.util.DataViewReader.prototype.readUint8","getUint8","throwOutOfBounds_","readUint16","shaka.util.DataViewReader.prototype.readUint16","readUint32","shaka.util.DataViewReader.prototype.readUint32","readInt32","shaka.util.DataViewReader.prototype.readInt32","getInt32","readUint64","shaka.util.DataViewReader.prototype.readUint64","low","high","JS_INTEGER_OVERFLOW","readBytes","shaka.util.DataViewReader.prototype.readBytes","byteOffset","skip","shaka.util.DataViewReader.prototype.skip","rewind","shaka.util.DataViewReader.prototype.rewind","seek","shaka.util.DataViewReader.prototype.seek","readTerminatedString","shaka.util.DataViewReader.prototype.readTerminatedString","shaka.util.DataViewReader.prototype.throwOutOfBounds_","BUFFER_READ_OUT_OF_BOUNDS","Mp4Parser","shaka.util.Mp4Parser","headers_","boxDefinitions_","done_","BoxType_","BASIC_BOX","FULL_BOX","box","shaka.util.Mp4Parser.prototype.box","definition","typeCode","typeFromString_","fullBox","shaka.util.Mp4Parser.prototype.fullBox","shaka.util.Mp4Parser.prototype.stop","shaka.util.Mp4Parser.prototype.parse","partialOkay","wrapped","reader","parseNext","shaka.util.Mp4Parser.prototype.parseNext","absStart","typeToString","boxDefinition","version","flags","versionAndFlags","payloadSize","payloadReader","skipLength","shaka.util.Mp4Parser.children","sampleDescription","shaka.util.Mp4Parser.sampleDescription","allData","shaka.util.Mp4Parser.allData","shaka.util.Mp4Parser.typeFromString_","shaka.util.Mp4Parser.typeToString","Mp4SegmentIndexParser","shaka.media.Mp4SegmentIndexParser","sidxData","sidxOffset","references","parseSIDX_","MP4_SIDX_WRONG_BOX_TYPE","shaka.media.Mp4SegmentIndexParser.parseSIDX_","MP4_SIDX_INVALID_TIMESCALE","earliestPresentationTime","firstOffset","referenceCount","chunk","referenceType","referenceSize","subsegmentDuration","MP4_SIDX_TYPE_NOT_SUPPORTED","unscaledStartTime","SegmentIndex","shaka.media.SegmentIndex","assertCorrectReferences_","references_","shaka.media.SegmentIndex.prototype.destroy","find","shaka.media.SegmentIndex.prototype.find","shaka.media.SegmentIndex.prototype.get","shaka.media.SegmentIndex.prototype.offset","merge","shaka.media.SegmentIndex.prototype.merge","newReferences","r1","r2","nextPosition","shaka.media.SegmentIndex.prototype.replace","evict","shaka.media.SegmentIndex.prototype.evict","fit","shaka.media.SegmentIndex.prototype.fit","lastReference","firstReference","shaka.media.SegmentIndex.assertCorrectReferences_","EbmlParser","shaka.util.EbmlParser","reader_","DYNAMIC_SIZES","shaka.util.EbmlParser.prototype.hasMoreData","parseElement","shaka.util.EbmlParser.prototype.parseElement","parseId_","vint","parseVint_","isDynamicSizeValue_","getVintValue_","elementSize","EbmlElement","shaka.util.EbmlParser.prototype.parseId_","EBML_OVERFLOW","shaka.util.EbmlParser.prototype.parseVint_","firstByte","shaka.util.EbmlParser.getVintValue_","shaka.util.EbmlParser.isDynamicSizeValue_","uint8ArrayEqual","shaka.util.EbmlElement","getOffset","shaka.util.EbmlElement.prototype.getOffset","createParser","shaka.util.EbmlElement.prototype.createParser","getUint","shaka.util.EbmlElement.prototype.getUint","getFloat","shaka.util.EbmlElement.prototype.getFloat","getFloat32","getFloat64","EBML_BAD_FLOATING_POINT_SIZE","WebmSegmentIndexParser","shaka.media.WebmSegmentIndexParser","EBML_ID","SEGMENT_ID","INFO_ID","TIMECODE_SCALE_ID","DURATION_ID","CUES_ID","CUE_POINT_ID","CUE_TIME_ID","CUE_TRACK_POSITIONS_ID","CUE_CLUSTER_POSITION","shaka.media.WebmSegmentIndexParser.prototype.parse","cuesData","tuple","parseWebmContainer_","cuesElement","WEBM_CUES_ELEMENT_MISSING","parseCues_","segmentOffset","timecodeScale","shaka.media.WebmSegmentIndexParser.prototype.parseWebmContainer_","ebmlElement","WEBM_EBML_HEADER_ELEMENT_MISSING","segmentElement","WEBM_SEGMENT_ELEMENT_MISSING","segmentInfo","parseSegment_","shaka.media.WebmSegmentIndexParser.prototype.parseSegment_","infoElement","WEBM_INFO_ELEMENT_MISSING","parseInfo_","shaka.media.WebmSegmentIndexParser.prototype.parseInfo_","timecodeScaleNanoseconds","durationScale","WEBM_DURATION_ELEMENT_MISSING","shaka.media.WebmSegmentIndexParser.prototype.parseCues_","lastTime","lastOffset","parseCuePoint_","unscaledTime","currentOffset","relativeOffset","shaka.media.WebmSegmentIndexParser.prototype.parseCuePoint_","cuePointElement","cueTimeElement","WEBM_CUE_TIME_ELEMENT_MISSING","cueTrackPositionsElement","WEBM_CUE_TRACK_POSITIONS_ELEMENT_MISSING","cueTrackParser","shaka.dash.SegmentBase","SegmentBase","createInitSegment","shaka.dash.SegmentBase.createInitSegment","initialization","resolvedUris","range","createStream","shaka.dash.SegmentBase.createStream","requestInitSegment","segmentBase","fromInheritance_","createSegmentIndex_","createSegmentIndex","findSegmentPosition","getSegmentReference","initSegmentReference","createSegmentIndexFromUris","shaka.dash.SegmentBase.createSegmentIndexFromUris","containerType","presentationTimeline","fitLast","dynamic","isLastPeriod","localRequest","segmentIndex","create","results","indexData","notifySegments","shaka.dash.SegmentBase.fromInheritance_","frame","shaka.dash.SegmentBase.createSegmentIndex_","DASH_UNSUPPORTED_CONTAINER","DASH_WEBM_MISSING_INIT","representationIndex","indexRangeElem","indexUris","indexRange","representationUri","DASH_NO_SEGMENT_INFO","shaka.dash.SegmentList","SegmentList","shaka.dash.SegmentList.createStream","segmentIndexMap","segmentList","parseSegmentListInfo_","checkSegmentListInfo_","createSegmentReferences_","getSegmentAvailabilityStart","shaka.dash.SegmentList.fromInheritance_","shaka.dash.SegmentList.parseSegmentListInfo_","mediaSegments","parseMediaSegments_","shaka.dash.SegmentList.checkSegmentListInfo_","shaka.dash.SegmentList.createSegmentReferences_","prevEndTime","mediaUri","shaka.dash.SegmentList.parseMediaSegments_","segmentLists","urlNode","indexRangeWarningGiven","shaka.dash.SegmentTemplate","SegmentTemplate","shaka.dash.SegmentTemplate.createStream","isUpdate","segmentTemplate","createInitSegment_","parseSegmentTemplateInfo_","checkSegmentTemplateInfo_","indexTemplate","segmentIndexFunctions","createFromIndexTemplate_","notifyMaxSegmentDuration","createFromDuration_","createFromTimeline_","shouldFit","wrapper","shaka.dash.SegmentTemplate.fromInheritance_","shaka.dash.SegmentTemplate.parseSegmentTemplateInfo_","mediaTemplate","shaka.dash.SegmentTemplate.checkSegmentTemplateInfo_","shaka.dash.SegmentTemplate.createFromIndexTemplate_","filledTemplate","shaka.dash.SegmentTemplate.createFromDuration_","template","periodTime","shaka.dash.SegmentTemplate.createFromTimeline_","segmentReplacement","repId","segmentId","g","shaka.dash.SegmentTemplate.createInitSegment_","shaka.media.ManifestParser","ManifestParser","parsersByMime","parsersByExtension","registerParserByExtension","shaka.media.ManifestParser.registerParserByExtension","extension","parserFactory","registerParserByMime","shaka.media.ManifestParser.registerParserByMime","shaka.media.ManifestParser.probeSupport","testExtensions","getFactory","shaka.media.ManifestParser.getFactory","getFactory_","shaka.media.ManifestParser.getFactory_","mime","factory","uriObj","uriPieces","uriFilename","filenamePieces","getMimeType_","UNABLE_TO_GUESS_MANIFEST_TYPE","shaka.media.ManifestParser.getMimeType_","PresentationTimeline","shaka.media.PresentationTimeline","presentationStartTime","presentationDelay","presentationStartTime_","presentationDelay_","segmentAvailabilityDuration_","duration_","maxSegmentDuration_","maxSegmentEndTime_","minSegmentStartTime_","clockOffset_","static_","userSeekStart_","shaka.media.PresentationTimeline.prototype.getDuration","getMaxSegmentDuration","shaka.media.PresentationTimeline.prototype.getMaxSegmentDuration","shaka.media.PresentationTimeline.prototype.setDuration","getPresentationStartTime","shaka.media.PresentationTimeline.prototype.getPresentationStartTime","setClockOffset","shaka.media.PresentationTimeline.prototype.setClockOffset","setStatic","shaka.media.PresentationTimeline.prototype.setStatic","isStatic","setSegmentAvailabilityDuration","shaka.media.PresentationTimeline.prototype.setSegmentAvailabilityDuration","segmentAvailabilityDuration","setDelay","shaka.media.PresentationTimeline.prototype.setDelay","delay","getDelay","shaka.media.PresentationTimeline.prototype.getDelay","shaka.media.PresentationTimeline.prototype.notifySegments","firstReferenceStartTime","lastReferenceEndTime","shaka.media.PresentationTimeline.prototype.notifyMaxSegmentDuration","maxSegmentDuration","shaka.media.PresentationTimeline.prototype.isLive","isInProgress","shaka.media.PresentationTimeline.prototype.isInProgress","shaka.media.PresentationTimeline.prototype.getSegmentAvailabilityStart","getSegmentAvailabilityEnd","setUserSeekStart","shaka.media.PresentationTimeline.prototype.setUserSeekStart","shaka.media.PresentationTimeline.prototype.getSegmentAvailabilityEnd","getLiveEdge_","getSafeSeekRangeStart","shaka.media.PresentationTimeline.prototype.getSafeSeekRangeStart","earliestSegmentTime","availabilityStart","availabilityEnd","desiredStart","getSeekRangeEnd","getSeekRangeStart","shaka.media.PresentationTimeline.prototype.getSeekRangeStart","shaka.media.PresentationTimeline.prototype.getSeekRangeEnd","usingPresentationStartTime","shaka.media.PresentationTimeline.prototype.usingPresentationStartTime","shaka.media.PresentationTimeline.prototype.getLiveEdge_","assertIsValid","shaka.media.PresentationTimeline.prototype.assertIsValid","DashParser","shaka.dash.DashParser","manifestUris_","manifest_","periodIds_","globalId_","segmentIndexMap_","updatePeriod_","averageUpdateDuration_","updateTimer_","MIN_UPDATE_PERIOD_","shaka.dash.DashParser.prototype.configure","shaka.dash.DashParser.prototype.start","requestManifest_","updateDuration","setUpdateTimer_","shaka.dash.DashParser.prototype.stop","shaka.dash.DashParser.prototype.update","shaka.dash.DashParser.prototype.onExpirationUpdated","shaka.dash.DashParser.prototype.requestManifest_","parseManifest_","shaka.dash.DashParser.prototype.parseManifest_","finalManifestUri","mpd","xlinkOperation","xlinkFailGracefully","finalMpd","processManifest_","shaka.dash.DashParser.prototype.processManifest_","manifestBaseUris","locations","minBufferTime","suggestedPresentationDelay","mpdType","defaultPresentationDelay","periodsAndDuration","timingElements","parsePeriods_","durationDerivedFromPeriods","availabilityWindowOverride","parseUtcTiming_","shaka.dash.DashParser.prototype.parsePeriods_","presentationDuration","prevEnd","periodNodes","givenDuration","nextStart","nextPeriod","parsePeriod_","periodId","filterAllPeriods","shaka.dash.DashParser.prototype.parsePeriod_","createFrame_","eventStreamNodes","parseEventStream_","adaptationSets","adaptationSetNodes","parseAdaptationSet_","representationIds","as","uniqueRepIds","DASH_DUPLICATE_REPRESENTATION_ID","normalAdaptationSets","trickModeFor","trickModeAdaptationSets","trickModeSet","targetId","normalSet","videoSets","getSetsOfType_","audioSets","DASH_EMPTY_PERIOD","createVariants_","audioSet","videoSet","textSets","shaka.dash.DashParser.prototype.getSetsOfType_","shaka.dash.DashParser.prototype.createVariants_","main","shaka.dash.DashParser.prototype.parseAdaptationSet_","roleElements","roleValues","role","unrecognizedEssentialProperty","essentialProperties","prop","schemeId","accessibilities","closedCaptions","captionId","closedCaptionsValue","captionStr","channel","contentProtectionElems","contentProtection","customScheme","representations","parseRepresentation_","DASH_EMPTY_ADAPTATION_SET","guessContentType_","repIds","shaka.dash.DashParser.prototype.parseRepresentation_","isPrimary","verifyRepresentation_","requestInitSegment_","streamInfo","ref","presentationTimeOffset","encrypted","emsgSchemeIdUris","numChannels","onUpdate_","shaka.dash.DashParser.prototype.onUpdate_","shaka.dash.DashParser.prototype.setUpdateTimer_","shaka.dash.DashParser.prototype.createFrame_","parent","parseNumber","emsgSchemeIdUris_","audioChannelConfigs","parseAudioChannels_","shaka.dash.DashParser.prototype.emsgSchemeIdUris_","inBandEventStreams","schemeIdUris","schemeIdUri","shaka.dash.DashParser.prototype.parseAudioChannels_","intValue","hexValue","numBits","shaka.dash.DashParser.prototype.verifyRepresentation_","requestForTiming_","shaka.dash.DashParser.prototype.requestForTiming_","requestUris","TIMING","date","shaka.dash.DashParser.prototype.parseUtcTiming_","schemesAndValues","clockSyncUri","sv","shaka.dash.DashParser.prototype.parseEventStream_","eventNode","presentationTime","eventElement","onTimelineRegionAdded","shaka.dash.DashParser.prototype.requestInitSegment_","shaka.dash.DashParser.guessContentType_","shaka.hls","hls","Playlist","shaka.hls.Playlist","tags","PlaylistType","MASTER","Tag","shaka.hls.Tag","shaka.hls.Tag.prototype.toString","attrToStr","attr","Attribute","shaka.hls.Attribute","addAttribute","shaka.hls.Tag.prototype.addAttribute","shaka.hls.Tag.prototype.getAttribute","getAttributeValue","shaka.hls.Tag.prototype.getAttributeValue","Segment","shaka.hls.Segment","shaka.hls.Utils","Utils","filterTagsByName","shaka.hls.Utils.filterTagsByName","tag","getFirstTagWithName","shaka.hls.Utils.getFirstTagWithName","tagsWithName","findMediaTags","shaka.hls.Utils.findMediaTags","groupId","typeAttr","groupIdAttr","constructAbsoluteUri","shaka.hls.Utils.constructAbsoluteUri","parentAbsoluteUri","isComment","shaka.hls.Utils.isComment","TextParser","shaka.util.TextParser","data_","atEnd","shaka.util.TextParser.prototype.atEnd","readLine","shaka.util.TextParser.prototype.readLine","readRegexReturnCapture_","readWord","shaka.util.TextParser.prototype.readWord","skipWhitespace","shaka.util.TextParser.prototype.skipWhitespace","readRegex","shaka.util.TextParser.prototype.readRegex","regex","indexOf_","shaka.util.TextParser.prototype.readRegexReturnCapture_","shaka.util.TextParser.prototype.indexOf_","lastIndex","ManifestTextParser","shaka.hls.ManifestTextParser","parsePlaylist","shaka.hls.ManifestTextParser.prototype.parsePlaylist","MEDIA_PLAYLIST_TAGS","SEGMENT_TAGS","lines","HLS_PLAYLIST_HEADER_MISSING","playlistType","parseTag_","HLS_INVALID_PLAYLIST_HIERARCHY","segmentsData","parseSegments_","tagUri","shaka.hls.ManifestTextParser.prototype.parseSegments_","playlistTags","segmentTags","shaka.hls.ManifestTextParser.prototype.parseTag_","word","parseTag","shaka.hls.ManifestTextParser.parseTag","blocks","INVALID_HLS_TAG","blockAttrs","attrName","DataUriPlugin","shaka.net.DataUriPlugin","shaka.net.DataUriPlugin.parse","MALFORMED_DATA_URI","infoAndData","dataStr","typeAndEncoding","encoding","UNKNOWN_DATA_URI_ENCODING","HlsParser","shaka.hls.HlsParser","mediaTagsToStreamInfosMap_","urisToVariantsMap_","streamsToIndexMap_","uriToStreamInfosMap_","presentationTimeline_","manifestUri_","manifestTextParser_","presentationType_","PresentationType_","VOD","maxTargetDuration_","minTargetDuration_","segmentsToNotifyByStream_","shaka.hls.HlsParser.prototype.configure","shaka.hls.HlsParser.prototype.start","shaka.hls.HlsParser.prototype.stop","shaka.hls.HlsParser.prototype.update","isLive_","promises","updateStream_","shaka.hls.HlsParser.prototype.updateStream_","PresentationType","playlist","mediaSequenceTag","createSegments_","startPosition","newestSegment","endListTag","setPresentationType_","shaka.hls.HlsParser.prototype.onExpirationUpdated","shaka.hls.HlsParser.prototype.parseManifest_","HLS_MASTER_PLAYLIST_NOT_PROVIDED","createPeriod_","minFirstTimestamp","maxFirstTimestamp","maxLastTimestamp","minDuration","minTimestamp","maxTimestamp","createPresentationTimeline_","LIVE","rolloverSeconds","TS_ROLLOVER_","TS_TIMESCALE_","shaka.hls.HlsParser.prototype.createPeriod_","textStreamPromises","mediaTags","textStreamTags","getRequiredAttributeValue_","createTextStream_","variantsPromises","variantTags","createVariantsForTag_","allVariants","shaka.hls.HlsParser.prototype.createVariantsForTag_","defaultCodecs","resolutionAttr","resBlocks","audioGroupId","videoGroupId","textCodecs","guessCodecsSafe_","subGroupId","textTags","textStreamInfo","createStreamInfoFromMediaTag_","audioStreamInfos","videoStreamInfos","ignoreStream","streamURI","videoCodecs","createStreamInfoFromVariantTag_","filterLegacyCodecs_","shaka.hls.HlsParser.prototype.filterLegacyCodecs_","streamInfos","codec","shaka.hls.HlsParser.prototype.createVariants_","audioInfos","videoInfos","addVideoAttributes_","audioStream","videoStream","audioDrmInfos","videoDrmInfos","variantMapKey","videoStreamUri","audioStreamUri","createVariant_","shaka.hls.HlsParser.prototype.createVariant_","shaka.hls.HlsParser.prototype.createTextStream_","shaka.hls.HlsParser.prototype.createStreamInfoFromMediaTag_","allCodecs","defaultAttr","autoselectAttr","channelsAttribute","getChannelCount_","createStreamInfo_","shaka.hls.HlsParser.prototype.getChannelCount_","channels","channelcountstring","shaka.hls.HlsParser.prototype.createStreamInfoFromVariantTag_","shaka.hls.HlsParser.prototype.createStreamInfo_","determinePresentationType_","guessCodecs_","guessMimeType_","mimeTypeArg","createInitSegmentReference_","drmTags","segmentKeyTags","drmTag","keyFormat","drmParser","KEYFORMATS_TO_DRM_PARSERS_","HLS_KEYFORMATS_NOT_SUPPORTED","shaka.hls.HlsParser.prototype.determinePresentationType_","presentationTypeTag","isVod","isEvent","EVENT","targetDurationTag","getRequiredTag_","targetDuration","shaka.hls.HlsParser.prototype.createPresentationTimeline_","lastTimestamp","notifySegments_","shaka.hls.HlsParser.prototype.createInitSegmentReference_","mapTags","HLS_MULTIPLE_MEDIA_INIT_SECTIONS_FOUND","mapTag","initUri","byterange","createSegmentReference_","shaka.hls.HlsParser.prototype.createSegmentReference_","previousReference","hlsSegment","extinfValues","extinfTag","shaka.hls.HlsParser.prototype.notifySegments_","shaka.hls.HlsParser.prototype.createSegments_","hlsSegments","firstSegmentUri","firstSegmentRef","initSegmentRef","getStartTime_","firstStartTime","reference","fetchPartialSegment_","shaka.hls.HlsParser.prototype.fetchPartialSegment_","segmentRef","partialSegmentHeaders","PARTIAL_SEGMENT_SIZE_","fullSegmentHeaders","shaka.hls.HlsParser.prototype.getStartTime_","playlistUri","fetches","responses","getStartTimeFromMp4Segment_","getStartTimeFromTsSegment_","getStartTimeFromTextSegment_","HLS_COULD_NOT_PARSE_SEGMENT_START_TIME","shaka.hls.HlsParser.prototype.getStartTimeFromMp4Segment_","mediaData","parsedMedia","baseTime","shaka.hls.HlsParser.prototype.getStartTimeFromTsSegment_","fail","packetStart","syncByte","flagsAndPacketId","adaptationFieldControl","startCode","ptsDtsIndicator","pesHeaderLengthRemaining","pts0","pts1","pts2","shaka.hls.HlsParser.prototype.getStartTimeFromTextSegment_","textEngine","shaka.hls.HlsParser.prototype.guessCodecsSafe_","formats","CODEC_REGEXPS_BY_CONTENT_TYPE_","shaka.hls.HlsParser.prototype.guessCodecs_","HLS_COULD_NOT_GUESS_CODECS","shaka.hls.HlsParser.prototype.guessMimeType_","parsedUri","EXTENSION_MAP_BY_CONTENT_TYPE_","headRequest","HLS_COULD_NOT_GUESS_MIME_TYPE","shaka.hls.HlsParser.getRequiredAttributeValue_","attributeName","HLS_REQUIRED_ATTRIBUTE_MISSING","shaka.hls.HlsParser.prototype.getRequiredTag_","HLS_REQUIRED_TAG_MISSING","shaka.hls.HlsParser.prototype.addVideoAttributes_","shaka.hls.HlsParser.prototype.requestManifest_","VIDEO_CODEC_REGEXPS_","AUDIO_CODEC_REGEXPS_","TEXT_CODEC_REGEXPS_","AUDIO_EXTENSIONS_TO_MIME_TYPES_","VIDEO_EXTENSIONS_TO_MIME_TYPES_","TEXT_EXTENSIONS_TO_MIME_TYPES_","widevineDrmParser_","shaka.hls.HlsParser.widevineDrmParser_","VALID_METHODS","parsedData","shaka.hls.HlsParser.prototype.onUpdate_","shaka.hls.HlsParser.prototype.setUpdateTimer_","shaka.hls.HlsParser.prototype.isLive_","shaka.hls.HlsParser.prototype.setPresentationType_","ActiveStreamMap","history_","hasPeriod","periodIndex","streamId","Frame","record","record_","GapJumpingController","shaka.media.GapJumpingController","timeline_","onEvent_","gapJumpTimer_","seekingEventReceived_","prevReadyState_","didFireLargeGap_","stallPlayheadTime_","stallWallTime_","hadSegmentAppended_","stallCorrected_","pollGap","onPollGapJump_","BROWSER_GAP_TOLERANCE","shaka.media.GapJumpingController.prototype.destroy","onSegmentAppended","shaka.media.GapJumpingController.prototype.onSegmentAppended","onSeeking","shaka.media.GapJumpingController.prototype.onSeeking","shaka.media.GapJumpingController.prototype.onPollGapJump_","seeking","gapIndex","handleStall_","jumpTo","seekEnd","jumpSize","isGapSmall","jumpLargeGap","jumpLargeGaps","shaka.media.GapJumpingController.prototype.handleStall_","VideoWrapper","shaka.media.VideoWrapper","onSeek","onSeek_","startTime_","playbackRate_","buffering_","trickPlayTimer_","onLoadedMetadata_","onRateChange_","shaka.media.VideoWrapper.prototype.destroy","getTime","shaka.media.VideoWrapper.prototype.getTime","setTime","shaka.media.VideoWrapper.prototype.setTime","movePlayhead_","getPlaybackRate","shaka.media.VideoWrapper.prototype.getPlaybackRate","setPlaybackRate","shaka.media.VideoWrapper.prototype.setPlaybackRate","rate","trickPlay","setBuffering","shaka.media.VideoWrapper.prototype.setBuffering","buffering","shaka.media.VideoWrapper.prototype.onRateChange_","expectedRate","shaka.media.VideoWrapper.prototype.onLoadedMetadata_","onSeekingToStartTime_","shaka.media.VideoWrapper.prototype.onSeekingToStartTime_","shaka.media.VideoWrapper.prototype.movePlayhead_","targetTime","tries","recheck","Playhead","shaka.media.Playhead","minBufferTime_","checkWindowTimer_","gapController_","videoWrapper_","onSeeking_","poll","onPollWindow_","MIN_SEEK_RANGE_","shaka.media.Playhead.prototype.destroy","setStartTime","shaka.media.Playhead.prototype.setStartTime","shaka.media.Playhead.prototype.getTime","clampTime_","shaka.media.Playhead.prototype.getStartTime_","clampSeekToDuration_","shaka.media.Playhead.prototype.setBuffering","shaka.media.Playhead.prototype.getPlaybackRate","shaka.media.Playhead.prototype.setPlaybackRate","shaka.media.Playhead.prototype.onSegmentAppended","shaka.media.Playhead.prototype.onPollWindow_","seekStart","minRange","reposition_","shaka.media.Playhead.prototype.onSeeking_","lastCorrectiveSeek_","shaka.media.Playhead.prototype.clampSeekToDuration_","durationBackoff","shaka.media.Playhead.prototype.reposition_","rebufferingGoal","safe","seekSafe","shaka.media.Playhead.prototype.clampTime_","Destroyer","waitOnDestroy_","onDestroy_","destroyed","with","objs","PlayheadObserver","shaka.media.PlayheadObserver","onBuffering","onChangePeriod","impl","onBuffering_","onChangePeriod_","timelineRegions_","curPeriodIndex_","watchdogTimer_","impl_","destroyer_","cancelWatchdogTimer_","startWatchdogTimer_","UNDERFLOW_THRESHOLD_","RegionLocation_","FUTURE_REGION","INSIDE","PAST_REGION","Implementation","getPeriodIndex","isBufferedToEnd","bufferedEnd","shaka.media.PlayheadObserver.prototype.destroy","seeked","shaka.media.PlayheadObserver.prototype.seeked","updateTimelineRegion_","addTimelineRegion","shaka.media.PlayheadObserver.prototype.addTimelineRegion","regionInfo","hasExistingRegion","cloneTimelineInfo_","detail","shaka.media.PlayheadObserver.cloneTimelineInfo_","source","shaka.media.PlayheadObserver.prototype.updateTimelineRegion_","isSeek","RegionLocation","newStatus","wasInside","isInside","shaka.media.PlayheadObserver.prototype.startWatchdogTimer_","onWatchdogTimer_","shaka.media.PlayheadObserver.prototype.cancelWatchdogTimer_","shaka.media.PlayheadObserver.prototype.onWatchdogTimer_","newPeriod","bufferedAhead","bufferedToEnd","setBuffering_","shaka.media.PlayheadObserver.prototype.setBuffering_","VideoPlayheadObserver","MediaSourcePlayheadObserver","mediaSourceEngine","mediaSourceEngine_","liveEdge","bufferedToLiveEdge","noMoreSegments","lin","VstubSegmentList","lin.VstubSegmentList.InitSegmentReference","initFunc","this.getUris","initSegmentBytesFunc","lin.VstubSegmentList.createStream","vstub","getInitVstubBytes","assetUrl","segmentsArray","seg","from","mdatRanges","rg","to","mediaSegment","sixdmoofBytes","sixdmoof","byteRanges","mdatSize","findByTime","findByIndex","lin.VstubSegmentList.getInitVstubBytes","byteArray","lin.VstubSegmentList.findByTime","lin.VstubSegmentList.findByIndex","buildMdatHeader","lin.VstubSegmentList.buildMdatHeader","view","StreamingEngine","shaka.media.StreamingEngine","bufferingGoalScale_","setupPeriodPromise_","canSwitchPeriod_","canSwitchStream_","mediaStates_","failureCallbackBackoff_","unloadingTextStream_","fatalError_","textStreamSequenceId_","APPEND_WINDOW_START_FUDGE_","MAX_RUN_AHEAD_SEGMENTS_","shaka.media.StreamingEngine.prototype.destroy","cancelUpdate_","shaka.media.StreamingEngine.prototype.configure","failureRetryParams","shaka.media.StreamingEngine.prototype.init","playheadTime","playhead","needPeriodIndex","findPeriodContainingTime_","initialStreams","onChooseStreams","initStreams_","onInitialStreamsSetup","STREAMING","INVALID_STREAMS_CHOSEN","getCurrentPeriod","shaka.media.StreamingEngine.prototype.getCurrentPeriod","getActivePeriod","shaka.media.StreamingEngine.prototype.getActivePeriod","anyMediaState","getActiveAudio","shaka.media.StreamingEngine.prototype.getActiveAudio","getStream_","getActiveVideo","shaka.media.StreamingEngine.prototype.getActiveVideo","getActiveText","shaka.media.StreamingEngine.prototype.getActiveText","shaka.media.StreamingEngine.prototype.getStream_","state","restoreStreamAfterTrickPlay","loadNewTextStream","shaka.media.StreamingEngine.prototype.loadNewTextStream","createMediaState","currentSequenceId","setupStreams_","createMediaState_","scheduleUpdate_","unloadTextStream","shaka.media.StreamingEngine.prototype.unloadTextStream","setTrickPlay","shaka.media.StreamingEngine.prototype.setTrickPlay","mediaState","switchInternal_","normalVideo","switchVariant","shaka.media.StreamingEngine.prototype.switchVariant","clearBuffer","safeMargin","switchTextStream","shaka.media.StreamingEngine.prototype.switchTextStream","shaka.media.StreamingEngine.prototype.switchInternal_","ignoreTextStreamFailures","findPeriodContainingStream_","clearAllBuffers_","canSwitchRecord","resolved","streamTag","logPrefix_","needInitSegment","clearingBuffer","waitingToFlushBuffer","performingUpdate","waitingToClearBuffer","clearBufferSafeMargin","clearBuffer_","shaka.media.StreamingEngine.prototype.seeked","isAllBuffered","shaka.media.StreamingEngine.prototype.clearAllBuffers_","logPrefix","updateTimer","shaka.media.StreamingEngine.prototype.initStreams_","chosenStreams","resumeAt","setDuration_","shaka.media.StreamingEngine.prototype.createMediaState_","lastStream","lastSegmentReference","recovering","hasError","setupPeriod_","shaka.media.StreamingEngine.prototype.setupPeriod_","shaka.media.StreamingEngine.prototype.setupStreams_","uniqueStreamIds","shaka.media.StreamingEngine.prototype.setDuration_","shaka.media.StreamingEngine.prototype.onUpdate_","update_","handleStreamingError_","mediaStates","handlePeriodTransition_","ms","shaka.media.StreamingEngine.prototype.update_","timeNeeded","getTimeNeeded_","currentPeriodIndex","scaledBufferingGoal","unscaledBufferingGoal","bufferingGoal","getSegmentReferenceNeeded_","minTimeNeeded","otherState","maxRunAhead","fetchAndAppend_","shaka.media.StreamingEngine.prototype.getTimeNeeded_","lastPeriodIndex","lastPeriod","shaka.media.StreamingEngine.prototype.getSegmentReferenceNeeded_","getSegmentReferenceIfAvailable_","lookupSegmentPosition_","optimalPosition","shaka.media.StreamingEngine.prototype.lookupSegmentPosition_","currentPeriod","lookupTime","shaka.media.StreamingEngine.prototype.getSegmentReferenceIfAvailable_","shaka.media.StreamingEngine.prototype.fetchAndAppend_","followingPeriod","initSourceBuffer","initSourceBuffer_","fetchSegment","fetch_","handleStartup_","BAD_HTTP_STATUS","handleQuotaExceeded_","retry","shaka.media.StreamingEngine.prototype.retry","shaka.media.StreamingEngine.prototype.handleQuotaExceeded_","waitingForAnotherStreamToRecover","percentBefore","percentAfter","shaka.media.StreamingEngine.prototype.initSourceBuffer_","appendInit","fetchInit","shaka.media.StreamingEngine.prototype.append_","parseEMSG_","evict_","shaka.media.StreamingEngine.prototype.parseEMSG_","presentationTimeDelta","eventDuration","messageData","onManifestUpdate","emsg","shaka.media.StreamingEngine.prototype.evict_","bufferBehind","bufferedBehind","overflow","shaka.media.StreamingEngine.prototype.handleStartup_","onCanSwitch","onStartupComplete","shaka.media.StreamingEngine.prototype.handlePeriodTransition_","needSamePeriod","allAreIdle","allReady","needPeriod","shaka.media.StreamingEngine.isIdle_","shaka.media.StreamingEngine.prototype.findPeriodContainingTime_","shaka.media.StreamingEngine.prototype.findPeriodContainingStream_","shaka.media.StreamingEngine.prototype.fetch_","initSegmentBytes","segmentArray","mdatHeader","responseArray","samplesData","shaka.media.StreamingEngine.prototype.clearBuffer_","shaka.media.StreamingEngine.prototype.scheduleUpdate_","shaka.media.StreamingEngine.prototype.cancelUpdate_","shaka.media.StreamingEngine.prototype.handleStreamingError_","failureCallback","shaka.media.StreamingEngine.logPrefix_","shaka.net.HttpPluginUtils","HttpPluginUtils","makeResponse","shaka.net.HttpPluginUtils.makeResponse","responseURL","responseText","HttpFetchPlugin","shaka.net.HttpFetchPlugin","Headers_","controller","AbortController_","signal","credentials","abortStatus","canceled","timedOut","onTimeout","request_","shaka.net.HttpFetchPlugin.request_","timeoutId","fetch","arrayBuffer","responseHeaders","TIMEOUT","HTTP_ERROR","url","shaka.net.HttpFetchPlugin.isSupported","AbortController","Headers","PREFERRED","HttpXHRPlugin","shaka.net.HttpXHRPlugin","xhr","Xhr_","responseType","withCredentials","onabort","xhr.onabort","onload","xhr.onload","headerLines","getAllResponseHeaders","header","onerror","xhr.onerror","ontimeout","xhr.ontimeout","lowercasedKey","setRequestHeader","XMLHttpRequest","FALLBACK","shaka.offline","offline","DownloadManager","shaka.offline.DownloadManager","onProgress","groups_","promise_","onProgress_","downloadedBytes_","expectedEstimatedBytes_","downloadedEstimatedBytes_","shaka.offline.DownloadManager.prototype.destroy","wait","requests_","queue","shaka.offline.DownloadManager.prototype.queue","group","estimatedByteLength","onDownloaded","download","shaka.offline.DownloadManager.prototype.download","groups","checkDestroyed_","downloadGroup_","shaka.offline.DownloadManager.prototype.downloadGroup_","downloadSegment_","shaka.offline.DownloadManager.prototype.downloadSegment_","progress","shaka.offline.DownloadManager.prototype.checkDestroyed_","STORAGE","shaka.offline.indexeddb","indexeddb","DBOperation","transaction","storeName","transaction_","store_","objectStore","transaction.onabort","transaction.onerror","oncomplete","transaction.oncomplete","store","DBConnection","connection","connection_","pending_","startReadOnlyOperation","startOperation_","startReadWriteOperation","stopTracking_","StorageMuxer","mechanisms_","destroys","mechanism","registry","getRegistry_","mech","initPromises","getActive","handle","mechanismName","getCells","cellName","cell","hasFixedKeySpace","MISSING_STORAGE_CELL","forEachCell","getCell","resolvePath","erase","erases","register","registry_","shaka.offline.StorageMuxer.register","unregister","shaka.offline.StorageMuxer.unregister","instance","overrideSupport","override_","clearOverride","override","V1StorageCell","segmentStore","manifestStore","segmentStore_","manifestStore_","addSegments","rejectAdd_","removeSegments","onRemove","getSegments","convertSegmentData","convertSegmentData_","get_","addManifests","manifests","updateManifestExpiration","newExpiration","onsuccess","put","KEY_NOT_FOUND","removeManifests","getManifests","convertManifest","convertManifest_","getAllManifests","openCursor","cursor","continue","NEW_KEY_OPERATION_NOT_SUPPORTED","delete","missing","originalManifestUri","sessionIds","appMetadata","convertPeriod_","convertStream","convertStream_","fillMissingVariants","fillMissingVariants_","variantIds","getKeyFromUri","getKeyFromSegmentUri_","convertSegment","convertSegment_","initSegmentKey","initSegmentUri","dataKey","MALFORMED_OFFLINE_URI","nextId","variantId","V2StorageCell","isFixedKey","isFixedKey_","add_","request.onsuccess","StorageMechanism","v3_","v2_","v1_","db_","DB_NAME","VERSION","indexedDB","open.onsuccess","db","createV1_","createV2_","createV3_","onupgradeneeded","open.onupgradeneeded","createStores_","open.onerror","INDEXED_DB_ERROR","deleteAll_","V1_SEGMENT_STORE","V1_MANIFEST_STORE","stores","objectStoreNames","contains","V2_SEGMENT_STORE","V2_MANIFEST_STORE","V3_SEGMENT_STORE","V3_MANIFEST_STORE","storeSettings","autoIncrement","createObjectStore","del","deleteDatabase","onblocked","del.onblocked","del.onsuccess","del.onerror","OfflineUri","type_","mechanism_","cell_","key_","asString_","isManifest","isSegment","ManifestConverter","fromManifestDB","manifestDB","fromPeriodDB","audioStreams","isAudio_","videoStreams","isVideo_","createVariants","isText_","fromStreamDB_","refs","fromSegmentDB_","audios","videos","variantMap","allStreams","createEmptyVariant_","streamDB","fromInitSegmentDB_","segmentDB","OfflineManifestParser","shaka.offline.OfflineManifestParser","uri_","shaka.offline.OfflineManifestParser.prototype.configure","shaka.offline.OfflineManifestParser.prototype.start","uriString","muxer","converter","shaka.offline.OfflineManifestParser.prototype.stop","shaka.offline.OfflineManifestParser.prototype.update","shaka.offline.OfflineManifestParser.prototype.onExpirationUpdated","foundSession","OfflineScheme","shaka.offline.OfflineScheme","offlineUri","getManifest_","getSegment_","shaka.offline.OfflineScheme.getManifest_","shaka.offline.OfflineScheme.getSegment_","SimpleTextDisplayer","shaka.text.SimpleTextDisplayer","textTrack_","textTracks","mode","TextTrackLabel_","addTextTrack","shaka.text.SimpleTextDisplayer.prototype.remove","removeWhere_","removeInRange","inside","shaka.text.SimpleTextDisplayer.prototype.append","convertToVttRegion","convertToVttRegion_","convertToTextTrackCue","convertToTextTrackCue_","vttRegions","VTTRegion","regions","videoWidth","offsetWidth","videoHeight","offsetHeight","textTrackCues","sortedCues","addCue","shaka.text.SimpleTextDisplayer.prototype.destroy","removeIt","isTextVisible","shaka.text.SimpleTextDisplayer.prototype.isTextVisible","setTextVisibility","shaka.text.SimpleTextDisplayer.prototype.setTextVisibility","shaka.text.SimpleTextDisplayer.convertToTextTrackCue_","shakaCue","vttCue","VTTCue","align","VERTICAL_LEFT_TO_RIGHT","vertical","VERTICAL_RIGHT_TO_LEFT","snapToLines","regionsWithId","reg","shaka.text.SimpleTextDisplayer.convertToVttRegion_","shakaRegion","LINES","PX","shaka.text.SimpleTextDisplayer.removeWhere_","predicate","oldState","tempState","removeCue","shaka.util.ConfigUtils","ConfigUtils","mergeConfigObjects","shaka.util.ConfigUtils.mergeConfigObjects","destination","overrides","ignoreKeys","isValid","subPath","subTemplate","subMergeValid","PlayerConfiguration","createDefault","abrMaxHeight","downlink","saveData","drm","streaming","alwaysStreamText","startAtSegmentBoundary","trackSelectionCallback","progressCallback","content","usePersistentLicense","abrFactory","enabled","preferredAudioLanguage","preferredTextLanguage","preferredVariantRole","preferredTextRole","playRangeStart","playRangeEnd","textDisplayFactory","offline.trackSelectionCallback","defaultTrackSelect","selectedTracks","audioLangPref","matchTypes","allVariantTracks","tracksByMatchType","variantTracks","primaryTracks","languages","tracksByHeight","Player","shaka.Player","dependencyInjector","textVisibility_","abrManager_","assetUri_","streamingEngine_","playheadObserver_","playhead_","drmEngine_","networkingEngine_","nextExternalStreamId_","loadingTextStreamIds_","switchingPeriods_","deferredVariant_","unloadChain_","onCancelLoad_","deferredVariantClearBuffer_","deferredVariantClearBufferSafeMargin_","deferredTextStream_","pendingTimelineRegions_","activeStreams_","defaultConfig_","maxHwRes_","stats_","getCleanStats_","lastTimeStatsUpdateTimestamp_","currentAudioLanguage_","currentTextLanguage_","currentVariantRole_","currentTextRole_","currentAudioChannelCount_","createNetworkingEngine","cancelLoad_","shaka.Player.prototype.cancelLoad_","stopParser","shaka.Player.prototype.destroy","detach","restrictedStatuses_","supportPlugins_","registerSupportPlugin","shaka.Player.registerSupportPlugin","shaka.Player.isBrowserSupported","shaka.Player.probeSupport","plugins","shaka.Player.prototype.attach","initializeMediaSource","onVideoError_","createMediaSourceEngine","shaka.Player.prototype.detach","getParser_","shaka.Player.prototype.getParser_","loadManifest_","shaka.Player.prototype.loadManifest_","filterNewPeriod_","filterAllPeriods_","filterManifestForAVVariants_","shaka.Player.prototype.filterManifestForAVVariants_","hasAVVariant","NO_PERIODS","shaka.Player.prototype.load","cancelValue","cancelPromise","cancelCallback","loadStartTime","unloadPromise","AbrManagerFactory","TextDisplayerFactory","contentMimeType","hasPrimary","NO_VIDEO_ELEMENT","updateState_","createDrmEngine","applyPlayRange_","createPlayhead","createPlayheadObserver","createStreamingEngine","chooseCodecsAndFilterManifest_","adjustStartTime_","onTracksChanged_","onAdaptation_","latency","loadLatency","shaka.Player.prototype.chooseCodecsAndFilterManifest_","variantCodecs","baseVideoCodec","baseAudioCodec","variantsByCodecs","bestCodecs","lowestAverageBandwidth","sum","num","averageBandwidth","shaka.Player.prototype.createDrmEngine","onKeyStatus_","onExpirationUpdated_","shaka.Player.prototype.createNetworkingEngine","shaka.Player.prototype.createPlayhead","shaka.Player.prototype.createPlayheadObserver","shaka.Player.prototype.createMediaSourceEngine","shaka.Player.prototype.createStreamingEngine","onChooseStreams_","canSwitch_","onManifestUpdate_","onSegmentAppended_","shaka.Player.prototype.configure","convertToConfigObject_","configOverrides_","applyConfig_","shaka.Player.prototype.convertToConfigObject_","fieldName","configObject","last","searchIndex","nameStart","idx","shaka.Player.prototype.applyConfig_","activeVariant","chooseStreamsAndSwitch_","shaka.Player.prototype.getConfiguration","getSharedConfiguration","shaka.Player.prototype.getSharedConfiguration","resetConfiguration","shaka.Player.prototype.resetConfiguration","getMediaElement","shaka.Player.prototype.getMediaElement","shaka.Player.prototype.getNetworkingEngine","shaka.Player.prototype.getAssetUri","getManifestUri","shaka.Player.prototype.getManifestUri","shaka.Player.prototype.isLive","shaka.Player.prototype.isInProgress","isAudioOnly","shaka.Player.prototype.isAudioOnly","seekRange","shaka.Player.prototype.seekRange","shaka.Player.prototype.keySystem","shaka.Player.prototype.drmInfo","shaka.Player.prototype.getExpiration","shaka.Player.prototype.isBuffering","shaka.Player.prototype.unload","reinitializeMediaSource","destroyStreaming_","shaka.Player.prototype.getPlaybackRate","shaka.Player.prototype.trickPlay","cancelTrickPlay","shaka.Player.prototype.cancelTrickPlay","shaka.Player.prototype.getVariantTracks","assertCorrectActiveStreams_","shaka.Player.prototype.getTextTracks","selectTextTrack","shaka.Player.prototype.selectTextTrack","addTextStreamToSwitchHistory_","switchTextStream_","selectEmbeddedTextTrack","shaka.Player.prototype.selectEmbeddedTextTrack","usingEmbeddedTextTrack","shaka.Player.prototype.usingEmbeddedTextTrack","selectVariantTrack","shaka.Player.prototype.selectVariantTrack","variantIsPlayable","addVariantToSwitchHistory_","switchVariant_","getAudioLanguagesAndRoles","shaka.Player.prototype.getAudioLanguagesAndRoles","getLanguagesAndRoles_","getTextLanguagesAndRoles","shaka.Player.prototype.getTextLanguagesAndRoles","getAudioLanguages","shaka.Player.prototype.getAudioLanguages","getTextLanguages","shaka.Player.prototype.getTextLanguages","shaka.Player.prototype.getLanguagesAndRoles_","roleLangCombinations","noRole","noLanguage","selectAudioLanguage","shaka.Player.prototype.selectAudioLanguage","selectTextLanguage","shaka.Player.prototype.selectTextLanguage","isTextTrackVisible","shaka.Player.prototype.isTextTrackVisible","setTextTrackVisibility","shaka.Player.prototype.setTextTrackVisibility","onTextTrackVisibility_","getPlayheadTimeAsDate","shaka.Player.prototype.getPlayheadTimeAsDate","getPresentationStartTimeAsDate","shaka.Player.prototype.getPresentationStartTimeAsDate","shaka.Player.prototype.getBufferedInfo","getStats","shaka.Player.prototype.getStats","updateTimeStats_","videoElem","videoInfo","getVideoPlaybackQuality","streamBandwidth","decodedFrames","totalVideoFrames","droppedFrames","droppedVideoFrames","estimatedBandwidth","playTime","bufferingTime","switchHistory","stateHistory","shaka.Player.prototype.addTextTrack","nextPeriodIndex","nextPeriodStart","CANNOT_ADD_EXTERNAL_TEXT_TO_LIVE_STREAM","curPeriodIdx","activeText","shaka.Player.prototype.setMaxHardwareResolution","retryStreaming","shaka.Player.prototype.retryStreaming","getManifest","shaka.Player.prototype.getManifest","shaka.Player.prototype.addVariantToSwitchHistory_","fromAdaptation","updateActiveStreams_","activePeriod","timestamp","shaka.Player.prototype.addTextStreamToSwitchHistory_","shaka.Player.prototype.updateActiveStreams_","shaka.Player.prototype.destroyStreaming_","shaka.Player.prototype.configOverrides_","shaka.Player.prototype.defaultConfig_","config.streaming.failureCallback","defaultStreamingFailureCallback_","config.textDisplayFactory","shaka.Player.prototype.defaultStreamingFailureCallback_","retryErrorCodes","shaka.Player.prototype.getCleanStats_","shaka.Player.prototype.filterAllPeriods_","filterPeriod","validPeriodsCount","CONTENT_UNSUPPORTED_BY_BROWSER","UNPLAYABLE_PERIOD","checkRestrictedVariants_","shaka.Player.prototype.filterNewPeriod_","hasPlayableVariant","shaka.Player.prototype.switchVariant_","shaka.Player.prototype.switchTextStream_","shaka.Player.prototype.assertCorrectActiveStreams_","mainStream","streamingPeriodIndex","activeStreams","shaka.Player.prototype.updateTimeStats_","shaka.Player.prototype.adjustStartTime_","getAdjustedTime","refTime","audioStartTime","videoStartTime","shaka.Player.prototype.onBuffering_","shaka.Player.prototype.onChangePeriod_","shaka.Player.prototype.updateState_","newState","lastEntry","shaka.Player.prototype.onSeek_","chooseVariant_","shaka.Player.prototype.chooseVariant_","shaka.Player.prototype.chooseStreamsAndSwitch_","chosenText","streamText_","shaka.Player.prototype.onChooseStreams_","chosenTextStream","deferredPeriodIndex","deferredPeriod","startingUp","shaka.Player.prototype.canSwitch_","shaka.Player.prototype.onManifestUpdate_","shaka.Player.prototype.onSegmentAppended_","shaka.Player.prototype.switch_","shaka.Player.prototype.onAdaptation_","waitNextTick_","shaka.Player.prototype.onTracksChanged_","shaka.Player.prototype.onTextTrackVisibility_","shaka.Player.prototype.onError_","shaka.Player.prototype.onEvent_","shaka.Player.prototype.onVideoError_","extended","msExtendedCode","VIDEO_ERROR","shaka.Player.prototype.onKeyStatus_","keyStatusMap","restrictedStatuses","isGlobalStatus","keyStatus","shaka.Player.prototype.onExpirationUpdated_","shaka.Player.prototype.streamText_","shaka.Player.applyPlayRange_","fullDuration","shaka.Player.prototype.checkRestrictedVariants_","hasPlayable","hasAppRestrict","missingKeys","badKeyStatuses","RESTRICTIONS_CANNOT_BE_MET","hasAppRestrictions","restrictedKeyStatuses","shaka.Player.prototype.waitNextTick_","StoredContentUtils","fromManifest","originalUri","metadata","firstPeriod","firstPeriodDB","StreamBandwidthEstimator","estimateByStreamId_","addVariant","setBitrate_","audioBitRate","DEFAULT_AUDIO_BITRATE_","videoBitRate","bitRate","addText","DEFAULT_TEXT_BITRATE_","getSegmentEstimate","getEstimate_","getInitSegmentEstimate","Storage","shaka.offline.Storage","LOCAL_PLAYER_INSTANCE_REQUIRED","storeInProgress_","firstPeriodTracks_","segmentsFromStore_","openOperations_","destroyNetworkingEngine","shaka.offline.Storage.support","shaka.offline.Storage.prototype.destroy","shaka.offline.Storage.prototype.configure","verifyConfig_","shaka.offline.Storage.prototype.getNetworkingEngine","shaka.offline.Storage.prototype.store","getParser","shaka.offline.Storage.prototype.store_","canDownload","requireSupport_","STORE_ALREADY_IN_PROGRESS","loadInternal","CANNOT_STORE_LIVE_OFFLINE","ids","segmentsToRemove","downloadManifest_","shaka.offline.Storage.prototype.downloadManifest_","storage","pendingContent","downloader","noSize","createOfflineManifest_","shaka.offline.Storage.prototype.remove","contentUri","shaka.offline.Storage.prototype.remove_","nullableUri","removeFromDRM_","removeFromStorage_","shaka.offline.Storage.prototype.removeFromDRM_","shaka.offline.Storage.prototype.removeFromStorage_","segmentIds","getAllSegmentIds_","toRemove","removed","shaka.offline.Storage.prototype.list","list_","shaka.offline.Storage.prototype.list_","onCell","shaka.offline.Storage.prototype.loadInternal","manifestUri","manifestParser","onKeyStatusChange","filterPeriod_","shaka.offline.Storage.prototype.filterAllPeriods_","shaka.offline.Storage.prototype.filterPeriod_","variantTrack","shaka.offline.Storage.prototype.createSegmentIndex_","shaka.offline.Storage.prototype.createOfflineManifest_","estimator","NO_INIT_DATA_FOR_OFFLINE","shaka.offline.Storage.prototype.createPeriod_","allTracks","chosenTracks","lookForSimilarTracks_","idMap","streamDBs","getStreamSet_","createStream_","shaka.offline.Storage.prototype.createStream_","streamDb","downloadGroup","forEachSegment_","createRequest_","shaka.offline.Storage.forEachSegment_","shaka.offline.Storage.prototype.checkDestroyed_","shaka.offline.Storage.prototype.requireSupport_","STORAGE_NOT_SUPPORTED","shaka.offline.Storage.prototype.createRequest_","shaka.offline.Storage.prototype.startOperation_","action","shaka.offline.Storage.prototype.getParser_","shaka.offline.Storage.getAllSegmentIds_","deleteAll","shaka.offline.Storage.deleteAll","shaka.offline.Storage.deleteAll_","drmConfig","deleteLicenseFor","deleteLicenseFor_","deleteLicenses","getAllManifests_","shaka.offline.Storage.deleteLicenseFor_","shaka.offline.Storage.lookForSimilarTracks_","t0","t1","shaka.offline.Storage.getStreamSet_","shaka.offline.Storage.getAllManifests_","waits","manifestDBs","shaka.offline.Storage.verifyConfig_","usedLegacyConfig","shaka.polyfill","polyfill","installAll","shaka.polyfill.installAll","polyfills_","shaka.polyfill.register","shaka.polyfill.Fullscreen","Fullscreen","install","shaka.polyfill.Fullscreen.install","Document","proto","requestFullscreen","mozRequestFullScreen","msRequestFullscreen","webkitRequestFullscreen","exitFullscreen","mozCancelFullScreen","msExitFullscreen","webkitExitFullscreen","mozFullScreenElement","msFullscreenElement","webkitFullscreenElement","mozFullScreenEnabled","msFullscreenEnabled","webkitFullscreenEnabled","proxy","shaka.polyfill.Fullscreen.proxyEvent_","eventType","newEvent","createEvent","initEvent","shaka.polyfill.IndexedDB","IndexedDB","shaka.polyfill.IndexedDB.install","agent","shaka.polyfill.InputEvent","InputEvent","shaka.polyfill.InputEvent.install","HTMLInputElement","addEventListener_","originalAddEventListener_","shaka.polyfill.InputEvent.addEventListener_","shaka.polyfill.MathRound","MathRound","MAX_ACCURATE_INPUT_","shaka.polyfill.MathRound.install","testNumber","originalMathRound","Math.round","shaka.polyfill.MediaSource","shaka.polyfill.MediaSource.install","patchCastIsTypeSupported_","vendor","appVersion","rejectTsContent_","blacklist_","stubAbort_","patchEndOfStreamEvents_","patchRemovalRange_","shaka.polyfill.MediaSource.blacklist_","shaka.polyfill.MediaSource.stubAbort_","MediaSource.prototype.addSourceBuffer","sourceBuffer.abort","shaka.polyfill.MediaSource.patchRemovalRange_","originalRemove","SourceBuffer","SourceBuffer.prototype.remove","shaka.polyfill.MediaSource.patchEndOfStreamEvents_","MediaSource.prototype.endOfStream","newDuration","sourceBuffers","ignoreUpdateEnd_","eventSuppressed_","cleanUpHandlerInstalled","cleanUpListeners_","shaka.polyfill.MediaSource.ignoreUpdateEnd_","shaka.polyfill.MediaSource.cleanUpListeners_","shaka.polyfill.MediaSource.rejectTsContent_","originalIsTypeSupported","MediaSource.isTypeSupported","pieces","basicMimeType","container","shaka.polyfill.MediaSource.patchCastIsTypeSupported_","dolbyVisionRegex","kv","isHDR","isDolbyVision","codecList","Pssh","shaka.util.Pssh","psshBox","systemIds","cencKeyIds","dataBoundaries","parseBox_","shaka.util.Pssh.prototype.parseBox_","systemId","numKeyIds","dataSize","shaka.polyfill.PatchedMediaKeysMs","PatchedMediaKeysMs","shaka.polyfill.PatchedMediaKeysMs.install","HTMLVideoElement","MSMediaKeys","MediaKeyStatusMap","KEY_ID_","HTMLMediaElement","shaka.polyfill.PatchedMediaKeysMs.requestMediaKeySystemAccess","supportedConfigurations","shaka.polyfill.PatchedMediaKeysMs.MediaKeySystemAccess","success","cfg","newCfg","initDataTypes","ranAnyTests","cap","configuration_","unsupportedKeySystemError","DOMException","NOT_SUPPORTED_ERR","shaka.polyfill.PatchedMediaKeysMs.MediaKeySystemAccess.prototype.createMediaKeys","shaka.polyfill.PatchedMediaKeysMs.MediaKeySystemAccess.prototype.getConfiguration","shaka.polyfill.PatchedMediaKeysMs.setMediaKeys","oldMediaKeys","setMedia","shaka.polyfill.PatchedMediaKeysMs.MediaKeys","nativeMediaKeys_","shaka.polyfill.PatchedMediaKeysMs.MediaKeys.prototype.createSession","sessionType","TypeError","MediaKeySession","shaka.polyfill.PatchedMediaKeysMs.MediaKeys.prototype.setServerCertificate","shaka.polyfill.PatchedMediaKeysMs.MediaKeys.prototype.setMedia","setMediaKeysDeferred","msSetMediaKeys","onMsNeedKey_","shaka.polyfill.PatchedMediaKeysMs.MediaKeySession","nativeMediaKeys","nativeMediaKeySession_","updatePromise_","generateRequestPromise_","closed","shaka.polyfill.PatchedMediaKeysMs.MediaKeySession.prototype.generateRequest","onMsKeyMessage_","onMsKeyAdded_","onMsKeyError_","updateKeyStatus_","shaka.polyfill.PatchedMediaKeysMs.MediaKeySession.prototype.load","shaka.polyfill.PatchedMediaKeysMs.MediaKeySession.prototype.update","shaka.polyfill.PatchedMediaKeysMs.MediaKeySession.prototype.close","shaka.polyfill.PatchedMediaKeysMs.MediaKeySession.prototype.remove","shaka.polyfill.PatchedMediaKeysMs.onMsNeedKey_","event2","initCustomEvent","normaliseInitData_","shaka.polyfill.PatchedMediaKeysMs.normaliseInitData_","unfilteredInitDatas","currPssh","dedupedInitDatas","compareInitDatas_","targetLength","normalisedInitData","shaka.polyfill.PatchedMediaKeysMs.compareInitDatas_","initDataA","initDataB","shaka.polyfill.PatchedMediaKeysMs.MediaKeySession.prototype.onMsKeyMessage_","isNew","getStatus","messageType","shaka.polyfill.PatchedMediaKeysMs.MediaKeySession.prototype.onMsKeyAdded_","shaka.polyfill.PatchedMediaKeysMs.MediaKeySession.prototype.onMsKeyError_","errorCode","MSMediaKeyError","MS_MEDIA_KEYERR_OUTPUT","MS_MEDIA_KEYERR_HARDWARECHANGE","shaka.polyfill.PatchedMediaKeysMs.MediaKeySession.prototype.updateKeyStatus_","setStatus","shaka.polyfill.PatchedMediaKeysMs.MediaKeyStatusMap","status_","shaka.polyfill.PatchedMediaKeysMs.MediaKeyStatusMap.prototype.setStatus","shaka.polyfill.PatchedMediaKeysMs.MediaKeyStatusMap.prototype.getStatus","shaka.polyfill.PatchedMediaKeysMs.MediaKeyStatusMap.prototype.forEach","shaka.polyfill.PatchedMediaKeysMs.MediaKeyStatusMap.prototype.get","has","shaka.polyfill.PatchedMediaKeysMs.MediaKeyStatusMap.prototype.has","fakeKeyId","entries","shaka.polyfill.PatchedMediaKeysMs.MediaKeyStatusMap.prototype.entries","shaka.polyfill.PatchedMediaKeysMs.MediaKeyStatusMap.prototype.keys","shaka.polyfill.PatchedMediaKeysMs.MediaKeyStatusMap.prototype.values","shaka.polyfill.PatchedMediaKeysNop","PatchedMediaKeysNop","shaka.polyfill.PatchedMediaKeysNop.install","shaka.polyfill.PatchedMediaKeysNop.requestMediaKeySystemAccess","shaka.polyfill.PatchedMediaKeysNop.setMediaKeys","shaka.polyfill.PatchedMediaKeysNop.MediaKeys","shaka.polyfill.PatchedMediaKeysNop.MediaKeys.prototype.createSession","shaka.polyfill.PatchedMediaKeysNop.MediaKeys.prototype.setServerCertificate","shaka.polyfill.PatchedMediaKeysNop.MediaKeySystemAccess","shaka.polyfill.PatchedMediaKeysNop.MediaKeySystemAccess.prototype.getConfiguration","shaka.polyfill.PatchedMediaKeysNop.MediaKeySystemAccess.prototype.createMediaKeys","shaka.polyfill.PatchedMediaKeysWebkit","PatchedMediaKeysWebkit","prefix_","shaka.polyfill.PatchedMediaKeysWebkit.install","prefixApi","prefixApi_","webkitGenerateKeyRequest","generateKeyRequest","shaka.polyfill.PatchedMediaKeysWebkit.prefixApi_","api","prefix","shaka.polyfill.PatchedMediaKeysWebkit.requestMediaKeySystemAccess","shaka.polyfill.PatchedMediaKeysWebkit.setMediaKeys","getVideoElement_","shaka.polyfill.PatchedMediaKeysWebkit.getVideoElement_","tmpVideo","createElement","shaka.polyfill.PatchedMediaKeysWebkit.MediaKeySystemAccess","internalKeySystem_","allowPersistentState","canPlayType","unsupportedError","shaka.polyfill.PatchedMediaKeysWebkit.MediaKeySystemAccess.prototype.createMediaKeys","shaka.polyfill.PatchedMediaKeysWebkit.MediaKeySystemAccess.prototype.getConfiguration","shaka.polyfill.PatchedMediaKeysWebkit.MediaKeys","keySystem_","media_","newSessions_","sessionMap_","shaka.polyfill.PatchedMediaKeysWebkit.MediaKeys.prototype.setMedia","onWebkitNeedKey_","onWebkitKeyMessage_","onWebkitKeyAdded_","onWebkitKeyError_","shaka.polyfill.PatchedMediaKeysWebkit.MediaKeys.prototype.createSession","shaka.polyfill.PatchedMediaKeysWebkit.MediaKeys.prototype.setServerCertificate","shaka.polyfill.PatchedMediaKeysWebkit.MediaKeys.prototype.onWebkitNeedKey_","shaka.polyfill.PatchedMediaKeysWebkit.MediaKeys.prototype.onWebkitKeyMessage_","findSession_","generated","shaka.polyfill.PatchedMediaKeysWebkit.MediaKeys.prototype.onWebkitKeyAdded_","shaka.polyfill.PatchedMediaKeysWebkit.MediaKeys.prototype.onWebkitKeyError_","handleError","shaka.polyfill.PatchedMediaKeysWebkit.MediaKeys.prototype.findSession_","shaka.polyfill.PatchedMediaKeysWebkit.MediaKeySession","generatePromise_","shaka.polyfill.PatchedMediaKeysWebkit.MediaKeySession.prototype.generated","shaka.polyfill.PatchedMediaKeysWebkit.MediaKeySession.prototype.ready","shaka.polyfill.PatchedMediaKeysWebkit.MediaKeySession.prototype.handleError","systemCode","MediaKeyError","generate_","shaka.polyfill.PatchedMediaKeysWebkit.MediaKeySession.prototype.generate_","offlineSessionId","mangledInitData","generateKeyRequestName","exception2","shaka.polyfill.PatchedMediaKeysWebkit.MediaKeySession.prototype.update_","licenseString","addKeyName","shaka.polyfill.PatchedMediaKeysWebkit.MediaKeySession.prototype.updateKeyStatus_","shaka.polyfill.PatchedMediaKeysWebkit.MediaKeySession.prototype.generateRequest","shaka.polyfill.PatchedMediaKeysWebkit.MediaKeySession.prototype.load","shaka.polyfill.PatchedMediaKeysWebkit.MediaKeySession.prototype.update","nextUpdatePromise","shaka.polyfill.PatchedMediaKeysWebkit.MediaKeySession.prototype.close","cancelKeyRequestName","shaka.polyfill.PatchedMediaKeysWebkit.MediaKeySession.prototype.remove","shaka.polyfill.PatchedMediaKeysWebkit.MediaKeyStatusMap","shaka.polyfill.PatchedMediaKeysWebkit.MediaKeyStatusMap.prototype.setStatus","shaka.polyfill.PatchedMediaKeysWebkit.MediaKeyStatusMap.prototype.getStatus","shaka.polyfill.PatchedMediaKeysWebkit.MediaKeyStatusMap.prototype.forEach","shaka.polyfill.PatchedMediaKeysWebkit.MediaKeyStatusMap.prototype.get","shaka.polyfill.PatchedMediaKeysWebkit.MediaKeyStatusMap.prototype.has","shaka.polyfill.PatchedMediaKeysWebkit.MediaKeyStatusMap.prototype.entries","shaka.polyfill.PatchedMediaKeysWebkit.MediaKeyStatusMap.prototype.keys","shaka.polyfill.PatchedMediaKeysWebkit.MediaKeyStatusMap.prototype.values","shaka.polyfill.VideoPlayPromise","VideoPlayPromise","shaka.polyfill.VideoPlayPromise.install","originalPlay","HTMLMediaElement.prototype.play","shaka.polyfill.VideoPlaybackQuality","VideoPlaybackQuality","shaka.polyfill.VideoPlaybackQuality.install","webkit_","shaka.polyfill.VideoPlaybackQuality.webkit_","webkitDroppedFrameCount","webkitDecodedFrameCount","shaka.polyfill.VTTCue","shaka.polyfill.VTTCue.install","TextTrackCue","constructorLength","from3ArgsTextTrackCue_","from6ArgsTextTrackCue_","canUse3ArgsTextTrackCue_","shaka.polyfill.VTTCue.from3ArgsTextTrackCue_","shaka.polyfill.VTTCue.from6ArgsTextTrackCue_","shaka.polyfill.VTTCue.canUse3ArgsTextTrackCue_","TtmlTextParser","shaka.text.TtmlTextParser","shaka.text.TtmlTextParser.prototype.parseInit","shaka.text.TtmlTextParser.prototype.parseMedia","INVALID_XML","tt","tts","subFrameRate","frameRateMultiplier","tickRate","spaceStyle","whitespaceTrim","rateInfo","RateInfo_","styles","getLeafNodes_","regionElements","cueRegions","cueRegion","parseCueRegion_","textNodes","parseCue_","percentValues_","unitValues_","pixelValues_","timeColonFormatFrames_","timeColonFormat_","timeColonFormatMilliseconds_","timeFramesFormat_","timeTickFormat_","timeHMSFormat_","textAlignToLineAlign_","START","END","textAlignToPositionAlign_","LEFT","RIGHT","shaka.text.TtmlTextParser.getLeafNodes_","isSpanChildOfP","leafChildren","addNewLines_","shaka.text.TtmlTextParser.addNewLines_","trimmed","shaka.text.TtmlTextParser.parseCue_","cueElement","hasAttribute","parseTime_","INVALID_TEXT_CUE","regionElement","getElementFromCollection_","regionId","addStyle_","shaka.text.TtmlTextParser.parseCueRegion_","extent","getStyleAttributeFromRegion_","percentage","origin","shaka.text.TtmlTextParser.addStyle_","getStyleAttribute_","direction","HORIZONTAL_RIGHT_TO_LEFT","writingMode","BOLD","wrapOption","textDecorationRegion","addTextDecoration_","textDecorationElement","getStyleAttributeFromElement_","shaka.text.TtmlTextParser.addTextDecoration_","decoration","UNDERLINE","LINE_THROUGH","OVERLINE","shaka.text.TtmlTextParser.getStyleAttribute_","shaka.text.TtmlTextParser.getStyleAttributeFromRegion_","regionChildren","style","shaka.text.TtmlTextParser.getStyleAttributeFromElement_","shaka.text.TtmlTextParser.getElementFromCollection_","collection","itemName","getInheritedAttribute_","shaka.text.TtmlTextParser.getInheritedAttribute_","parentNode","shaka.text.TtmlTextParser.parseTime_","parseColonTimeWithFrames_","parseTimeFromRegex_","parseFramesTime_","parseTickTime_","shaka.text.TtmlTextParser.parseFramesTime_","frames","shaka.text.TtmlTextParser.parseTickTime_","ticks","shaka.text.TtmlTextParser.parseColonTimeWithFrames_","shaka.text.TtmlTextParser.parseTimeFromRegex_","shaka.text.TtmlTextParser.RateInfo_","multiplierResults","numerator","denominator","Mp4TtmlParser","shaka.text.Mp4TtmlParser","shaka.text.Mp4TtmlParser.prototype.parseInit","sawSTPP","INVALID_MP4_TTML","shaka.text.Mp4TtmlParser.prototype.parseMedia","sawMDAT","VttTextParser","shaka.text.VttTextParser","shaka.text.VttTextParser.prototype.parseInit","shaka.text.VttTextParser.prototype.parseMedia","INVALID_TEXT_HEADER","cueTimeMatch","mpegTimeMatch","cueTime","mpegTime","MPEG_TIMESCALE_","parseRegion_","shaka.text.VttTextParser.parseRegion_","parseRegionSetting_","shaka.text.VttTextParser.parseCue_","timeOffset","expect","parseCueSetting","shaka.text.VttTextParser.parseCueSetting","setTextAlign_","setVerticalWritingDirection_","setPositionAlign_","getRegionById_","parsedLineValueAndInterpretation_","shaka.text.VttTextParser.getRegionById_","shaka.text.VttTextParser.parseRegionSetting_","UP","shaka.text.VttTextParser.setTextAlign_","shaka.text.VttTextParser.setPositionAlign_","shaka.text.VttTextParser.setVerticalWritingDirection_","shaka.text.VttTextParser.parsedLineValueAndInterpretation_","shaka.text.VttTextParser.parseTime_","miliseconds","Mp4VttParser","shaka.text.Mp4VttParser","timescale_","shaka.text.Mp4VttParser.prototype.parseInit","sawWVTT","INVALID_MP4_VTT","shaka.text.Mp4VttParser.prototype.parseMedia","presentations","rawPayload","sawTFDT","sawTRUN","defaultDuration","parseTFHD_","parseTRUN_","presentation","totalSize","payloadType","payloadName","parseVTTC_","sampleSize","shaka.text.Mp4VttParser.parseTFHD_","shaka.text.Mp4VttParser.parseTRUN_","sampleCount","samples","sampleIndex","shaka.text.Mp4VttParser.parseVTTC_","settings","assembleCue_","shaka.text.Mp4VttParser.assembleCue_","limitCallN","limitCallCount","unsafe","VstubParser","lin.VstubParser","playlist_","vstubUrl_","DEFAULT_SUGGESTED_PRESENTATION_DELAY_","lin.VstubParser.prototype.configure","lin.VstubParser.prototype.start","requestVstubManifest_","assetUrls","warmUpUrls","lin.VstubParser.prototype.stop","lin.VstubParser.prototype.update","lin.VstubParser.prototype.onExpirationUpdated","lin.VstubParser.prototype.requestVstubManifest_","PVSTUB","parsePlaylist_","getPssh_","lin.VstubParser.prototype.getPssh_","defSystemName","defaultSystemId","defBoundaries","originalPssh","psshData","lin.VstubParser.prototype.parsePlaylist_","VstubSchema","lookup","DASHPlayerMsg","dashPlaylist","DASHABRVstubMsg","abrPeriods","avPeriods","av","abrPeriodStub","parseVstubPeriods_","lin.VstubParser.prototype.parseVstubPeriods_","abrPeriod","parseVstubAbrPeriod_","retValue","containsInband","getCombinedDrmInfos","lin.VstubParser.prototype.getCombinedDrmInfos","vdStubs","audStubs","parsedPssh","lin.VstubParser.prototype.parseVstubAbrPeriod_","repr","assetInfo","streamStub","encryptionKeyId","containsEmsgBoxes","stub","auStub","vdStub","parseVstubPeriod_","lin.VstubParser.prototype.parseVstubPeriod_","prdVstub","lin.VstubParser.prototype.onUpdate_","lin.VstubParser.prototype.setUpdateTimer_","interval","lin.VstubParser.prototype.requestInitSegment_","lin.VstubParser.prototype.warmUpUrls","firstUrls","otherUrls","warmupPromises","urlPromise","warmUpUrl","first","link","lin.VstubParser.prototype.warmUpUrl","retryWarmup","donecallback","onreadystatechange","xhr.onreadystatechange"]
}
